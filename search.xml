<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Fish 命令行工具</title>
    <url>/044ea9df5bcf1e3efabeff79dd0bc4f3fc7ca80a/</url>
    <content><![CDATA[<p>deepin 的终端命令行没有智能提示，感觉不好用，推荐安装
fish，命令行辅助工具。</p>
<h3 id="安装">安装</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">sudo apt install fish</span><br></pre></td></tr></table></figure></div>
<h3 id="启用">启用</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure></div>
<h3 id="关闭欢迎词">关闭欢迎词</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -U fish_greeting</span><br></pre></td></tr></table></figure></div>
<h3 id="设置">设置</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure></div>
<p>推荐的颜色主题：Tomorrow Night，选中点右上角的“Set
Theme”按钮(灰底浅灰色字，请仔细找)。 推荐的提示符：Informative
Vcs，选中以后点右上角的“Set Prompt”按钮(灰底浅灰色字，请仔细找)。</p>
<h3 id="使用方法">使用方法</h3>
<p>使用方法等可以参考我以前的博客“<a
href="../295d228c58beb58d3e477c857137241300856830">Fish
入门指南</a>”。</p>
<h3 id="安装-fisher-插件">安装 Fisher 插件</h3>
<p>参考:<a href="https://github.com/jorgebucaran/fisher">GitHub -
jorgebucaran/fisher: A plugin manager for Fish.</a> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">curl -sL https://raw.githubusercontent.com/jorgebucaran/fisher/main/functions/fisher.fish | <span class="built_in">source</span> &amp;&amp; fisher install jorgebucaran/fisher</span><br></pre></td></tr></table></figure></div></p>
<h3 id="注意事项">注意事项</h3>
<p>在极少数情况下，fish 环境执行脚本会报错，这时可以临时切换到 bash
执行那个脚本(.sh
文件)。通常不会遇到，万一遇到了临时切换一下就可以了。</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../295d228c58beb58d3e477c857137241300856830">Fish
入门指南</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>AutoGen +Ollama  构建多智能体应用</title>
    <url>/121594f964295a7c04649f13b92a3efbb095d8cd/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://zhuanlan.zhihu.com/p/700107605">zhuanlan.zhihu.com</a></p>
</blockquote>
<h2 id="autogen-介绍">AutoGen 介绍</h2>
<p>随着大语言模型（LLM）的发展，如何利用这些强大的语言处理能力构建智能体系统，以解决复杂任务，成为了一个值得探索的问题。微软研究团队研发了名叫
AutoGen
的多智能体对话框架，该框架通过设计可定制的智能体和对话编程范式，实现了利用
LLM 构建多样应用的目标。</p>
<p>GitHub：<a
href="https://github.com/microsoft/autogen">https://github.com/microsoft/autogen</a></p>
<p><img
src="https://pic3.zhimg.com/v2-295eac6d916cca1a8e3b21903da15b26_r.jpg" /></p>
<p>论文：<a
href="https://openreview.net/pdf?id=uAjxFFing2">https://openreview.net/pdf?id=uAjxFFing2</a></p>
<p><img
src="https://pic4.zhimg.com/v2-0ad37b8485cc1fbb2b6b16f1afea86db_r.jpg" /></p>
<h3 id="简介">简介</h3>
<p>AutoGen
是一个开源框架，旨在通过将任务分解为多个智能体，让它们通过对话来协作完成，从而简化复杂的大语言模型应用的开发。该框架支持灵活的智能体设计、多智能体对话以及对话编程。AutoGen
框架已在多个领域取得成功应用，包括数学问题求解、检索增强问答、供应链优化、在线决策、娱乐等。</p>
<p><img
src="https://pic1.zhimg.com/v2-7c27581095d9b6a589e40678f70f4660_r.jpg" /></p>
<h3 id="架构">架构</h3>
<p>AutoGen 框架包含两个核心概念：可定制的智能体和对话编程。</p>
<p><img
src="https://pic4.zhimg.com/v2-4716f7dce68d09e1008adbd2857643c7_r.jpg" /></p>
<p>可定制的智能体：AutoGen 支持设计多种类型的智能体，包括基于 LLM
的智能体、人类支持的智能体以及工具支持的智能体。每种智能体都具有特定的角色，可以进行多轮对话。AutoGen
还提供了多智能体组合的能力，可以实现更复杂的对话模式。</p>
<p>对话编程：AutoGen
采用对话编程范式，通过定义智能体的能力和角色，并编程它们之间的对话，实现了对复杂任务的分解和整合。AutoGen
提供了统一的对话接口，并支持自然语言和编程语言的混合控制，以实现灵活的对话流程。</p>
<h3 id="应用">应用</h3>
<p>AutoGen
在多个领域实现了多智能体应用，包括数学问题求解、检索增强问答、供应链优化、在线决策、娱乐等。这些应用展示了
AutoGen
框架的灵活性和创新潜力，为智能体系统的开发提供了强有力的支持。</p>
<p><img
src="https://pic3.zhimg.com/v2-eef4c3f248cc4338e5b9006a1762e52a_r.jpg" /></p>
<p>AutoGen 框架提供了一种简单、通用的多智能体对话方式，为利用 LLM
构建智能体系统提供了有力支持。AutoGen
框架在多个领域取得了成功应用，展现了其在构建智能体系统方面的巨大潜力。不过
AutoGen 在构建智能体应用尤其是多智能体应用的时候需要耗费大量的
token，这样本地大模型加速 / 服务平台 ollama 就成为了我这样穷人使用
Autogen 的好搭档。</p>
<h2 id="ollama">Ollama</h2>
<p>ollama 是一个非常方便的 LLM 加速 /
服务化应用，我现在构建大模型应用，模型服务部分几乎用的都是它。ollama
的介绍及部署过程请参考：</p>
<p><a href="https://zhuanlan.zhihu.com/p/688811216">北方的郎：Linux
上部署 Ollama，启动 Mistral-7B 及 Gemma-7B 服务，测试效果</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/692360483">北方的郎：Ollama 下
LLM 的调用方式：post、langchain、lamaindex, 支持 openai api 方式</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/692106504">北方的郎：折腾
Ollama + CodeGPT 在 VSCode 中构建自己的本机智能开发助手</a></p>
<h2 id="autogen-ollama">AutoGen + ollama</h2>
<p>新版的 ollama 已经支持 OpenAI 的 API 格式，参考：<a
href="https://ollama.com/blog/openai-compatibility">https://ollama.com/blog/openai-compatibility</a></p>
<p>所以不需要通过 litellm 传一下了。</p>
<p>Install Autogen:<a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a> <a href="#fn2" class="footnote-ref"
id="fnref2" role="doc-noteref"><sup>2</sup></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">pip install pyautogen</span><br></pre></td></tr></table></figure></div>
<p>然后执行代码即可。</p>
<h3 id="单智能体">3.1 单智能体</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> autogen <span class="keyword">import</span> AssistantAgent, UserProxyAgent</span><br><span class="line"></span><br><span class="line">config_list = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;qwen2:7b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;base_url&quot;</span>: <span class="string">&quot;http://localhost:11434/v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;ollama&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">assistant = AssistantAgent(<span class="string">&quot;assistant&quot;</span>, llm_config=&#123;<span class="string">&quot;config_list&quot;</span>: config_list&#125;)</span><br><span class="line"></span><br><span class="line">user_proxy = UserProxyAgent(<span class="string">&quot;user_proxy&quot;</span>, code_execution_config=&#123;<span class="string">&quot;work_dir&quot;</span>: <span class="string">&quot;coding&quot;</span>, <span class="string">&quot;use_docker&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">user_proxy.initiate_chat(assistant, message=<span class="string">&quot;做一个从哈尔滨去北京旅游5天的计划&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<h3 id="多智能体应用">3.2 多智能体应用</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">### Code used:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> autogen</span><br><span class="line"></span><br><span class="line">config_list_qwen = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;qwen2:7b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;base_url&quot;</span>: <span class="string">&quot;http://localhost:11434/v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;ollama&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">config_list_codeqwen = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;deepseek-coder-v2:16b&quot;</span>,</span><br><span class="line">    <span class="string">&quot;base_url&quot;</span>: <span class="string">&quot;http://localhost:11434/v1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;api_key&quot;</span>: <span class="string">&quot;ollama&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">llm_config_qwen=&#123;</span><br><span class="line">    <span class="string">&quot;config_list&quot;</span>: config_list_qwen,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">llm_config_codeqwen=&#123;</span><br><span class="line">    <span class="string">&quot;config_list&quot;</span>: config_list_codeqwen,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">coder = autogen.AssistantAgent(    </span><br><span class="line">    <span class="string">&quot;coder&quot;</span>,</span><br><span class="line">    llm_config=llm_config_codeqwen</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">user_proxy = autogen.UserProxyAgent(    </span><br><span class="line">    <span class="string">&quot;user&quot;</span>,</span><br><span class="line">    human_input_mode=<span class="string">&quot;NEVER&quot;</span>,</span><br><span class="line">    max_consecutive_auto_reply=<span class="number">10</span>,</span><br><span class="line">    is_termination_msg=<span class="keyword">lambda</span> x: x.get(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;&quot;</span>).rstrip().endswith(<span class="string">&quot;TERMINATE&quot;</span>),</span><br><span class="line">    code_execution_config=&#123;<span class="string">&quot;work_dir&quot;</span>: <span class="string">&quot;web&quot;</span>, <span class="string">&quot;use_docker&quot;</span>: <span class="literal">False</span>&#125;,</span><br><span class="line">    llm_config=llm_config_qwen,</span><br><span class="line">    system_message=<span class="string">&quot;&quot;&quot;Reply TERMINATE if the task has been solved at full satisfaction.</span></span><br><span class="line"><span class="string">Otherwise, reply CONTINUE, or the reason why the task is not solved yet.&quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">task=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">开发一个python程序计算30以内的质数，然后 user_proxy agent 执行这个程序</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">user_proxy.initiate_chat(coder, message=task)</span><br></pre></td></tr></table></figure></div>
<p>然后看执行的效果，因为用的模型比较小，所以代码开发的有点问题，反复试了好几次：</p>
<h2 id="参考">参考</h2>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://github.com/microsoft/autogen">GitHub - microsoft/autogen:
A programming framework for agentic AI. Discord:
https://aka.ms/autogen-dc. Roadmap: https://aka.ms/autogen-roadmap</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a
href="https://www.reddit.com/r/AutoGenAI/comments/1b4tw1s/pyautogen_vs_autogen/">reddit.com/r/AutoGenAI/comments/1b4tw1s/pyautogen_vs_autogen/</a><a
href="#fnref2" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>AI</category>
        <category>Agent</category>
      </categories>
  </entry>
  <entry>
    <title>JS == 和 === 的区别</title>
    <url>/17e01c6934b2ef66d2dbaeb39e3e651fedf22e34/</url>
    <content><![CDATA[<h2 id="区别">区别</h2>
<p>在 JS 项目里，除了能看到 ==
操作符来判断两个变量是否相等外，我们还会看到 ===
操作符，这两者有什么区别？</p>
<ul>
<li>对于 String, number 这些<strong>值类型</strong>，<code>==</code>
操作符会先把两边的变量<mark style="background: #fefe00A6;">进行类型强制转换成相同的类型再比较是否相等</mark>
；<code>===</code> 操作符则不会进行类型转换，而是直接进行比较。</li>
<li>对于 array, object 这些<strong>引用类型</strong>，<code>==</code> 和
<code>===</code>
是没有区别的，因为它们<mark style="background: #fefe00A6;">比较的是
“指针地址</mark> ” 。</li>
<li><strong>值类型和引用类型之间</strong>比较，<code>==</code> 和
<code>===</code>
是有区别的；<code>==</code>操作符会<mark style="background: #fefe00A6;">先把高级类型转换为基础类型</mark>
之后，进行值的比较；<code>===</code>
操作符则不会进行转换，类型不同，直接返回 false</li>
</ul>
<p>也就是说，<code>==</code>
操作符只要求比较<mark style="background: #83d98fA6;">两个变量的值是否相等</mark>
，<code>===</code>
操作符则是要求<mark style="background: #83d98fA6;">两个变量的值和类型都要相同</mark>
；类似地，<code>!=</code> 操作符会去做类型强制转换，<code>!==</code>
操作符则不会转换类型。</p>
<p><strong>值类型</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p><strong>引用类型</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line">c = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===c);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-10-27,899,250--></p>
<h2 id="注意事项">注意事项</h2>
<p><mark style="background: #fa518dA6;">JS == / ===注意事项: </mark></p>
<ul>
<li>对于特殊值 NaN（Not a Number）表示非数字，NaN
和任何数（包括它自己）做相等比较，都会返回
false，所以<mark style="background: #83d98fA6;">判断 NaN 最好用 isNaN()
函数</mark></li>
<li>undefined 和 null，两者的值相比较，会返回 true。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>==<span class="literal">null</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>===<span class="literal">null</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li>由于 == 和!=
操作符带来的类型隐式转换规则非常繁琐，还有为了避免数据类型混淆导致出现
bug，还是推荐使用 <code>===</code> 操作符和<code>!==</code> 操作符。
<!--SR:!2024-10-24,463,250--></li>
</ul>
<h2 id="stack-overflow-相关">Stack Overflow 相关</h2>
<p>So there you have the two common sources of errors in Javascript
comparisons: 1. comparing different types with == can lead to
==unexpected type conversions.== 2. comparing objects and arrays is
based on ==references not values stored inside==.</p>
<p>As the existing answer already says, Typescript is designed as a
superset of Javascript. So it doesn't change the behaviour of these
comparison operators. If you write <code>==</code> in Typescript, you
get type conversions.</p>
<p>So how is this fixed? ==With the compiler. ==If you actually do write
code that compares incompatible types with <code>==</code> it's a
compiler error. Try compiling the following sample:<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str==num);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-04-26,1008,250!2025-07-19,656,270!2024-10-25,463,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://nowjava.com/article/44330">nowjava.com</a></p>
<p><a
href="https://stackoverflow.com/questions/57125700/why-use-triple-equal-in-typescript">javascript
- Why use triple-equal (<code>===</code>) in TypeScript? - Stack
Overflow</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 常用命令</title>
    <url>/0bcf152ba2a980ab758748d8b52dfbb723686838/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p><strong>怎么查看 vim 的 clipboard 功能是否开启</strong></p>
<p>以下命令用来检查vim剪贴板的支持情况 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure></div>
如果结果中有这个<img
src="/images/Pasted%20image%2020220819181213.png" />,
前面是+号代表支持剪贴板操作, -号代表不支持。
<!--SR:!2025-10-22,700,251--></p>
<p>如果系统自带vim不支持剪贴板的话, 需要重新安装: 参考:[[Vim
使用全局剪贴板]]</p>
<h2 id="移动光标">移动光标</h2>
<p><strong>Vim 上下左右移动光标</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">　　K</span><br><span class="line">H　　　　I</span><br><span class="line">　　J</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-12-28,741,251-->
<h2 id="模式切换">模式切换</h2>
<ul>
<li><p>进入默认是普通模式</p></li>
<li><p><strong>Vim 切换到插入模式</strong></p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>i</td>
<td>在光标的前边进入插入模式</td>
</tr>
<tr class="even">
<td>I</td>
<td>在光标所在行的行首进入插入模式</td>
</tr>
<tr class="odd">
<td>a</td>
<td>在光标的后面进入插入模式</td>
</tr>
<tr class="even">
<td>A</td>
<td>在光标所在行的行尾进入插入模式</td>
</tr>
<tr class="odd">
<td>o</td>
<td>在光标所在行的下方插入空行进入插入模式</td>
</tr>
<tr class="even">
<td>O</td>
<td>在光标所在行的上方插入空行进入插入模式</td>
</tr>
<tr class="odd">
<td>s</td>
<td>删除光标指定的字符并进入插入模式</td>
</tr>
<tr class="even">
<td>S</td>
<td>将光标所在行清除并进入插入模式</td>
</tr>
</tbody>
</table>
<!--SR:!2024-08-12,256,231-->
<ul>
<li><strong>Vim 切换到选中模式</strong></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>v</td>
<td>普通选中</td>
</tr>
<tr class="even">
<td>V</td>
<td>行选中</td>
</tr>
<tr class="odd">
<td>ctrl+v</td>
<td>列选中</td>
</tr>
</tbody>
</table>
<!--SR:!2027-05-25,1047,251-->
<ul>
<li><strong>Vim退出</strong></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>:q</td>
<td>未改动退出</td>
</tr>
<tr class="even">
<td>:q!</td>
<td>改动后不保存强制退出</td>
</tr>
<tr class="odd">
<td>:wq</td>
<td>:w表示保存,:q表示退出</td>
</tr>
<tr class="even">
<td>shift+z+z</td>
<td>保存修改并退出</td>
</tr>
</tbody>
</table>
<!--SR:!2026-08-30,886,251-->
<h2 id="编辑">编辑</h2>
<p><strong>Vim编辑常用命令</strong></p>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>y</td>
<td>复制</td>
</tr>
<tr class="even">
<td>p</td>
<td>粘贴</td>
</tr>
<tr class="odd">
<td>d</td>
<td>剪切</td>
</tr>
<tr class="even">
<td>u</td>
<td>撤销</td>
</tr>
<tr class="odd">
<td>ctrl+r</td>
<td>重做</td>
</tr>
<tr class="even">
<td>r</td>
<td>替换单个</td>
</tr>
<tr class="odd">
<td>shift+r</td>
<td>替换多个</td>
</tr>
</tbody>
</table>
<!--SR:!2026-07-29,866,251-->
<p><strong>Vim 中有多少个剪贴板?</strong></p>
<p>Vim 有12个粘贴板依次编号为：0、1、2、...、9、a、"、+，其中 +
号为系统粘贴板，”
为临时粘贴板。系统剪切板中的内容可在其他程序中使用。上面的复制指令都可以配合剪切板进行操作。
-
用<code>"+y</code> 代替<code>y</code>将选中的内容复制到系统剪贴板，效果和<code>ctrl-c</code>一致。
-
用<code>"+p</code>代替<code>p</code>将剪贴板内容复制到指定位置，也可以用<code>ctrl-v</code>。
<code>d</code>，<code>x</code>，<code>c</code>，<code>s</code>也一样，用之前前面加<code>"+</code>。
[[Vim 使用全局剪贴板]] <!--SR:!2025-03-19,480,252--></p>
<h3 id="vim-复制">vim 复制</h3>
<ul>
<li><strong>单行复制</strong>：按esc键后, 然后<code>yy</code></li>
<li><strong>全部复制</strong>：按esc键后，然后<code>ggyG</code></li>
<li>用<code>"+y</code> 代替<code>y</code>将选中的内容复制到系统剪贴板，效果和<code>ctrl-c</code>一致。
<!--SR:!2025-05-03,434,252--></li>
</ul>
<h3 id="vim-粘贴">vim 粘贴</h3>
<ul>
<li><strong>粘贴</strong>：按esc键后, 然后<code>p</code></li>
<li>用<code>"+p</code>代替<code>p</code>将剪贴板内容复制到指定位置，效果和<code>ctrl-v</code>一致。
<!--SR:!2025-03-03,466,252--></li>
</ul>
<h3 id="vim-剪切">vim 剪切</h3>
<ul>
<li><strong>单行删除</strong>：按esc键后, 然后dd</li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code><br />
<!--SR:!2025-03-05,465,252--></li>
</ul>
<h3 id="撤销与恢复">撤销与恢复</h3>
<p><strong>vim 撤销和恢复快捷键?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">u         <span class="comment"># 撤销操作  </span></span><br><span class="line">Ctrl + r  <span class="comment"># 恢复撤销的操作</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-04,293,250-->
<h3 id="改写">改写</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">c^                  <span class="comment"># 改写到行首非空字符</span></span><br><span class="line">c$                  <span class="comment"># 改写到行末</span></span><br><span class="line">cc                  <span class="comment"># 改写当前行，即删除当前行并进入插入模式，等价于 S</span></span><br><span class="line">cw                  <span class="comment"># 改写光标开始处的当前单词</span></span><br><span class="line">ci<span class="string">&#x27;                 # 改写单引号中的内容</span></span><br><span class="line"><span class="string">ci&quot;                 # 改写双引号中的内容，i 的含义下同（i: inner）</span></span><br><span class="line"><span class="string">ci)                 # 改写小括号中的内容</span></span><br><span class="line"><span class="string">ci]                 # 改写中括号中内容</span></span><br><span class="line"><span class="string">ci&#125;                 # 改写大括号中内容</span></span><br><span class="line"><span class="string">ciw                 # 改写光标所处的单词</span></span><br><span class="line"><span class="string">caw                 # 改写光标所处的单词，并且包括前后空格</span></span><br><span class="line"><span class="string">cit                 # 改写 XML 中 tag 的内容</span></span><br><span class="line"><span class="string">c0                  # 改写到行首</span></span><br><span class="line"><span class="string">C                   # 改写到行尾，等价于 c$</span></span><br><span class="line"><span class="string">cib                 # 改写小括号中的内容</span></span><br><span class="line"><span class="string">cab                 # 改写小括号中的内容，包含小括号本身</span></span><br><span class="line"><span class="string">ciB                 # 改写大括号中内容</span></span><br><span class="line"><span class="string">caB                 # 改写大括号中的内容，包含大括号本身</span></span><br><span class="line"><span class="string">cis                 # 改写当前句子</span></span><br><span class="line"><span class="string">c[N]w               # 改写光标后 N 个单词</span></span><br><span class="line"><span class="string">c[N]l               # 改写光标后 N 个字母</span></span><br><span class="line"><span class="string">c[N]h               # 改写光标前 N 个字母</span></span><br><span class="line"><span class="string">[N]cc               # 修改当前 N 行</span></span><br><span class="line"><span class="string">ct(                 # 改写到小括号前</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-07-20,378,242-->
<h3 id="替换">替换</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">r                   <span class="comment"># 替换当前字符（r: replace）</span></span><br><span class="line">[N]x                <span class="comment"># 剪切、删除光标右边 N 个字符，相当于d[N]l</span></span><br><span class="line">[N]s                <span class="comment"># 替换 N 个字符，即删除光标后 N 个字符并进入插入模式</span></span><br><span class="line">[N]S                <span class="comment"># 替换 N 行，即删除 N 行并进入插入模式</span></span><br><span class="line">[n]X                <span class="comment"># 剪切、删除光标左边 N 个字符，相当于d[n]h</span></span><br><span class="line">R                   <span class="comment"># 进入替换模式，直至按 &lt;Esc&gt; 退出键离开</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-18,198,242-->
<p><strong>Vim 替换命令?</strong></p>
<p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">:%s/foo/bar/g</span><br><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2024-08-09,172,247--></p>
<p>例如 <code>:%s/foo/bar/g</code> 会在全局范围(<code>%</code>)查找 <code>foo</code> 并替换为 <code>bar</code>，所有出现都会被替换（<code>g</code>）。
在 Vim
编辑器中，替换操作可以应用于不同的范围，而不仅仅是整个文件。以下是一些常用的替换范围：</p>
<ol type="1">
<li><strong>当前行</strong>：使用 <code>:s</code> 命令，不指定范围，将只替换当前行中的匹配项。<br />
</li>
<li><strong>指定行范围</strong>：可以在 <code>:s</code> 命令中指定要替换的行范围。例如，<code>:10,20s/pattern/replacement/g</code> 表示在第
10 行到第 20 行之间进行替换。<br />
</li>
<li><strong>光标所在行到文件末尾</strong>：可以使用 <code>:.,$s/pattern/replacement/g</code> 命令，表示从当前行（<code>.</code>）到文件末尾（<code>$</code>）之间进行替换。<br />
</li>
<li><strong>全局范围</strong>：使用 <code>:%s/pattern/replacement/g</code> 命令，表示在整个文件中进行替换。<br />
</li>
<li><strong>可视选择范围</strong>：在可视模式下选择一块文本，然后使用 <code>:</code> 进入命令行模式，再输入 <code>s/pattern/replacement/g</code> 命令，表示只在所选范围内进行替换。</li>
</ol>
<h3 id="删除">删除</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span>                  <span class="comment"># 删除（剪切）当前行，当前行会存到寄存器里（d: delete = cut）</span></span><br><span class="line"><span class="built_in">dd</span>[N]p              <span class="comment"># 删除（剪切）当前行并加入 N-1 个当前行，复制空行时很有用</span></span><br><span class="line">d0                  <span class="comment"># 删除（剪切）到行首</span></span><br><span class="line">d^                  <span class="comment"># 删除（剪切）到行首非零字符</span></span><br><span class="line">d$                  <span class="comment"># 删除（剪切）到行末</span></span><br><span class="line">D                   <span class="comment"># 删除（剪切）到行末，等价于 d$</span></span><br><span class="line">dw                  <span class="comment"># 删除（剪切）当前单词</span></span><br><span class="line">diw                 <span class="comment"># 删除（剪切）光标所处的单词（iw: inner word）</span></span><br><span class="line">daw                 <span class="comment"># 删除（剪切）光标所处的单词，并包含前后空格</span></span><br><span class="line">d2w                 <span class="comment"># 删除（剪切）下 2 个单词</span></span><br><span class="line">d[N]w               <span class="comment"># 删除（剪切）N 个单词，并包含前后空格</span></span><br><span class="line">d[N]l               <span class="comment"># 删除（剪切）光标右边 N 个字符</span></span><br><span class="line">d[N]h               <span class="comment"># 删除（剪切）光标左边 N 个字符</span></span><br><span class="line">[N]<span class="built_in">dd</span>               <span class="comment"># 删除（剪切）从当前行开始的 N 行</span></span><br><span class="line">:Nd                 <span class="comment"># 删除（剪切）第 N 行</span></span><br><span class="line">:N,Md&lt;CR&gt;           <span class="comment"># 删除（剪切） N ~ M 行，其中 &lt;CR&gt; 为 &lt;Enter&gt; 回车键</span></span><br><span class="line">di<span class="string">&quot;                 # 删除（剪切）双引号中的内容</span></span><br><span class="line"><span class="string">di&#x27;                 # 删除（剪切）单引号中的内容</span></span><br><span class="line"><span class="string">dib                 # 删除（剪切）小括号中的内容</span></span><br><span class="line"><span class="string">di)                 # 删除（剪切）小括号中的内容</span></span><br><span class="line"><span class="string">dab                 # 删除（剪切）小括号内的内容，包含小括号本身</span></span><br><span class="line"><span class="string">di]                 # 删除（剪切）中括号中内容</span></span><br><span class="line"><span class="string">diB                 # 删除（剪切）大括号中内容</span></span><br><span class="line"><span class="string">di&#125;                 # 删除（剪切）大括号中内容</span></span><br><span class="line"><span class="string">daB                 # 删除（剪切）大括号内的内容，包含大括号本身</span></span><br><span class="line"><span class="string">dit                 # 删除（剪切） XML 中 tag 的内容</span></span><br><span class="line"><span class="string">dis                 # 删除（剪切）当前句子</span></span><br><span class="line"><span class="string">dt(                 # 删除（剪切）到小括号前</span></span><br><span class="line"><span class="string">dgg                 # 删除（剪切）到文件头部</span></span><br><span class="line"><span class="string">d1G                 # 删除（剪切）到文件头部，同上</span></span><br><span class="line"><span class="string">dG                  # 删除（剪切）到文件尾部</span></span><br><span class="line"><span class="string">d&#125;                  # 删除（剪切）下一个段落</span></span><br><span class="line"><span class="string">d&#123;                  # 删除（剪切）上一个段落</span></span><br><span class="line"><span class="string">d/f&lt;CR&gt;             # 比较高级的组合命令，它将删除 当前位置 到下一个字母 f 之间的内容，其中 &lt;CR&gt; 为 &lt;Enter&gt; 回车键</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-06-11,352,242-->
<h3 id="大小写">大小写</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">~                   <span class="comment"># 转换大小写</span></span><br><span class="line">g~iw                <span class="comment"># 替换当前单词的大小写</span></span><br><span class="line">gUiw                <span class="comment"># 将单词转成大写</span></span><br><span class="line">guiw                <span class="comment"># 将当前单词转成小写</span></span><br><span class="line">guu                 <span class="comment"># 全行转为小写</span></span><br><span class="line">gUU                 <span class="comment"># 全行转为大写</span></span><br><span class="line">Ctrl+A              <span class="comment"># 增加数字</span></span><br><span class="line">Ctrl+X              <span class="comment"># 减少数字</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-08-24,67,202-->
<h2 id="选择">选择</h2>
<ul>
<li><strong>全选选择：</strong> 按esc后，然后<code>ggvG</code></li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code><br />
</li>
<li><strong>全部复制：</strong> 按esc后，然后<code>ggyG</code></li>
</ul>
<p>解析： <strong>gg：</strong>
是让光标移到首行，在<strong>vim</strong>才有效，vi中无效  <strong>G
：</strong> 光标移到最后一行  <strong>v
：</strong> 是进入Visual(可视）模式  <strong>d
：</strong>  删除选中内容 <br />
<strong>y ：</strong>  复制选中内容到0号寄存器 </p>
<h3 id="文本对象操作">文本对象操作</h3>
<p><strong>注意</strong>：只适用于可视模式或在操作符后，例如：操作包括 <strong>选择
v、删除 d、复制 y、修改 c</strong> 等。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">aw                  <span class="comment"># 操作整个单词，不包括分隔符（aw: a word）</span></span><br><span class="line">aW                  <span class="comment"># 操作整个单词，包括分隔符（aW: a Word）</span></span><br><span class="line">iw                  <span class="comment"># 操作整个单词，不包括分隔符（iw: inner word）</span></span><br><span class="line">iW                  <span class="comment"># 操作整个单词，包括分隔符（iW: inner Word）</span></span><br><span class="line">is                  <span class="comment"># 操作整个句子，不包括分隔符 (s: sentence）</span></span><br><span class="line">ib                  <span class="comment"># 操作内含块，从 [( 到 ])（b: block）</span></span><br><span class="line">iB                  <span class="comment"># 操作内含大块，从 [&#123; 到 ]&#125; （B: Block）</span></span><br><span class="line">ab                  <span class="comment"># 操作一个块，从 [( 至 ])（b: block）</span></span><br><span class="line">aB                  <span class="comment"># 操作一个大块，从 [&#123; 到 ]&#125;（B: Block）</span></span><br><span class="line">ap                  <span class="comment"># 操作一个段落（p: paragraph）</span></span><br><span class="line">ip                  <span class="comment"># 操作内含段落</span></span><br><span class="line">i)                  <span class="comment"># 操作小括号字符串</span></span><br><span class="line">a)                  <span class="comment"># 操作小括号字符串，包含小括号本身</span></span><br><span class="line">i]                  <span class="comment"># 操作中括号字符串</span></span><br><span class="line">a]                  <span class="comment"># 操作中括号字符串，包含中括号本身</span></span><br><span class="line">i&#125;                  <span class="comment"># 操作大括号字符串</span></span><br><span class="line">a&#125;                  <span class="comment"># 操作大括号字符串，包含大括号本身</span></span><br><span class="line">i<span class="string">&#x27;                  # 操作单引号字符串</span></span><br><span class="line"><span class="string">a&#x27;</span>                  <span class="comment"># 操作单引号字符串，包含单引号本身</span></span><br><span class="line">i<span class="string">&quot;                  # 操作双引号字符串</span></span><br><span class="line"><span class="string">a&quot;</span>                  <span class="comment"># 操作双引号字符串，包含双引号本身</span></span><br><span class="line">a`                  <span class="comment"># 操作一个反引号字符串</span></span><br><span class="line">i`                  <span class="comment"># 操作内含反引号字符串</span></span><br><span class="line">a&gt;                  <span class="comment"># 操作一个 &lt;&gt; 块</span></span><br><span class="line">i&gt;                  <span class="comment"># 操作内含 &lt;&gt; 块</span></span><br><span class="line">at                  <span class="comment"># 操作一个标签块，例如 从 &lt;aaa&gt; 到 &lt;/aaa&gt;（t: tag）</span></span><br><span class="line">it                  <span class="comment"># 操作内含标签块，例如 从 &lt;aaa&gt; 到 &lt;/aaa&gt;</span></span><br><span class="line">2i)                 <span class="comment"># 操作往外两层小括号内</span></span><br><span class="line">2a)                 <span class="comment"># 操作往外两层小括号内，包含小括号本身</span></span><br><span class="line">[N]f)               <span class="comment"># 移动到第 N 个小括号处</span></span><br><span class="line">[N]t)               <span class="comment"># 移动到第 N 个小括号前</span></span><br></pre></td></tr></table></figure></div>
<mark style="background: #83d98fA6;">文本对象的配对括号、标点及配对标点内的内容的编辑修改对编程非常实用，可以简单总结为。</mark>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">ci<span class="string">&#x27;、ci&quot;、ci(、ci[、ci&#123;、ci&lt;                # 分别修改这些配对标点符号中的文本内容</span></span><br><span class="line"><span class="string">ca&#x27;</span>、ca<span class="string">&quot;、ca(、ca[、ca&#123;、ca&lt;                # 分别修改这些配对标点符号中的文本内容，包括 标点符号 本身</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">di&#x27;、di&quot;</span>、di(、dib、di[、di&#123;、diB、di&lt;       <span class="comment"># 分别删除这些配对标点符号中的文本内容</span></span><br><span class="line">da<span class="string">&#x27;、da&quot;、da(、dab、da[、da&#123;、daB、da&lt;       # 分别删除这些配对标点符号中的文本内容，包括 标点符号 本身</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">yi&#x27;</span>、yi<span class="string">&quot;、yi(、yi[、yi&#123;、yi&lt;                # 分别复制这些配对标点符号中的文本内容</span></span><br><span class="line"><span class="string">ya&#x27;、ya&quot;</span>、ya(、ya[、ya&#123;、ya&lt;                <span class="comment"># 分别复制这些配对标点符号中的文本内容，包括 标点符号 本身</span></span><br><span class="line"></span><br><span class="line">vi<span class="string">&#x27;、vi&quot;、vi(、vi[、vi&#123;、vi&lt;                # 分别选中这些配对标点符号中的文本内容</span></span><br><span class="line"><span class="string">va&#x27;</span>、va<span class="string">&quot;、va(、va[、va&#123;、va&lt;                # 分别选中这些配对标点符号中的文本内容，包括 标点符号 本身</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2024-11-13,230,242--></p>
<h2 id="跳转">跳转</h2>
<p><strong>Vim 跳转常用命令</strong></p>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>^</td>
<td>光标到行首</td>
</tr>
<tr class="even">
<td>$</td>
<td>光标到行尾</td>
</tr>
<tr class="odd">
<td>w</td>
<td>光标到下个单词开头</td>
</tr>
<tr class="even">
<td>b</td>
<td>光标到所在单词开头</td>
</tr>
<tr class="odd">
<td>e</td>
<td>光标到所在单词结尾</td>
</tr>
<tr class="even">
<td>gg</td>
<td>光标到文件的开头</td>
</tr>
<tr class="odd">
<td>G</td>
<td>光标到文件的结尾</td>
</tr>
</tbody>
</table>
<!--SR:!2024-09-03,408,252-->
<ol type="1">
<li><strong>跳到第一行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-04-04,1020,250-->
<ol start="2" type="1">
<li><strong>跳到第10行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">10gg</span><br><span class="line">或10G</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-07,462,250-->
<ol start="3" type="1">
<li><strong>跳到最后一行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">shift</span>]+g</span><br><span class="line">或G</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-12,502,270-->
<p><strong>设置书签</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">ma  <span class="comment"># (在当前光标记一个书签, 名字为a, 书签名必须为小写字母, 对用户不可见)</span></span><br><span class="line">`a  <span class="comment"># (跳转到书签a处, `不是单引号, 而是按键1左边的那个按键)</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-06,191,242-->
<p><strong>括号</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">%   <span class="comment"># 括号匹配, 包括(,[,&#123;, 需要先将光标移到括号上,然后会跳转到对应的那个括号</span></span><br><span class="line">v%  <span class="comment"># 选中括号内包括括号的内容</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-07,110,222-->
<h2 id="搜索">搜索</h2>
<h3 id="进入搜索模式">1. 进入搜索模式</h3>
<ol type="1">
<li><strong>打开文件后马上搜索</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[/]</span><br></pre></td></tr></table></figure></div></li>
<li>在<strong>编辑模式</strong>切换到搜索 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">先按[Esc]退出编辑，再按[/]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-10-03,693,250--></li>
</ol>
<h3 id="搜索-1">2. 搜索</h3>
<ol type="1">
<li><strong>普通搜索</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">/关键字  </span><br><span class="line"><span class="comment"># 向下找（左斜杠+关键字）</span></span><br><span class="line"></span><br><span class="line">?关键字 </span><br><span class="line"> <span class="comment"># 向上找（逆向搜索）（问号+关键字）</span></span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #fa518dA6;">注意</mark>
：搜索一些特殊的字符，例如：*、[、]、^、%、/、?、~、$ 等,
需要在它们的前面加上转义符号。 <!--SR:!2024-09-12,463,250--></p>
<ol start="2" type="1">
<li><strong>匹配搜索</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配单词开头（右斜杠+小于号）</span></span><br><span class="line">/\&lt;关键字    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行末尾</span></span><br><span class="line">/^关键字   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配单词末尾（右斜杠+大于号）</span></span><br><span class="line">/关键字\&gt;   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行开头</span></span><br><span class="line">/关键字$     </span><br><span class="line"></span><br><span class="line">/\&lt;关键字\&gt; </span><br><span class="line"><span class="comment"># 匹配单词全部（匹配开头和结尾的符号加起来）</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-25,812,250-->
<h3 id="搜索定位">3. 搜索定位</h3>
<p>输入搜索命令后按回车开始定位</p>
<ol type="1">
<li><strong>移动到下一个匹配处</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[n]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-11,800,250-->
<ol start="2" type="1">
<li><strong>移动到上一个匹配处</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[N]或[<span class="built_in">shift</span>]+[n]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-05-01,625,270-->
<ol start="3" type="1">
<li><strong>搜索当前光标所在单词</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">光标移动到关键字任意位置，按[*] 或 [<span class="comment">#] </span></span><br><span class="line"><span class="comment"># 如果当前光标位置单词为the，那么执行命令 * 相当于搜索命令 /the，命令 # 等同于命令 ?the</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-05,798,250-->
<ol start="4" type="1">
<li>Vim 正则表达式搜索重复单词</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">/\(\w\&#123;2,&#125;\)\1</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-08-14,177,242-->
<h2 id="窗口">窗口</h2>
<p><strong>Vim 窗口切换快捷键</strong></p>
<table>
<thead>
<tr class="header">
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>:sp</td>
<td>下方增加窗口</td>
</tr>
<tr class="even">
<td>:vsp</td>
<td>右方增加窗口</td>
</tr>
<tr class="odd">
<td>:ctrl + h</td>
<td>向左移动窗口</td>
</tr>
<tr class="even">
<td>:ctrl + l</td>
<td>向右左移动窗口</td>
</tr>
<tr class="odd">
<td>:ctrl + j</td>
<td>向下移动窗口</td>
</tr>
<tr class="even">
<td>:ctrl + k</td>
<td>向上移动窗口</td>
</tr>
<tr class="odd">
<td>ctrl + w + w</td>
<td>光标自动在左右侧窗口切换</td>
</tr>
</tbody>
</table>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">// 新窗口打开新文件</span><br><span class="line">:vsp filename 或者 </span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-03,463,232-->
<h3 id="改变尺寸">改变尺寸</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">// 先按Ctrl + w, 再按后面的字符</span><br><span class="line">左 - Ctrl + w + &lt;</span><br><span class="line">右 - Ctrl + w + &gt;</span><br><span class="line">上 - Ctrl + w + +  // 最后一个加号是按键</span><br><span class="line">下 - Ctrl + w + -</span><br><span class="line">均等 - Ctrl + w + =</span><br></pre></td></tr></table></figure></div>
<h3 id="打开文件时分屏">打开文件时分屏</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">vim -On file1 file2 ...</span><br><span class="line">vim -on file1 file2 ...</span><br></pre></td></tr></table></figure></div>
<p>其中大写<code>O</code>表示垂直分割(vertical),
小写<code>o</code>表示水平分割(horizontal,
默认值), <code>n</code>表示分屏数量, 如果不加文件名,
则打开<code>n</code>个空白分屏, 如果不加<code>n</code>,
则根据打开的文件数量来决定分屏的数量</p>
<h2 id="buffer">Buffer</h2>
<p>在 Vim 中，你可以使用以下操作来管理 buffer（缓冲区）：</p>
<h3 id="打开文件到新的-buffer">1. 打开文件到新的 buffer：</h3>
<ul>
<li>使用 <code>:e &lt;file_path&gt;</code> 命令打开一个文件到新的
buffer，例如 <code>:e path/to/file.txt</code>。</li>
<li>或者，在命令行中直接指定文件名打开，例如 <code>vim path/to/file.txt</code>。</li>
</ul>
<h3 id="切换-buffer">2. 切换 buffer：</h3>
<ul>
<li>使用 <code>:bnext</code> 或 <code>:bn</code> 命令切换到下一个
buffer。</li>
<li>使用 <code>:bprevious</code> 或 <code>:bp</code> 命令切换到上一个
buffer。</li>
<li>使用 <code>:bfirst</code> 或 <code>:bf</code> 命令切换到第一个
buffer。</li>
<li>使用 <code>:blast</code> 或 <code>:bl</code> 命令切换到最后一个
buffer。</li>
<li>使用 <code>:b &lt;buffer_number&gt;</code> 命令切换到指定编号的
buffer，例如 <code>:b 2</code>。 <!--SR:!2024-10-06,208,242--></li>
</ul>
<h3 id="显示-buffer-列表">3. 显示 buffer 列表：</h3>
<ul>
<li>使用 <code>:ls</code> 命令显示当前打开的 buffer 列表。</li>
<li>在命令行中输入 <code>:b</code> 命令并按下 <code>&lt;Tab&gt;</code> 键，可以自动补全
buffer 名称。 <!--SR:!2024-09-13,195,242--></li>
</ul>
<h3 id="关闭-buffer">4. 关闭 buffer：</h3>
<ul>
<li>使用 <code>:bd</code> 命令关闭当前 buffer。</li>
<li>使用 <code>:bd &lt;buffer_number&gt;</code> 命令关闭指定编号的
buffer，例如 <code>:bd 2</code>。</li>
<li>使用 <code>:bw</code> 命令关闭当前 buffer 并释放其窗口。</li>
<li>在 Normal 模式下，使用 <code>:q</code> 命令关闭当前窗口和 buffer。
<!--SR:!2024-08-26,183,242--></li>
</ul>
<h3 id="在窗口之间移动-buffer">5. 在窗口之间移动 buffer：</h3>
<ul>
<li>使用 <code>Ctrl + w + h/j/k/l</code> 快捷键在窗口之间移动，其中 <code>h/j/k/l</code> 分别表示左/下/上/右。</li>
<li>使用 <code>Ctrl + w + H/J/K/L</code> 快捷键将当前 buffer
移动到其他窗口，其中 <code>H/J/K/L</code> 分别表示将当前 buffer
移动到左/下/上/右窗口。</li>
</ul>
<h2 id="文件">文件</h2>
<table>
<thead>
<tr class="header">
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>\n</code></td>
<td>打开文件侧边栏</td>
</tr>
<tr class="even">
<td><code>\r</code></td>
<td>查找文件</td>
</tr>
<tr class="odd">
<td>ctrl + P</td>
<td>快速查找文件</td>
</tr>
</tbody>
</table>
<h2 id="排版">排版</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">[N]&gt;&gt;                     <span class="comment"># 向右缩进 N 行，单位为 shiftwidth</span></span><br><span class="line">[N]&lt;&lt;                     <span class="comment"># 向左缩进 N 行，单位为 shiftwidth</span></span><br><span class="line">:ce[nter]                 <span class="comment"># 本行文字居中</span></span><br><span class="line">:le[ft]                   <span class="comment"># 本行文字靠左</span></span><br><span class="line">:ri[ght]                  <span class="comment"># 本行文字靠右</span></span><br><span class="line">:[range]ce[nter] [width]  <span class="comment"># 在 range 范围行的文字居中</span></span><br><span class="line">:[range]le[ft] [indent]   <span class="comment"># 在 range 范围行的行文字靠左</span></span><br><span class="line">:[range]ri[ght] [width]   <span class="comment"># 在 range 范围行的行文字靠右</span></span><br><span class="line">gq                        <span class="comment"># 对选中的文字重排，即对过长文字进行断行</span></span><br><span class="line">gqq                       <span class="comment"># 重排当前行</span></span><br><span class="line">gq[N]q                    <span class="comment"># 重排 N 行</span></span><br><span class="line">gqap                      <span class="comment"># 重排当前段落</span></span><br><span class="line">gq[N]ap                   <span class="comment"># 重排 N 个段落</span></span><br><span class="line">gq[N]j                    <span class="comment"># 重排当前行和下面 N 行</span></span><br><span class="line">gqQ                       <span class="comment"># 重排当前段落到文章末尾</span></span><br><span class="line">J                         <span class="comment"># 将多行合并为一行</span></span><br><span class="line">gj                        <span class="comment"># 将多行合并为一行，且合并后不留空格</span></span><br><span class="line">==                        <span class="comment"># 自动缩进，当前文件所有行自动缩进对齐使用 gg=G</span></span><br></pre></td></tr></table></figure></div>
<h2 id="插件">插件</h2>
<h3 id="vim-move">vim-move</h3>
<p>jkhl 按住加速移动</p>
<h3 id="nerdtree">NERDTree</h3>
<p>文件列表 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; ********************************* NERDTree</span></span><br><span class="line"><span class="string">let NERDTreeWinPos=&#x27;right&#x27;</span></span><br><span class="line"><span class="string">let NERDTreeWinSize=30</span></span><br><span class="line"><span class="string">map &lt;F2&gt; :NERDTreeToggle&lt;cr&gt;</span></span><br><span class="line"><span class="string">map &lt;leader&gt;r :NERDTreeFind&lt;cr&gt; </span></span><br></pre></td></tr></table></figure></div></p>
<h3 id="nerdcommenter">NERDCommenter</h3>
<p>作用: 快速注释/解开注释 使用默认的快捷键, 不需要自己绑定。<br />
如果多行注释，先进入visual模式，然后选中多行。<br />
<code>&lt;leader&gt;</code> 是反斜杠
 这个键.我用的默认的,当然你可以自己该键位. <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">ctrl + /           注释 解注释</span><br><span class="line">&lt;leader&gt;cc         加注释</span><br><span class="line">&lt;leader&gt;cu         解开注释</span><br><span class="line">&lt;leader&gt;ca         切换注释的样式:/*....*/和//..的切换</span><br><span class="line">&lt;leader&gt;c&lt;space&gt;   加上/解开注释, 智能判断</span><br><span class="line">&lt;leader&gt;cy         先复制, 再注解(p可以进行黏贴)</span><br><span class="line">&lt;leader&gt;cs        <span class="string">&#x27;性感的&#x27;</span>注释(我很喜欢这个!)</span><br></pre></td></tr></table></figure></div></p>
<h3 id="vim-visual-multi">vim-visual-multi</h3>
<p>It's called <em><strong>vim-visual-multi</strong></em> in analogy
with <em>visual-block</em>, but the plugin works mostly from normal
mode.</p>
<p>Basic usage: - select words with Ctrl-N (like <code>Ctrl-d</code> in
Sublime Text/VS Code) - create cursors vertically with Ctrl-Down/Ctrl-Up
- select one character at a time with Shift-Arrows - press n/N to get
next/previous occurrence - press [/] to select next/previous cursor -
press q to skip current and get next occurrence - press Q to remove
current cursor/selection - start insert mode with i,a,I,A</p>
<p>Two main modes: - in <em>cursor mode</em> commands work as they would
in normal mode - in <em>extend mode</em> commands work as they would in
visual mode - press Tab to switch between «cursor» and «extend» mode</p>
<p>Most vim commands work as expected (motions, r to replace
characters, ~ to change case, etc). Additionally you can: - run
macros/ex/normal commands at cursors - align cursors - transpose
selections - add patterns with regex, or from visual mode</p>
<p>And more... of course, you can enter insert mode and autocomplete
will work.</p>
<h3 id="bufexplorer">bufexplorer</h3>
<p>With bufexplorer, you can quickly and easily switch between buffers
by using the one of the default public interfaces:</p>
<p><code>\&lt;Leader\&gt;be</code> normal open
<code>\&lt;Leader\&gt;bt</code> toggle open / close
<mark style="background: #fefe00A6;">已设置快捷键 F10</mark>
<code>\&lt;Leader\&gt;bs</code> force horizontal split open
<code>\&lt;Leader\&gt;bv</code> force vertical split open</p>
<h3 id="vim-airline-vim-airline-themes">vim-airline +
vim-airline-themes'</h3>
<p>状态栏美化, 需要下载 powerline 字体<a href="#fn1"
class="footnote-ref" id="fnref1" role="doc-noteref"><sup>1</sup></a></p>
<h3 id="vim-fugitive">vim-fugitive</h3>
<p>The crown jewel of Fugitive is <code>:Git</code> (or
just <code>:G</code>), which calls any arbitrary Git command. If you
know how to use Git at the command line, you know how to
use <code>:Git</code>. It's vaguely akin to <code>:!git</code> but with
numerous improvements:</p>
<ul>
<li>The default behavior is to directly echo the command's output. Quiet
commands like <code>:Git add</code> avoid the dreaded "Press ENTER or
type command to continue" prompt.</li>
<li><code>:Git commit</code>, <code>:Git rebase -i</code>, and other
commands that invoke an editor do their editing in the current Vim
instance.</li>
<li><code>:Git diff</code>, <code>:Git log</code>, and other verbose,
paginated commands have their output loaded into a temporary buffer.
Force this behavior for any command
with <code>:Git --paginate</code> or <code>:Git -p</code>.</li>
<li><code>:Git blame</code> uses a temporary buffer with maps for
additional triage. Press enter on a line to view the commit where the
line changed, or <code>g?</code> to see other available maps. Omit the
filename argument and the currently edited file will be blamed in a
vertical, scroll-bound split.</li>
<li><code>:Git mergetool</code> and <code>:Git difftool</code> load
their changesets into the quickfix list.</li>
<li>Called with no arguments, <code>:Git</code> opens a summary window
with dirty files and unpushed and unpulled commits.
Press <code>g?</code> to bring up a list of maps for numerous operations
including diffing, staging, committing, rebasing, and stashing. (This is
the successor to the old <code>:Gstatus</code>.)</li>
<li>This command (along with all other commands) always uses the current
buffer's repository, so you don't need to worry about the current
working directory.</li>
</ul>
<h3 id="ultisnips-vim-snippets">ultisnips / vim-snippets</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">snippet 触发字符 <span class="string">&quot;描述&quot;</span> <span class="string">&quot;表达式&quot;</span> 参数</span><br></pre></td></tr></table></figure></div>
<h2 id="最佳实践">最佳实践</h2>
<h3 id="删除当前单词">删除当前单词</h3>
<p><strong>|abc</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">cw  </span><br><span class="line">caw</span><br></pre></td></tr></table></figure></div> <strong>a|bc</strong>
<strong>ab|c</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">caw</span><br></pre></td></tr></table></figure></div> <!--SR:!2024-10-03,206,242--></p>
<h3 id="删除当前行">删除当前行</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cc</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-06-28,362,242-->
<h3 id="删除abc中的-abc">删除“abc”中的 abc</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># &#x27;  (  &#123;  &lt;  t 同理 </span></span><br><span class="line">ci<span class="string">&quot;</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-11,211,242-->
<h3 id="粘贴代码">粘贴代码</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">F9 i C-v</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-04,243,242-->
<h3 id="文件查找">文件查找</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">C-p</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-11-20,235,242-->
<h3 id="buffer-切换">buffer 切换</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">A-left/right</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-07-24,378,242-->
<h3 id="多列选择">多列选择</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">C-up/down</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-20,198,242-->
<h3 id="翻页">翻页</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">S-up/down</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-12,193,242-->
<h2 id="参考">参考</h2>
<p><a
href="https://catbro666.github.io/posts/d6ca5270/">VIM常用快捷键和插件整理
| CatBro's Blog</a> <a
href="https://github.com/chloneda/vim-cheatsheet">GitHub -
chloneda/vim-cheatsheet: 🍁Vim cheat sheet with everything you want to
know.</a> <a href="http://vim.zhangjikai.com/ctags.html">Ctags |
vim学习</a> <a href="http://www.jiangguo.net/c/vry/qy.html">IDE
长啥样_把 Vim 打造成你的 IDE_匠果</a> <a
href="https://github.com/itgoyo/Vim-HotKeys">GitHub -
itgoyo/Vim-HotKeys: Vim快捷键大全</a></p>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://blog.csdn.net/LutingWang/article/details/123515698">Powerline
字体安装 for Windows / Mac / Ubuntu</a><a href="#fnref1"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>英语语法</title>
    <url>/19ea4919882833bd8f9d4f7387366e849f91a24a/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.zhihu.com/question/30030877/answer/2683083634">www.zhihu.com</a></p>
</blockquote>
<p>给我 10
分钟，保证帮你打通任督二脉，让你彻底征服语法！不管是初高中生、大学生、考研党、在职人员还是宝妈宝爸，甚至是
0 基础的同学都可以速成！</p>
<p>英语所有的语法都可以用三个公式来表示，只要你掌握了这三个公式，语法瞬间就搞懂了。</p>
<p><span class="math inline">\(语法公式：语法 = 词法 + 句法\)</span></p>
<p>英语所有的句子都由不同词性的单词组成，<mark style="background: #83d98fA6;">只要你学会了用词和造句，也就掌握了语法。</mark>
词法是基础，有了基础之后，掌握句法、搞清句子结构，语法也就大成了！
<!--SR:!2026-11-26,896,250--></p>
<p>接下来我就分别<strong>从词法和句法两大维度</strong>剖析英语语法如何快速习成！</p>
<h2 id="词法-词性-成分">词法 = 词性 + 成分</h2>
<p>词法包含两个内容， -
一个是==不同单词的词性==，是名词、动词、介词、形容词、副词、连词还是冠词....；
-
另一个是==不同的词性会在句子中充当不同的成分==，这个单词是作主语、谓语、宾语，还是定语、状语、补语...
<!--SR:!2024-12-28,489,250!2024-12-15,478,250--></p>
<p>词性和成分其实是互相对应的，请你把在课堂上学不会听不懂的东西全部换算成：</p>
<ul>
<li><span class="math inline">\(名词 / 代词 = 主语 / 宾语\)</span></li>
<li><span class="math inline">\(动词 = 谓语\)</span></li>
<li><span class="math inline">\(形容词 = 定语 / 补语\)</span></li>
<li><span class="math inline">\(副词 = 状语 / 补语\)</span>
学好语法，必须搞清这两个前提，把词法搞清楚了，我们才能深入研究句法，因为<mark style="background: #fefe00A6;">句法就是词法的延伸</mark>
！ <img src="/images/Pasted%20image%2020230909184403.png" /></li>
</ul>
<p>当然，如果你连基本的单词基础都没有，<strong>很多常用的单词都不认识的话，语法学习只能停留在表面了</strong>。因为深入的学法学习必然会涉及很多长难句，而长难句是由很多常用单词甚至难词、生词组成的，单词都不认识，句子拆分就更无从谈起了。</p>
<p>所以说，英语语法和单词其实是不可分割的整体，大家学习的时候一定要同步进行。学英语就是盖一栋高楼大厦，单词是地基，语法是大厦的结构。地基不牢，大厦想盖得更高那是不可能的。
<!--SR:!2025-10-19,469,252--></p>
<h2 id="词性">词性</h2>
<h3 id="名词">1. 名词</h3>
<p><strong>（1）名词的概念：</strong></p>
<p>表示人、动物、地点、物品以及抽象概念的词。例如：人、地点、动物、物品、抽象概念等等。</p>
<p><img src="/images/v2-bdca6026c28a673eae7d83612d907a2d_r.jpg" />
<!--SR:!2024-12-14,478,250--></p>
<p><strong>（2）名词的分类</strong></p>
<p>名词又分为<strong>专有名词和普通名词</strong></p>
<ol type="1">
<li><strong>专有名词：</strong>
表示特定的人或事物，首字母一定要大写。比如人名 Paul 保罗、Saturday
星期六、China 中国等等；</li>
<li><strong>普通名词：</strong> 表示是一类人或东西，或一个抽象概念。
<!--SR:!2026-01-29,775,270--></li>
</ol>
<p>普通名词可分为<strong>四类：</strong></p>
<ol type="1">
<li><strong>个体名词：</strong> 单个（类）的人、物、事等。例如：drum
鼓、sock 袜子</li>
<li><strong>集体名词：</strong> 有集合、团体含义的词。例如：family
家庭、army 军队</li>
<li><strong>物质名词：</strong> 无法判断个体的事、物。例如：rice
米饭、water 水</li>
<li><strong>抽象名词：</strong>
表现动作、状态、品质、感情等概念。例如：health 健康、work 工作</li>
</ol>
<p>个体名词与集体名词可以用数来计算，<strong>称为可数名词。</strong>
<mark style="background: #fefe00A6;">可数名词有单数与复数两种形式</mark>
，单数名词表示名词的数量为 “一”。例如：a pen
一支钢笔；而复数名词表示名词的数量 “大于一”，例如：four pens
四支钢笔。</p>
<p>物质名词与抽象名词一般无法用数来计算，称为<strong>不可数名词。</strong>
<mark style="background: #fefe00A6;">不可数名词在句子中一般被视为单数，前面不能用
a 或 an，但可以用 the</mark> 。例如 The coffee tastes
good．咖啡味道不错。 <!--SR:!2025-02-11,513,250--></p>
<h3 id="动词">2. 动词</h3>
<p><strong>（1）动词的概念</strong></p>
<p>表示各类<strong>动作及状态</strong>的词，基本上<strong>每个完整的句子都有一个动词</strong>。动词是句子的核心它既决定着句子意思的表达，同时又决定着句子的语法结构。
<!--SR:!2024-08-08,397,250--></p>
<p><strong>（2）动词的分类：</strong></p>
<p>分为 - 系动词； - 助动词； - 情态动词； - 实义动词四类。
<!--SR:!2024-12-08,473,250--></p>
<p><strong>1）系动词：</strong></p>
<p>表示谓语关系的动词，后面<mark style="background: #fefe00A6;">必须接表语</mark>
（名词或形容词）一起使用。</p>
<p>如：He fell ill yesterday．他昨天病了。（fell
是系动词，后跟形容词作表语，说明主语情况）</p>
<p>又比如：He is a teacher．他是一名教师。（is
是系动词，后跟形容词作表语，说明主语身份）</p>
<p>最主要的连系动词是
<strong>“be（am/is/are）”</strong>，其他常用的连系动词还有：seem
似乎，look 看起来，appear 好像，become 变成，keep 保持，get 成.
<!--SR:!2026-03-23,794,270--></p>
<p><strong>2）助动词</strong></p>
<p>帮助主要动词完成语法功能，<strong>本身没有意义，不能单独作谓语</strong>。最常用的助动词有：be,
have, do, shall, will, should, would。例如：He doesn't like English.
他不喜欢英语。（doesn't 是助动词，无词义；like
是主要动词，有词义）。</p>
<p>助动词只有语法作用，协助构成进行时、完成时、被动态、否定句、疑问句等。</p>
<p>例如：<br />
① be 构成进行时：I am reading a book．我正在读书。 ② do 构成疑问句：—Do
you like apple？你喜欢苹果吗？ ③ have 构成完成时态：He has made a
plan．他已经订了计划。 <!--SR:!2024-11-04,448,250--></p>
<p><strong>3）情态动词</strong></p>
<p>表示说话人的语气或者情态，<strong>不能单独作谓语</strong>，必须与动词合用。</p>
<p>常用的情态动词有： 1. <strong>can（能，会）</strong> 例如：I can
swim．我会游泳。 2. <strong>may（可以）</strong> 例如：You may go
now．你现在可以走了。 3. <strong>must（必须）</strong> 例如：You must do
your homework．你必须写作业。 4. <strong>need（需要）</strong>
例如：Need you go so soon？你需要这么早走吗？
<!--SR:!2026-01-24,775,270--></p>
<p><strong>4）实义动词</strong></p>
<p>根据<strong>后面是否带有宾语</strong>分为两类：及物动词（缩写为
<code>vt.</code>）和不及物动词（缩写形为 <code>vi</code>）。</p>
<p><strong>及物动词：所谓
“及物”，就是主体把动作作用到客体上</strong>，后面需要使用宾语使其意义完整。及物动词本身意义不完整，加上宾语才能表达完整的意思。</p>
<p>宾语既可以是人，也可以是物。例如：</p>
<ul>
<li>That dog makes the boy
happy．那条狗使这个孩子高兴起来。（宾语是人）</li>
<li>Many people earn their living by
writing．许多人靠写作谋生。（宾语是物）</li>
</ul>
<p><strong>不及物动词：就是本身词义完整，后面不需要加宾语，只能用于：“主
+ 谓” 结构。</strong></p>
<p>例如：</p>
<ol type="1">
<li>I <strong>live</strong> in Beijing．我住在北京。</li>
<li>This is the room where once
<strong>lived</strong>．这是我从前住的房间。</li>
<li>类似的还有：agree, go, work, listen, look, come, die, belong, fall,
exist, rise,arrive, sit, sail, hurry, fail, succeed...
<!--SR:!2024-10-10,433,250--></li>
</ol>
<h3 id="代词">3. 代词</h3>
<p><strong>（1）代词的概念</strong></p>
<p>代词是为了<strong>避免重复，代指前面出现的人、动物、事物</strong>。例如：This
is our new car. I bought it
yesterday（这是我们的新车，我昨天买的），代词 it 代替名词 car 人。
<!--SR:!2025-01-14,500,250--></p>
<p><strong>（2）代词的分类</strong></p>
<p><strong>代词分为：</strong>
人称代词、物主代词、反身代词、相互代词、关系代词、疑问代词、指示代词、不定代词。
<!--SR:!2025-01-23,508,250--></p>
<p><strong>人称代词：</strong></p>
<p>就是你、我、他、它，复数形式是你们我们他们这些，如下图所示： <img
src="/images/v2-40a091e501848059985408cf5e6f951a_r.jpg" />
<!--SR:!2026-04-28,764,250--></p>
<p><strong>物主代词：</strong></p>
<p>就是人称代词的形容词形式，就是你的、我的、他的.....，如下图所示：
<img src="/images/v2-141494cdb176bdc926aa13e543ff8142_r.jpg" />
<!--SR:!2024-08-13,401,250--></p>
<p><strong>反身代词：</strong></p>
<p>就是强调自己，我自己、你自己、他自己、我们自己....，如下图所示： <img
src="/images/v2-6d2310df1cb5fb0a3f150524e7d955da_r.jpg" />
<!--SR:!2026-11-02,879,250--></p>
<p><strong>相互代词：</strong></p>
<p>表示相互关系，只有 each other 和 one another
这两组，意思是二者或二者以上。 <!--SR:!2025-02-13,512,250--></p>
<p><strong>关系代词：</strong></p>
<p>用来引导定语从句，有 who, whose, whom,
that,which。可用作主语、表语、宾语、定语。<strong>代表从句所修饰的那个名词或代词</strong>。例如：I
know <strong>what</strong> he has done（我知道他做了什么）。
<!--SR:!2026-07-07,809,250--></p>
<p><strong>疑问代词：</strong></p>
<p>用作疑问词，构成特殊疑问句，如 “who, whom 谁，whose 谁的，what
什么，which 哪个” 等。例如：<strong>Who</strong> is going to go
shopping？（谁要去买东西？） <!--SR:!2025-01-30,509,250--></p>
<p><strong>指示代词：</strong></p>
<p>用来标识人或物，有 this 这个、that 那个、these 这些、those 那些、it
它......。在句中作主语，宾语，表语，定语。例如：<strong>That</strong> is
a good dictionary（作主语）；What do you want? I want
<strong>this</strong>（作宾语）. <!--SR:!2024-08-22,407,250--></p>
<p><strong>不定代词：</strong></p>
<p>表示不确定的人、物或模糊的数量。可以代替名词和形容词，在句中作主语、宾语、表语和定语。有
all, any, another, both,every, few, many, much, some, no, every
等等，如下图所示： <img
src="/images/v2-813b6954b0073cc6feb9306122f94407_r.jpg" />
<!--SR:!2025-12-04,681,250--></p>
<h3 id="形容词">4. 形容词</h3>
<p><strong>（1）形容词的概念</strong></p>
<p>用来<strong>描写或修饰名词</strong>，例如：good 好的，bad
不好的，special 特别的，beautiful 美丽的，interesting 有趣的......
<!--SR:!2026-03-22,746,250--></p>
<p><strong>（2）形容词的分类</strong></p>
<p>分为简单形容词和复合形容词。 <!--SR:!2025-12-25,753,270--></p>
<p><strong>简单形容词：</strong>
由一个单词或单个单词加前后缀构成，或由现在 / 过去分词演化而成</p>
<ol type="1">
<li>由一个单词构成，如 dark 黑暗的，white 白色的，beautiful
漂亮的；</li>
<li>由单个单词加前后缀构成，如 unkind 不善的，impossible 不可能的；</li>
<li>或由现在 / 过去分词演化而成，如 exciting 激动人心的，satisfied
满意的。</li>
</ol>
<p><strong>复合形容词：</strong> 由一个以上的词构成</p>
<ol type="1">
<li>形容词 + 形容词：bittersweet 痛苦而又甜蜜的，deaf-mute
又聋又哑的；</li>
<li>形容词 / 副词 + 分词：ordinary-looking 长相一般的，well-informed
了解信息的；</li>
<li>名词 + 形容词：soundproof 隔声的，water-resistant 防水的；</li>
<li>名词 + 分词：lawabiding 遵守法律的，oceangoing 向海洋方向的；
<!--SR:!2024-12-23,485,250--></li>
</ol>
<h3 id="副词">5. 副词</h3>
<p><strong>（1）副词的概念</strong></p>
<p>主要用来<strong>修饰动词、形容词</strong>，表示地点、时间、程度、方式、语气等。</p>
<ol type="1">
<li>Will you stay here overnight? 你今晚住在这里好吗？（here
修饰动词，表示地点）</li>
<li>Your order will be ready very soon. 您点的菜很快就会好的。（very
soon 修饰动词，表示时间）</li>
<li>I find these chairs incredibly uncomfortable.
我觉得这些椅子非常不舒服。（incredibly 修饰形容词，表示程度）
<!--SR:!2025-03-03,520,250--></li>
</ol>
<p><strong>（2）副词的分类</strong></p>
<ul>
<li>1）表示方向、位置。例如：go down 下去，step in 走进去，get out
出去；</li>
<li>2）表示地点。例如：upstairs 楼上，there 那儿，abroad 在国外；</li>
<li>3）表示时间。例如：today 今天，yesterday 昨天，tomorrow 明天；</li>
<li>4）表示顺序。例如：first 第一，next 下一个，then 接着；</li>
<li>5）表示频率。例如：always 总是，never 从不，sometimes 有时。
<!--SR:!2024-08-31,410,250--></li>
</ul>
<p><strong>副词可放在句首、句中或句末，表示不同的语气。</strong></p>
<ul>
<li>Sometimes I went to visit my parents.（sometimes
放在句首，语气最强）</li>
<li>I sometimes went to visit my parents.（sometimes
放在句中，语气较弱）</li>
<li>I went to visit my parents sometimes.（sometimes
放在句末，语气最弱） <!--SR:!2025-01-22,507,250--></li>
</ul>
<p><strong>（3）副词的用法、作用</strong></p>
<p>副词在句中主要用作状语、表语、宾语补足语和介词宾语等</p>
<p><strong>1）作状语，修饰动词、形容词、副词</strong></p>
<ul>
<li><strong>修饰动词。</strong> 如：He runs fast．他跑得很快。</li>
<li><strong>修饰形容词。</strong> 如：It was rather cold this
year．今年相当冷。</li>
<li><strong>修饰副词</strong>。如：He walks rather
slow．他走路相当慢。</li>
</ul>
<p><strong>2）作定语，修饰名词或代词</strong></p>
<p>置于 “不定冠词、名词” 之前，以增强语气。这类副词最常用的有 quite 和
rather。例如：My students are quite a nice
bunch．我的学生真是一群好孩子。</p>
<p><strong>3）作表语</strong></p>
<ul>
<li>I was down and out．我穷困潦倒。</li>
<li>My mother is not in．我妈妈不在家。</li>
</ul>
<p><strong>4）作宾语补语，对主体的状态进行解释说明</strong></p>
<p>The girl walked in <strong>with her head
up</strong>．那位女孩<strong>昂着头</strong>走了进来。
<!--SR:!2024-11-22,467,250--></p>
<h3 id="介词">6. 介词</h3>
<p><strong>（1）介词的概念</strong></p>
<p>置于名词、代词之前，不能单独作句子成分，只表示句中其他成分之间的关系。
<!--SR:!2026-03-14,788,270--></p>
<p><strong>（2）介词的分类</strong></p>
<ul>
<li><strong>1）表时间。</strong> 如： before, during，after, as, in,
since, through, until,within 等。</li>
<li><strong>2）表地点。</strong> 如：at, above, behind, below，beside,
by, down，over,under 等。</li>
<li><strong>3）表原因、目的</strong>。例如：from, for, with 等。</li>
<li><strong>4）表结果。</strong> 例如：without, to, with 等。</li>
<li><strong>5）表条件。</strong> 例如：considering, on, without
等。</li>
<li><strong>6）表手段、方式</strong>。例如：by, with, in 等。</li>
<li><strong>7）表让步。</strong> 例如：despite, in spite of 等。</li>
<li><strong>8）表关于</strong>。例如：with regard to, as for, as to,
about, concerning, regarding 等。</li>
<li><strong>9）表对于</strong>。例如：to, at, with, for, over 等。</li>
<li><strong>10）表根据</strong>。例如：according to, on 等。</li>
<li><strong>11）表除去</strong>。例如：but, except, besides 等。</li>
<li><strong>12）表比较</strong>。例如：as, like, above, over 等。</li>
<li><strong>13）表反对</strong>。例如：against, with 等。
<!--SR:!2024-12-29,489,250--></li>
</ul>
<p><strong>（3）介词的用法</strong></p>
<p><strong>1）通常放在名词、疑问词、关系代词、连接代词之前</strong>。</p>
<ul>
<li>With whom did you go？你同谁一道去？</li>
<li>This is the book from which I got the
story．这就是我从中读到这个故事的那本书。</li>
<li>From what I hear, he is a good
swimmer．我听说他是个优秀的游泳运动员。</li>
</ul>
<p><strong>2）介词在全句、分句或从句之末时，常后置</strong>。</p>
<ul>
<li>介词宾语为疑问词时，介词后置。如：Where do you come
from？你是哪儿人？</li>
<li>介词宾语为关系代词时，介词可后置。如：That's what he is talking
about．那就是他所谈的事。</li>
<li>在间接疑问句和感叹句中介词也可后置。如：What a jolly mess I am
in！我所处的局面多么糟糕啊！（感叹句）
<!--SR:!2025-01-29,508,250--></li>
</ul>
<h3 id="连词">7. 连词</h3>
<p><strong>（1）连词的概念</strong></p>
<p>是一种虚词，用来连接单词、短语、从句，在句中不单独作句子成分。
<!--SR:!2024-08-29,411,250--></p>
<p><strong>（2）连词的分类</strong></p>
<ul>
<li><strong>1）表示选择或并列关系：</strong> either...or...,
neither...nor..., or, as well as, and, both...and...., and 等。</li>
<li><strong>2）表示解释说明：</strong> that is, that is to say, in other
words, such as, for example 等。</li>
<li><strong>3）表示总结：</strong> in a word, on the whole, in short,
briefly, in brief, to sum up, in all 等。</li>
<li><strong>4）表示时间顺序：</strong> the moment, as soon as, at first,
then, later, meanwhile, at the beginning 等．</li>
<li><strong>5）表示因果关系：</strong> therefore, so, as a result, as
the result of, hence, because of, due to 等。</li>
<li><strong>6）表示转折关系：</strong> yet, and yet, but, while, on the
contrary, on the other hand, however 等。</li>
<li><strong>7）表示递进关系：</strong> not only...but（also）, what's
more, besides, in addition 等。 <!--SR:!2025-02-16,492,230--></li>
</ul>
<p><strong>（3）怎么用？</strong></p>
<p>很简单，就是将前后内容连接起来，比如以下几个：</p>
<ol type="1">
<li><strong>Time and tide</strong> wait for no man．岁月不待人。</li>
<li>He is either <strong>sick or
lazy</strong>．他不是病了就是太懒。</li>
<li><strong>John as well as you</strong> is my bosom
friend．约翰和你都是我的知己。</li>
<li>I do not care whether you <strong>go or
stay</strong>．我才不管你是走是留呢。 <!--SR:!2026-07-29,822,250--></li>
</ol>
<h3 id="冠词">8. 冠词</h3>
<p><strong>（1）冠词的概念</strong></p>
<p>用来说明名词所指的人或物，本身没有词义，不能在句中单独使用。<strong>一般放在名词的前面，帮助指明名词的含义</strong>。例如：a
cup 一个杯子；an orange 一个橘子；the Yellow River 黄河
<!--SR:!2026-01-11,703,250--></p>
<p><strong>（2）冠词的分类</strong></p>
<p>分为三类：不定冠词 a 和 an、定冠词 the，零冠词。</p>
<p><strong>1）不定冠词：</strong>
是一个的意思，用于单数可数名词前面，但不强调数目概念，<strong>只用于泛指事物，说明其名称或种类</strong>。例如：a
table 一张桌子、a man 一个男人、an hour 一小时、an apple 一个苹果...</p>
<p><strong>2）定冠词：</strong> 与指示代词 this, that
同源，有这个、那个、这些、那些的意思，<strong>常表示强调</strong>。例如：She
is <strong>the only person</strong> who could do
that.（强调她是唯一能做那件事的人）</p>
<p><strong>3）零冠词：</strong>
一些词、短语前面不允许加冠词，也就是零冠词。<strong>国名、人名前通常用零冠词</strong>，包括人名、地名、国名、节日、月份、星期、季节等。例如：Mary
玛丽、China 中国、winter 冬、Sunday 星期天、October 十月、National Day
国庆节... <!--SR:!2025-01-18,504,250--></p>
<h3 id="感叹词">9. 感叹词</h3>
<p><strong>（1）感叹词的概念</strong></p>
<p>用来<strong>表示说话人的各种感情，如欢喜、痛苦、惊惧、赞叹等</strong>。一般放于句首，感情强烈时，句尾用感叹号!
。感叹句一般用于口语之中，在日常交际中常用。
<!--SR:!2024-08-18,405,250--></p>
<p><strong>（2）感叹词的分类</strong></p>
<ul>
<li><strong>1）表示赞赏：</strong>
Good！好！太好了！Terrific！太棒了！Excellent！好极了！太棒了！</li>
<li><strong>2）表示欢呼：</strong>
There！你瞧！Hurrah！万岁！加油！Bravo！万岁！好极了！</li>
<li><strong>3）表示痛苦：</strong> Ouch！哎呦！痛啊</li>
<li><strong>4）表示惊奇：</strong> My God！天啊！Dear me! 天啊！</li>
<li><strong>5）表示惊醒：</strong> Well！哎呀！Well, I must go
now！哎呀，我得走了！</li>
<li><strong>6）表示劝告：</strong> Here！好了！Here! Don't
cry！好了，别哭了！</li>
<li><strong>7）表示招呼：</strong> Hi！嗨！Hey！喂！嘿！Hello！喂！Hi!
How are you? <!--SR:!2025-01-16,502,250--></li>
</ul>
<h3 id="疑问词">10. 疑问词</h3>
<p><strong>（1）疑问词的概念：</strong></p>
<p>用在特殊疑问句中，引导整个句子 <!--SR:!2024-09-02,409,250--></p>
<p><strong>（2）疑问词的分类</strong></p>
<p>分为三类：</p>
<ol type="1">
<li><strong>疑问代词：</strong> what, who, which, whose, whom</li>
<li><strong>疑问形容词：</strong> what（which, whose）+ 名词</li>
<li><strong>疑问副词：</strong>when, where, why, how
<!--SR:!2025-01-06,493,250--></li>
</ol>
<p><strong>常用疑问词如下图所示：</strong></p>
<p><img src="/images/v2-ba25ccdd4c373a170c8bd9f5fcdb464d_r.jpg" />
<!--SR:!2024-09-01,409,250--></p>
<h2 id="成分">成分</h2>
<p>句子是最高级的语法单位，也是人们交际的基本语言单位。句子有两个特征：<strong>能在交际中单独使用并且能够表达完整的意思。</strong></p>
<p>一个句子的核心部分是==主语和谓语==。主语在构成方面很简单，只需整体上的更换，真正对句子起支撑作用是<strong>谓语动词</strong>或是<strong>系表结构</strong>，对<strong>动词的提炼即是对句型套路的掌握</strong>。</p>
<p>组成句子的各个部分叫做句子成分，包括<strong>主</strong>语、<strong>谓</strong>语、<strong>宾</strong>语、宾语<strong>补</strong>足语、<strong>表</strong>语、<strong>定</strong>语和<strong>状</strong>语。
<!--SR:!2025-02-04,509,250--></p>
<h3 id="主语">1. 主语</h3>
<p>句子所要==说明的人或物==，<strong>是句子的主体。一般由名词、代词或名词短语等组成</strong>，位于句首。</p>
<ul>
<li><strong>The desk</strong> is old．这张课桌旧了。（名词作主语）</li>
<li><strong>He</strong> is a doctor．他是一名医生。（代词作主语）</li>
<li><strong>The secret of success</strong> is to start from scratch and
keep on scratching.
成功的秘诀在于从磨练开始，并要坚持不断磨练。（名词短语作主语）
<!--SR:!2026-03-20,745,250--></li>
</ul>
<h3 id="谓语">2. 谓语</h3>
<p>用来说明主语 ==<strong>“干什么” 或 “怎么样”</strong>==
的，应在主语后面。</p>
<ul>
<li>I <strong>play</strong> basketball in the
morning．我早上打篮球。（实义动词作谓语）</li>
<li>We <strong>can speak</strong>
French．我们会讲法语。（情态动词和实义动词作谓语）
<!--SR:!2026-01-02,697,250--></li>
</ul>
<h3 id="宾语">3. 宾语</h3>
<p>表示==<strong>动词的作用对象</strong>==，位于动词之后。</p>
<ul>
<li>Pass <strong>methe book,</strong> please. 请把这本书递给我。</li>
<li>I want to eat <strong>two hamburgers now</strong>.
我现在想吃两个汉堡。 <!--SR:!2024-12-30,489,250--></li>
</ul>
<h3 id="定语">4. 定语</h3>
<p>用来==<strong>修饰名词或代词的，对其进行解释说明</strong>==，去掉不影响句子结构和成分。名词、形容词、数词、分词、不定式、介词短语或定语从句都可以用作定语。</p>
<p>例如：</p>
<ul>
<li>The boy <strong>pupil</strong> is in Class Thr，对其进行解释说明
ee．这个男生在三班。（名词 pupil 作定语，对 the boy
进行解释说明，说明其是学生 ）</li>
<li>The girl <strong>in red</strong> is my
sister．穿红衣服的女孩是我的妹妹。（介词短语 in red 作定语，对 the girl
进行解释说明，说明她穿着红色衣服） <!--SR:!2025-01-13,499,250--></li>
</ul>
<h3 id="状语">5. 状语</h3>
<p>用来==<strong>修饰动词、形容词和副词，对其进行解释说明，</strong>
==表示动作、行为发生的时间、原因、地点、方式、目的或程度等。一般由副词、不定式、介词短语来充当。</p>
<p>例如：</p>
<ul>
<li>I can jump <strong>high</strong>．我跳得高。（副词做状语）</li>
<li><strong>Without the idea,</strong> I can't finish the work.
没有这个创意，我不可能完成这份工作。（介词短语作状语）
<!--SR:!2025-01-25,509,250--></li>
</ul>
<h3 id="补语">6. 补语</h3>
<p>用来对主语、宾语等进行==<strong>补充说明</strong>==。例如：</p>
<ul>
<li>Tom was made
<strong>monitor</strong>．汤姆被选为班长。<strong>（主语补语）</strong></li>
<li>I made Tom
<strong>monitor</strong>．我选汤姆当班长。<strong>（宾语补语）</strong>
<!--SR:!2025-02-18,514,250--></li>
</ul>
<h3 id="表语">7. 表语</h3>
<p>用来==<strong>说明主语的身份、特征、性质或状态</strong>==，常位于系动词后，由名词、形容词、副词、介词短语充当。例如：</p>
<ul>
<li>It is <strong>a
flower</strong>．这是一朵花。<strong>（名词作表语）</strong></li>
<li>We are <strong>at
work</strong>．我们在上班。<strong>（介词短语作表语）</strong></li>
<li>She is
<strong>nice</strong>．她是友善的。<strong>（形容词作表语）</strong>
<!--SR:!2026-05-25,779,250--></li>
</ul>
<h2 id="句法-时态-结构">句法 = 时态 + 结构</h2>
<h2 id="结构">结构</h2>
<h3 id="简单句">1. 简单句</h3>
<p><strong>（1）概念</strong></p>
<p>只包含<strong>一个主谓结构</strong>。如：She is fond of collecting
stamps．她喜欢集邮。</p>
<p><strong>（2）简单句的五种基本句型</strong></p>
<p>英语句子是由主语（S），谓语动词（V），宾语（O），表语（P），状语（adv），宾语补足语（O.C）等成分组成，按照这些成分的不同组合，可分为五种基本句型。</p>
<ol type="1">
<li><strong>句型一：主谓（主语 + 不及物动词）。</strong> 例如：Students
read．学生读书；Rivers flow．河流会流动。</li>
<li><strong>句型二：主谓宾（主语 + 及物动词 + 宾语）。</strong> He made
a story yesterday．他昨天编了一个故事.</li>
<li><strong>句型三: 主系表（主语 + be动词 + 宾语）</strong>。I am fine.
我很好</li>
<li><strong>句型四：主谓宾宾（主语 + 及物动词 + 间接宾语 +
直接宾语）。</strong> You make me learn English.</li>
<li><strong>句型五：主谓宾补（主语 + 及物动词 + 宾语 +
宾语补足语）</strong>。You make me happy.
<!--SR:!2025-08-18,438,252--></li>
</ol>
<h3 id="基本句型">2. 基本句型</h3>
<p><strong>（1）陈述句</strong></p>
<p><strong>说明事实，陈述看法</strong>，肯定什么或者否定什么。例如：</p>
<ul>
<li>Light travels faster than sound．光比声速度快。（说明事实）</li>
<li>I didn't tell him anything．我什么也没有告诉他。（说明事实）</li>
</ul>
<p><strong>（2）疑问句</strong></p>
<p>疑问句主要用来提出问题，分为一般疑问句、特殊疑问、选择疑问句、反意疑问句。</p>
<p><strong>1&gt; 一般疑问句：</strong> 用来询问一件事情。</p>
<p>句中谓语动词是 be、助动词、情态动词时，将它们放到主语前面。</p>
<ul>
<li><strong>Is</strong> there something wrong with this
machine？这台机器有问题吗？</li>
<li><strong>Can</strong> you skate？你会滑冰吗？</li>
<li><strong>Would</strong> you like me to interpret for
you？要不要我帮你翻译？</li>
<li><strong>Have</strong> you got today's
milk？你拿到今天的牛奶了吗？</li>
</ul>
<p>如果没有上述词语而是其他动词时，则在主语前加助动词
<strong>do/does/did，原来的谓语动词改为原形。</strong></p>
<ul>
<li>Do you exercise？你做运动吗？</li>
<li>Does she look sick？她看上去像生病吗？</li>
</ul>
<p><strong>2&gt; 特殊疑问句</strong></p>
<p>对句中某一特殊部分提出疑问，通常以 who, whose, what, whichwhen, why,
how 等疑问词开头</p>
<p><strong>结构：疑问代词 + 一般疑问句 +.....？</strong></p>
<ul>
<li>What do you do when you are not working？你不工作的时候做什么？</li>
<li>Whose decision was it？那是谁作出的决定？</li>
<li>Which class are you in？你在哪个班？</li>
</ul>
<p><strong>3&gt; 选择疑问句</strong></p>
<p>对问题提出两个或者两个以上的答案，供对方选择，<strong>以一般疑问句 /
特殊疑问句为基础</strong>。</p>
<ul>
<li>Are you going to elect a boy or a
girl？你要选一个男孩还是女孩？</li>
<li>Which do you prefer, coffee or tea？你要哪一样，咖啡还是茶？</li>
</ul>
<p><strong>4&gt; 反意疑问句</strong></p>
<p>由 “陈述句 + 疑问句” 构成，表示反问</p>
<ul>
<li>The clock is slow, isn't it？表走的慢，不是吗？</li>
<li>He isn't old, is he？他不老，是吗？</li>
<li>I'm late, aren't I？我迟到了，不是吗？</li>
</ul>
<p>在句子中<strong>起名词作用的句子</strong>，其功能相当于名词词组，在句中担任主语、宾语、表语、同位语、介词宾语等。因此，根据它在句中不同的语法功能，名词从句又可分别称<strong>为主语从句、宾语从句、表语从句和同位语从句。</strong></p>
<h3 id="主语从句-名词性从句">3. 主语从句 (名词性从句)</h3>
<p>在复合句中用作主语的从句，通常由连词 that、whether、关系代词 what
来引导。</p>
<ul>
<li><strong>that 引导：</strong> That he has got the scholarship is
true．他得了奖学金的事是真的。</li>
<li><strong>whether 引导：</strong> Whether he can see that letter is
unknown．不知道他是否能看见那封信。</li>
<li><strong>关系代词 what 引导：</strong> What you have done is a bad
thing．你做的是一件错事。</li>
</ul>
<p>为了保持句子平衡，主语从句<strong>常用 it
作形式主语，将主语从句后置</strong>。</p>
<ul>
<li>It's necessary that you take an umbrella．你带把伞很有必要。</li>
<li>It is obvious what we must do．</li>
<li>It's a question whether he would accept this.
他们是否会接受是个问题。</li>
</ul>
<h3 id="宾语从句-名词性从句-最常考">4. 宾语从句 (名词性从句)
（最常考）</h3>
<p><strong>（1）概念</strong></p>
<p>在句子中起宾语作用的从句。宾语从句要用陈述语序，即<strong>主句 + 连词
+ 宾语从句</strong>。例如：</p>
<ul>
<li><em><strong>I don't know</strong></em> where <em><strong>he came
from</strong></em>．我不知道他来自哪里。</li>
<li><strong><em>Do you know</em></strong> where <strong><em>they
work</em></strong>？你知道他们在哪儿工作吗？</li>
</ul>
<p>引导宾语从句的连词有三种。</p>
<p><strong>1）从属连词引导的宾语从句</strong></p>
<p><strong>that（无词义）、whether/if（是否）</strong>，只起连接主句与从句的作用，在<strong>从句中不充当句子成分</strong>。由
that 引导的宾语从句中，that 可省略。例如：</p>
<ul>
<li>I am not sure <strong>if/whether I can catch up with
you</strong>．我不确定是否能赶上你。</li>
<li>Our teacher said<strong>（ that） you are a good
student</strong>．我们老师说你是个好学生</li>
</ul>
<p><strong>2）连接代词引导宾语从句</strong></p>
<p><strong>who（whom, whose）, what, which</strong>
等。连接代词<strong>有词义</strong>，在从句中<strong>充当句子成分</strong>，可以作主语、宾语、表语或定语等。例如：</p>
<ul>
<li>Do you know <strong>who</strong> the man
is？你知道这人是<strong>谁</strong>吗？</li>
<li>I am guessing <strong>wha</strong>t he is looking
for．我猜测他正在找<strong>什么</strong>。</li>
</ul>
<p><strong>3）连接副词引导的宾语从句</strong></p>
<p><strong>where, when, how, why</strong>
等。连接副词有词义，在从句中作状语。</p>
<p>例如：Do you know <strong>how</strong> to get
there？你知道<strong>如何</strong>去那里吗？</p>
<p><strong>（2）分类</strong></p>
<ul>
<li><strong>1）动词的宾语从句</strong>：I <strong>think that</strong> he
loves me．我认为他爱我。</li>
<li><strong>2）介词的宾语从句</strong>：We are talking <strong>about
who</strong> should go there．我们在讨论谁应该去那里</li>
<li><strong>3）形容词的宾语从句</strong>：I am glad that you invite me
to come here．很高兴你邀请我来这儿。常接宾语从句的形容词有：glad,
please, sure, certain, happy, sorry, afraid,satisfied....</li>
</ul>
<h3 id="表语从句-名词性从句">5. 表语从句 (名词性从句)</h3>
<p><strong>（1）概念</strong></p>
<p>说明<strong>主语是什么或者怎么样</strong>的句子。表语从句<strong>放在连系动词之后，充当复合句中的表语</strong>。例如：</p>
<ul>
<li>My opinion is that her advice should be
practical．我的意见是她的建议是可行的。</li>
<li>The question is that we have no money．问题是我们没有钱。</li>
</ul>
<p><strong>（2）分类</strong></p>
<p><strong>1）连系动词引导的表语从句</strong></p>
<p>常见的连系动词有 be, look, seem, sound,appear 等。</p>
<p>例如：It seems we have made a
progress．看起来似乎我们已经有进步了。</p>
<p><strong>2）as, as if/though 引导的表语从句</strong></p>
<p>It looks as if he were sleeping．似乎他正在睡觉。</p>
<p><strong>3）because, why 引导的表语从句</strong></p>
<ul>
<li>That is because I practiced a lot. 那是我拼命练习的结果。（that's
because 强调原因）</li>
<li>That is why he came．这就是他来的原因。（that's why 强调结果）</li>
</ul>
<h3 id="同位语从句-名词性从句">6. 同位语从句 (名词性从句)</h3>
<p>用来对名词作<strong>进一步解释，说明名词的具体内容。</strong></p>
<p>一般跟在如下抽象名词后面：</p>
<ul>
<li>hope 希望、wish 愿望、answer 答案、fact 事实、belief 信仰</li>
<li>news 消息、idea 主意、观念、promise 承诺、information 信息</li>
<li>conclusion 结论、order 命令、suggestion 建议、problem 问题</li>
<li>thought 想法、word 言语.........</li>
</ul>
<p>同位语从句和所修饰的名词在<strong>内容上为同一关系，删除掉该内容也能构成完整的句子</strong>，只是句意就没有那么明确了。一般用
that, whether, what, which, who, when, where, why,how 等引导。</p>
<p>例如：</p>
<ul>
<li><strong>The news that her childwas safe</strong> eased her
mind．孩子平安的消息使她放心了。</li>
<li><strong>The idea that you will work by yourself</strong> is
wrong．你要独自工作的想法是错误的。</li>
</ul>
<h3 id="定语从句-形容词性从句十分常见">7. 定语从句
(形容词性从句)（十分常见）</h3>
<p>在句中起定语，修饰某一名词或代词，或修饰整个主句，对其进行进一步的解释说明。</p>
<p><strong>引导定语从句的连词有：</strong></p>
<ol type="1">
<li><strong>关系代词</strong>：which, that, who, whom, whose 等。</li>
<li><strong>关系副词</strong>：when, where, why 等。</li>
</ol>
<p><strong>关系词有 3 个作用：</strong></p>
<ol type="1">
<li>引导定语从句；</li>
<li>代替被修饰的名词或代词；</li>
<li>在定语从句中<strong>担当一个成分</strong>，如主语、宾语、定语和状语等。</li>
</ol>
<p>例如：</p>
<p>The girl is my sister. 那个女孩是我妹妹.</p>
<p>这个句子本身就是一个完整的句子，但是<strong>那个女孩指代不明确</strong>，可能是小明、小红，还可能是小王。加上一个定语从句修饰后，对这个女孩进一步解释说明，大家就知道这个女孩是指的谁了。</p>
<p>The girl <strong>who is singing in the classroom</strong> is my
sister. 在班里唱歌的那个女孩是我妹妹。</p>
<p>哪个女孩？正在班里唱歌的那个女孩，一下子大家就知道是谁了。在该句中
the girl 是主语，关系代词 who 引导定语从句，同时代替 the gir
在从句中<strong>担任主语，</strong> 对 the gir 进行解释说明。</p>
<h3 id="状语从句">8. 状语从句</h3>
<p>在复合句中作状语的从句，表示事件发生时候的状态，可以<strong>修饰谓语、非谓语动词、定语、状语或整个句子</strong>。从句位于句首或句中时通常用逗号与主句隔开，位于句尾时可以不用逗号隔开。</p>
<p>根据其意义和作用可分为：</p>
<ol type="1">
<li>时间状语从句</li>
<li>地点状语从句</li>
<li>条件状语从句</li>
<li>原因状语从句</li>
<li>目的状语从句</li>
<li>方式状语从句</li>
<li>结果状语从句</li>
<li>让步状语从句</li>
<li>比较状语从句</li>
</ol>
<p><strong>比如时间状语从句，由 when, while, as 等引导。</strong></p>
<p>He entered school <strong>when he was six</strong>．他 6 岁上学。</p>
<p>Our headmaster laughed <strong>as she
spoke</strong>．我们的校长边谈边笑。</p>
<h3 id="倒装句">9. 倒装句</h3>
<p>英语最基本结构是主、谓结构，倒装就是将这种固定的结构加以颠倒。倒装是一种语法手段，表示一定<strong>句子结构或强调某一句子成分</strong>的需要。</p>
<p>倒装分为两种：部分倒装和完全倒装。</p>
<p><strong>（1）部分倒装</strong></p>
<p>将谓语的一部分，如助动词或情态动词放至主语之前。若没有助动词或情态动词，则需添加助动词
do, does, did，并将其置于主语之前。</p>
<p>例如：Never have I watched such a moving
film．我从未看过如此感人的电影。</p>
<p><strong>（2）完全倒装</strong></p>
<p>将句子中的谓语动词全部置于主语之前。例如：</p>
<p>There came the bus．公交车来了。</p>
<p>Here is your pen．你的笔。</p>
<h3 id="强调句">10. 强调句</h3>
<p>能够被强调的句子成分通常为主语、宾语、状语等，基本结构为：<strong>It+be
+ 被强调部分 + that + 句子</strong>其余部分。例如：</p>
<p>We're going to know a new pupil at school tomorrow.</p>
<p>→<strong>It is we that（who）</strong> are going to know a new pupil
at school tomorrow.（强调主语）</p>
<p><strong>→It is a new pupil that</strong> we're going to know at
school tomorrow.（强调宾语）</p>
<p><strong>→It is at school that</strong> we're going to know a new
pupil tomorrow.（强调地点状语）</p>
<p><strong>→It is tomorrow that</strong> we're going to know a new pupil
at school.（强调时间状语）</p>
<h2 id="时态">时态</h2>
<p>动词的时态一共有十六种：</p>
<ul>
<li>一般现在时、一般过去时、一般将来时、一般过去将来时；</li>
<li>现在进行时、过去进行时、将来进行时、过去将来进行时；</li>
<li>现在完成时、过去完成时、将来完成时、过去将来完成时；</li>
<li>现在完成进行时、过去完成进行时、将来完成进行时、过去将来完成进行时。</li>
</ul>
<p>但最常用的主要有以下九种：</p>
<h3 id="一般现在时">1. 一般现在时</h3>
<p>表示<strong>人或事物的特点、经常或习惯性的动作、现在的状况以及客观规律和永恒真理</strong>等。句子中常有
often, always, from time to time 等时间状语。</p>
<ul>
<li>I usually go to school at 8 o'clock every
morning．我通常早上八点去学校。</li>
<li>Tibet is situated in the southwest of
China．西藏在中国的西南部。</li>
<li>Sometimes I do not know what to
do．有些时候我不知道该怎么办才好。</li>
</ul>
<h3 id="现在进行时">2. 现在进行时</h3>
<p>表示当下的一段时间内<strong>正在进行的某种活动</strong>，常用的时间状语有
now,at this time, these days 等。<strong>一般结构：</strong>系动词
am/is/are + V-ing。</p>
<ul>
<li>He <strong>'s not fighting</strong> alone at this
moment！此刻他不是一个人在战斗！</li>
<li><strong>Are</strong> you <strong>surfing</strong> the
Internet？你正在上网吗？</li>
</ul>
<h3 id="现在完成时">3. 现在完成时</h3>
<p>表示过去的<strong>动作已经完成，但对现在情况仍存在一定的影响</strong>；也可表示从过去一直持续到现在的动作或状态。常用的时间状语有
recently, lately,since... ,in the past few years,so far, these days
等。<strong>一般结构：have/has + done。</strong></p>
<ul>
<li>It is the most interesting book I <strong>have read</strong>
recently. 这是我最近看过的最有趣的一本书。</li>
<li>It <strong>hasn't rained</strong> for half a year in that place.
那个地方已经半年没有下雨了。</li>
</ul>
<h3 id="一般过去时">4. 一般过去时</h3>
<p>表示在过去某个确定时间里发生的动作，不强调对现在的影响，只说明过去。常用的时间状语有
yesterday, last week, at that time, once, during the war, before...</p>
<p><strong>一般结构：主语 + was/were 或者行为动词的过去式 +
宾语</strong></p>
<ul>
<li>He <strong>stayed</strong> outside last
night．他昨天晚上待在外面。</li>
<li>I <strong>didn't</strong> go to school
yesterday．我昨天没有去学校。</li>
</ul>
<h3 id="过去进行时">5. 过去进行时</h3>
<p>表示<strong>过去某个时间正在发生的动作</strong>。常用的时间状语有：at
this time yesterday, at that time, this morning, the whole
morning.....</p>
<p><strong>过去进行时的一般结构：was/were + doing</strong></p>
<ul>
<li>He <strong>was walking</strong> leisurely by the
lake．他正在湖边悠闲地散步。</li>
<li>She <strong>wasn't doing</strong> her homework when I got home.
当我回到家的时候她没有在做作业。</li>
</ul>
<h3 id="过去完成时">6. 过去完成时</h3>
<p>表示过去<strong>某个时间之前已经完成</strong>的动作，即
<strong>“过去的过去”</strong>。常用的时间状语有：before, until, when,
after, once, as soon as, by the end of last year...</p>
<p><strong>过去完成时的一般结构：had + done</strong></p>
<ul>
<li>When the police arrived, the thief <strong>had run</strong> away.
当警察赶到的时候，小偷已经跑了。</li>
<li>He said that he <strong>hadn't learned</strong> any English
before．他说他以前没有学过英语。</li>
</ul>
<h3 id="一般将来时">7. 一般将来时</h3>
<p>表示在<strong>将来某个时间会发生</strong>的动作或情况。常用的时间状语有：tomorrow,
next day, soon, in a few minutes, by...,the day after tomorrow...</p>
<p><strong>一般结构：am/is/are going to + do 或 will/shall +
do</strong></p>
<ul>
<li>Our school <strong>will host</strong> the sports meeting in
July．我们学校 7 月将举行运动会。</li>
<li>He <strong>isn't going to</strong> buy that
house．他不会买那套房子了。</li>
</ul>
<h3 id="将来进行时">8. 将来进行时</h3>
<p>表将来某个时间正在发生的动作。常用的时间状语有：soon, tomorrow, this
evening, on Sunday, by this time, in two days, tomorrow evening....</p>
<p><strong>一般结构：will/shall be + doing</strong></p>
<p>I'<strong>ll be doing</strong> my homework this time
tomorrow．明天这个时候我正在写作业。</p>
<p>Nancy <strong>will not be doing</strong> exercise tomorrow morning.
南希明天早上这会儿将不会在锻炼身体。</p>
<h3 id="将来完成时">9. 将来完成时</h3>
<p>表示在<strong>将来某一时间以前已经完成</strong>的动作。常用的时间状语为
by the time of; by the end of + 时间短语（将来）; by the time +
从句（将来）。</p>
<p><strong>一般结构：be going to/will/shall + have done</strong></p>
<ul>
<li>They <strong>will have been</strong> friends for 10 years by then.
到那个时候他们已经成为朋友 10 年了。</li>
<li>By the time you reach the station, the train <strong>will have
left.</strong> 你到车站的时候，火车将已经离开了。</li>
<li><strong>Will you have finished</strong> this experiment by the end
of this term? 到这个期末你们能完成这个实验吗？</li>
</ul>
<h2 id="英语语法的简单梳理">英语语法的简单梳理</h2>
<p><mark style="background: #018bffA6;">我</mark> ：I love you I
主语，love 谓语，you 宾语
<mark style="background: #be9affA6;">主谓宾</mark>
<mark style="background: #fa518dA6;">英语老师</mark> ：Why?
<mark style="background: #018bffA6;">我</mark> ：you are beautiful you
主语，are 系动词，beautiful 表语
<mark style="background: #be9affA6;">主系表</mark>
<mark style="background: #fa518dA6;">英语老师</mark> ：I agree，anything
else？ I 主语，agree，谓语
<mark style="background: #be9affA6;">主谓</mark>
<mark style="background: #018bffA6;">我</mark> ：you make me happy you
主语，make 谓语，me 宾语，happy 宾补，用来形容 me
<mark style="background: #be9affA6;">主谓宾补</mark>
<mark style="background: #018bffA6;">我</mark> ：and I bought you a rose
I 主语，bought 谓语，you 间接宾语，rose 直接宾语
<mark style="background: #be9affA6;">主谓宾宾</mark>
<mark style="background: #fa518dA6;">英语老师</mark> ：Oh my god，you
are the most clever boy that I have ever met I have ever met 修饰
boy，因为它是个句子，所以是
<mark style="background: #fefe00A6;">定语从句</mark> 。
<mark style="background: #fa518dA6;">英语老师</mark> ：But I don’t know
whether you will still love me in the future I 主语，know 谓语，whether
you will still love me in the future
是宾语，因为他是个句子，所以是<mark style="background: #fefe00A6;">宾语从句</mark>
<mark style="background: #018bffA6;">我</mark> ：I will be always loving
you until I die until I die 作为状语，修饰 I will be always loving you
这个动作，因为 I die
是个句子，所以这是个<mark style="background: #fefe00A6;">状语从句</mark>
<mark style="background: #fa518dA6;">英语老师</mark> ：That you love me
is not allowed， because I’m your teacher That you love me
是主语，因为是个完整的句子，所以是<mark style="background: #fefe00A6;">主语从句</mark>
<mark style="background: #018bffA6;">我</mark> ：The fact that you are
my teacher doesn’t affect our love at all the fact 和 that you are my
teacher 表述的是同一个事，you are my teacher 是个句子，修饰
fact，所以是<mark style="background: #fefe00A6;">同位语从句</mark>
<mark style="background: #fa518dA6;">英语老师</mark> ：The problem is
that I care about rumors The problem 是主语，is 系动词，I care about
rumours
是表语，因为它是个句子，所以是<mark style="background: #fefe00A6;">表语从句</mark>
<mark style="background: #018bffA6;">我</mark> ：Trust me, I’ll protect
you <mark style="background: #fa518dA6;">英语老师</mark>
：你他妈的又在课堂上睡觉，赶紧回答下这个问题，英语总共有哪些基本句式和几大从句
<mark style="background: #018bffA6;">我</mark>
：<strong>五大基本句式</strong>
<mark style="background: #be9affA6;">主谓宾，主谓，主系表，主谓宾宾，主谓宾补。</mark>
<strong>六大从句</strong>，<mark style="background: #fefe00A6;">定语从句，宾语从句，表语从句，主语从句，状语从句，同位语从句。</mark>
<mark style="background: #83d98fA6;">所有复杂句，都可以追溯到这五大基本句和六大从句。</mark>
<mark style="background: #fa518dA6;">英语老师</mark>
：算你回答的不错，再课堂上睡觉，头都给你打爆。 <img
src="/images/v2-00312c8b59e642e370f6bf2147a58988_r.jpg.png" />
<!--SR:!2025-04-17,358,252--></p>
<h2 id="英语语法主干">英语语法主干</h2>
<p>首先，大家要清楚学习语法的目的是什么。</p>
<p><strong>说白了是为了造句子，看懂句子，语法就是句子排列的规则。</strong></p>
<p>而为什么学英语的同学们总是挣扎在语法的苦海里，到底是苦海无边，还是因为大家根本没有真正认真去了解过语法的精髓，只是在无限重复以下错误做法？</p>
<p>看看下图你有没有中招：</p>
<p><img
src="/images/v2-100a9a8f60ba65b54e4a8ad2a123b004_r.jpg.png" /></p>
<p>而真正高效的学习语法的姿势就是，<strong>抓重点。</strong></p>
<p>我们不是语法专家，不需要面面俱到，把 have 的几十个短语都背下来；</p>
<p>况且，就算你全背下来，也很难全部学会用法。一句话，把语法当成字典背，你就输了。</p>
<h3 id="英语句子-主干-修饰成分">英语句子 = 主干 + 修饰成分</h3>
<p><strong>语法是有逻辑，有框架的。</strong></p>
<p><strong>英语语法的框架可以用一个公式来表达：</strong></p>
<p><strong>英语句子 = 主干 + 修饰成分</strong></p>
<p><strong>一.
主干就是英语中五大句型（简单句)，简单句就是只有一套主谓结构。</strong></p>
<p><img
src="/images/v2-00312c8b59e642e370f6bf2147a58988_r.jpg.png" /></p>
<p><strong>1. 主谓 (一个句子最不可或缺的两个部分）：You jump；I
jump.</strong></p>
<p><strong>2. 主谓宾（宾语是主语动作的对象)：I love him.</strong></p>
<p><strong>3. 主谓宾（人）宾（物）：please do me(人） a
favor（物）.</strong></p>
<p><strong>检验是否是双宾语句型的原则：两个宾语可以调换位置，增加相应介词
to/for please do a favor for me</strong></p>
<p><strong>4. 主谓宾补（补充说明宾语）：I found the book easy(the book
是 found 的对象，easy 是用来修饰 the book 的)</strong></p>
<p><strong>检验是否是宾补句型的原则：宾语和补语之间加一个系动词，可以构成语义通顺的句子
the book is easy</strong></p>
<p><strong>5. 主系表（说明主语的状态特点）：She is pretty.</strong></p>
<h3 id="动词构成了一个句子的骨架结构">动词构成了一个句子的骨架结构</h3>
<p>一定要记住，英语黄金思维法则第一条——
<strong>动词构成了一个句子的骨架结构！</strong></p>
<p><strong>因为动词决定了一个句子是否有宾语，有几个宾语以及其他句子成分。</strong></p>
<p>我为大家整理了几个例句，帮助大家更好地理解简单句几个句型：</p>
<p><img src="/images/v2-18efa839fd6d7eed7c0dc17a9638a585_r.jpg" /></p>
<p><strong>二.
任何高阶复杂的句子都是从这五种简单句型演化而来。</strong></p>
<p>五种基本句型，是解读英语句子和构造英语句子的基础。</p>
<p>英文中各种复杂句子均是由这五种基本句型扩大、组合、省略或倒装等各种形式变化而来。</p>
<p>简单句没有什么句序的调整，所以翻译起来基本没有什么难度。</p>
<p>但是如果都是这五大简单句型的句子，我们也就不会觉得语法难了，长难句有了方法也很简单，<strong>任何长难句都是这些简单句型的演变</strong>，无非是加入了一些修饰成分。</p>
<p>我将以下面的句子分析为例，带大家一起实践，在长难句中学习单词和语法。</p>
<p>分析长难句首先要找到主干，层层剖析。我最喜欢 APP
的这一点：<strong>挑出长难句中的关键结构来解析句子</strong>，打磨读者对于长难句的语感，让读者在分析长难句时越来越熟练。</p>
<p><strong>以下面句子为例</strong></p>
<p><img src="/images/v2-93f1a7180c6bd1561badd5c1d0623ba4_r.jpg" /></p>
<p>乍一看是不是很难？尤其是第二句话就占了三行。不要着急，我们逐层分析将它
“打败”。</p>
<p>首先解决单词。句中 “subjects” 的常用词义是
“主题”，但是在该句中显然不合理。那么我们就需要在句子中理解它的意思。由后面“30
million” 及下文的 “queen” 女王得知这里的 “subjects” 指人，是
“臣民，国民” 的意思。</p>
<p>单词基本了解后，接着解决语法。APP
上老师会将句子中的关键结构标出并由此剖析句子。第一句是由 “so...that”
引导的结果状语从句; 第二句的主干是“the Queen regretted giving...and
requested...”。</p>
<p><img src="/images/v2-c99bea7017c3ce2d831cf83a29e24977_r.jpg" /></p>
<p>以上例子简单地阐述了如何将单词、语法及句子三者有机地统一学习。在 APP
上，还有很多类似的分析。</p>
<p><img src="/images/v2-32580eb2a9a1a2587ad4389f41659fa3_r.jpg" /></p>
<p>英语学习不是一蹴而就的，它是一个漫长的过程。多读一些外刊，像《薄荷英语外刊》，《经济学人》等，对你的英语学习很有帮助。</p>
<p>再说回简单句，如果你在英文写作中全部使用简单句型，那就显示不了英语水平，很难在应试中取悦阅卷老师，也就是我们说的提升不了文章的逼格。</p>
<p>所以，我们就是要找出让我们看不懂句子的罪魁祸首——<strong>句子中的修饰成分。</strong></p>
<p>英语中的修饰成分，分<strong>定语</strong>和<strong>状语</strong>两种情况。
<img src="/images/v2-93b6e324889c2c9f61292ddce5bec323_r.jpg" />
两种修饰成分： - <strong>修饰名词叫定语</strong>——修饰限定名词。 -
<strong>修饰其他词的叫状语</strong>——把句子「壮大」。</p>
<p><strong>下面介绍第一种修饰成分，定语——修饰限定名词。</strong></p>
<p>定语的修饰，分下面四种情况： <img
src="/images/v2-083e062e089eea662efcb3c24661cdac_r.jpg.png" />
分别举例子： - <strong>形容词：</strong> She is a
<strong>lovely</strong> girl. 她是一位<strong>可爱的</strong>女孩。 -
<strong>定语从句：</strong> New York is the place <strong>that he would
like to visit</strong>. 纽约是<strong>他想去游览的</strong>地方。 -
<strong>介词短语</strong>：The girl <strong>in red</strong> is my
sister. <strong>穿红色衣服的</strong>那个女孩，是我的妹妹。 -
<strong>非谓语动词</strong>： - the girl <strong>standing</strong> there
== the girl <strong>who is standing</strong> there.
<strong>站在那的</strong>女孩。 - the building
<strong>completed</strong> yesterday == the building <strong>that was
completed</strong> yesterday. <strong>昨天竣工的</strong>楼房 - I have
something <strong>to say</strong> == I have something that I want
<strong>to say.</strong> 我还有些<strong>要说的</strong>话。</p>
<p>从上面非谓语例句可以看到，<strong>非谓语动词通常可以变成定语从句。</strong></p>
<p>接下来讲状语。</p>
<p><strong>状语——功能是扩大句子，把句子变复杂，即所谓的长难句。它有以下几种形式：</strong>
<img src="/images/v2-4709bd6aca90c749a4c0ea6a66e7655b_r.jpg.png" /> -
<strong>名词</strong>: come <strong>this way.</strong> -
<strong>副词</strong>: speak <strong>politely.</strong> -
<strong>介词短语</strong>：Can you say it <strong>in English？</strong>
- <strong>状语从句</strong>：I enjoyed myself <strong>when I visited my
friends in Shanghai last year.</strong> - <strong>非谓语动词： -
</strong>Having finished the homework,** I went home. - <strong>Given
more time</strong>, I could write the essay better. - <strong>To give
the teacher a good impression</strong>, I decided to help her.
<!--SR:!2024-10-14,238,252--></p>
<p>最后，再介绍英语黄金思维法则第二条——</p>
<p>如果要表达多个动作概念：有三种方式</p>
<p><strong>1. 使用连词</strong></p>
<p><strong>2. 使用非谓语动词</strong></p>
<p><strong>3. 使用从句</strong></p>
<p><img
src="/images/v2-851dc69eba1c9561293b388841730e48_r.jpg.png" /></p>
<p>我给大家举一个长难句错误分析，并带大家分析本句的句子结构大家就明白了——
例句：<strong>There are many lovers become strangers
finally</strong></p>
<p>此句是错误的，<mark style="background: #fbab4bA6;">因为一个句子只能有一个动词</mark>
，这里面有两个动词，所以另外一个动词就需要变一下形式。</p>
<p>那该如何改呢？根据上面的情况，可以有三种改法。 1.There are many
lovers <strong>and</strong> they become strangers finally(并列连词）
2.There are many lovers <strong>who become strangers
finall</strong>y(从句） 3.There are many lovers <strong>becoming
strangers finally</strong>(非谓语动词）
<!--SR:!2025-03-10,339,252--></p>
<p><strong>主干和修饰成分讲完了，该实战演练了，下面给出一句考研英语中的句子。</strong></p>
<p><strong>你会发现原来考研英语的句子也可以这么简单看懂</strong></p>
<p>例句：During the past generation, the American middle-class family
that once could count on hard work and fair play to keep itself
financially secure has been transformed by economic risk and new
realities.</p>
<p>大家直接按步骤就能看懂。</p>
<p><img src="/images/v2-a8b59de94ebdb3f5cb12995162c8f798_r.jpg" /></p>
<p>注：本文是英语语法干货中的干货，是语法最精髓的要义。</p>
<p>要读懂一个英文句子，希望大家能够做到，先拆分句子结构，剔除修饰成分，拎出本句的谓语动词和简单句骨骼。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>English</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>english</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化</title>
    <url>/087ba0e81b444ff6f1e4245cd078a22652c2be2b/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6881116198889586701">juejin.cn</a></p>
</blockquote>
<h1 id="一背景">一、背景</h1>
<p>随着项目逐渐扩展，业务功能越来越多，代码量越来越多，开发人员数量也越来越多。此过程中，你是否有过以下烦恼？</p>
<ol type="1">
<li>项目模块多且复杂，编译一次要 5 分钟甚至 10 分钟？太慢不能忍？</li>
<li>改了一行代码 或只调了一点 UI，就要 run 整个项目，再忍受一次 10
分钟？</li>
<li>合代码经常发生冲突？很烦？</li>
<li>被人偷偷改了自己模块的代码？很不爽？</li>
<li>做一个需求，发现还要去改动很多别人模块的代码？</li>
<li>别的模块已实现的类似功能，自己要用只能去复制一份代码再改改？</li>
<li>“这个不是我负责的，我不管”，代码责任范围不明确？</li>
<li>只做了一个模块的功能，但改动点很多，所以要完整回归测试？</li>
<li>做了个需求，但不知不觉导致其他模块出现 bug？</li>
</ol>
<p>如果有这些烦恼，说明你的项目需要进行 组件化 了。</p>
<blockquote>
<p>上半年，我所在项目进行了大重构，也完成了组件化改造。所以终于学习实践了这样一个
“高端知识”，也看了一些文章，于是就有了这篇文章来作为总结和分享~</p>
</blockquote>
<h1 id="二组件化的理解">二、组件化的理解</h1>
<h2 id="模块化">2.1 模块化</h2>
<p>在介绍组件化之前，先说说模块化。我们知道在 Android Studio
中，新建工程默认有一个 App module，然后还可以通过 File-&gt;New-&gt;New
Module 新建 module。那么这里的 “module” 实际和我们说的“模块”
基本是一个概念了。也就是说，原本一个 App 模块
承载了所有的功能，而<strong>模块化</strong>就是拆分成多个模块放在不同的
Module 里面，每个功能的代码都在自己所属的 module 中添加。</p>
<p>已京东为例，大致可以分为
“首页”、“分类”、“发现”、“购物车”、“我的”、“商品详情” 六个模块。 <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e97dbabe5bb344c8bb2da519ef665085~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
项目结构如下： <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70b129cda5424d07998f3450dfb70189~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" /></p>
<p>这是一般项目都会采用的结构。另外通常还会有一个通用基础模块
module_common，提供
BaseActivity/BaseFragment、图片加载、网络请求等基础能力，然后每个业务模块都会依赖这个基础模块。
那么业务模块之间有没有依赖呢？很显然是有的。例如
“首页”、“分类”、“发现”、“购物车”、“我的”，都是需要跳转到 “商品详情”
的，必然是依赖“商品详情” ；而“商品详情” 是需要能添加到 “购物车”
能力的；而 “首页” 点击搜索显然是 “分类”
中的搜索功能。所以这些<strong>模块之间存在复杂的依赖关系</strong>。</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/25f1bf43b7614ab68c3cab6921ba419d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
模块化
在各个业务功能比较独立的情况下是比较合理的，但多个模块中肯定会有<strong>页面跳转</strong>、<strong>数据传递</strong>、<strong>方法调用</strong>
等情况，所以必然存在以上这种依赖关系，即<strong>模块间有着高耦合度</strong>。
高耦合度 加上
代码量大，就极易出现上面提到的那些问题了，严重影响了团队的开发效率及质量。</p>
<p>为了
解决模块间的高耦合度问题，就要进行<strong>组件化</strong>了。</p>
<h2 id="组件化介绍-优势及架构">2.2 组件化介绍 — 优势及架构</h2>
<p><strong>组件化</strong>，<strong>去除模块间的耦合，使得每个业务模块可以独立当做
App 存在，对于其他模块没有直接的依赖关系。</strong>
此时业务模块就成为了<strong>业务组件</strong>。</p>
<p>而除了业务组件，还有抽离出来的业务基础组件，是提供给业务组件使用，但不是独立的业务，例如分享组件、广告组件；还有基础组件，即单独的基础功能，与业务无关，例如
图片加载、网络请求等。这些后面会详细说明。</p>
<p><strong>组件化带来的好处</strong> 就显而易见了：</p>
<ol type="1">
<li><strong>加快编译速度</strong>：每个业务功能都是一个单独的工程，可独立编译运行，拆分后代码量较少，编译自然变快。</li>
<li><strong>提高协作效率</strong>：解耦 使得组件之间
彼此互不打扰，组件内部代码相关性极高。
团队中每个人有自己的责任组件，不会影响其他组件；降低团队成员熟悉项目的成本，只需熟悉责任组件即可；对测试来说，只需重点测试改动的组件，而不是全盘回归测试。</li>
<li><strong>功能重用</strong>：组件
类似我们引用的第三方库，只需维护好每个组件，一建引用集成即可。业务组件可上可下，灵活多变；而基础组件，为新业务随时集成提供了基础，减少重复开发和维护工作量。
<!--SR:!2025-10-14,639,250--></li>
</ol>
<p>下图是我们<strong>期望的组件化架构</strong>：</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/353b85f9c4b8440d889deb9990265279~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" /></p>
<ol type="1">
<li>组件依赖关系是<mark style="background: #fefe00A6;">上层依赖下层</mark>
，修改频率是上层高于下层。</li>
<li><strong>基础组件</strong>是通用基础能力，修改频率极低，作为 SDK
可共公司所有项目集成使用。</li>
<li><strong>common
组件</strong>，作为支撑业务组件、业务基础组件的基础（BaseActivity/BaseFragment
等基础能力），同时依赖所有的基础组件，提供多数业务组件需要的基本功能，并且统一了基础组件的版本号。所以
业务组件、业务基础组件 所需的基础能力只需要依赖 common
组件即可获得。</li>
<li><strong>业务组件</strong>、<strong>业务基础组件</strong>，都依赖
common
组件。但<mark style="background: #fefe00A6;">业务组件之间不存在依赖关系</mark>
，业务基础组件之间不存在依赖关系。而 业务组件
是依赖所需的业务基础组件的，例如几乎所有业务组件都会依赖广告组件 来展示
Banner 广告、弹窗广告等。</li>
<li>最上层则是主工程，即所谓的
“<strong>壳工程</strong>”，主要是集成所有的业务组件、提供 Application
唯一实现、gradle、manifest 配置，整合成完备的 App。
<!--SR:!2024-12-18,466,250--></li>
</ol>
<h2 id="组件化开发的问题点">2.3 组件化开发的问题点</h2>
<p>我们了解了组件化的概念、优点及架构特点，那么要想实施组件化，首先要搞清楚
要解决问题点有哪些？</p>
<p>核心问题是
<strong>业务组件去耦合</strong>。那么存在哪些耦合的情况呢？前面有提到过，页面跳转、方法调用、事件通知。
而基础组件、业务基础组件，不存在耦合的问题，所以只需要抽离封装成库即可。
所以针对业务组件有以下问题：</p>
<ol type="1">
<li>业务组件，如何实现<strong>单独运行调试</strong>？</li>
<li>业务组件间 没有依赖，如何实现<strong>页面的跳转</strong>？</li>
<li>业务组件间 没有依赖，如何实现<strong>组件间通信</strong> /
方法调用？</li>
<li>业务组件间 没有依赖，如何<strong>获取 fragment 实例</strong>？</li>
<li>业务组件不能反向依赖壳工程，如何<strong>获取 Application
实例</strong>、如何获取 Application onCreate() 回调（用于任务初始化）？
<!--SR:!2025-12-17,682,250--></li>
</ol>
<p>下面就来看看如何解决这些问题。</p>
<h1 id="三组件独立调试">三、组件独立调试</h1>
<p>每个 <strong>业务组件</strong> 都是一个完整的整体，可以当做独立的
App，需要满足单独运行及调试的要求，这样可以提升编译速度提高效率。</p>
<p>如何做到组件独立调试呢？有两种方案：</p>
<ol type="1">
<li><strong>单工程方案</strong>，组件以 module
形式存在，动态配置组件的工程类型；</li>
<li><strong>多工程方案</strong>，业务组件以 library module
形式存在于<strong>独立的工程</strong>，且只有这一个 library
module。</li>
</ol>
<h2 id="单工程方案">3.1 单工程方案</h2>
<h3 id="动态配置组件工程类型">3.1.1 动态配置组件工程类型</h3>
<p>单工程模式，整个项目只有一个工程，它包含：App module 加上各个业务组件
module，就是所有的代码，这就是单工程模式。 如何做到组件单独调试呢？</p>
<p>我们知道，在 AndroidStudio 开发 Android 项目时，使用的是 Gradle
来构建，Android Gradle
中提供了三种插件，在开发中可以通过配置不同的插件来配置不同的 module
类型。</p>
<ul>
<li>Application 插件，id: com.android.application</li>
<li>Library 插件，id: com.android.library</li>
</ul>
<p>区别比较简单， App 插件来配置一个 Android App
工程，项目构建后输出一个 APK 安装包，Library 插件来配置一个 Android
Library 工程，构建后输出 ARR 包。</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18a93a4e6fbf4a519dd1a8a81efaa685~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
<img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c759eb19c5864a06b5f36a238e21218d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" /></p>
<p>显然我们的 App module 配置的就是 Application 插件，业务组件 module
配置的是 Library 插件。想要实现
业务组件的<strong>独立调试</strong>，这就需要把配置改为 Application
插件；而独立开发调试完成后，又需要变回 Library
插件进行<strong>集成调试</strong>。</p>
<p>如何让组件在这两种调试模式之间自动转换呢？ 手动修改组件的 gralde
文件，切换 Application 和 library
？如果项目只有两三个组件那么是可行的，但在大型项目中可能会有十几个业务组件，一个个手动修改显得费力笨拙。</p>
<p>我们知道用 AndroidStudio 创建一个 Android
项目后，会在根目录中生成一个 gradle.properties
文件。在这个文件定义的常量，可以被任何一个 build.gradle 读取。
所以我们可以在 gradle.properties 中定义一个常量值 isModule，true
为即独立调试；false 为集成调试。然后在业务组件的 build.gradle 中读取
isModule，设置成对应的插件即可。代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gradle.properties</span></span><br><span class="line">#组件独立调试开关, 每次更改值后要同步工程</span><br><span class="line">isModule = <span class="literal">false</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build.gradle</span></span><br><span class="line"><span class="comment">//注意gradle.properties中的数据类型都是String类型，使用其他数据类型需要自行转换</span></span><br><span class="line"><span class="keyword">if</span> (isModule.toBoolean())&#123;</span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="动态配置-applicationid-和-androidmanifest">3.1.2 动态配置
ApplicationId 和 AndroidManifest</h3>
<p>我们知道一个 App 是需要一个 ApplicationId 的
，而组件在独立调试时也是一个 App，所以也需要一个
ApplicationId，集成调试时组件是不需要 ApplicationId 的；另外一个 APP
也只有一个启动页，
而组件在独立调试时也需要一个启动页，在集成调试时就不需要了。所以
ApplicationId、AndroidManifest 也是需要 isModule 来进行配置的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build.gradle (module_cart)</span></span><br><span class="line">android &#123;</span><br><span class="line">...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">...</span><br><span class="line">        <span class="keyword">if</span> (isModule.toBoolean()) &#123;</span><br><span class="line">            <span class="comment">// 独立调试时添加 applicationId ，集成调试时移除</span></span><br><span class="line">            applicationId <span class="string">&quot;com.hfy.componentlearning.cart&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            <span class="comment">// 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件</span></span><br><span class="line">            <span class="keyword">if</span> (isModule.toBoolean()) &#123;</span><br><span class="line">                manifest.srcFile <span class="string">&#x27;src/main/moduleManifest/AndroidManifest.xml&#x27;</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                manifest.srcFile <span class="string">&#x27;src/main/AndroidManifest.xml&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>可见也是使用 isModule 分别设置
applicationId、AndroidManifest。其中独立调试的 AndroidManifest
是新建于目录 moduleManifest，使用 <strong>manifest.srcFile</strong>
即可指定两种调试模式的 AndroidManifest 文件路径。 <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07ce1eaea6d4493d840abd7b12ccd5aa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
moduleManifest 中新建的 manifest 文件 指定了 Application、启动
activity：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//moduleManifest/AndroidManifest.xml</span></span><br><span class="line">&lt;manifest <span class="attr">xmlns:</span>android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">&quot;com.hfy.module_cart&quot;</span> &gt;</span><br><span class="line">    &lt;application <span class="attr">android:</span></span><br><span class="line">        <span class="symbol">android:</span>allowBackup=<span class="string">&quot;true&quot;</span></span><br><span class="line">        <span class="symbol">android:</span>label=<span class="string">&quot;Cart&quot;</span></span><br><span class="line">        <span class="symbol">android:</span>theme=<span class="string">&quot;@style/Theme.AppCompat&quot;</span>&gt;</span><br><span class="line">        &lt;activity <span class="attr">android:</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action <span class="attr">android:</span> /&gt;</span><br><span class="line">                &lt;category <span class="attr">android:</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>原本自动生成的 manifest，未指定 Application、启动 activity：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;manifest xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    package=<span class="string">&quot;com.hfy.module_cart&quot;</span>&gt;</span><br><span class="line">    &lt;application&gt;</span><br><span class="line">        &lt;activity android:&gt;&lt;/activity&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>独立调试、集成调试 ，分别使用 “assembleDebug” 构建结果如下： <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70c02a5b7885407ab79310c71a636fce~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" /></p>
<h2 id="多工程方案">3.2 多工程方案</h2>
<h3 id="方案概述">3.2.1 方案概述</h3>
<p>多工程方案，业务组件以 library module
形式存在于<strong>独立的工程</strong>。独立工程
自然就可以独立调试了，不再需要进行上面那些配置了。</p>
<p>例如，购物车组件 就是 新建的<strong>工程 Cart</strong> 的 module_cart
模块，业务代码就写在 module_cart 中即可。app 模块是依赖 module_cart。app
模块只是一个组件的入口，或者是一些 demo 测试代码。 <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/039a9ee7028b4601824f81185f3d3814~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
那么当所有业务组件都拆分成独立组件时，原本的工程就变成一个只有 app
模块的<strong>壳工程</strong>了，壳工程就是用来集成所有业务组件的。</p>
<h3 id="maven-引用组件">3.2.1 maven 引用组件</h3>
<p>那么如何进行集成调试呢？<strong>使用 maven
引用组件</strong>：1、发布组件的 arr 包 到公司的 maven
仓库，2、然后在壳工程中就使用 implemention
依赖就可以了，和使用第三方库一毛一样。另外 arr 包 分为
快照版本（SNAPSHOT） 和
正（Realease）式版本，快照版本是开发阶段调试使用，正式版本是正式发版使用。具体如下：</p>
<p>首先，在 module_cart 模块中新建 maven_push.gradle 文件，和
build.gradle 同级目录</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven&#x27;</span></span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    deployerJars</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上传到Maven仓库的task</span></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            pom.version = <span class="string">&#x27;1.0.0&#x27;</span> <span class="comment">// 版本号</span></span><br><span class="line">            pom.artifactId = <span class="string">&#x27;cart&#x27;</span> <span class="comment">// 项目名称（通常为类库模块名称，也可以任意）</span></span><br><span class="line">            pom.groupId = <span class="string">&#x27;com.hfy.cart&#x27;</span> <span class="comment">// 唯一标识（通常为模块包名，也可以任意）</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//指定快照版本 maven仓库url， todo 请改为自己的maven服务器地址、账号密码</span></span><br><span class="line">            snapshotRepository(<span class="attr">url:</span> <span class="string">&#x27;http://xxx/maven-snapshots/&#x27;</span>) &#123;</span><br><span class="line">                authentication(<span class="attr">userName:</span> <span class="string">&#x27;***&#x27;</span>, <span class="attr">password:</span> <span class="string">&#x27;***&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//指定正式版本 maven仓库url， todo 请改为自己的maven服务器地址、账号密码</span></span><br><span class="line">            repository(<span class="attr">url:</span> <span class="string">&#x27;http://xxx/maven-releases/&#x27;</span>) &#123;</span><br><span class="line">                authentication(<span class="attr">userName:</span> <span class="string">&#x27;***&#x27;</span>, <span class="attr">password:</span> <span class="string">&#x27;***&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type显示指定任务类型或任务, 这里指定要执行Javadoc这个task,这个task在gradle中已经定义</span></span><br><span class="line">task androidJavadocs(<span class="attr">type:</span> Javadoc) &#123;</span><br><span class="line">    <span class="comment">// 设置源码所在的位置</span></span><br><span class="line">    source = android.sourceSets.main.java.sourceFiles</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成javadoc.jar</span></span><br><span class="line">task androidJavadocsJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    <span class="comment">// 指定文档名称</span></span><br><span class="line">    classifier = <span class="string">&#x27;javadoc&#x27;</span></span><br><span class="line">    from androidJavadocs.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包main目录下代码和资源的task，生成sources.jar</span></span><br><span class="line">task androidSourcesJar(<span class="attr">type:</span> Jar) &#123;</span><br><span class="line">    classifier = <span class="string">&#x27;sources&#x27;</span></span><br><span class="line">    from android.sourceSets.main.java.sourceFiles</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置需要上传到maven仓库的文件</span></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives androidSourcesJar</span><br><span class="line">    archives androidJavadocsJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>maven_push.gradle 主要就是发布组件 ARR 的配置：ARR
的版本号、名称、maven 仓地址账号等。</p>
<p>然后，再 build.gradle 中引用：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//build.gradle</span></span><br><span class="line">apply <span class="attr">from:</span> <span class="string">&#x27;maven_push.gradle&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>接着，点击 Sync 后，点击 Gradle 任务 uploadArchives，即可打包并发布
arr 到 maven 仓。</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a0bd01811db54377a60aa40c4ebf9c08~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
最后，壳工程要引用组件 ARR，需要先在壳工程的<strong>根目录</strong>下
build.gradle 中添加 maven 仓库地址：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        <span class="comment">//私有服务器仓库地址</span></span><br><span class="line">        maven &#123;</span><br><span class="line">            url <span class="string">&#x27;http://xxx&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>接着在 app 的 build.gradle 中添加依赖即可：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    implementation <span class="string">&#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class="line">    <span class="comment">//以及其他业务组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>可见，多工程方案 和我们平时使用第三方库是一样的，只是我们把组件 ARR
发布到公司的私有 maven 仓而已。</p>
<p>实际上，我个人比较<strong>建议 使用多工程方案</strong>的。</p>
<ul>
<li>单工程方案没法做到代码权限管控，也不能做到开发人员职责划分明确，每个开发人员都可以对任意的组件进行修改，显然还是会造成混乱。</li>
<li>多工程把每个组件都分割成单独的工程，代码权限可以明确管控。集成测试时，通过
maven 引用来集成即可。并且业务组件和业务基础组件也可以 和
基础组件一样，可以给公司其他项目复用。</li>
</ul>
<blockquote>
<p>注意，我在 Demo 里 使用的是多工程方案，并且是 <a
href="https://www.jianshu.com/p/b7552cf8983b">把 ARR 发到
<strong>JitPack 仓</strong></a>，这样是为了演示方便，和发到公司私有
maven 仓是一个意思。 1、需要根目录下 build.gradle 中添加 JitPack
仓地址：maven { url '<a href="https://jitpack.io">jitpack.io</a>' } ；
2、JitPack 是自定义的 Maven 仓库, 不过它的流程极度简化, 只需要输入
Github 项目地址就可发布项目。</p>
</blockquote>
<h1 id="四页面跳转">四、页面跳转</h1>
<h2 id="方案arouter">4.1 方案—ARouter</h2>
<p>前面说到，组件化的核心就是解耦，所以组件间是不能有依赖的，那么如何实现组件间的页面跳转呢？</p>
<p>例如 在首页模块 点击 购物车按钮 需要跳转到
购物车模块的购物车页面，两个模块之间没有依赖，也就说不能直接使用
显示启动 来打开购物车 Activity，那么隐式启动呢？
隐式启动是可以实现跳转的，但是隐式 Intent 需要通过 AndroidManifest
配置和管理，协作开发显得比较麻烦。这里我们采用业界通用的方式—<strong>路由</strong>。</p>
<p>比较著名的路由框架 有阿里的 <a
href="https://github.com/alibaba/ARouter">ARouter</a>、美团的 <a
href="https://github.com/meituan/WMRouter">WMRouter</a>，它们原理基本是一致的。</p>
<p>这里我们采用使用更广泛的 ARouter：“一个用于帮助 Android App
进行组件化改造的框架 —— 支持模块间的路由、通信、解耦”。</p>
<h2 id="arouter-实现路由跳转">4.2 ARouter 实现路由跳转</h2>
<p>前面提到，所有的业务组件都依赖了 Common 组件，所以我们在 Common
组件中使用关键字 <strong>“api”</strong> 添加的依赖，业务组件都能访问。
我们要使用 ARouter 进行界面跳转，需要 Common 组件添加 Arouter
的依赖（另外，其它组件共同依赖的库也要都放到 Common 中统一依赖）。</p>
<h3 id="引入依赖">4.2.1 引入依赖</h3>
<p>因为 ARouter 比较特殊，“arouter-compiler” 的 annotationProcessor 依赖
需要所有使用到 ARouter 的组件中都单独添加，不然无法在 apt
中生成索引文件，就无法跳转成功。并且在每个使用到 ARouter 的组件的
build.gradle 文件中，其 android{} 中的 javaCompileOptions
中也需要添加特定配置。然后壳工程需要依赖业务组件。如下所示：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//common组件的build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    api <span class="string">&#x27;com.alibaba:arouter-api:1.4.0&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class="line">    <span class="comment">//业务组件、业务基础组件 共同依赖的库（网络库、图片库等）都写在这里~</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务组件的build.gradle</span></span><br><span class="line">android &#123;</span><br><span class="line">    ...</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="attr">AROUTER_MODULE_NAME:</span> project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">...</span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span><span class="comment">//业务组件依赖common组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//壳工程app module的build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class="line"><span class="comment">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Cart:1.0.1&#x27;</span> <span class="comment">//依赖购物车组件</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:HomePage:1.0.2&#x27;</span> <span class="comment">//依赖首页组件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//壳工程内 也需要依赖Common组件，因为需要初始化ARouter</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="初始化">4.2.2 初始化</h3>
<p>依赖完了，先要对 ARouter 初始化，需要在 Application 内完成：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onCreate() &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这两行必须写在init之前，否则这些配置在init过程中将无效</span></span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</span><br><span class="line">            <span class="comment">// 打印日志</span></span><br><span class="line">            ARouter.openLog();</span><br><span class="line">            <span class="comment">// 开启调试模式(如果在InstantRun模式下运行，必须开启调试模式！线上版本需要关闭,否则有安全风险)</span></span><br><span class="line">            ARouter.openDebug();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 尽可能早，推荐在Application中初始化</span></span><br><span class="line">        ARouter.init(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="路由跳转">4.2.3 路由跳转</h3>
<p>好了，准备工作都完成了。并且知道
首页组件是没有依赖购物车组件的，下面就来实现前面提到的 <strong>首页组件
无依赖 跳转到 购物车组件页面</strong>。</p>
<p>而使用 ARouter
进行简单路由跳转，只有两步：添加注解路径、通过路径路由跳转。</p>
<ol type="1">
<li>在支持路由的页面上添加注解 <span class="citation"
data-cites="Route">@Route</span>(path =
"/xx/xx")，路径需要注意的是至少需要有两级，/xx/xx。这里就是购物车组件的
CartActivity：</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">&quot;/cart/cartActivity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_cart);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li>然后在首页组件的 HomeActivity
发起路由操作—点击按钮跳转到购物车，调用
ARouter.getInstance().build("/xx/xx").navigation() 即可：</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">&quot;/homepage/homeActivity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_home);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn_go_cart).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> onClick(View v) &#123;</span><br><span class="line">                <span class="comment">//通过路由跳转到 购物车组件的购物车页面（但没有依赖购物车组件）</span></span><br><span class="line">                ARouter.getInstance()</span><br><span class="line">                        .build(<span class="string">&quot;/cart/cartActivity&quot;</span>)</span><br><span class="line">                        .withString(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>)<span class="comment">//携带参数1</span></span><br><span class="line">                        .withString(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>)<span class="comment">//携带参数2</span></span><br><span class="line">                        .navigation();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>另外，注意在 HomeActivity
上添加了注解和路径，这是为了壳工程的启动页中直接打开首页。还看到路由跳转可以像
startActivity 一样待参数。</p>
<p>最后，壳工程的启动页中 通过路由打开首页（当然这里也可以用
startActivity()，毕竟壳工程依赖了首页组件）：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启动页</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SplashActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过路由直接打开home组件的HomeActivity，</span></span><br><span class="line">        ARouter.getInstance().build(<span class="string">&quot;/homepage/homeActivity&quot;</span>).navigation();</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>我们 run 壳工程 最后看下效果： <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/031dafc87f0740749ef87fe7d7c6f9fa~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
到这里，组件间页面跳转的问题也解决了。</p>
<h1 id="五组件间通信">五、组件间通信</h1>
<p>组件间没有依赖，又如何进行通信呢？</p>
<p>例如，首页需要展示购物车中商品的数量，而查询购物车中商品数量
这个能力是购物车组件内部的，这咋办呢？</p>
<h2 id="服务暴露组件">5.1 服务暴露组件</h2>
<p>平时开发中 我们常用 接口
进行解耦，对接口的实现不用关心，避免接口调用与业务逻辑实现紧密关联。这里组件间的解耦也是相同的思路，仅依赖和调用服务接口，不会依赖接口的实现。</p>
<p>可能你会有疑问了：既然首页组件可以访问购物车组件接口了，那就需要依赖购物车组件啊，这俩组件还是耦合了啊，那咋办啊？答案是<strong>组件拆分出可暴露服务</strong>。见下图：
<img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65b006aedc584e53bddc8e1f7bc28a39~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
左侧是组件间可以调用对方服务 但是有依赖耦合。右侧，发现多了
<strong>export_home</strong>、<strong>export_cart</strong>，这是对应拆分出来的专门用于提供服务的<strong>暴露组件</strong>。操作说明如下：</p>
<ul>
<li><strong>暴露组件 只存放
服务接口、服务接口相关的实体类</strong>、路由信息、便于服务调用的 util
等</li>
<li><strong>服务调用方 只依赖 服务提供方的 露组件</strong>，如
module_home 依赖 export_cart，而不依赖 module_cart</li>
<li><strong>组件 需要依赖 自己的暴露组件，并实现服务接口</strong>，如
module_cart 依赖 export_cart 并实现其中的服务接口</li>
<li><strong>接口的实现注入 依然是由 ARouter
完成</strong>，和页面跳转一样使用路由信息</li>
</ul>
<p>下面按照此方案 来实施 首页调用购物车服务
来获取商品数量，更好地说明和理解。</p>
<h2 id="实施">5.2 实施</h2>
<h3 id="新建-export_cart">5.2.1 新建 export_cart</h3>
<p>首先，在购物车工程中新建 module 即 export_cart，在其中新建接口类
ICartService 并定义获取购物车商品数量方法，注意接口必须继承
IProvider，是为了使用 ARouter 的实现注入：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车组件对外暴露的服务</span></span><br><span class="line"><span class="comment"> * 必须继承IProvider</span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICartService</span> <span class="keyword">extends</span> <span class="title class_">IProvider</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取购物车中商品数量</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CartInfo getProductCountInCart();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>CartInfo 是购物车信息，包含商品数量：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车信息</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartInfo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> productCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>接着，创建路由表信息，存放购物车组件对外提供跳转的页面、服务的路由地址：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车组件路由表</span></span><br><span class="line"><span class="comment"> * 即 购物车组件中 所有可以从外部跳转的页面 的路由信息</span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CartRouterTable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物车页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String PATH_PAGE_CART = <span class="string">&quot;/cart/cartActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 购物车服务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String PATH_SERVICE_CART = <span class="string">&quot;/cart/service&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>前面说页面跳转时是直接使用 路径字符串
进行路由跳转，这里是和服务路由都放在这里统一管理。</p>
<p>然后，为了外部组件使用方便新建 CartServiceUtil：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车组件服务工具类</span></span><br><span class="line"><span class="comment"> * 其他组件直接使用此类即可：页面跳转、获取服务。</span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到购物车页面</span></span><br><span class="line"><span class="comment">     * @param param1</span></span><br><span class="line"><span class="comment">     * @param param2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">void</span> navigateCartPage(String param1, String param2)&#123;</span><br><span class="line">        ARouter.getInstance()</span><br><span class="line">                .build(CartRouterTable.PATH_PAGE_CART)</span><br><span class="line">                .withString(<span class="string">&quot;key1&quot;</span>,param1)</span><br><span class="line">                .withString(<span class="string">&quot;key2&quot;</span>,param2)</span><br><span class="line">                .navigation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取服务</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ICartService getService()&#123;</span><br><span class="line">        <span class="comment">//return ARouter.getInstance().navigation(ICartService.class);//如果只有一个实现，这种方式也可以</span></span><br><span class="line">        <span class="keyword">return</span> (ICartService) ARouter.getInstance().build(CartRouterTable.PATH_SERVICE_CART).navigation();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取购物车中商品数量</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CartInfo getCartProductCount()&#123;</span><br><span class="line">        <span class="keyword">return</span> getService().getProductCountInCart();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>注意到，这里使用静态方法
分别提供了页面跳转、服务获取、服务具体方法获取。 其中服务获取 和页面跳转
同样是使用路由，并且服务接口实现类 也是需要添加 <span class="citation"
data-cites="Route">@Route</span> 注解指定路径的。</p>
<p>到这里，export_cart 就已经准备完毕，我们同样发布一个 export_cart 的
ARR（“com.github.hufeiyang.Cart:export_cart:xxx”）。</p>
<p>再来看看 module_cart 对服务接口的实现。</p>
<h3 id="module_cart-的实现">5.2.2 module_cart 的实现</h3>
<p>首先，module_cart 需要依赖 export_cart：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module_cart的Build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//依赖export_cart</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang.Cart:export_cart:1.0.5&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>点击 sync 后，接着 CartActivity 的 path 改为路由表提供：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = CartRouterTable.PATH_PAGE_CART)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_cart);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后，新建服务接口的实现类来实现 ICartService，<strong>添加 <span
class="citation" data-cites="Route">@Route</span> 注解指定
CartRouterTable 中定义的服务路由</strong>：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 购物车组件服务的实现</span></span><br><span class="line"><span class="comment"> * 需要@Route注解、指定CartRouterTable中定义的服务路由</span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Route</span>(path = CartRouterTable.PATH_SERVICE_CART)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ICartService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CartInfo getProductCountInCart() &#123;</span><br><span class="line">    	<span class="comment">//这里实际项目中 应该是 请求接口 或查询数据库</span></span><br><span class="line">        CartInfo cartInfo = <span class="keyword">new</span> CartInfo();</span><br><span class="line">        cartInfo.productCount = <span class="number">666</span>;</span><br><span class="line">        <span class="keyword">return</span> cartInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> init(Context context) &#123;</span><br><span class="line">        <span class="comment">//初始化工作，服务注入时会调用，可忽略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里的实现是直接实例化了 CartInfo，数量赋值 666。然后发布一个
ARR（“com.github.hufeiyang.Cart:module_cart:xxx”）。</p>
<h3 id="module_home-中的使用和调试">5.2.3 module_home
中的使用和调试</h3>
<p>module_home 需要依赖 export_cart：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//module_home的Build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.2.1&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意这里只依赖export_cart（module_cart由壳工程引入）</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang.Cart:export_cart:1.0.5&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在 HomeActivity 中新增 TextView，调用 CartServiceUtil
获取并展示购物车商品数量：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">&quot;/homepage/homeActivity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_home);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//跳转到购物车页面</span></span><br><span class="line">        findViewById(R.id.btn_go_cart).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">void</span> onClick(View v) &#123;</span><br><span class="line">                <span class="comment">//通过路由跳转到 购物车组件的购物车页面（但没有依赖购物车组件）</span></span><br><span class="line"><span class="comment">//                ARouter.getInstance()</span></span><br><span class="line"><span class="comment">//                        .build(&quot;/cart/cartActivity&quot;)</span></span><br><span class="line"><span class="comment">//                        .withString(&quot;key1&quot;,&quot;param1&quot;)//携带参数1</span></span><br><span class="line"><span class="comment">//                        .withString(&quot;key2&quot;,&quot;param2&quot;)//携带参数2</span></span><br><span class="line"><span class="comment">//                        .navigation();</span></span><br><span class="line"></span><br><span class="line">                CartServiceUtil.navigateCartPage(<span class="string">&quot;param1&quot;</span>, <span class="string">&quot;param1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用购物车组件服务：获取购物车商品数量</span></span><br><span class="line">        TextView tvCartProductCount = findViewById(R.id.tv_cart_product_count);</span><br><span class="line">        tvCartProductCount.setText(<span class="string">&quot;购物车商品数量:&quot;</span>+ CartServiceUtil.getCartProductCount().productCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>看到 使用 CartServiceUtil.getCartProductCount()
获取购物车信息并展示，跳转页面也改为了
CartServiceUtil.navigateCartPage() 方法。</p>
<p>到这里 home
组件的就可以<strong>独立调试</strong>了：页面跳转和服务调用，独立调试 ok
后 再集成到壳工程。 先让 HomePage 工程的 app 模块依赖 Common
组件、module_cart 以及<strong>本地的 module_home</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HomePage工程,app模块的Build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//引入本地Common组件、module_cart、module_home，在app module中独立调试使用</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.6&#x27;</span></span><br><span class="line"></span><br><span class="line">    implementation project(<span class="attr">path:</span> <span class="string">&#x27;:module_home&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后新建 MyApplication 初始化 ARouter、在 app 的 MainActivity 中使用
ARouter.getInstance().build("/homepage/homeActivity").navigation()
打开首页，这样就可以调试了。</p>
<p>调试 ok 后接着就是集成到壳工程。</p>
<h3 id="集成到壳工程">5.2.4 集成到壳工程</h3>
<p>壳工程中的操作和独立调试类似，区别是对首页组件引入的是 ARR：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class="line"><span class="comment">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.6&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:HomePage:1.0.4&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//壳工程内 也需要依赖Common组件，因为需要初始化ARouter</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后 run 壳工程来看下效果： <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4933030cf0d2488e8194e6bed0091a78~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
获取数量是 666、跳转页面成功。</p>
<blockquote>
<p>另外，除了 export_xxx 这种方式，还可以添加一个 ComponentBase
组件，这个组件被所有的 Common
组件依赖，在这个组件中分别添加定义了业务组件可以对外提供访问自身数据的抽象方法的
Service。相当于把各业务组件的 export 整合到 ComponentBase
中，这样就只添加了一个组件而已。但是这样就不好管理了，每个组件对外能力的变更都要改
ComponentBase。</p>
</blockquote>
<p>另外，除了组件间<strong>方法调用</strong>，使用 <strong>EventBus
在组件间传递信息</strong>也是 ok 的（注意 Event 实体类要定义在
export_xxx 中）。</p>
<p>好了，到这里组件间通信问题也解决了。</p>
<h1 id="六fragment-实例获取">六、fragment 实例获取</h1>
<p>上面介绍了 Activity 的跳转，我们也会经常使用
Fragment。例如常见的应用主页 HomeActivity 中包含了多个属于不同组件的
Fragment、或者有一个 Fragment 多个组件都需要用到。通常我们直接访问具体
Fragment 类来 new 一个 Fragment
实例，但这里组件间没有直接依赖，那咋办呢？答案依然是
<strong>ARouter</strong>。</p>
<p>先在 module_cart 中创建 CartFragment：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加注解@Route，指定路径</span></span><br><span class="line"><span class="meta">@Route</span>(path = CartRouterTable.PATH_FRAGMENT_CART)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">public</span> CartFragment() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View onCreateView(LayoutInflater inflater, ViewGroup container,</span><br><span class="line">                             Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="comment">//显示“cart_fragment&quot;</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_cart, container, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>同时是 <strong>fragment 添加注解 <span class="citation"
data-cites="Route">@Route</span>，指定路由路径</strong>，路由还是定义在
export_cart 的 CartRouterTable 中，所以 export_cart 需要先发一个
ARR，module_cart 来依赖，然后 module_cart 发布 ARR。</p>
<p>然后再 module_home 中依赖 export_cart，使用 ARouter 获取 Fragment
实例：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route</span>(path = <span class="string">&quot;/homepage/homeActivity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">void</span> onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_home);</span><br><span class="line">        ...</span><br><span class="line">        FragmentManager manager = getSupportFragmentManager();</span><br><span class="line">        FragmentTransaction transaction= manager.beginTransaction();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//使用ARouter获取Fragment实例 并添加</span></span><br><span class="line">        Fragment userFragment = (Fragment) ARouter.getInstance().build(CartRouterTable.PATH_FRAGMENT_CART).navigation();</span><br><span class="line">        transaction.add(R.id.fl_test_fragment, userFragment, <span class="string">&quot;tag&quot;</span>);</span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>可以先独立调试，然后集成到壳工程——依赖最新的 module_cart
、HomePage，结果如下：</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0668725494804c37a8bb0f32712cb1f5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" /></p>
<p>绿色部分就是引用自 cart 组件的 fragment。</p>
<h1 id="七application-生命周期分发">七、Application 生命周期分发</h1>
<p>我们通常会在 Application 的 onCreate
中做一些初始化任务，例如前面提到的 ARouter
初始化。而业务组件有时也需要获取应用的
Application，也要在应用启动时进行一些初始化任务。</p>
<p>你可能会说，直接在壳工程 Application 的 onCreate
操作就可以啊。但是这样做会带来问题：因为我们希望壳工程和业务组件
<strong>代码隔离</strong>（虽然有依赖），并且
我们希望组件内部的任务要在业务组件内部完成。</p>
<p>那么如何做到 各业务组件 <strong>无侵入地获取 Application
生命周期</strong> 呢？——答案是 使用 <a
href="https://github.com/hufeiyang/Android-AppLifecycleMgr"><strong>AppLifeCycle
插件</strong></a>，它专门用于在 Android 组件化开发中，Application
生命周期主动分发到组件。具体使用如下：</p>
<ol type="1">
<li><strong>common 组件依赖 applifecycle-api</strong> 首先，common
组件通过 api 添加 applifecycle-api 依赖 并发布 ARR：</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//common组件 build.gradle</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//AppLifecycle</span></span><br><span class="line">    api <span class="string">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-api:1.0.4&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li><strong>业务组件依赖 applifecycle-compiler、实现接口 + 注解</strong>
各业务组件都要 依赖最新 common 组件，并添加 applifecycle-compiler
的依赖：</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//业务组件 build.gradle</span></span><br><span class="line">...</span><br><span class="line">	<span class="comment">//这里Common:1.0.2内依赖了applifecycle-api</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.2&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-compiler:1.0.4&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>sync 后，新建类来实现接口
<strong>IApplicationLifecycleCallbacks</strong> 用于接收 Application
生命周期，且添加 <span class="citation"
data-cites="*">@*</span>*AppLifecycle** 注解。</p>
<p>例如 Cart 组件的实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件的AppLifecycle</span></span><br><span class="line"><span class="comment"> * 1. @AppLifecycle</span></span><br><span class="line"><span class="comment"> * 2. 实现IApplicationLifecycleCallbacks</span></span><br><span class="line"><span class="comment"> * @author hufeiyang</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AppLifecycle</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CartApplication</span> <span class="keyword">implements</span> <span class="title class_">IApplicationLifecycleCallbacks</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  Context context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 用于设置优先级，即多个组件onCreate方法调用的优先顺序</span></span><br><span class="line"><span class="comment">      * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> getPriority() &#123;</span><br><span class="line">        <span class="keyword">return</span> NORM_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onCreate(Context context) &#123;</span><br><span class="line">        <span class="comment">//可在此处做初始化任务，相当于Application的onCreate方法</span></span><br><span class="line">        <span class="variable language_">this</span>.context = context;</span><br><span class="line"></span><br><span class="line">        Log.i(<span class="string">&quot;CartApplication&quot;</span>, <span class="string">&quot;onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onTerminate() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onLowMemory() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onTrimMemory(<span class="type">int</span> level) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>实现的方法 有
onCreate、onTerminate、onLowMemory、onTrimMemory。最重要的就是
<strong>onCreate 方法了，相当于 Application 的 onCreate
方法，可在此处做初始化任务</strong>。 并且还可以通过 getPriority()
方法设置回调 多个组件 onCreate 方法调用的优先顺序，无特殊要求设置
NORM_PRIORITY 即可。</p>
<ol start="3" type="1">
<li><strong>壳工程引入 AppLifecycle 插件、触发回调</strong></li>
</ol>
<p>壳工程引入新的 common 组件、业务组件，以及 引入 AppLifecycle
插件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//壳工程根目录的 build.gradle</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">   </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//applifecycle插件仓也是jitpack</span></span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.6.1&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载插件applifecycle</span></span><br><span class="line">        classpath <span class="string">&#x27;com.github.hufeiyang.Android-AppLifecycleMgr:applifecycle-plugin:1.0.3&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//app module 的build.gradle</span></span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line"><span class="comment">//使用插件applifecycle</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.hm.plugin.lifecycle&#x27;</span></span><br><span class="line">...</span><br><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//这里没有使用私有maven仓，而是发到JitPack仓，一样的意思~</span></span><br><span class="line"><span class="comment">//    implementation &#x27;com.hfy.cart:cart:1.0.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang.Cart:module_cart:1.0.11&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:HomePage:1.0.5&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//壳工程内 也需要依赖Common组件，因为要 触发生命周期分发</span></span><br><span class="line">    implementation <span class="string">&#x27;com.github.hufeiyang:Common:1.0.2&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后需要在 Application 中触发生命周期的分发：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">//壳工程 MyApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onCreate() &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onCreate();</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        ApplicationLifecycleManager.init();</span><br><span class="line">        ApplicationLifecycleManager.onCreate(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onTerminate() &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onTerminate();</span><br><span class="line"></span><br><span class="line">        ApplicationLifecycleManager.onTerminate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onLowMemory() &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onLowMemory();</span><br><span class="line"></span><br><span class="line">        ApplicationLifecycleManager.onLowMemory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">void</span> onTrimMemory(<span class="type">int</span> level) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.onTrimMemory(level);</span><br><span class="line"></span><br><span class="line">        ApplicationLifecycleManager.onTrimMemory(level);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>首先在 inCreate 方法中调用 ApplicationLifecycleManager 的 init()
方法，用于收集组件内实现了 IApplicationLifecycleCallbacks 且添加了 <span
class="citation" data-cites="AppLifecycle">@AppLifecycle</span>
注解的类。然后在各生命周期方法内调用对应的 ApplicationLifecycleManager
的方法，来分发到所有组件。</p>
<p>这样 组件 就能接收到 Application 的生命周期了。
<strong>新增组件的话，只需要 实现 IApplicationLifecycleCallbacks
并添加了 <span class="citation"
data-cites="AppLifecycle">@AppLifecycle</span> 注解
即可，无需修改壳工程，也不用关心</strong>。</p>
<blockquote>
<p>AppLifecycle 插件是使用了 APT 技术、gradle 插件技术 + ASM
动态生成字节码，在编译阶段就已经完成了大部分工作，无性能问题、且使用方便。</p>
</blockquote>
<p>到这里，组件化开发的 5 个问题点 都已经解决了。
下面来看看针对老项目如何实现组件化改造。</p>
<h1 id="八-老项目组件化">八、 老项目组件化</h1>
<p>通常情况 我们去做组件化，都是为了改造
已有老项目。可能老项目内部的模块之间耦合严重，没有严格的业务模块划分，并且组件化改造是大工作量的事情，且要全量回归测试，总体来说，是需要全员参与、有较大难度的事情。</p>
<h2 id="方案">8.1 方案</h2>
<h3 id="组件划分">8.1.1 组件划分</h3>
<p>根据前面介绍的组件化架构图，组件分为
基础组件、业务基础组件、业务组件。</p>
<ul>
<li>基础组件，不用多说，就是基础功能，例如网络请求、日志框架、图片加载，这些与业务毫无关联，可用于公司所有项目，是底层最稳定的组件。这里就比较容易识别和拆分。</li>
<li>业务基础组件，主要是供业务组件依赖使用，例如
分享、支付组件，通常是一个完整的功能，是较为最稳定的组件。这部分通常也是比较容易识别的。</li>
<li>业务组件，完整的业务块，例如前面提到京东的
“首页”、“分类”、“发现”、“购物车”、“我的”。业务组件是日常需求开发的主战场。</li>
</ul>
<h3 id="组件拆分基础组件common-组件">8.1.2 组件拆分：基础组件、Common
组件</h3>
<p>基础组件最容易拆分，它依赖最少，功能单一纯粹。把基础组件依赖的东西，从老工程中抽取出来，放在单独的工程，做成单独的组件，发布
ARR 到公司 maven 仓。注意不能存在任何业务相关代码。</p>
<p>新建 Common 组件，使用 “api” 依赖 所有基础组件，这样依赖 Common
组件的组件 就能使用所有基础组件的功能了。接着，就是前面提到的
ARouter、AppLifeCycle、以及其他第三方库的依赖。</p>
<p>另外，Common 组件，还有一个重要部分：提供
BaseActivity、BaseFragment，这里 Base
需要完成基础能力的添加，例如页面进入、退出的埋点上报、统一页面标题样式、打开关闭
EventBus 等等。</p>
<h3 id="组件拆分业务基础组件业务组件">8.1.3
组件拆分：业务基础组件、业务组件</h3>
<p>业务基础组件 基本上只依赖
common，功能也是单一纯粹。同样是把依赖的东西抽取出来，放在单独的工程，做成单独的组件，发布
ARR 到公司 maven 仓。</p>
<p>业务组件，首先要识别组件的边界，可以按照页面入口和出口作为判断。然后，需要识别对
业务基础组件的依赖；以及 最重要的，对其他 业务组件的依赖。
可以先<strong>把代码抽离到单独的工程，然后依赖 common
组件、需要的业务基础组件，此时依然报错的地方就是 对其他
业务组件的依赖了。这时就可以给对应组件负责人提需求，在 export_xxx
中提供跳转和服务。 然后你只需要依赖 export_xxx 使用即可</strong>。</p>
<blockquote>
<p>老项目组件化改造需要循序渐进，除非有专门的时间。一般是需求开发和改造并行。要先完成一个组件，之后有了经验，后面其他业务组件陆续实施，这样就会比较简单。</p>
</blockquote>
<h2 id="常见问题">8.2 常见问题</h2>
<h3 id="组件中-butterknife-报错r2">8.2.1 组件中 butterknife 报错—R2</h3>
<p>在 Library 中，ButterKnife 注解中使用 R.id 会报错，例如 common 组件
module_common 中新建 Activity，并依赖 butterknife：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// Butterknife requires Java 8.</span></span><br><span class="line">  compileOptions &#123;</span><br><span class="line">    sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">&#x27;com.jakewharton:butterknife:10.2.3&#x27;</span></span><br><span class="line">  annotationProcessor <span class="string">&#x27;com.jakewharton:butterknife-compiler:10.2.3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>报错如下所示： <img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e4c077439a37439782ace302e8fac55f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
<strong>解决方法</strong>：需要添加 ButterKnife 插件，然后使用 R2：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">    google()</span><br><span class="line">  &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">&#x27;com.jakewharton:butterknife-gradle-plugin:10.2.3&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.android.library&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.jakewharton.butterknife&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后 ButterKnife 注解中使用 R2 就 ok 了:</p>
<p><img
src="http://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f1785dd899964e7eaf4926e6191eac9f~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp" />
到这里，Android 组件化的知识全部讲完。</p>
<h1 id="八总结">八、总结</h1>
<p>本文介绍了 组件化开发的背景、架构、优势、要解决的问题
以及详细解决方案，独立调试、页面跳转、组件通信等，最后介绍的老项目组件化方案。</p>
<p>其中涉及的最重要的工具是 ARouter，专门用于 Android
组件化解耦。ARouter 还有很多进阶用法，有机会我也针对 ARouter
写一篇全面分析。还有一个重要知识点 AppLifecycle 插件，它的原理涉及
APT、ASM 插入字节码、gradle 插件等技术，后续也会专门去分析这块知识。</p>
<p>Android 开发组件化，是在项目发展到一定规模后
必定要使用的技术，学习至完全掌握非常必要。</p>
<p>好了，今天就到这里，欢迎留言讨论~</p>
<p><strong>Demo 的 GitHub 地址：</strong></p>
<p><a href="https://github.com/hufeiyang/ComponentLearning">壳工程
ComponentLearning</a> <a
href="https://github.com/hufeiyang/Common">Common 组件</a> <a
href="https://github.com/hufeiyang/HomePage">HomePage 组件</a> <a
href="https://github.com/hufeiyang/Cart">Cart 组件</a> <a
href="https://github.com/hufeiyang/Android-AppLifecycleMgr">AppLifecycle
插件</a></p>
<p>参考与感谢：</p>
<p><a href="https://juejin.cn/post/6844903649102004231"
title="https://juejin.cn/post/6844903649102004231">《Android
组件化最佳实践》</a> <a
href="https://www.jianshu.com/p/d0f5cf304fa4">《Android
组件化开发实践系列》</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 第三方库 RxBinding 详解</title>
    <url>/1c2c8007ba1d6998692c4aaee9112ae8d0306be9/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://segmentfault.com/a/1190000021623958">segmentfault.com</a></p>
</blockquote>
<h2 id="rxbinding-简介">1. RxBinding 简介</h2>
<h3 id="rxbinding-介绍">1.1 RxBinding 介绍</h3>
<p>RxBinding 是 Jake Wharton 大神写的框架，它的 API 能够把 Android
平台和兼容包内的 <mark style="background: #fefe00A6;">UI 控件变为
Observable 对象</mark> ，这样就可以把 UI 控件的事件当作 RxJava
中的数据流来使用了。</p>
<p>比如 View 的 onClick 事件，使用 RxView.clicks(view）即可获取一个
Observable 对象，每当用户单击这个 View 的时候，该 Observable
对象就会发射一个事件， Observable 的观察者就可以通过 onNext
回调知道用户单击了 View。 <!--SR:!2027-02-16,949,250--></p>
<p>RxBinding GitHub 地址：<a
href="https://link.segmentfault.com/?enc=8jIQjRlzvoEQxF%2F0ZvcMdg%3D%3D.HoEAkY9QS3mVt5PyTA8jbt8bg00NN0ZcX2bEUxtePYxCCgO%2B4SH8vQEUucQ9L33Z">https://github.com/JakeWharto...</a></p>
<p><strong>RxBinding 的优点：</strong></p>
<ul>
<li>它是对 Android View
事件的扩展，它使得开发者可以<mark style="background: #fefe00A6;">对 View
事件使用 RxJava 的各种操作</mark></li>
<li>提供了<mark style="background: #fefe00A6;">与 RxJava
一致的回调</mark>
，使得代码简洁明了，尤其是页面上充斥着大量的监昕件，以及各种各样的匿名内部类</li>
<li><mark style="background: #fefe00A6;">几乎支持所有的常用控件及事件</mark>
（ v4 、v7、 design、recyclerview 等〉，另外每个库还有对应的 Kotlin
支持库。 <!--SR:!2024-09-26,418,250--></li>
</ul>
<p><strong>RxBinding 的下载：</strong></p>
<p>Platform bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>AndroidX library bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-core:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-appcompat:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-drawerlayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-leanback:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-recyclerview:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-slidingpanelayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-swiperefreshlayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-viewpager:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-viewpager2:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>Google 'material' library bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-material:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="响应式的-android-ui">1.2 响应式的 Android UI</h3>
<p>对 UI 事件（例如点击、滑动和文本输入）的响应几乎是 Android App
开发的基本部分，但是 Android SDK 对 UI 事件的处理有些复杂
，我们通常需要使用各种 listeners、handlers、<br />
TextWatchers 和其他组件等组合来响应 UI
事件。这些组件中的每一个都需要编写大量的样板代码，更为糟糕的是，实现这些不同组件的方式并不一致。例如，你可以通过实现
OnClickListener 来处理 OnClick 件。</p>
<p>这种一致性的缺乏可能会为代码增加很多复杂性。如果有些 UI
组件需要依赖于其他 UI 组件的输出，那么事情会变得更加复杂。</p>
<p>即使是一个简单的需求，例如要求用户将其名称输入到 EditText
，以便个性化地展示 TextView 的文本内容，而 TextView
需要嵌套回调，这是非常难以实现和维护的（有人将嵌套回调称为
“回调地狱”〉。</p>
<p>显然，处理 UI 事件的标准化方法有大大简化代码的空间，而 RxBinding
就是这样的库，它<br />
提供的绑定能够将任何 Android View 事件转换为 Observable。</p>
<p>一旦将 View 事件转换为 Observable ，它将发射数据流形式的 UI
事件，我们就可以订阅这个数据流，这与订阅其他 Observable
方式相同。接下来，看看如何实现 OnClick 事件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">RxView.clicks(button)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;RxBinding.click&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>这种方法不仅更简洁，而且是一种标准的实现方式，我们可以将其应用于整个
App 的所有 UI
事件。例如，<mark style="background: #fefe00A6;">捕获文本输入</mark>
与捕获点击事件的模式是一样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">EditText</span> <span class="variable">editText</span> <span class="operator">=</span> findViewById(R.id.edit_text);</span><br><span class="line">RxTextView.textChanges(editText)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;CharSequence&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(CharSequence charSequence)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;RxBinding.textChanges-&gt; &quot;</span> + charSequence);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-19,433,250-->
<h2 id="rxbinding-使用场景">2. RxBinding 使用场景</h2>
<p>RxBinding 可以应用于整个 App 的所有 UI 事件，下面列举一些 RxBinding
比较常见的使用场景。</p>
<h3 id="点击事件">2.1 点击事件</h3>
<p>按钮的点击事件是每 App 都会用到的场景，可以使用 RxView 的
clicks(<span class="citation" data-cites="NonNull">@NonNull</span> View
view）方法来绑定 UI 控件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(button1)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;演示点击事件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-07-19,811,250-->
<h3 id="长点击事件">2.2 长点击事件</h3>
<p>长点击事件也是一个比较常见的事件，可以使用 RxView 的 longClicks(<span
class="citation" data-cites="NonNull">@NonNull</span> View view)
方法来绑定 UI 控件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.longClicks(button2)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Unit&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Unit unit)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;演示长点击事件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-10,408,250-->
<h3 id="防止重复点击">2.3 防止重复点击</h3>
<p>在弱网络环境下，经常会遇到点击某个按钮没有响应的情况，此时心急的用户可能会多次点击按钮，从而造成事件的多次触发，显然这是我们不愿意看到的情况。可以利用
throttleFirst 操作符获取某段时间内的第一次点击事件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(button3)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(RxBindingAct.<span class="built_in">this</span>))</span><br><span class="line">        .throttleFirst(<span class="number">1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;防止重复点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-08,407,250-->
<h3 id="表单的验证-textchanges">2.4 表单的验证 (textChanges)</h3>
<p>App
内常见的表单验证是用户登录页面，我们需要对用户名、密码做一些校验。对于校验，有些是服务端做的，例如，用户名是否存在、用户名的密码是否正确等。而有些校验则需要客户端来做，例如，用户名是否输入、输入的用户名是否规范、密码是否输入等。</p>
<p>例如，手机号码不足 11 位时，会出现一个提示</p>
<p>如果密码没有输入，就点击 “登录” 按钮，则会弹出一个提示</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">EditText</span> <span class="variable">phone</span> <span class="operator">=</span> findViewById(R.id.phone);</span><br><span class="line"><span class="type">EditText</span> <span class="variable">password</span> <span class="operator">=</span> findViewById(R.id.password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observable&lt;CharSequence&gt; observablePhone = RxTextView.textChanges(phone);</span><br><span class="line">Observable&lt;CharSequence&gt; observablePassword = RxTextView.textChanges(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observable.combineLatest(observablePhone, observablePassword, <span class="keyword">new</span> <span class="title class_">BiFunction</span>&lt;CharSequence, CharSequence, ValidationResult&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ValidationResult <span class="title function_">apply</span><span class="params">(CharSequence charSequence1, CharSequence charSequence2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ValidationResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidationResult</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (charSequence1.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;手机号码不能为空&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charSequence1.length() != <span class="number">11</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;手机号码需要11位&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charSequence2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;密码不能为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;ValidationResult&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ValidationResult validationResult)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        result = validationResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">login</span> <span class="operator">=</span> findViewById(R.id.login);</span><br><span class="line"></span><br><span class="line">RxView.clicks(login)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(RxBindingAct.<span class="built_in">this</span>))</span><br><span class="line">        .subscribeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (result.flag) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;result-&gt; 登陆成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;result-&gt; &quot;</span> + result.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>combineLatest 的作用是将多个 Observable
发射的数据组装起来然后再发射出来。这里两个输入框只要内容发生变化，就会发送
Observable ，此时我们即可在 BiFunction
中利用验证方法去判断输入框中最新的内容，最终返 ValidationResult 对象。
<!--SR:!2026-12-06,896,250--></p>
<h3 id="获取验证码倒计时">2.5 获取验证码倒计时</h3>
<p>用户注册账号时，一般需要获取验证码来验证手机号码</p>
<p>在等待验证码的过程中， App 界面上通常会有一个倒计时，提示我们剩余 xx
秒可以重新获取验证码。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_COUNT_TIME</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">RxView.clicks(button5)</span><br><span class="line">        .throttleFirst(MAX_COUNT_TIME, TimeUnit.SECONDS)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Object, ObservableSource&lt;Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;Long&gt; <span class="title function_">apply</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 1. 更新发送按钮的状态，并初始化显现倒计时文字</span></span><br><span class="line">                Log.d(TAG, <span class="string">&quot;flatMap&quot;</span>);</span><br><span class="line">                <span class="comment">// 2. 返回 n 秒内的倒计时观察者对象</span></span><br><span class="line">                <span class="keyword">return</span> Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS, Schedulers.io()).take(MAX_COUNT_TIME);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 将递增数字替换成递减的倒计时数字</span></span><br><span class="line">        .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Long, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;map: &quot;</span> + aLong);</span><br><span class="line">                <span class="keyword">return</span> MAX_COUNT_TIME - (aLong - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 切换到 Android 的主线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (aLong == <span class="number">0</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;倒计时完成.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;倒计时剩余：&quot;</span> + aLong + <span class="string">&quot; 秒&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>Observable.interval(1, TimeUnit.SECONDS, Schedulers.io()) 表示每 1
秒发射一次数据。<br />
take(MAX_COUNT_TIME) 和后面的操作表示按钮在 60s
内不可再次被点击，并且在这段时间每隔一秒发射一次数据用于更新 UI。
<mark style="background: #83d98fA6;">在实际使用中，需要在 flatMap
里做获取短信验证码络请求。</mark> <!--SR:!2025-12-18,684,250--></p>
<h3 id="recyclerview-的支持">2.6 RecyclerView 的支持</h3>
<p>Rx.Bindin 提供了一个 rxbinding-recyclerview 的库，专门用于对
RecyclerView 支持。</p>
<p>其中， RxRecyclerView 提供了几个状态的观察：</p>
<ul>
<li><strong>scrollStateChanges</strong> 观察 RecyclerView
的滚动状态</li>
<li><strong>scrollEvents</strong> 观察 RecyclerView 的滚动事件</li>
<li><strong>childAttachStateChangeEvents</strong> 观察 child view 的
detached 状态， LayoutManager 或者 RecyclerView 认为不再需要一个 child
view 时，就会调用这个方法。 如果 child view
占用资源，则应当释放资源。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxRecyclerView</span><br><span class="line">        .scrollStateChanges(recyclerView)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer scrollState)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;scrollState: &quot;</span> + scrollState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>scrollState 表示 RecyclerView 中定义的滚动状态。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView 当前没有滚动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_IDLE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RecyclerView 正在被拖动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_DRAGGING</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手指已经离开屏幕，RecyclerView 正在做动画移动到最终位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_SETTLING</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure></div>
<p>除可以对 RecyclerView 状态的进行监听外，还能对点击事件进行监听</p>
<p>在 Adapter 的 onBindViewHolder() 中，可以使用 clicks() 来绑定
itemView 的点击事件。 <!--SR:!2025-01-15,495,250--></p>
<h3 id="对-ui-控件进行多次监听">2.7 对 UI 控件进行多次监听</h3>
<p>可以利用 RxJava 的操作符，例如 publish、share、replay ，实现对 UI
控件的多次监听</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">Observable</span> <span class="variable">observable</span> <span class="operator">=</span> RxView.clicks(button5)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(<span class="built_in">this</span>))</span><br><span class="line">        .share();</span><br><span class="line">        </span><br><span class="line">observable.subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;第一次监听&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;第二次监听&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"> 第一次监听</span><br><span class="line"> 第二次监听</span><br></pre></td></tr></table></figure></div>
<p>使用了 share 操作符，随后做了两次监监听，点击该控件打印两次
<!--SR:!2027-04-01,983,250--></p>
<h2 id="rxbinding-结合-rxpermissions-的使用">3. RxBinding 结合
RxPermissions 的使用</h2>
<h3 id="android-6.0-之后权限的改变">3.1 Android 6.0 之后权限的改变</h3>
<p><a
href="https://developer.android.google.cn/training/permissions/requesting">Request
app permissions  |  Android Developers</a> <a
href="https://developer.android.google.cn/guide/topics/permissions/overview#perm-groups">Permissions
on Android  |  Android Developers</a></p>
<p>Android 6.0
带来一个很大变化就是权限机制的改变，特别是运行时权限。</p>
<p>Android 6.0＋添加的运行时权限可分为两类：</p>
<ul>
<li>Normal Permissions:
这类权限不涉及个人隐私，不需要用户授权，比如手机震动、访问网络等。</li>
<li>Dangerous Permissions ：这类权限涉及个人隐私，需要用户授权，比如读取
SD 卡、访问通讯录等</li>
</ul>
<p>Dangerous Permissions 是有分组的。App 运行在 Android
6.0＋的手机之上，如果用户申请了某个 Dangerous Permissions
，而该用户己经授权了一个与他现在申请的是同一组的 Dangerous Permissions
，那么系统会自动授权，无须用户再次授权。<br />
<img src="https://segmentfault.com/img/remote/1460000021623961" /></p>
<p>对于 Android 6.0 以下的手机，用户在安装 App
的时候可以看到权限声明产生一个权限列表，用户只有在同意之后才能完成 App
的安装。如果用户想要使用某个
App，就需要忍受其一些不必要的权限（例如访问通讯录、短信的权限等）。从
Android 6.0 以后我们可以直接安装 App，当 App
需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然作为用户也可以在手机的设置界面里对每个
App 的权限进行查看，井对单个权限进行授权或者解除授权。</p>
<p>App 的 targetSdkVersion 是 23 及以上，并且 App 运行在 Android 6.0
及以上的设备时，需同时满足这两个条件才需要动态地请求危险权限。</p>
<h3 id="rxpermissions-的介绍">3.2 RxPermissions 的介绍</h3>
<p>在处理运行时权限时，通常需要两步：</p>
<ul>
<li>申请权限</li>
<li>处理权限回调，根据授权的情况进行回调</li>
</ul>
<p>RxPermissions 的出现可以简化这些步骤，它是基于 RxJava 开发的 Android
框架，帮助 Android 6.0 之后处理运行时权限的检测。</p>
<p>RxPermissions GitHub 地址：<a
href="https://github.com/tbruyelle/RxPermissions">GitHub -
tbruyelle/RxPermissions: Android runtime permissions powered by
RxJava2</a></p>
<p>RxPermissions 的下载：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.github.tbruyelle:rxpermissions:0.10.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="rxbinding-结合-rxpermissions">3.3 RxBinding 结合
RxPermissions</h3>
<p>在 RxPermissions 使用之前，需要先创建 RxPermissions 的实例。可以在
Activity 的 onCreate() 中进行创建，创建之后才能使用它。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">RxPermissions</span> <span class="variable">rxPermissions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RxPermissions</span>(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="在-rxbinding-中使用-rxpermissions">3.3.1 在 RxBinding 中使用
RxPermissions</h4>
<p>举一个拨打电话的例子，CALL_PHONE 在 Android 6.0 之后是一个 Dangerous
Permissions,
第一次使用时需要动态申请该权限，只有得到允许才能完成后面打电话的动作。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                rxPermissions.request(Manifest.permission.CALL_PHONE)</span><br><span class="line">                        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">&quot;授权成功.&quot;</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">&quot;授权失败&quot;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="rxbinding-结合-compose使用-rxpermissions">3.3.2 RxBinding 结合
compose，使用 RxPermissions</h4>
<p>RxBinding 可以结合 compose 操作符来使用 RxPermissions 。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .compose(rxPermissions.&lt;Unit&gt;ensure(Manifest.permission.CALL_PHONE))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;授权成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;授权失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="使用多个权限的用法">3.3.3 使用多个权限的用法</h4>
<p>RxPermissions 也支持申请多个权限，如同时申请 CAMERA 和
WRITE_EXTERNAL_STORAGE
的权限。单击按钮之后，需要授权两次，任何一次授权的失败都会导致
“打开相机失败”。只有两次申请权限都成功，才能 “打开相机成功”。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .compose(rxPermissions.ensure(Manifest.permission.CALL_PHONE,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;打开相机成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;打开相机失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="rxbinding-使用的注意点">4. RxBinding 使用的注意点</h2>
<p>trello 的 RxLifecycle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/trello/RxLifecycle</span></span><br></pre></td></tr></table></figure></div>
<p>知乎的 RxLifecycle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/zhihu/RxLifecycle</span></span><br></pre></td></tr></table></figure></div>
<p>其它的 RxLifecycle，这个与知乎的 RxLifecycle 的区别是，
LifecycleTransformer 实现了多个 Transformer 接口。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/fengzhizi715/SAF/tree/master/saf-rxlifecycle</span></span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxbinding</tag>
        <tag>rxjava</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 开发环境搭建</title>
    <url>/21d813e79c3ecd509e540067546ff82d51254b80/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://polarisxu.studygolang.com/posts/go/2022-dev-env/">polarisxu.studygolang.com</a></p>
</blockquote>
<p>实话说，这个时候还写这么基础的文章，感觉有点太
low？但几乎每天有人开始学习 Go，那自然绕不开搭建 Go
开发环境。很多人会通过搜索网上的教程来照着做，于是发现搞不定，原因是找到的教程大部分比较老旧，都是基于
GOPATH 的。隔段时间我就会看到有人问类似的问题，所以才决定写一篇 2022 版
Go 开发环境搭建。</p>
<blockquote>
<p>提醒一句，入门教程涉及到代码放入 src 目录下的，基本是基于 GOPATH
的教程，请忽略。</p>
</blockquote>
<h2 id="安装-go">1、安装 Go</h2>
<p>Go 语言支持多平台，因此需要根据你的平台来下载对应的 Go
安装包。本文以当前最新的版本（1.17.6）为例，以 Mac 系统为主讲解。</p>
<h3 id="goup安装">Goup安装</h3>
<p>具体可以参考：<a
href="../2dcb47ff2fb642a377d5e3d0977ac2d2433c94c3">goup- Elegant Go
installer</a></p>
<h3 id="常规安装">常规安装</h3>
<p>到 <a
href="https://studygolang.com/dl">https://studygolang.com/dl</a>
下载对应的安装包。</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install01.png" /></p>
<p>如果你是 M1 之后的 Mac，下载 go1.17.6.darwin-arm64.pkg，否则下载
go1.17.6.darwin-amd64.pkg。之后双击下载的安装包，按提示一步步操作即可。</p>
<blockquote>
<p>Windows 安装方式类似，一步步操作即可。</p>
<p>Linux 下，需要解压压缩包，然后将解压后的文件夹移动到 /usr/local/
目录下。</p>
</blockquote>
<p>默认情况下，经过以上操作，Go 安装在了 /usr/local/go
中，可以通过以下命令验证是否安装成功：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ /usr/local/go/bin/go version</span><br><span class="line">go version go1.17.6 darwin/amd64</span><br></pre></td></tr></table></figure></div>
<p>如果能正常输出版本信息，表示安装成功了。</p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>打开 <code>~/.bash_profile</code>，在文末加上以下内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure></div>
<p>然后执行：</p>
<p>这时在终端直接输入 go verison：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ source  ~/.bash_profile</span><br></pre></td></tr></table></figure></div>
<p>这就是 PATH 环境变量的作用。</p>
<blockquote>
<p>Linux 下配置和 Mac 类似。</p>
<p>Windows 下请查阅配置 PATH 环境变量的方法。</p>
</blockquote>
<h3 id="配置代理">配置代理</h3>
<p>不过，国内特殊的环境，我们还需要做一个<strong>重要的配置</strong>，那就是
GOPROXY：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-01-30,503,250-->
<p>这样可以方便的下载 golang.org/x 等包，所以，记得执行以上命令。</p>
<h3 id="项目结构">项目结构</h3>
<p>参考: <a
href="../3de1de79eef0fa4c3dcd191d3471dba7c6c9d782">golang-standards-project-layout</a></p>
<h2 id="使用-goland">2、使用 GoLand</h2>
<p>这是大名鼎鼎的 JB 专门为 Go 语言定制的
IDE，很强大，目前最新稳定版本是 2021.3。</p>
<p>到 <a
href="https://www.jetbrains.com/zh-cn/go/">https://www.jetbrains.com/zh-cn/go/</a>
下载 goland-2021.3.3（2022.1.28 日构建
213.6777.51），之后双击安装。打开后看到如下界面：（GoLand
是付费软件，不过可以试用 30 天）</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install02.png" /></p>
<p>可以看到，GoLand 支持远程开发了，在打开 /
创建项目之前，可以做一些基本的配置，包括学习
GoLand、安装插件等。如果你不喜欢英文界面，在 Plugins
中可以找到中文界面插件，安装即可（GoLand
现在已经支持本地化，在你打开一个项目时，右下角会有提示，要不要切换到本地语言环境，即不需要手动安装语言包）。（我比较建议直接使用英文版）</p>
<p>我们点击 New Project，创建一个新项目：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install03.png" /></p>
<p>一定要选择第一项，而不是 Go（GOPATH），Location
可以选择你喜欢的位置，GOROOT 就是你 Go 安装的位置，GoLand
会自动检测到。</p>
<p>创建后，会创建好项目，里面会有一个 go.mod 文件。这是 Go Module
的依赖管理文件。创建一个文件 main.go，输入以下内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>GoLand 默认会自动保存。然后点击运行按钮运行：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install04.png" /></p>
<p>还可以 Debug。</p>
<p>对于已经存在的项目，如果发现代码提示、依赖等有问题，打开 GoLand
的「Preferences」，确认有无勾选 Module：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install05.png" />
<!--SR:!2025-02-01,504,250--></p>
<p>GoLand 是开箱即用的，几乎不需要任何配置就可以愉快的玩耍。</p>
<h2 id="总结">3、总结</h2>
<p>总结一下，如下几个关键步骤：</p>
<ul>
<li>下载安装 Go</li>
<li>配置 PATH 环境变量</li>
<li>配置 GOPROXY</li>
<li>选择 GoLand 或 VSCode 或其他你喜欢的开发工具</li>
</ul>
<p>Enjoy Coding with Go！</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../2dcb47ff2fb642a377d5e3d0977ac2d2433c94c3">goup- Elegant
Go installer</a></li>
<li><a
href="../3de1de79eef0fa4c3dcd191d3471dba7c6c9d782">golang-standards-project-layout</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>开发环境</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>N 常用命令</title>
    <url>/1c49ae91b656f5d2caa0311bc6cfce64372e7f4e/</url>
    <content><![CDATA[<p><strong>n 常用命令有哪些?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 11.5.0 版本的 Node.js </span></span><br><span class="line">n 11.5.0                   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版 nodejs</span></span><br><span class="line">sudo n stable </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版 nodejs</span></span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个版本</span></span><br><span class="line">n <span class="built_in">rm</span> 10.13.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 n 切换版本</span></span><br><span class="line">n   --回车</span><br><span class="line">    node/10.13.0</span><br><span class="line">  ο node/10.15.3</span><br><span class="line">    node/11.0.0</span><br><span class="line">    node/11.8.0</span><br><span class="line">    node/12.2.0</span><br><span class="line"><span class="comment"># 按上下键选择版本后，回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nodejs 版本</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定的版本来执行脚本</span></span><br><span class="line">n use 11.5.0  test.js</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-07-15,1112,252-->
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>n</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 LaTeX 公式符号</title>
    <url>/27281cf24631a2d2dd870e4d71da1804018c315f/</url>
    <content><![CDATA[<h2 id="希腊字符">希腊字符</h2>
<p><span class="math inline">\(\theta\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\theta</span><br></pre></td></tr></table></figure></div>
<h2 id="空格">空格</h2>
<p><span class="math inline">\(1 \ 2\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \ 2</span><br></pre></td></tr></table></figure></div>
<h2 id="删除线">删除线</h2>
<p><del>abc</del></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sout &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>单斜线</p>
<p><span class="math inline">\(\cancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\cancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>反斜线 backslash</p>
<p><span class="math inline">\(\bcancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\bcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>双斜线</p>
<p><span class="math inline">\(\xcancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\xcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="乘号">乘号</h2>
<p><strong>Q: latex 点乘 表示?</strong></p>
<p><span class="math inline">\(1 \cdot 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \cdot 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-07-17,569,210--></p>
<p><strong>Q: latex 叉乘表示?</strong></p>
<p><span class="math inline">\(1 \times 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \times 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-10-26,682,230--></p>
<h2 id="除号-divide">除号 divide</h2>
<p><strong>Q: latex 除法表示?</strong></p>
<p><span class="math inline">\(1 \div 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \div 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-03-06,814,250--></p>
<h2 id="下标-上标">下标 上标</h2>
<p><strong>Q: latex 的下标表示?</strong></p>
<p><span class="math inline">\(v_a\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">v_a</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-04-14,643,270--></p>
<p><strong>Q: latex 的上标表示?</strong></p>
<p><span class="math inline">\(v^{21}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">v^&#123;21&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-07-20,1108,250--></p>
<h2 id="根号">根号</h2>
<p><span class="math inline">\(\sqrt{3}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;3&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\sqrt[3]{9}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt[3]&#123;9&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="不等于-not-equal-to">不等于 not equal to</h2>
<p><span class="math inline">\(1\neq 0\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$$\neq 0$$</span><br></pre></td></tr></table></figure></div>
<h2 id="分号-fraction">分号 fraction</h2>
<p><strong>Q: latex 的分数表示?</strong></p>
<p><span class="math inline">\(\frac{1}{2}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;2&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-18,460,246--></p>
<h2 id="省略号">省略号</h2>
<p>水平</p>
<p><span class="math inline">\(\cdots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\cdots</span><br></pre></td></tr></table></figure></div>
<p>垂直</p>
<p><span class="math inline">\(\vdots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\vdots</span><br></pre></td></tr></table></figure></div>
<p>倾斜</p>
<p><span class="math inline">\(\ddots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\ddots</span><br></pre></td></tr></table></figure></div>
<h2 id="约等于">约等于</h2>
<p><span class="math inline">\(\approx\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\approx</span><br></pre></td></tr></table></figure></div>
<h2 id="ln">ln</h2>
<p><span class="math inline">\(\ln n\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\ln n</span><br></pre></td></tr></table></figure></div>
<h2 id="大括号-brace">大括号 brace</h2>
<p><span class="math inline">\(\{ \}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\&#123; \&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\underbrace {123}_{456}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\underbrace &#123;123&#125;_&#123;456&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\overbrace {123}^{456}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overbrace &#123;123&#125;^&#123;456&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="矩阵">矩阵</h2>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p><span class="math display">\[
\begin{vmatrix}
  1 &amp; 2 &amp; 3 \\
  4 &amp; 5 &amp; 6
\end{vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 2 &amp; 3 \\</span><br><span class="line">  4 &amp; 5 &amp; 6</span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2027-06-03,1080,250--></p>
<p><span class="math display">\[
\begin{vmatrix}
  1 &amp; 4 \\
  2 &amp; 5 \\
  3 &amp; 6
\end{vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 4 \\</span><br><span class="line">  2 &amp; 5 \\</span><br><span class="line">  3 &amp; 6 </span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <strong>Q: latex 的矩阵表示?</strong></p>
<p>圆括号 (parentheses) <span class="math display">\[
\begin{pmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{pmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2026-08-31,913,250--></p>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p>中括号 (square brackets) <span class="math display">\[
\begin{bmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{bmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2027-03-23,981,230--></p>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p>双竖线 (double vertical lines) <span class="math display">\[
\begin{Vmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{Vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2026-02-08,792,250--></p>
<h2 id="向量">向量</h2>
<p><strong>Q: latex 的向量表示?</strong></p>
<p><strong>单个字符</strong> <span class="math display">\[\vec
a\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\vec a</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-04-22,650,270--></p>
<p><strong>Q: latex 的向量表示?</strong></p>
<p><strong>多个字符</strong> <span
class="math display">\[\overrightarrow{ab}\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overrightarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure></div> <span
class="math display">\[\overleftarrow{ab}\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overleftarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-11-02,688,230--></p>
<h2 id="单位向量">单位向量</h2>
<p><span class="math inline">\(\hat{ab}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\hat&#123;ab&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="求和运算">求和运算</h2>
<p><strong>Q: latex 的求和符号表示?</strong></p>
<p><span class="math inline">\(\sum_{i=1}^{n}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sum_&#123;i=1&#125;^&#123;n&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-08-20,473,250--></p>
<h2 id="对齐">对齐</h2>
<p><strong>Q: latex 的对齐符号?</strong></p>
<p><span class="math display">\[\begin{aligned}
a &amp;= b + c &amp; = d \\
   &amp;= d &amp; = e    
\end{aligned}\]</span> &amp; 表示对齐位置, 同一行可以有多个 &amp;
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c &amp; = d \\</span><br><span class="line">   &amp;= d &amp; = e    </span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-10-04,713,250--></p>
<h2 id="注释">注释</h2>
<p><span class="math inline">\(\text{注释}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\text&#123;注释&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="箭头">箭头</h2>
<h3 id="右箭头">右箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xrightarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下：</p>
<p><span class="math inline">\(a \rightarrow b\)</span> <span
class="math inline">\(a \Rightarrow b\)</span> <span
class="math inline">\(\xrightarrow[下方公式]{上方公式}\)</span>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ a \rightarrow b $</span><br><span class="line">$ a \Rightarrow b $</span><br><span class="line">$ \xrightarrow[下方公式]&#123;上方公式&#125; $</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-06-02,583,247--></p>
<h3 id="左箭头">左箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xleftarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下：</p>
<p><span class="math inline">\(a \leftarrow b\)</span> <span
class="math inline">\(a \Leftarrow b\)</span> <span
class="math inline">\(\xleftarrow[下方公式]{上方公式}\)</span><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ a \leftarrow b $</span><br><span class="line">$ a \Leftarrow b $</span><br><span class="line">$ \xleftarrow[下方公式]&#123;上方公式&#125; $  </span><br></pre></td></tr></table></figure></div> <!--SR:!2025-06-03,583,247--></p>
<h3 id="双向箭头">双向箭头</h3>
<p><span class="math inline">\(a \leftrightarrow b\)</span> <span
class="math inline">\(a \Leftrightarrow b\)</span> <span
class="math inline">\(a \xLeftrightarrow[下]{上} b\)</span>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$a \leftrightarrow b$</span><br><span class="line">$a \Leftrightarrow b$</span><br><span class="line">$a \xLeftrightarrow[下]&#123;上&#125; b$</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-09-06,642,247--></p>
<h2 id="加减-减加">加减 减加</h2>
<p><span class="math inline">\(\pm\)</span> <span
class="math inline">\(\mp\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ \pm $</span><br><span class="line">$ \mp $</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-06-12,589,247--></p>
<h2 id="希腊字母1">希腊字母<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a></h2>
<p><span class="math inline">\(\delta\)</span> <span
class="math inline">\(\Delta\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$\delta$</span><br><span class="line">$\Delta$</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-10-28,671,247--></p>
<h2 id="自动调整括号大小">自动调整括号大小</h2>
<p><span class="math display">\[\left \{  
  \frac{1}{2}
  \left [
    \left (
      a + b
    \right )
  \right ]
\right \}\]</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\left \&#123;  </span><br><span class="line">  \frac&#123;1&#125;&#123;2&#125;</span><br><span class="line">  \left [</span><br><span class="line">    \left (</span><br><span class="line">      a + b</span><br><span class="line">    \right )</span><br><span class="line">  \right ]</span><br><span class="line">\right \&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="参考">参考</h2>
<p><a
href="https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX">https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX</a></p>
<p><a
href="https://tex.stackexchange.com/questions/28608/how-to-add-a-matrix-to-a-latex-document">math
mode - How to add a matrix to a LaTeX document - TeX - LaTeX Stack
Exchange</a></p>
<p><a
href="https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols">List of
LaTeX mathematical symbols - OeisWiki</a></p>
<p><a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的
LaTeX 表示方法</a></p>
<p><a
href="https://blog.csdn.net/foreverdengwei/article/details/8189243">latex
中括号大小控制_Cloud-Datacenter-Renewable Energy-Big Data-Model-CSDN
博客</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://blog.csdn.net/xxzhangx/article/details/52778539">latex中的希腊字母_latex希腊字母-CSDN博客</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>效率</category>
        <category>Obsidian</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 开发环境</title>
    <url>/293983b1ba374aae7708250721a2366501937648/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<h3 id="win10">Win10</h3>
<p>安装 python 3.9 最新版本</p>
<p><a href="https://www.python.org/downloads/">python 下载地址</a></p>
<p>按默认选项安装后, 默认同时安装 pip 和配置环境变量</p>
<p><strong>升级 Pip</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">// 进入python安装目录</span><br><span class="line">.\python.exe  -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-10-31,1190,250-->
<h3 id="deepin">Deepin</h3>
<p>Deepin 自带 python2 和 python3</p>
<p><strong>Pip 安装</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></div> <strong>升级 Pip</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-02-23,1040,250-->
<h2 id="配置">配置</h2>
<h3 id="pip-常用命令">pip 常用命令</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">// pip 安装命令</span><br><span class="line">pip install packagename</span><br><span class="line">// pip 卸载包命令</span><br><span class="line">pip uninstall packagename</span><br><span class="line">// pip 检测更新命令</span><br><span class="line">pip list –outdated</span><br><span class="line">// pip 升级包命令</span><br><span class="line">pip install --upgrade packagename  </span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-14,523,250-->
<p><strong>pip 安装特定版本库?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install packagename==version</span></span><br><span class="line">pip install scikit-learn==0.18.0	<span class="comment"># 下载scikit-learn的0.18.0版本</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-07-31,810,230-->
<p><strong>pip 镜像源修改</strong>: <a
href="../6247ea938466aa6cf2f4294b94f808293af8326b">Python 修改 pip
源为国内镜像源</a></p>
<h3 id="vscode-python-配置">vscode python 配置</h3>
<p>设置以当前文件路径为工作路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;python.terminal.executeInFileDir&quot;</span>: true,</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-05-14,1088,250-->
<p>launch.json 设置调试时以当前文件路径为工作路径</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-07-24,910,250-->
<h2 id="使用">使用</h2>
<ul>
<li><a href="../c2aa9ce5b53296bdbf24749de59d8daea028f787">Python
项目管理最佳实践 Poetry</a></li>
<li><a href="../a1dcb051cc7db83c41b918e5988ea92fe6151d29">说说 Python
的命名规范</a></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../c2aa9ce5b53296bdbf24749de59d8daea028f787">Python
项目管理最佳实践 Poetry</a></li>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../a1dcb051cc7db83c41b918e5988ea92fe6151d29">说说 Python
的命名规范</a></li>
<li><a href="../6247ea938466aa6cf2f4294b94f808293af8326b">Python 修改
pip 源为国内镜像源</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>开发环境</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Fish 入门指南</title>
    <url>/295d228c58beb58d3e477c857137241300856830/</url>
    <content><![CDATA[<p>fish 是一个用户友好的命令行程序，全称 Friendly Interactive
Shell。</p>
<h3 id="fish-功能简介">fish 功能简介</h3>
<ol type="1">
<li>语法高亮：输入命令时，你会发现输入错误的命令显示为红色，正确的命令为淡紫色，参数提示为浅蓝色。</li>
<li>智能提示：在输入命令时会根据历史记录出现灰色提示，若该提示是你需要的可以按
ctrl+f 或→键即可自动补全命令。</li>
<li>快速路径：fish 增加了 2 条独有的快速切换路径的命令。<br />
　- dirh：可显示当前会话中进入过的路径记录。<br />
<img
src="https://img-blog.csdnimg.cn/20210318224053953.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3NjcwNjgz,size_16,color_FFFFFF,t_70#pic_center" /><br />
　- prevd：根据 dirh 的显示内容，输入 prevd 数字可快速切换路径。<br />
<img
src="https://img-blog.csdnimg.cn/20210318224357731.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3NjcwNjgz,size_16,color_FFFFFF,t_70#pic_center" /></li>
</ol>
<h3 id="安装-fish">安装 fish</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt install fish</span><br></pre></td></tr></table></figure></div>
<h3 id="确认-fish-安装路径">确认 fish 安装路径</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">which</span> fish</span><br></pre></td></tr></table></figure></div>
<p>通常路径是 / usr/bin/fish</p>
<h3 id="切换-fish-为默认-shell">切换 fish 为默认 shell</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ chsh -s /usr/bin/fish</span><br></pre></td></tr></table></figure></div>
<h3 id="编辑-etcpasswd">编辑 / etc/passwd</h3>
<p>找到需要使用 fish 的账户，例如：root 和个人账户</p>
<ul>
<li>root 账户，通常在第一行，内容如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/usr/bin/bash</span><br></pre></td></tr></table></figure></div> 修改内容为：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/usr/bin/fish</span><br></pre></td></tr></table></figure></div></li>
<li>个人账户，通常在倒数第一或第二行，内容如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">name:x:1000:1000:name,,,:/home/name:/usr/bin/bash</span><br></pre></td></tr></table></figure></div> 修改内容为：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">name:x:1000:1000:name,,,:/home/name:/usr/bin/fish</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="配置-fish">配置 fish</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">fish_config</span><br></pre></td></tr></table></figure></div>
<p>输入命令后会调用浏览器打开网页，内容如下图：<br />
<img
src="https://img-blog.csdnimg.cn/20210318222259978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3NjcwNjgz,size_16,color_FFFFFF,t_70#pic_center" /><br />
在这网页里面可以修改 fish 的颜色主题、提示符、功能等等选项。<br />
我推荐的颜色主题：Tomorrow Night，选中点右上角的 “Set Theme”
按钮(灰底浅灰色字，请仔细找)。<br />
我推荐的提示符：Informative Vcs，选中以后点右上角的 “Set Prompt”
按钮(灰底浅灰色字，请仔细找)。<br />
设置完以后，关闭网页，回到终端按回车，再按 ctrl+d
关闭终端，再重新打开终端即可生效。</p>
<h2 id="配置环境变量">配置环境变量</h2>
<p><a href="../e13093cac8ccdc5b3204f4d66ee9a7db927ce606">Fish 添加 PATH
路径(环境变量)</a></p>
<h3 id="关闭问候语">关闭问候语</h3>
<p>默认情况下打开终端会首行内容是问候语，如果不喜欢它可以使用下面的命令将其关闭：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -U fish_greeting</span><br></pre></td></tr></table></figure></div>
<h3 id="在-fish-中使用-conda">在 fish 中使用 conda</h3>
<p>若你发现在 fish 下面不能使用 conda 的 Python
环境，请按下面的步骤解决：</p>
<ol type="1">
<li><p>安装、配置好 conda。</p></li>
<li><p>安装、配置好 fish。</p></li>
<li><p>打开终端依次输入下面 2 条命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">conda init fish</span><br></pre></td></tr></table></figure></div></li>
<li><p>关闭终端，重新打开终端，注意看终端右侧会有 conda 的提示符
(base)，如下图。<br />
<img
src="https://img-blog.csdnimg.cn/20210318222346139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ3NjcwNjgz,size_16,color_FFFFFF,t_70#pic_center" /></p></li>
<li><p>此时说明 conda 已经在 fish 中生效，大功告成！</p></li>
</ol>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../044ea9df5bcf1e3efabeff79dd0bc4f3fc7ca80a">Fish
命令行工具</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../e13093cac8ccdc5b3204f4d66ee9a7db927ce606">Fish 添加 PATH
路径(环境变量)</a></li>
<li><a href="../044ea9df5bcf1e3efabeff79dd0bc4f3fc7ca80a">Fish
命令行工具</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化 Application</title>
    <url>/28dd4828541f68e92120f55d44762989d0ad2a57/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904031668666376">juejin.cn</a></p>
</blockquote>
<p><a href="../3b4772e22e0b7c32dd35ae81cbe686a7e7df3307">Android
组件化基础</a>中笼统的总结了一下组件化开发的一些基础性问题，本篇文章继续组件化的学习，主要分如下三个方面介绍组件化中的
Application 如下：</p>
<ol type="1">
<li>Application 的作用</li>
<li>合并 Application</li>
<li>动态配置 Application</li>
</ol>
<h2 id="application-的作用">Application 的作用</h2>
<p>Androuid 应用的启动的时候最先启动的就是 Application，每个 App
运行时仅创建唯一一个 Application，其生命周期就是 App
的生命周期，Application 中常用的回调方法如下：</p>
<ul>
<li><strong>onCreate</strong>：创建应用程序时回调，回调时机早于任何
Activity。</li>
<li>onTerminate：终止应用程序时调用，不能保证一定会被调用。</li>
<li><strong>onLowmemory</strong>：当后台应用程序终止，但前台用用程序内存还不够时调用该方法，可在该方法中释放一些不必要的资源来应对这种情况。</li>
<li><strong>onConfigurationChanged</strong>：配置发生变化时回调该方法，如手机屏幕旋转等</li>
<li><strong>onTrimMemory</strong>：通知应用的不同内存情况，下面内存级别说明来自</li>
</ul>
<p>其中附上一张来自 <strong>Carson_Ho</strong> 总结的 onTrimMemory
相关内存级别的说明如下：</p>
<p><img
src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ca6608854f0460db834516d90f20b00~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" />
<!--SR:!2027-02-10,948,250--></p>
<p>Application 作为整个 App 的一个单例对象，其作用如下：</p>
<ol type="1">
<li>作为 App
的入口，可用来<mark style="background: #fefe00A6;">初始化</mark>
基本配置，如第三方 SDK 的初始化。</li>
<li>可以在 Application
中定义供<mark style="background: #fefe00A6;">全局使用的变量</mark>
，不过当应用被强杀之后有可能出现空指针的问题，导致再次打开应用的时候崩溃，如果确定要这样使用，一定要处理好这种情况。</li>
<li>可以借助 Application <mark style="background: #fefe00A6;">管理
Activity 的生命周期</mark>
状态以及判断应用处于前台还是后台等，可根据内存优先级<mark style="background: #fefe00A6;">降低自身应用所占内存</mark>
，减小自身应用被系统强杀的可能性。 <!--SR:!2027-02-07,949,250--></li>
</ol>
<h2 id="合并-application">合并 Application</h2>
<p>AndroidManifest 是每个 Module 的声明配置文件，对应的在生成一个 App
的时候也应该对应一份 AndroidManifest 文件，那么在多个 Module
彼此依赖的情况下就需要合并子 Module 的 AndroidManifest 文件内容到主
Module 的 AndroidManifest 文件中，最终会在 build 目录下 生成最终的
AndroidManifest 文件，编译生成的 AndroidManifest
文件的具体路径参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">app\build\intermediates\manifests\full\debug\AndroidManifest.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在合并子 Modulen 的 AndroidManifest 文件时，编译器会补全 use-sdk
的信息以及一些未设置的属性，在合并后如 Activity 等组件中的 name
属性都以包名 + 文件名来指定。</p>
<p>其中在合并 AndroidManifest 文件要对 Application 进行合并，
Application 合并规则如下：</p>
<ol type="1">
<li>如果子 Module 中有自定义的 Application，主 Module 中没有自定义
Application，则会将子 Module 中的 Application 合并到最终的
AndroidManifest 文件中。</li>
<li>如果主 Module 有自定义 Application，子 Module 没有自定义的
Application，则会在最终合并的 AndroidManifest 文件中使用主 Module 中的
Application。</li>
<li>如果多个子 Module 中都自定义了
Application，在解决冲突后则会在最终合并的 AndroidManifest
文件中使用最后编译的 Module 中的 Application。</li>
<li>如果主 Module 中有自定义的 Application，子 Module 中也有自定义的
Application，此时会提示要在主 Module 的 AndroidManifest 文件中添加
tools:replace 属性，编译完成之后，合并后的 AndroidManifest
文件使用的是主 Module 中自定义的 Application。</li>
</ol>
<p>在合并过程中如果不添加 tools:replace 属性，则会提示添加 tools:android
属性，提示的错误信息如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">Manifest merger failed : Attribute application<span class="meta">@name</span> value=(com.manu.module_one.OneApplication) from [:moduel_one] AndroidManifest.xml:<span class="number">13</span>:<span class="number">9</span>-<span class="number">58</span></span><br><span class="line">	is also present at [:module_two] AndroidManifest.xml:<span class="number">13</span>:<span class="number">9</span>-<span class="number">58</span> value=(com.manu.module_two.TwoApplication).</span><br><span class="line">	Suggestion: add <span class="string">&#x27;tools:replace=&quot;android:name&quot;&#x27;</span> to &lt;application&gt; element at AndroidManifest.xml:<span class="number">6</span>:<span class="number">5</span>-<span class="number">21</span>:<span class="number">19</span> to override.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>比如这里就要在==子 Module 中==的 AndroidManifest 文件的 application
标签下添加 tools:replace 属性：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">tools:replace=<span class="string">&quot;android:name&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-01,468,250-->
<h2 id="动态配置-application">动态配置 Application</h2>
<p>除了 Application 需要合并之外，在组件化过程中各个 Module
的初始化也非常重要，可以使用反射完成各个 Module 的初始化，就是在主
Module 中反射获取子 Module
的初始化对象，然后调用其初始化方法，为了方便定义一个类管理子 Module
的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">moduleOneInit</span> <span class="operator">=</span> <span class="string">&quot;com.manu.module_one.ModuleOneAppInit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">moduleTwoInit</span> <span class="operator">=</span> <span class="string">&quot;com.manu.module_two.ModuleTwoAppInit&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] moduleInits = &#123;</span><br><span class="line">            moduleOneInit,</span><br><span class="line">            moduleTwoInit</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>创建一个初始化的基类接口如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高优先级被初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onInitHighPriority</span><span class="params">(Application application)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 低优先级被初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onInitLowPriority</span><span class="params">(Application application)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>为了使得每个子 Module 都能方便使用该初始化基类，应将其放在基类 Module
中，因为基类被所有的 Module 所依赖，然后在每个字 Module 中继承
BaseAppInit 实现自己 Module 的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleOneAppInit</span> <span class="keyword">implements</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> ModuleOneAppInit.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInitHighPriority</span><span class="params">(Application application)</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleOneAppInit---onInitHighPriority&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInitLowPriority</span><span class="params">(Application application)</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleOneAppInit---onInitLowPriority&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后在主 Module 的自定义的 Application 中通过反射创建各个子 Module
的初始化类对象，并调用其初始化方法，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高优先级初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initModuleHighPriority</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String init: ModuleConfig.moduleInits)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(init);</span><br><span class="line">            <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> (BaseAppInit) clazz.newInstance();</span><br><span class="line">            appInit.onInitHighPriority(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低优先级初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initModuleLowPriority</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String init: ModuleConfig.moduleInits)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(init);</span><br><span class="line">            <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> (BaseAppInit) clazz.newInstance();</span><br><span class="line">            appInit.onInitLowPriority(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>运行日志如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">ModuleOneAppInit---onInitHighPriority </span><br><span class="line">ModuleTwoAppInit---onInitHighPriority</span><br><span class="line">ModuleOneAppInit---onInitLowPriority</span><br><span class="line">ModuleTwoAppInit---onInitLowPriority</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>此外，还可以在基类 Module 中创建初始化基类和 BaseApplication，然后在
BaseApplication
中反射调用调用具体的初始化方法，归根结底还是使用反射，只是另一种实现方式，首先在基类
moddule 中创建 BaseAppInit 如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseAppInit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplication</span><span class="params">(<span class="meta">@NonNull</span> Application application)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnTerminate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLowMemory</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurationChanged</span><span class="params">(Configuration configuration)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在基类 Module 中创建 BaseApplication 如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span>&gt;&gt; classInitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;BaseAppInit&gt; appInitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        appInit();</span><br><span class="line">        initCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">appInit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerApplicationInit</span><span class="params">(Class&lt;? extends BaseAppInit&gt; classInit)</span> &#123;</span><br><span class="line">        classInitList.add(classInit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span>&gt; classInit : classInitList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> classInit.newInstance();</span><br><span class="line">                appInitList.add(appInit);</span><br><span class="line">                appInit.onCreate();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTerminate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onTerminate();</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.OnTerminate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLowMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onLowMemory();</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.onLowMemory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.configurationChanged(newConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后在子 Module 中实现具体的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleThreeAppInit</span> <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> ModuleThreeAppInit.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleThreeAppInit---onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后，在主 Module 中继承 BaseApplication 实现自定义的
Application，并注册每个字 Module 的初始化文件，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MApplication</span> <span class="keyword">extends</span> <span class="title class_">BaseApplication</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">appInit</span><span class="params">()</span> &#123;</span><br><span class="line">        registerApplicationInit(ModuleThreeAppInit.class);</span><br><span class="line">        registerApplicationInit(ModuleForeAppInit.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>运行日志如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">ModuleThreeAppInit---onCreate</span><br><span class="line">ModuleForeAppInit---onCreate</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>如上两种方式都是使用了反射，反射在解耦的同时，也在一定程度上降低了应用的性能，当然组件化的目的就是要让各个组件或各个
Module
之间尽可能的解耦，如果牺牲一点儿性能，能够获取解耦的最大化也是可以接受的。</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8abe118f14be78884377a6dfc907d6cf95994120">Android 组件化
ARouter</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../8abe118f14be78884377a6dfc907d6cf95994120">Android 组件化
ARouter</a></li>
<li><a href="../3b4772e22e0b7c32dd35ae81cbe686a7e7df3307">Android
组件化基础</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>goup- Elegant Go installer</title>
    <url>/2dcb47ff2fb642a377d5e3d0977ac2d2433c94c3/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/owenthereal/goup">github.com</a></p>
</blockquote>
<blockquote>
<p>Elegant Go installer. Contribute to owenthereal/goup development by
creating an account on GitHub.</p>
</blockquote>
<p><code>goup</code> (pronounced Go Up) is an elegant Go version
manager.</p>
<p>It is notorious that an operating system's package manager takes time
to update Go to the latest version, particularly on Linux distros. At
the time of this writing in October 2020, Fedora 32's Go version from <a
href="https://fedoraproject.org/wiki/DNF">dnf</a> is 1.14.9, while the
latest Go version is 1.15.2.</p>
<p>There are a bunch of solutions to install Go or manage Go versions
outside of a package manager: <a
href="https://github.com/golang/dl">golang/dl</a>, <a
href="https://github.com/golang/tools/tree/master/cmd/getgo">getgo</a>,
<a href="https://github.com/moovweb/gvm">gvm</a>, <a
href="https://github.com/syndbg/goenv">goenv</a>, to name a few. All of
them either do not work well on all Linux distros (I ran into errors
with <code>gvm</code> and <code>goenv</code> on Fedora) or do not
provide the developer experience that I like (<code>golang/dl</code>
requires a Go compiler to pre-exist; <code>getgo</code> can only install
the latest Go)</p>
<p>I want a Go version manager that:</p>
<ul>
<li>Has a minimum prerequisite to install, e.g., does not need a Go
compiler to pre-exist.</li>
<li>Is installed with a one-liner.</li>
<li>Runs well on all operating systems (at least runs well on *uix as a
start).</li>
<li>Installs any version of Go (any version from <a
href="https://golang.org/dl">golang.org/dl</a> or tip) and switches to
it.</li>
<li>Does not inject magic into your shell.</li>
<li>Is written in Go.</li>
</ul>
<p><code>goup</code> is an attempt to fulfill the above features and is
heavily inspired by <a href="https://rustup.rs/">Rustup</a>, <a
href="https://github.com/golang/dl">golang/dl</a> and <a
href="https://github.com/golang/tools/tree/master/cmd/getgo">getgo</a>.</p>
<h2 id="installation">Installation</h2>
<h3 id="one-liner">One-liner</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSf https://raw.githubusercontent.com/owenthereal/goup/master/install.sh | sh</span><br></pre></td></tr></table></figure></div>
<p>Install by skipping the confirmation prompt, e.g., for
automation:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSf https://raw.githubusercontent.com/owenthereal/goup/master/install.sh | sh -s -- &#x27;--skip-prompt&#x27;</span><br></pre></td></tr></table></figure></div>
<h3 id="manual">Manual</h3>
<p>If you want to install goup manually, there are the steps:</p>
<ul>
<li>Download the latest <code>goup</code> from <a
href="https://github.com/owenthereal/goup/releases">https://github.com/owenthereal/goup/releases</a></li>
<li>Drop the <code>goup</code> executable to your <code>PATH</code> and
make it executable:
<code>mv GOUP_BIN /usr/local/bin/goup &amp;&amp; chmod +x /usr/local/bin/goup</code>
(为了和nvm命名统一, windows平台可以改名为gvm.exe, 并加入环境变量)</li>
<li>Add the Go bin directory to your shell startup script:
<code>echo 'export PATH="$HOME/.go/current/bin:$PATH"' &gt;&gt; ~/.bashrc</code>
(windows平台需要把.go/current/bin路径加入环境变量)
<!--SR:!2025-01-02,479,250--></li>
</ul>
<h2 id="goup-quick-start">goup Quick Start</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ goup install</span><br><span class="line">Downloaded   0.0% (    32768 / 121149509 bytes) ...</span><br><span class="line">Downloaded  12.4% ( 15007632 / 121149509 bytes) ...</span><br><span class="line">Downloaded  30.2% ( 36634352 / 121149509 bytes) ...</span><br><span class="line">Downloaded  47.6% ( 57703440 / 121149509 bytes) ...</span><br><span class="line">Downloaded  65.9% ( 79855008 / 121149509 bytes) ...</span><br><span class="line">Downloaded  84.2% (101972672 / 121149509 bytes) ...</span><br><span class="line">Downloaded 100.0% (121149509 / 121149509 bytes)</span><br><span class="line">INFO[0030] Unpacking /home/owen/.go/go1.15.2/go1.15.2.linux-amd64.tar.gz ...</span><br><span class="line">INFO[0043] Success: go1.15.2 downloaded <span class="keyword">in</span> /home/owen/.go/go1.15.2</span><br><span class="line">INFO[0043] Default Go is <span class="built_in">set</span> to <span class="string">&#x27;go1.15.2&#x27;</span></span><br><span class="line">$ goup <span class="built_in">ls</span></span><br><span class="line">go1.15.2</span><br><span class="line">$ go <span class="built_in">env</span> GOROOT</span><br><span class="line">/home/owen/.go/go1.15.2</span><br><span class="line">$ go version</span><br><span class="line">go version go1.15.2 linux/amd64</span><br><span class="line"></span><br><span class="line">$ goup install tip</span><br><span class="line">Cloning into <span class="string">&#x27;/home/owen/.go/gotip&#x27;</span>...</span><br><span class="line">remote: Counting objects: 10041, <span class="keyword">done</span></span><br><span class="line">remote: Finding sources: 100% (10041/10041)</span><br><span class="line">remote: Total 10041 (delta 1347), reused 6538 (delta 1347)</span><br><span class="line">Receiving objects: 100% (10041/10041), 23.83 MiB | 3.16 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (1347/1347), <span class="keyword">done</span>.</span><br><span class="line">Updating files: 100% (9212/9212), <span class="keyword">done</span>.</span><br><span class="line">INFO[0078] Updating the go development tree...</span><br><span class="line">From https://go.googlesource.com/go</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">HEAD is now at 5d13781 cmd/cgo: add more architectures to size maps</span><br><span class="line">Building Go cmd/dist using /home/owen/.go/go1.15.2. (go1.15.2 linux/amd64)</span><br><span class="line">Building Go toolchain1 using /home/owen/.go/go1.15.2.</span><br><span class="line">Building Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.</span><br><span class="line">Building Go toolchain2 using go_bootstrap and Go toolchain1.</span><br><span class="line">Building Go toolchain3 using go_bootstrap and Go toolchain2.</span><br><span class="line">Building packages and commands <span class="keyword">for</span> linux/amd64.</span><br><span class="line">---</span><br><span class="line">Installed Go <span class="keyword">for</span> linux/amd64 <span class="keyword">in</span> /home/owen/.go/gotip</span><br><span class="line">Installed commands <span class="keyword">in</span> /home/owen/.go/gotip/bin</span><br><span class="line">INFO[0297] Default Go is <span class="built_in">set</span> to <span class="string">&#x27;gotip&#x27;</span></span><br><span class="line">$ goup <span class="built_in">ls</span></span><br><span class="line">gotip</span><br><span class="line">$ go <span class="built_in">env</span> GOROOT</span><br><span class="line">/home/owen/.go/gotip</span><br><span class="line">$ go version</span><br><span class="line">go version devel +5d13781 Thu Oct 8 00:28:09 2020 +0000 linux/amd64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ GOUP_GO_HOST=golang.google.cn goup install <span class="comment"># For Gophers in China, see https://github.com/owenthereal/goup/issues/2</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-01-31,706,250-->
<h2 id="how-it-works">How it works</h2>
<ul>
<li><code>install.sh</code> downloads the latest Goup release for your
platform and appends Goup's bin directory (<code>$HOME/.go/bin</code>)
&amp; Go's bin directory (<code>$HOME/.go/current/bin</code>) to your
PATH environment variable.</li>
<li><code>goup</code> switches to selected Go version.</li>
<li><code>goup set</code> switches to selected Go version.</li>
<li><code>goup install</code> downloads specified version of Go
to<code>$HOME/.go/VERSION</code> and symlinks it to
<code>$HOME/.go/current</code>.</li>
<li><code>goup ls</code> list all installed Go version located at
<code>$HOME/.go/current</code>.</li>
<li><code>goup remove</code> removes the specified Go version.</li>
<li><code>goup search</code> lists all available Go versions from <a
href="https://golang.org/dl">https://golang.org/dl</a>.</li>
<li><code>goup upgrade</code> upgrades goup.</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>开发环境</tag>
        <tag>go</tag>
        <tag>tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Gradle 自定义插件</title>
    <url>/2ef9d9fd766df6d917f975a5f719d2bde502d33a/</url>
    <content><![CDATA[<p>Android studio 通过 Gradle 来构建我们的项目。一般情况下，我们只是使用
Gradle
来配置一些功能，比如，<strong>buildTypes</strong>，<strong>productFlavors</strong>
等等。</p>
<p>实际上，Gradle
提供了很多有用的功能，可以让我们更加方便的管理我们的项目。</p>
<p>这篇，我们介绍下 Gradle 的 Plugin 插件。 <a
href="https://docs.gradle.org/current/userguide/custom_plugins.html#sec:packaging_a_plugin">官方介绍</a></p>
<p>Gradle 的 plugin 插件，有三种方式：</p>
<ul>
<li><p><strong>Build script</strong><br />
可以直接在构建脚本(build.gradle)中包含插件的源代码。这样做的好处是插件可以自动编译并包含在构建脚本的类路径中，而不需要您做任何事情。然而，插件只能在定义它的构建脚本之内可见，不能在其他脚本中复用插件。</p></li>
<li><p><strong>buildSrc project</strong> 创建一个 buildSrc
的项目，存放插件的代码</p></li>
<li><p><strong>Standalone project</strong>
创建一个单独的项目，生成并发布一个包含插件，任务等内容的 jar 包。
<!--SR:!2026-09-11,841,250--></p></li>
</ul>
<p>下面，我们就介绍下三种方式的插件分别怎么创建。</p>
<h2 id="一.-build-script">一. Build script</h2>
<p>Build script 可以直接在构建脚本(build.gradle)中包含插件的源代码。</p>
<p><mark style="background: #83d98fA6;">好处：</mark> -
直接在构建脚本(build.gradle)中包含插件的源代码。可以自动编译并包含在构建脚本的类路径中，无需执行其他操作。</p>
<p><mark style="background: #fa518dA6;">坏处：</mark><br />
-
插件只能在定义它的构建脚本(build.gradle)内可见，不能在其他构建脚本(build.gradle)中复用插件。</p>
<p><mark style="background: #fbab4bA6;">一般来说，不会使用这种方式。</mark></p>
<p><strong>使用步骤:</strong></p>
<h4 id="新建插件脚本-hello.gradle">1.1 新建插件脚本 hello.gradle</h4>
<p><img src="/images/Pasted%20image%2020221129153255.png" /></p>
<h4 id="编写插件代码">1.2 编写插件代码</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TestBuildScriptPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;  </span><br><span class="line">    <span class="type">void</span> apply(Project project) &#123;  </span><br><span class="line">        println(<span class="string">&quot;This is Build script gradle plugin.&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        project.task(<span class="string">&#x27;hello&#x27;</span>) &#123;  </span><br><span class="line">            doLast &#123;  </span><br><span class="line">                println <span class="string">&#x27;Hello from the TestBuildScriptPlugin&#x27;</span>  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">apply <span class="attr">plugin:</span> TestBuildScriptPlugin</span><br></pre></td></tr></table></figure></div>
<p>一般来说，我们写的插件，都需要实现 Plugin 接口。在 apply()
方法中，写我们要实现的插件代码。</p>
<h4 id="导入app-构建脚本">1.3 导入app 构建脚本</h4>
<p><img src="/images/Pasted%20image%2020221129152633.png" /></p>
<h4 id="使用">1.4 使用</h4>
<p>打开命令行, 输入 <code>gradlew app:hello</code> 调用插件中定义的
<code>hello</code> task <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ gradlew app:hello</span><br><span class="line">This is Build script gradle plugin.</span><br><span class="line">&gt; Task :app:hello</span><br><span class="line">Hello from the TestBuildScriptPlugin</span><br></pre></td></tr></table></figure></div> <!--SR:!2027-01-19,908,250--></p>
<h2 id="二.-buildsrc-project">二. buildSrc project</h2>
<p>这种方式，就是创建一个 buildSrc 的 module。</p>
<p>因为，Gradle 插件支持 groovy,java,kotlin
语言，所以，根据我们使用的语言，可以把插件代码分别放到下面几个不同的目录下<br />
- <code>rootProjectDir/buildSrc/src/main/groovy</code> -
<code>rootProjectDir/buildSrc/src/main/java</code><br />
- <code>rootProjectDir/buildSrc/src/main/kotlin</code></p>
<p>比如，我们想使用 java 语言来开发插件代码，我们就需要把我们的 java
代码放到 <code>rootProjectDir/buildSrc/src/main/java</code>
这个目录下。</p>
<p><mark style="background: #83d98fA6;">好处：</mark> -
在其他构建脚本(build.gradle)中可见</p>
<p><mark style="background: #fa518dA6;">坏处：</mark> -
只有当前的工程才能使用，其他的工程是不能复用</p>
<h4 id="创建-buildsrc-的-module">2.1 创建 buildSrc 的 module。</h4>
<p>创建一个名字为 <strong>buildSrc(名字必须是这个)</strong> 的 Android
module。</p>
<p>把里面的 build 文件夹，src 下面的 res 文件夹等等，全部删除。</p>
<p>目录结构如下</p>
<p><img src="https://img-blog.csdnimg.cn/2019122519301292.png" /></p>
<h4 id="通过-build.gradle-添加依赖">2.2 通过 build.gradle 添加依赖</h4>
<p>上面说了，我们可以使用 groovy,kotlin,java 等语言开发。一般来说，使用
Java 或 Kotlin 实现的插件是静态类型的，其性能将优于使用 Groovy
实现的相同插件。这里，我们就使用最熟悉的 Java 来开发。</p>
<p>给 buildSrc 的 module 的 build.gradle 中添加依赖</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// use java library</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// groovy library</span></span><br><span class="line"><span class="comment">//apply plugin: &#x27;groovy&#x27;</span></span><br><span class="line"></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven-publish&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies&#123;</span><br><span class="line">    <span class="comment">// gradle sdk</span></span><br><span class="line">    compile gradleApi()</span><br><span class="line">    <span class="comment">// groovy sdk</span></span><br><span class="line">    compile localGroovy()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories&#123;</span><br><span class="line">    google()</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="创建插件代码">2.3 创建插件代码</h4>
<p>创建插件，需要实现 Plugin 接口。</p>
<p>这里，我们打印一句话。毕竟，我们只是学习创建 Plugin 插件的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.liu.loadplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Plugin;</span><br><span class="line"><span class="keyword">import</span> org.gradle.api.Project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadPlugin</span> <span class="keyword">implements</span> <span class="title class_">Plugin</span>&lt;Project&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(Project project)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;this is my first buildSrc plugin !&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h4 id="创建-properties-文件关联插件">2.4 创建 properties
文件，关联插件</h4>
<p>我们创建好了插件，接下来，我们需要创建一个 properties
的文件，把插件的名字跟插件关联起来。</p>
<ol type="1">
<li>创建目录及文件 main/META-INF/gradle-plugins / 插件名. properties
文件。</li>
</ol>
<p>比如，我们现在的插件名字是 com.liu.loadplugin.properties。</p>
<p>如下图</p>
<p><img
src="https://img-blog.csdnimg.cn/20191225193041380.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<p>2，在 properties 文件添加代码，关联插件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">implementation-<span class="keyword">class</span>=com.liu.loadplugin.UploadPlugin</span><br></pre></td></tr></table></figure></div>
<p>这个就是关联插件类的全路径（点击是可以跳转到类里面的）。</p>
<p>到这里，我们整个的 buildSrc 类型的插件就开发完了。</p>
<h4 id="使用插件">2.5 使用插件</h4>
<p>在我们的 app 的 module 的 build.gradle 里面引用插件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.liu.loadplugin&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>这里的名字是跟我们的 properties 的名字对应的。</p>
<p>重新构建一次，会看到我们在插件里写的那句话，打印出来了。</p>
<p><img
src="https://img-blog.csdnimg.cn/20191225192951335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<p>到这里，我们 buildSrc
方式开发插件就完成了，下面看下独立的插件开发方式。</p>
<h2 id="三.-standalone-project">三. Standalone project</h2>
<p>独立的插件。跟 buildSrc 的创建方式类似。</p>
<p>但是，它相比与上面的那种，有几个明显的<mark style="background: #83d98fA6;">优点：</mark></p>
<ul>
<li>插件的 module 名字，可以随意</li>
<li>这种方式，就是将我们写的一些插件，任务等等打包到一起，生成 jar，通过
jar 包的方式使用。所以， <strong>在其他的项目也是可以使用的</strong>
。</li>
</ul>
<p>下面，我们来创建一个独立的插件。</p>
<h4 id="创建一个插件的-module">3.1 创建一个插件的 module</h4>
<p>跟上面的方式类似，我们创建一个叫 alone_plugin(名字随意) 的 Android
module。然后，删除 build,res 等无用的文件。</p>
<p>结构如下。</p>
<p><img
src="https://img-blog.csdnimg.cn/20191225193119523.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<h4 id="添加依赖-build.gradle">3.2 添加依赖 (build.gradle)</h4>
<p>因为，这种独立插件的方式，最后是通过生成 jar
包，来共其他工程使用。所以，这里跟上面的方式有点不同。<br />
先看下, build.gradle 文件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven&#x27;</span></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile gradleApi()</span><br><span class="line">    compile localGroovy()</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group = <span class="string">&#x27;com.liu.alone.plugin&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">archivesBaseName = <span class="string">&#x27;java-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//upload</span></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(<span class="attr">url:</span> uri(<span class="string">&#x27;../repo&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里比 buildSrc 的方式多了下面，这些配置 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">group = <span class="string">&#x27;com.liu.alone.plugin&#x27;</span></span><br><span class="line">version = <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line">archivesBaseName = <span class="string">&#x27;java-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//upload</span></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(<span class="attr">url:</span> uri(<span class="string">&#x27;../repo&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 我们是通过
maven 的方式，把插件发布到本地的 repo 目录下。我们知道 maven
发布需要指定：groupId,artifactId,version
的。通过，这三个声明，就可以找到我们的插件。</p>
<h4 id="创建插件跟-properties-文件">3.2 创建插件，跟 properties
文件</h4>
<p>这两个步骤跟我们上面的 buildSrc
创建插件的方式一样。这里就不写了。</p>
<p>目录结构如下图</p>
<p><img
src="https://img-blog.csdnimg.cn/20191225193131891.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<h4 id="maven-发布插件">3.3 maven 发布插件</h4>
<p>通过 Gradle 的 alone_plugin 下面的 uploadArchives 命令。<br />
把我们的插件，发布到当前工程的 repo 目录下。</p>
<p><img
src="https://img-blog.csdnimg.cn/2019122519314187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<p>通过上面的命令，就会把插件发布到项目下的 repo 目录里面。</p>
<p>如下图</p>
<p><img
src="https://img-blog.csdnimg.cn/20191225193143798.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /></p>
<h4 id="引入插件">3.4 引入插件</h4>
<p>在项目的 build.gradle 引入我们发布的插件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven&#123;</span><br><span class="line">            url uri(<span class="string">&#x27;./repo/&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">        classpath <span class="string">&#x27;com.liu.alone.plugin:java-plugin:1.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>通过添加 maven 仓库。在 dependenies
里面引用。就把我们的插件引入了。</p>
<h4 id="使用-1">3.5 使用</h4>
<p>在 app module 的 build.gradle 里面引用跟 buildSrc 的方式一样。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.liu.alone.plugin&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>最后，重新构建一次。就会打印出，我们插件里写的 Log。</p>
<p><img src="https://img-blog.csdnimg.cn/20191225193203562.png" /></p>
<p>到这里，自定义 Gradle 插件的三种方式，就介绍完了。</p>
<p>独立的插件，我们这里只是说了，在打包的项目使用。那么，其他的项目应该怎么使用呢。</p>
<h4 id="其他项目引用插件及优化">3.6 其他项目引用插件及优化</h4>
<h5 id="其他项目引入插件">3.6.1 其他项目引入插件</h5>
<p>独立的插件开发方式的最终目的是让其他的项目也可以使用。那么，别的项目，怎么来引用呢。</p>
<p>这里，我们让其他的项目通过 jar 包的方式来引用。</p>
<p>首先，在需要引入的项目，创建一个 libs 文件夹
(这个应该是可以随意起的)。</p>
<p><img src="https://img-blog.csdnimg.cn/20191227210932107.png" /></p>
<p>其次，修改项目的 build.grandle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        flatDir&#123;dir <span class="string">&#x27;libs&#x27;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">        classpath <span class="string">&#x27;com.liu.alone.plugin:java-plugin:1.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里，我们需要把 libs
添加进仓库中，然后，依赖这个插件。就完成了在其他项目的使用。</p>
<p>我们再来想一下。这种方式，是需要我们手动把 jar
包拷贝到需要的项目中的。有什么问题呢？ * 1. 手动拷贝，没有那么自动化 *
2. 如果这个插件升级了或者修改了呢，我们每次都拷贝？</p>
<p>既然是多个项目用的话。那么，我们可不可以上传到本地仓库。然后，其他的项目也使用本地仓库，来解决上面的问题呢。</p>
<h5 id="优化上传到本地仓库">3.6.2 优化，上传到本地仓库</h5>
<p>这里关于本地仓库配置本地 Maven 库，就不说明了。有兴趣可以看下这个：<a
href="https://blog.csdn.net/android_jianbo/article/details/103738151">Android
Studio： 通过 Artifactory 搭建本地仓库优化编译速度</a></p>
<p>我们首先创建一个本地仓库。让其依赖一个组 (android_depend)。<br />
因为我们不只是有一个插件，还有 jcenter 等等，都可以放到本地仓库中。</p>
<p><img
src="https://img-blog.csdnimg.cn/20191227211913567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VjbGl1amlhbmJv,size_16,color_FFFFFF,t_70" /><br />
然后，修改我们的独立插件 alone_plugin 的
build.gradle。使其发布到本地仓库的 android_plugin 中，而不再发布到项目的
repo 目录下。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;java-library&#x27;</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;maven&#x27;</span></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile gradleApi()</span><br><span class="line">    compile localGroovy()</span><br><span class="line">    compile <span class="string">&#x27;com.android.tools.build:gradle:3.3.1&#x27;</span></span><br><span class="line">    implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:3.8.1&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//group = &#x27;com.liu.alone.plugin&#x27;</span></span><br><span class="line"><span class="comment">//version = &#x27;1.0.0&#x27;</span></span><br><span class="line"><span class="comment">//archivesBaseName = &#x27;java-plugin&#x27;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//upload</span></span><br><span class="line"><span class="comment">//uploadArchives &#123;</span></span><br><span class="line"><span class="comment">//    repositories &#123;</span></span><br><span class="line"><span class="comment">//        mavenDeployer &#123;</span></span><br><span class="line"><span class="comment">//            repository(url: uri(&#x27;../repo&#x27;))</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//upload to local maven</span></span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            repository(<span class="attr">url:</span> <span class="string">&quot;http://localhost:8081/artifactory/android_plugin/&quot;</span>) &#123;</span><br><span class="line">                authentication(<span class="attr">userName:</span> <span class="string">&quot;admin&quot;</span>, <span class="attr">password:</span> <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            pom.version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line">            pom.artifactId = <span class="string">&quot;java-plugin&quot;</span></span><br><span class="line">            pom.groupId = <span class="string">&quot;com.liu.alone.plugin&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>这里，我们已经修改其发布的位置了。发布成功后，看下本地仓库。</p>
<p><img src="https://img-blog.csdnimg.cn/20191227212310443.png" /><br />
这里，我们看到已经发布上去了。</p>
<p>然后，我们修改要引用插件的项目下的 build.gradle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line"><span class="comment">//        google()</span></span><br><span class="line"><span class="comment">//        jcenter()</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">&#x27;http://localhost:8081/artifactory/android_depend/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        flatDir&#123;dir &#x27;libs&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.3.1&#x27;</span></span><br><span class="line"></span><br><span class="line">        classpath <span class="string">&#x27;com.liu.alone.plugin:java-plugin:1.0.0&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line"><span class="comment">//        google()</span></span><br><span class="line"><span class="comment">//        jcenter()</span></span><br><span class="line">        maven&#123;</span><br><span class="line">            url <span class="string">&#x27;http://localhost:8081/artifactory/android_depend/&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(<span class="attr">type:</span> Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>疑惑：这里需要，先发布到本地仓库；然后，把本地仓库添加到组中，这样，组中才有插件的包。<br />
先把本地仓库添加到组中，在发布插件到本地仓库，这样组中是没有这个插件包的
(本地仓库有)。</p>
</blockquote>
<p>这里，我们看到，我们已经不再使用 libs
目录了，而是换成了本地仓库。<br />
这样的话，如果，独立插件再发布修改或者升级的话，我们也不需要手动拷贝 jar
包了。直接修改版本就可以了。</p>
<p>到这里，Gradle 的插件开发，就全部介绍完了。</p>
<p>自定义插件非常实用，我们完全可以通过自定义插件来一键实现打包，加固，上传，钉钉通知等功能。</p>
<p><strong>参考:</strong></p>
<ul>
<li><a
href="https://blog.csdn.net/android_jianbo/article/details/103704459">blog.csdn.net</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>主题颜色配置</title>
    <url>/2f541a5b90f26c46fb796140e663c803782106b1/</url>
    <content><![CDATA[<h2 id="vs主题颜色配置">VS主题颜色配置</h2>
<h3 id="plugin">Plugin</h3>
<p>Enhanced-Syntax-Highlighting</p>
<h3 id="color-code">Color Code</h3>
<table>
<thead>
<tr class="header">
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>F5DEB3</td>
<td>F7F7F0</td>
<td>65D9EF</td>
<td>2DE2A6</td>
<td>A0DA2D</td>
<td>AE81FF</td>
</tr>
<tr class="even">
<td>245,222,179</td>
<td>247,247,240</td>
<td>101,217,239</td>
<td>45,226,166</td>
<td>160,218,45</td>
<td>174,129,255</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>7</th>
<th>8</th>
<th>9</th>
<th>10</th>
<th>11</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>262620</td>
<td>F92671</td>
<td>80807B</td>
<td>E7DA73</td>
<td>FA961E</td>
</tr>
<tr class="even">
<td>38,39,33</td>
<td>249,38,113</td>
<td>128,128,123</td>
<td>231,218,115</td>
<td>250,150,30</td>
</tr>
</tbody>
</table>
<p><img src="/images/image-20210821151740194.png" /></p>
<h3 id="demo">Demo</h3>
<p><img src="/images/image-20210821151459705.png" /></p>
<h3 id="download">Download</h3>
<p><a
href="/download/visual_studio.vssettings">visual_studio.vssettings</a></p>
<h2 id="阅读笔记高亮">阅读笔记高亮</h2>
<p><strong>快捷键:</strong>
<code>alt +shift + 1/2/3/4/q/w/e/r</code></p>
<p><mark style="background: #be9affA6;">color1</mark>
<mark style="background: #018bffA6;">color2</mark>
<mark style="background: #fefe00A6;">color3</mark>
<mark style="background: #57e8b8A6;">color4</mark>
<mark style="background: #83d98fA6;">colorQ</mark>
<mark style="background: #fbab4bA6;">colorW</mark>
<mark style="background: #fa518dA6;">colorE</mark>
<mark style="background: #999995A6;">colorR</mark></p>
<ul>
<li><mark style="background: #be9affA6;">Purple</mark> : 顶级<br />
</li>
<li><mark style="background: #018bffA6;">Blue</mark> : 重要 Class
Function</li>
<li><mark style="background: #fefe00A6;">Yellow</mark> : 提示
String</li>
<li><mark style="background: #57e8b8A6;">Cyan</mark> : 有用
Variable</li>
<li><mark style="background: #83d98fA6;">Green</mark> : 正确 Right</li>
<li><mark style="background: #fbab4bA6;">Orange</mark> : 警告
Warning</li>
<li><mark style="background: #fa518dA6;">Red</mark> : 错误 Error</li>
<li><mark style="background: #999995A6;">Gray</mark> : 否定
<!--SR:!2025-08-26,434,250--></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>开发环境</tag>
        <tag>style</tag>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化基础</title>
    <url>/3b4772e22e0b7c32dd35ae81cbe686a7e7df3307/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904026027327501">juejin.cn</a></p>
</blockquote>
<p>当 App
项目复杂一定的程度，将项目组件化是必不可少的，组件化可以更好的进行功能的划分，提到组件化有人可能会想到模块化，其实组件化和模块化的本质是一样的，都是为了代码重用的业务解耦，模块化主要按照业务划分，而组件化主要按照功能划分，从<strong>组件化最基础的几个方面</strong>打开组件化的大门。</p>
<ol type="1">
<li>组件之间的跳转</li>
<li>动态创建</li>
<li>资源冲突</li>
<li>静态常量 <!--SR:!2025-12-14,683,250--></li>
</ol>
<h2 id="组件之间的跳转">组件之间的跳转</h2>
<p>组件化中两个功能模块时不直接依赖的，其依赖规则是通过 Base module
间接依赖，当组件之间的 Activity
进行界面跳转时，由于没有相互依赖的关系，往往会无法引用另一个 module 中的
Activity。</p>
<h3 id="隐式跳转">隐式跳转</h3>
<p>隐式跳转是通过 Android 原生 Intent 匹配机制来实现相应跳转，就是使用
Action 来跳转到对应的 Activity，这样使用隐式跳转的方式就可以跨 module
实现 Activity 之间的跳转了，注意一点，如果移出 Activity 所在的 module
而不移出相应的跳转，如果继续跳转会出现异常，使用隐式 Intent
跳转需要验证是否会接收该 Intent，需要对该 Intent 对象调用
resolveActivity() 方法来判断至少有一个应用能够处理该
Intent，通过隐式跳转的方式还可以设置 exported 为 false 来确保只有自己的
App 才能够启动对应的组件。</p>
<h3 id="arouter-跳转">ARouter 跳转</h3>
<p>在 Android 开发中可将 module 看成不同的网络，而对应的 Router
就是连接各个 module
的中转站，这个中转站可以对页面跳转的参数等进行统一处理，ARouter
是阿里开源出来的一个页面跳转路由，使用 ARouter
可以替代隐式跳转来完成不同
module、不同组件之间的跳转以及跳转过程的监听、参数的传递等，ARouter
支持路径跳转和 URL 跳转两种方式，使用也非常灵活，ARouter
的具体使用这里不做介绍，其具体使用会在单独一篇文章中详解，</p>
<p><strong>ARouter 与 Android 传统跳转方式的对比如下</strong>：</p>
<ol type="1">
<li>显式跳转需要依赖于类，而<mark style="background: #83d98fA6;">路由跳转通过指定的路径跳转</mark>
；</li>
<li>隐式跳转通过 AndroidManifest 集中管理，导致协作开发困难；原生使用
AndroidManifest
来注册，而<mark style="background: #83d98fA6;">路由使用注解注册</mark></li>
<li>原生 startActivity 之后跳转过程交由 Android
系统控制，而<mark style="background: #83d98fA6;">路由跳转采用的是 AOP
切面编程可对跳转过程进行拦截和过滤</mark> 。
<!--SR:!2024-12-19,473,250--></li>
</ol>
<h2 id="动态创建">动态创建</h2>
<p>组件化开发中最重要的一点就是各个模块、各个组件之间要尽可能解耦，这样很容易就会想到使用
Java
中的反射机制，使用反射可在运行状态下获取某个类的所有信息，然后就可以动态操作这个类的属性和方法了。如果
Fragment 单独作为一个组件来使用时，当这个 Fragment
组件不需要被移出后，如果是常规的 Fragment 则会因为索引不到该 Fragment
而使得 App
崩溃，想一下如果<mark style="background: #83d98fA6;">使用反射创建
Fragment </mark> 的方式则至少不会引起 App
崩溃，这里可以捕捉异常完成相关逻辑，这样是不是降低了耦合呢。可见，虽然反射有一定的性能问题，但使用反射确实能在一定程度上降低耦合，学习组件化
Java 反射机制应该是必须的一部分。</p>
<p>组件化开发中要求每个组件都能独立运行，一般情况下每个组件都有一定的初始化步骤，最好的一种情况是项目需要的几个组件的初始化基本相同，那就可将初始化放在
BaseModule
中进行统一初始化，但是这种情况毕竟比较理想，一般情况是每个组件的初始化都不一样，可能你会想到在各自的
Application 初始化，如果在各自的 Application 中初始化，当在最终编译由于
Application
的合并难免会出一些问题，这种方式也不可取，到这里又想到了反射，在各组件中创建初始化文件，然后<mark style="background: #83d98fA6;">在最终的
Application 中通过反射完成各个组件的初始化操作</mark> ，这里通过 Java
的反射机制完成了组件化开发中 Application 的动态配置。
<!--SR:!2025-01-18,497,250--></p>
<h2 id="资源冲突">资源冲突</h2>
<p>组件化开发过程中，如果 ModuleA 的 AmdroidManifest 文件中使用
android:name 属性指定了相应的 Application，而主 App Module 的
AndroidManifest 文件中也使用 android:name 属性指定了相对应的
Application，此时就必须在 <strong>主 App Module</strong> 的
AndroidManifest 文件中<mark style="background: #83d98fA6;">使用
tools:replace="android:name" 来解决冲突</mark> ，使用 replace
属性表示该属性也就是在 标签下的 android:name
属性可在编译过程中被替换，这样根据 AndroidManifest
文件替换规则最终指定的 Application 应该是 App Module 中的指定的
Application。</p>
<p>举一个例子，我在项目中的某个功能 Module 中使用 SMSSDK
来完成短信验证的功能，因为其他地方不用，所以只引入到了要使用的功能
Module 中，如果其他 Module 会使用应该将 SMSSDK 引入到 BaseModule
中，使用 SMSSDK 如果不指定该 Module 的 Application，MobSDK 会将
com.mob.MobApplication 指定为该 Module 的
Application，此时在整体编译打包时就会出现 AndroidManifest 文件的
android:name 属性冲突，当然了解决方法就是使用 replace 属性了。
AndroidManifest 文件合并后的主要冲突也就是这个问题了，当然
下的其他属性有冲突，也是使用 replace
属性。在实际的开发中多验证会更有收获喔。</p>
<p>组件化开发中另外需要注意的一点是防止资源名称一样导致最终合并的时候，因为冲突造成资源引用错误或者某些资源丢失等，如字符串、颜色值等资源等合并的时候会被后面加载的相同名称的资源所替换，解决的思路是在资源命名上要有一定的规则，<mark style="background: #83d98fA6;">可以在
build.gradle 文件中配置 "resourcePrefix" 组件名称
""的方式强制约束开发者确保资源名称唯一</mark>
，建议<mark style="background: #83d98fA6;"> Module
中资源的命名格式为"Module 名称_功能_其他 "</mark> 。
<!--SR:!2025-04-23,403,230--></p>
<h2 id="静态常量">静态常量</h2>
<p><strong>组件化开发中，最终合并时每个组件都是以 Lib Module
的形式存在</strong>，而 Lib Module 中 R.java
文件中定义的静态变量没有声明为 final，这就意味着不能在组件 Module
中使用相对应的常量了，如在时候 switch
语句就不能使用了，这就要求<mark style="background: #83d98fA6;">在组件中要使用
if 语句来替代 switch 语句</mark>
，当然在组件独立运行的时候是没有这个问题的。</p>
<p>开发中经常会使用到 Butterknife，Butterknife 可非常方便的对 View 及
View
的事件等进行注解操作，它采用的是编译时注解机制，注解中只能使用常量，所以在
Butterknife 在组件化开发中应该使用 R2 代替 R，R2 实际上是 R 的拷贝， R2
对应声明的变量是 final，所以在组件化开发中如果使用 Butterknife
在相应的注解中要使用 R2 替代 R。 <!--SR:!2025-01-05,487,250--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8abe118f14be78884377a6dfc907d6cf95994120">Android 组件化
ARouter</a></li>
<li><a href="../28dd4828541f68e92120f55d44762989d0ad2a57">Android 组件化
Application</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../8abe118f14be78884377a6dfc907d6cf95994120">Android 组件化
ARouter</a></li>
<li><a href="../28dd4828541f68e92120f55d44762989d0ad2a57">Android 组件化
Application</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 使用全局剪贴板</title>
    <url>/3042b24ad887a189e62ff448ff184e52bffab3e9/</url>
    <content><![CDATA[<p>查看 vim 的 clipboard 功能是否开启</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure></div>
<p><img src="/images/2325099-c78cfca714ce958a.png" />没有开启是减号
如果不支持 clipboard 功能, 需要安装支持 clipboard 的 vim 版本</p>
<h3 id="ubuntu">ubuntu</h3>
<p>安装 vim-gtk</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">sudo apt install vim-gtk -y</span><br></pre></td></tr></table></figure></div>
<h3 id="centos">centos</h3>
<p>安装 vim-x11 和 vim-enhanced</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">yum install vim*</span><br></pre></td></tr></table></figure></div>
<p>使用 vimx 代替 vim<br />
编辑 <code>~/.zshrc</code> 添加：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">alias vi=&#x27;vimx&#x27;</span><br><span class="line">alias vim=&#x27;vimx&#x27;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Debian &amp; Ubuntu: Install <code>vim-gtk</code> or
<code>vim-gnome</code>.</li>
<li>Fedora: install <code>vim-X11</code>, and run <code>vimx</code>
instead of <code>vim</code> (<a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fq%2F2063%2F51">more
info</a>).</li>
<li>Arch Linux: install <code>gvim</code> (this will enable
<code>+clipboard</code> for normal <code>vim</code> as well).</li>
</ul>
<h3 id="使用">使用</h3>
<ul>
<li>用 <code>"+y</code> 代替 <code>y</code>
将选中的内容复制到系统剪贴板，效果和 <code>ctrl-c</code> 一致。</li>
<li>用 <code>"+p</code> 代替 <code>p</code>
将剪贴板内容复制到指定位置，也可以用 <code>ctrl-v</code>。</li>
</ul>
<p><strong>参考：</strong></p>
<ul>
<li><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F84%2Fhow-can-i-copy-text-to-the-system-clipboard-from-vim">how-can-i-copy-text-to-the-system-clipboard-from-vim</a></li>
<li><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F2063%2Fhow-do-i-get-clipboard-support-in-fedora-20">how-do-i-get-clipboard-support-in-fedora-20</a></li>
<li><a
href="https://link.jianshu.com?t=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F19863631">如何将
Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-standards-project-layout</title>
    <url>/3de1de79eef0fa4c3dcd191d3471dba7c6c9d782/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/golang-standards/project-layout/blob/master/README_zh.md">github.com</a></p>
</blockquote>
<h1 id="standard-go-project-layout">Standard Go Project Layout</h1>
<p>这是 Go 应用程序项目的基本布局。它不是核心 Go
开发团队定义的官方标准；然而，它是 Go
生态系统中一组常见的老项目和新项目的布局模式。其中一些模式比其他模式更受欢迎。它还具有许多小的增强，以及对任何足够大的实际应用程序通用的几个支持目录。</p>
<p>如果你尝试学习 Go，或者你正在为自己建立一个 PoC
或一个玩具项目，这个项目布局是没啥必要的。从一些非常简单的事情开始
(一个 <code>main.go</code> 文件绰绰有余)。随着项目的增长，请记住保持代码结构良好非常重要，否则你最终会得到一个凌乱的代码，这其中就包含大量隐藏的依赖项和全局状态。当有更多的人参与这个项目时，你将需要更多的结构。这时候，介绍一种管理包
/
库的通用方法是很重要的。当你有一个开源项目时，或者当你知道其他项目从你的项目存储库中导入代码时，这时候拥有私有
(又名 <code>internal</code>)
包和代码就很重要。克隆存储库，保留你需要的内容，删除其他所有的内容!
仅仅因为它在那里并不意味着你必须全部使用它。这些模式都没有在每个项目中使用。甚至 <code>vendor</code>
模式也不是通用的。</p>
<p>Go 1.14 <a
href="https://github.com/golang/go/wiki/Modules"><code>Go Modules</code></a>
终于可以投入生产了。除非你有特定的理由不使用它们，否则使用 <a
href="https://blog.golang.org/using-go-modules"><code>Go Modules</code></a>
。如果你使用，就无需担心 $GOPATH
以及项目放置的位置。存储库中的 <code>go.mod</code>
文件基本假定你的项目托管在 Github
上，但这不是要求。模块路径可以是任何地方，尽管第一个模块路径组件的名称中应该有一个点（当前版本的
Go 不再强制使用该模块，但如果使用稍旧的版本，如果没有 <code>mod</code>
文件构建失败的话 ，不要惊讶）。如果你想知道更多信息，请参阅 Issues <a
href="https://github.com/golang/go/issues/37554"><code>37554</code></a> 和 <a
href="https://github.com/golang/go/issues/32819"><code>32819</code></a>
。</p>
<p>此项目布局是通用的，并且不会尝试强加一个特定的 Go 包结构。</p>
<p>这是社区的努力。
如果看到新的模式，或者认为一个现有的模式需要更新，请提一个 issue。</p>
<p>如果需要命名、格式和样式方面的帮助，请运行 <a
href="https://golang.org/cmd/gofmt/"><code>gofmt</code></a> 和 <a
href="https://github.com/golang/lint"><code>golint</code></a>
。还要确保阅读这些 Go 代码风格的指导方针和建议:</p>
<ul>
<li><a
href="https://talks.golang.org/2014/names.slide">https://talks.golang.org/2014/names.slide</a></li>
<li><a
href="https://golang.org/doc/effective_go.html#names">https://golang.org/doc/effective_go.html#names</a></li>
<li><a
href="https://blog.golang.org/package-names">https://blog.golang.org/package-names</a></li>
<li><a
href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments</a></li>
<li><a href="https://rakyll.org/style-packages">Style guideline for Go
packages</a> (rakyll/JBD)</li>
</ul>
<p>参见 <a
href="https://medium.com/golang-learn/go-project-layout-e5213cdcfaa2"><code>Go Project Layout</code></a> 了解更多的背景信息。</p>
<p>更多关于包的命名和组织以及其他代码结构的建议:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">GopherCon EU
2018: Peter Bourgon - Best Practices for Industrial Programming</a></li>
<li><a href="https://www.youtube.com/watch?v=MzTcsI6tn-0">GopherCon
Russia 2018: Ashley McNamara + Brian Ketelsen - Go best
practices.</a></li>
<li><a href="https://www.youtube.com/watch?v=ltqV6pDKZD8">GopherCon
2017: Edward Muller - Go Anti-Patterns</a></li>
<li><a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon
2018: Kat Zien - How Do You Structure Your Go Apps</a></li>
</ul>
<h2 id="go-目录">Go 目录</h2>
<h3 id="cmd"><code>/cmd</code></h3>
<p>本项目的主干。</p>
<p>每个应用程序的目录名应该与你想要的可执行文件的名称相匹配
(例如，<code>/cmd/myapp</code>)。</p>
<p>不要在这个目录中放置太多代码。如果你认为代码可以导入并在其他项目中使用，那么它应该位于 <code>/pkg</code>
目录中。如果代码不是可重用的，或者你不希望其他人重用它，请将该代码放到 <code>/internal</code>
目录中。你会惊讶于别人会怎么做，所以要明确你的意图!</p>
<p>通常有一个小的 <code>main</code> 函数，从 <code>/internal</code>
和 <code>/pkg</code> 目录导入和调用代码，除此之外没有别的东西。</p>
<p>有关示例，请参阅 <a
href="/golang-standards/project-layout/blob/master/cmd/README.md"><code>/cmd</code></a>
目录。</p>
<h3 id="internal"><code>/internal</code></h3>
<p>私有应用程序和库代码。这是你不希望其他人在其应用程序或库中导入代码。请注意，这个布局模式是由
Go 编译器本身执行的。有关更多细节，请参阅 Go 1.4 <a
href="https://golang.org/doc/go1.4#internalpackages"><code>release notes</code></a> 。注意，你并不局限于顶级
<code>internal</code>
目录。在项目树的任何级别上都可以有多个内部目录。</p>
<p>你可以选择向 internal
包中添加一些额外的结构，以分隔共享和非共享的内部代码。这不是必需的
(特别是对于较小的项目)，但是最好有有可视化的线索来显示预期的包的用途。你的实际应用程序代码可以放在 <code>/internal/app</code>
目录下 (例如
<code>/internal/app/myapp</code>)，这些应用程序共享的代码可以放在
<code>/internal/pkg</code> 目录下 (例如
<code>/internal/pkg/myprivlib</code>)。</p>
<h3 id="pkg"><code>/pkg</code></h3>
<p>外部应用程序可以使用的库代码 (例如
<code>/pkg/mypubliclib</code>)。其他项目会导入这些库，希望它们能正常工作，所以在这里放东西之前要三思:-)
注意，<code>internal</code>
目录是确保私有包不可导入的更好方法，因为它是由 Go
强制执行的。<code>/pkg</code> 目录仍然是一种很好的方式，可以显式地表示该目录中的代码对于其他人来说是安全使用的好方法。由 Travis
Jeffery  撰写的 <a
href="https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/"><code>I'll take pkg over internal</code></a>
博客文章提供了 <code>pkg</code> 和 <code>internal</code>
目录的一个很好的概述，以及什么时候使用它们是有意义的。</p>
<p>当根目录包含大量非 Go 组件和目录时，这也是一种将 Go
代码分组到一个位置的方法，这使得运行各种 Go
工具变得更加容易（正如在这些演讲中提到的那样: 来自 GopherCon EU 2018 的
<a
href="https://www.youtube.com/watch?v=PTE4VJIdHPg"><code>Best Practices for Industrial Programming</code></a>
, <a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon 2018:
Kat Zien - How Do You Structure Your Go Apps</a> 和 <a
href="https://www.youtube.com/watch?v=3gQa1LWwuzk">GoLab 2018 -
Massimiliano Pippi - Project layout patterns in Go</a> ）。</p>
<p>如果你想查看哪个流行的 Go 存储库使用此项目布局模式，请查看 <a
href="/golang-standards/project-layout/blob/master/pkg/README.md"><code>/pkg</code></a> 目录。这是一种常见的布局模式，但并不是所有人都接受它，一些
Go 社区的人也不推荐它。</p>
<p>如果你的应用程序项目真的很小，并且额外的嵌套并不能增加多少价值
(除非你真的想要:-)，那就不要使用它。当它变得足够大时，你的根目录会变得非常繁琐时
(尤其是当你有很多非 Go 应用组件时)，请考虑一下。</p>
<h3 id="vendor"><code>/vendor</code></h3>
<p>应用程序依赖项 (手动管理或使用你喜欢的依赖项管理工具，如新的内置 <a
href="https://github.com/golang/go/wiki/Modules"><code>Go Modules</code></a>
功能)。<code>go mod vendor</code> 命令将为你创建 <code>/vendor</code>
目录。请注意，如果未使用默认情况下处于启用状态的 Go 1.14，则可能需要在
<code>go build</code> 命令中添加 <code>-mod=vendor</code> 标志。</p>
<p>如果你正在构建一个库，那么不要提交你的应用程序依赖项。</p>
<p>注意，自从 <a
href="https://golang.org/doc/go1.13#modules"><code>1.13</code></a>
以后，Go 还启用了模块代理功能 (默认使用 <a
href="https://proxy.golang.org"><code>https://proxy.golang.org</code></a>
作为他们的模块代理服务器)。在 <a
href="https://blog.golang.org/module-mirror-launch"><code>here</code></a>
阅读更多关于它的信息，看看它是否符合你的所有需求和约束。如果需要，那么你根本不需要 <code>vendor</code>
目录。</p>
<p>国内模块代理功能默认是被墙的，七牛云有维护专门的的<a
href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md"><code>模块代理</code></a>
。</p>
<h2 id="服务应用程序目录">服务应用程序目录</h2>
<h3 id="api"><code>/api</code></h3>
<p>OpenAPI/Swagger 规范，JSON 模式文件，协议定义文件。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/api/README.md"><code>/api</code></a>
目录。</p>
<h2 id="web-应用程序目录">Web 应用程序目录</h2>
<h3 id="web"><code>/web</code></h3>
<p>特定于 Web 应用程序的组件: 静态 Web 资产、服务器端模板和 SPAs。</p>
<h2 id="通用应用目录">通用应用目录</h2>
<h3 id="configs"><code>/configs</code></h3>
<p>配置文件模板或默认配置。</p>
<p>将你的 <code>confd</code> 或 <code>consul-template</code>
模板文件放在这里。</p>
<h3 id="init"><code>/init</code></h3>
<p>System init（systemd，upstart，sysv）和 process
manager/supervisor（runit，supervisor）配置。</p>
<h3 id="scripts"><code>/scripts</code></h3>
<p>执行各种构建、安装、分析等操作的脚本。</p>
<p>这些脚本保持了根级别的 Makefile 变得小而简单 (例如， <a
href="https://github.com/hashicorp/terraform/blob/master/Makefile"><code>https://github.com/hashicorp/terraform/blob/master/Makefile</code></a>
)。</p>
<p>有关示例，请参见  <a
href="/golang-standards/project-layout/blob/master/scripts/README.md"><code>/scripts</code></a>
目录。</p>
<h3 id="build"><code>/build</code></h3>
<p>打包和持续集成。</p>
<p>将你的云 (AMI)、容器( Docker )、操作系统( deb、rpm、pkg )
包配置和脚本放在 <code>/build/package</code> 目录下。</p>
<p>将你的 CI (travis、circle、drone)
配置和脚本放在 <code>/build/ci</code> 目录中。请注意，有些 CI 工具 (例如
Travis CI) 对配置文件的位置非常挑剔。尝试将配置文件放在
<code>/build/ci</code> 目录中，将它们链接到 CI 工具期望它们的位置
(如果可能的话)。</p>
<h3 id="deployments"><code>/deployments</code></h3>
<p>IaaS、PaaS、系统和容器编排部署配置和模板
(docker-compose、kubernetes/helm、mesos、terraform、bosh)。注意，在一些存储库中
(特别是使用 kubernetes 部署的应用程序)，这个目录被称为
<code>/deploy</code>。</p>
<h3 id="test"><code>/test</code></h3>
<p>额外的外部测试应用程序和测试数据。你可以随时根据需求构造
<code>/test</code>
目录。对于较大的项目，有一个数据子目录是有意义的。例如，你可以使用
<code>/test/data</code> 或 <code>/test/testdata</code>
(如果你需要忽略目录中的内容)。请注意，Go 还会忽略以 “.”
或“_”开头的目录或文件，因此在如何命名测试数据目录方面有更大的灵活性。</p>
<p>有关示例，请参见  <a
href="/golang-standards/project-layout/blob/master/test/README.md"><code>/test</code></a>
目录。</p>
<h2 id="其他目录">其他目录</h2>
<h3 id="docs"><code>/docs</code></h3>
<p>设计和用户文档 (除了 godoc 生成的文档之外)。</p>
<p>有关示例，请参阅 <a
href="/golang-standards/project-layout/blob/master/docs/README.md"><code>/docs</code></a>
目录。</p>
<h3 id="tools"><code>/tools</code></h3>
<p>这个项目的支持工具。注意，这些工具可以从 <code>/pkg</code>
和 <code>/internal</code> 目录导入代码。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/tools/README.md"><code>/tools</code></a>
目录。</p>
<h3 id="examples"><code>/examples</code></h3>
<p>你的应用程序和 / 或公共库的示例。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/examples/README.md"><code>/examples</code></a>
目录。</p>
<h3 id="third_party"><code>/third_party</code></h3>
<p>外部辅助工具，分叉代码和其他第三方工具 (例如 Swagger UI)。</p>
<h3 id="githooks"><code>/githooks</code></h3>
<p>Git hooks。</p>
<h3 id="assets"><code>/assets</code></h3>
<p>与存储库一起使用的其他资产 (图像、徽标等)。</p>
<h3 id="website"><code>/website</code></h3>
<p>如果你不使用 Github 页面，则在这里放置项目的网站数据。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/website/README.md"><code>/website</code></a>
目录。</p>
<h2 id="你不应该拥有的目录">你不应该拥有的目录</h2>
<h3 id="src"><code>/src</code></h3>
<p>有些 Go 项目确实有一个 <code>src</code>
文件夹，但这通常发生在开发人员有 Java
背景，在那里它是一种常见的模式。如果可以的话，尽量不要采用这种 Java
模式。你真的不希望你的 Go 代码或 Go 项目看起来像 Java:-)</p>
<p>不要将项目级别 <code>src</code> 目录与 Go 用于其工作空间的
<code>src</code> 目录 (如 <a
href="https://golang.org/doc/code.html"><code>How to Write Go Code</code></a>
中所述) 混淆。<code>$GOPATH</code> 环境变量指向你的 (当前)
工作空间(默认情况下，它指向非 windows 系统上的
<code>$HOME/go</code>)。这个工作空间包括顶层 <code>/pkg</code>, <code>/bin</code> 和 <code>/src</code>
目录。你的实际项目最终是 <code>/src</code>
下的一个子目录，因此，如果你的项目中有 <code>/src</code>
目录，那么项目路径将是这样的:
<code>/some/path/to/workspace/src/your_project/src/your_code.go</code>。注意，在
Go 1.11 中，可以将项目放在 <code>GOPATH</code>
之外，但这并不意味着使用这种布局模式是一个好主意。</p>
<h2 id="badges">Badges</h2>
<ul>
<li><p><a href="https://goreportcard.com/">Go Report Card</a> - It will
scan your code with <code>gofmt</code>, <code>go vet</code>,
<code>gocyclo</code>, <code>golint</code>, <code>ineffassign</code>,
<code>license</code> and <code>misspell</code>. Replace
<code>github.com/golang-standards/project-layout</code> with your
project reference.</p></li>
<li><p><a href="http://godoc.org">GoDoc</a> - It will provide online
version of your GoDoc generated documentation. Change the link to point
to your project.</p></li>
<li><p>Release - It will show the latest release number for your
project. Change the github link to point to your project.</p></li>
</ul>
<h2 id="notes">Notes</h2>
<p>A more opinionated project template with sample/reusable configs,
scripts and code is a WIP.</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>go</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d Sprite 和 UI Image 的区别</title>
    <url>/44d4a3aec8e02e822e0b0bf4f23d8163f553c566/</url>
    <content><![CDATA[<h2 id="unity中sprite和ui-image的区别">Unity中Sprite和UI
Image的区别</h2>
<h3 id="渲染">渲染</h3>
<ul>
<li>Image 通过UGUI的Image和CanvasRenderer组件组件来渲染</li>
<li>Sprite 通过SpriteRenderer组件来渲染
两者在视觉上没有任何区别（都使用默认材质时）。它们默认的渲染也都是在Transparent
Geometry队列中。</li>
</ul>
<h3 id="使用上">使用上</h3>
<ul>
<li>Image需要位于某个Canvas下才能显示出来。Image则使用RectTransform进行布局，以便通过Canvas统一管理。由于RectTransform可以设置大小、对齐方式等，Image可以说更加方便一点，这也是很多人选择使用Image的原因。</li>
<li>场景中的Sprite可以像普通的3D游戏物体一样对待，通过Transform组件进行移动等操作，</li>
</ul>
<h3 id="引擎的处理上">引擎的处理上</h3>
<p>将Wireframe选项打开然后在场景中观察，就可以清楚地发现， -
Image为一个矩形的Sprite生成两个三角形拼成的矩形几何体， -
而Sprite则会根据显示内容，裁剪掉元素中的大部分透明区域，最终生成的几何体可能会有比较复杂的顶点结构。</p>
<h3 id="由渲染管线的基本流程进行推断">由渲染管线的基本流程进行推断</h3>
<ol type="1">
<li>Sprite由于顶点数据更加复杂，在进行顶点计算时会比Image效率更低；</li>
<li>Sprite会比Image执行较多的<strong>顶点着色器</strong>运算；</li>
<li>Image会比Sprite执行更多的<strong>片段着色器</strong>运算</li>
</ol>
<p>由于片段着色器是针对每个像素运算，Sprite通过增加顶点而裁剪掉的部分减少了相当多的运算次数，<mark style="background: #83d98fA6;">在绝大多数情况下，Sprite反而比Image拥有更好的效率（尤其是场景中有大量的2D精灵时）</mark>
。</p>
<p>SpriteRenderer会创建额外的几何体来裁剪掉多余的透明像素区域，从而减少了大量的片段着色器运算，并降低了overdraw；而Image则会创建简单的矩形几何体。随着2D元素数量的增加，这种差别会慢慢明显起来。</p>
<p>因此在2D游戏开发中，<mark style="background: #83d98fA6;">游戏场景中的元素，应该尽量使用
Sprite 去渲染。</mark>
<mark style="background: #fbab4bA6;">而Image应该仅用于UI显示</mark>
（实际上即使不考虑性能原因，由于屏幕分辨率的变化，Image可能会被Canvas改变显示位置和实际大小，如果用于游戏内元素的显示，可能会造成跟预期设计不一致的显示结果，也应该避免使用）。
<!--SR:!2024-09-07,17,250--></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 第三方库 RxJava 和 RxAndroid</title>
    <url>/4096cc1132208804f342eddfd720ed6cafe8a2d9/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.jianshu.com/p/1cad42c4bc04">www.jianshu.com</a></p>
</blockquote>
<h2 id="rxjava-介绍">RxJava 介绍</h2>
<p>首先要说明的一点，RxAndroid 和 RxJava 是差不多的东西，只不过
RxAndroid 针对 Android 平台做了一点调整。</p>
<p>那么 RxJava 是什么？在其 github 上是这样讲的：一个在 Java VM
上使用可观测的序列来组成异步的、基于事件的程序的库。这么讲可能还有点绕口，简单的讲实际上最重要的就是异步两字，<mark style="background: #83d98fA6;">RxJava
可以简单的实现异步操作，并且不管逻辑多么复杂，它始终能够保持简洁性。</mark></p>
<p>通常在 Android 中，非 UI 线程是不能更新 UI
界面的，而一些耗时的操作我们又不能放在 UI
线程，否则会导致界面卡顿。这种情况下，我们就需要切换线程来实现，即
Handler 和 AsyncTask
来实现，但是这两种都有个缺陷，代码非常多，非常杂，可读性非常差。所以，RxJava
出现了，它能够两行代码就实现线程切换，非常的简单，使用起来就会让人感觉很爽，再也不用为异步操作写如此繁重的代码了。
<!--SR:!2027-01-06,920,250--></p>
<h2 id="rxjava-基本用法">RxJava 基本用法</h2>
<p>RxJava 最核心的两个东西是 -
<strong>Observables</strong>（<mark style="background: #fefe00A6;">被观察者</mark>
，事件源） -
<strong>Observer/Subscriber</strong>（<mark style="background: #fefe00A6;">观察者</mark>
） - 还有将他们联系在一起的操作
<strong>subscribe</strong>（<mark style="background: #fefe00A6;">订阅</mark>
）
当被观察者发生变化时观察者能即使做出相应，就好像我们的按钮事件一样：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #fefe00A6;">在这里 button
就是被观察者，OnClickListener 就是观察者，setOnClickListener
这个方法就相当于订阅操作</mark> ，当 button 被按下时，OnClickListener
监听到变化，调用 OnClick 做出反应，RxJava
实现的就是类似这样的一个过程。</p>
<p>注意这里的观察者有两种
Observer，Subscriber，这两个其实是差不多的，Subscriber 是对 Observer
的一种扩展，内部==增加了 OnStart
方法==，在事件未发送之前订阅，用于做一些准备工作，并且还有
==unsubscribe() 用于取消订阅==。<br />
让我们来看一下 ObServer 的内部实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public interface Observer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    void onCompleted();</span><br><span class="line"></span><br><span class="line">    void onError(Throwable e);</span><br><span class="line"></span><br><span class="line">    void onNext(T t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到 ObServer 本身是一个接口，内部有 onNext(T t)
方法：观测到所检测的被观察者有变化时做出相应反应。onCompleted()
方法：RxJava 规定，当不会再有新的 onNext() 发出时，需要触发
onCompleted()
方法作为标志。onCompleted()：事件队列发生异常，要调用的方法。我们在定义一个观察者的时候，需要实现这些方法，来完成事件队列。<br />
<!--SR:!2024-09-13,410,250!2024-12-22,475,250--></p>
<p>观察者有了，那么被观察者 Observables 怎么创建呢，RxJava
提供了一系列操作符供我们调用，其中就有很多创建型操作符，举个例子,
创建一个 Observables，发出 hello world 字符串给观察者：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.create(  </span><br><span class="line">    new Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void call(Subscriber&lt;? super String&gt; sub) &#123;  </span><br><span class="line">            sub.onNext(&quot;Hello, world!&quot;);  </span><br><span class="line">            sub.onCompleted();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-04-07,987,250-->
<p>既然有了 Observables，那我们就可以根据这个 Observables
创建一个观察者了，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observer&lt;String&gt; TestObserver=new Observer&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onCompleted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(String s) &#123;</span><br><span class="line">                Log.i(TAG,s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>这样我们就可以愉快的订阅了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">myObservable.subscribe(TestObserver);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-16,430,250-->
<p>这样，一个简单的 RxJava
订阅流程就完成了。这里可能很多人就有疑问了，关键的异步呢，体现在哪了？其实这个例子可能不是很明显，因为被观察者并不是一个耗时线程，不能很直观的体现异步。如果
myObservable
这是一个异步任务，比如网络请求，那么我们订阅之后，TestObserver
会一直监听 myObservable
是否有返回，如果有，那么就做出响应，本质是一样的。</p>
<h2 id="rxjava-的操作符">RxJava 的操作符</h2>
<p>RxJava
一个强大的地方在于它的异步，另外一个强大的地方就在于它提供了强大的操作符支持。这里说明一下几个常用的操作符：</p>
<h3 id="ceate-操作符">ceate 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.create(  </span><br><span class="line">    new Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void call(Subscriber&lt;? super String&gt; sub) &#123;  </span><br><span class="line">            sub.onNext(&quot;Hello, world!&quot;);  </span><br><span class="line">            sub.onCompleted();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>ceate 操作符创建一个被观察者，在 call 方法里持有一个观察者 Subscriber
参数，当这个 Observable 被订阅时，执行观察者相应的方法。
<!--SR:!2027-05-03,1004,250--></p>
<h3 id="just-操作符">just 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.just(&quot;Hello, world!&quot;);</span><br></pre></td></tr></table></figure></div>
<p>ceate 操作符的代码可以用just操作符代替，just
操作符的功能就是将一个对象转化为 Observable。
<!--SR:!2027-03-30,983,250--></p>
<h3 id="from-操作符">from 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.from(&quot;Hello&quot;,&quot; world!&quot;);</span><br></pre></td></tr></table></figure></div>
<p>既然有了将单一对象转化为 Observable
的操作符，那么必须要有将多个对象转化为 Observable 的操作符，那就是
from，from 接收一个对象数组，然后逐一发射给观察者。
<!--SR:!2025-08-27,615,250--></p>
<h3 id="flatmap-操作符">flatMap 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .subscribe(student -&gt;Log.i(TAG,student.getName());</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>上面的例子用 flatMap 操作符，就可以变得很简洁，flatMap
操作符的功能是接收一个接收一个 Observable
的输出作为输入，同时输出另外一个 Observable，通常是接收一个
list，然后逐一发送 list 的元素。比如这边的 Student 数组，变成了逐一发送
student 的 Observable。 <!--SR:!2024-12-31,488,250--></p>
<h3 id="map-操作符">Map 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>现在我们只想输出每个学生的成绩，我们就需要 Map
操作符，它的功能是接收一种类型的 Observable，转化为另外一种
Observable，比如这边的 Student 类型转化为了 Int 型的 Observable。
<!--SR:!2026-04-03,748,250--></p>
<h3 id="filter-操作符">filter 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>顾名思义 filter
操作符就是过滤用的，相当于加个判断条件，比如这边的就是加上分数大于 80
的条件. <!--SR:!2025-09-21,633,250--></p>
<h3 id="take-操作符">take 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>take 操作符的功能是限定个数，比如这边的功能就是限定我最多需要 5
个成绩。 <!--SR:!2026-01-10,737,270--></p>
<h3 id="doonnext-操作符">doOnNext 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .doOnNext(grade-&gt;save(grade))</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>doOnNext()
允许我们在每次输出一个元素之前做一些额外的事情，比如这里的我们用来保存成绩。
<!--SR:!2024-09-21,414,250--></p>
<h3 id="subscribeonobserveon-操作符">subscribeOn/observeOn 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .doOnNext(grade-&gt;save(grade))</span><br><span class="line">           .subscribeOn(Schedulers.io())</span><br><span class="line">           .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>这两个操作符一般都是成对出现的，他们的功能就是切换线程。<mark style="background: #fefe00A6;">subscribeOn
是指定被观察者的线程，observeOn 是指定观察者的线程。</mark>
比如这个例子中前面的订阅的工作在 IO 线程做，后面的打印功能在主线程做。
<!--SR:!2025-04-14,405,230--></p>
<p><strong>小结</strong></p>
<p>怎么样，看起来我好像做了很多事情，又有判断数据，又有保存数据，又有选取数据，关键还有线程切换，然而，我实际上就写了那么一点代码，看起来是不是酷！这就是
RxJava 的魅力所在。</p>
<h2 id="rxandroid">RxAndroid</h2>
<p>一开始说了，RxAndroid 其实跟 RxJava
是差不多的，但是总归还是有一点变化的。比如 Android
上会有生命周期的问题，可能会导致内存泄漏：Observable 持有 Context
导致的内存泄露。在这个问题上，我们的解决方法是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">private Subscription mTestSubscription= Subscriptions.empty();</span><br><span class="line"></span><br><span class="line">public void test()&#123;</span><br><span class="line">mTestSubscription=myObservable.subscribe(TestObserver);</span><br><span class="line">&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        if (mTestSubscription != null &amp;&amp; !mTestSubscription.isUnsubscribed())        &#123;</span><br><span class="line">            mTestSubscription.unsubscribe();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>就是在订阅的时候，用一个 Subscription
来保存它，然后在<mark style="background: #fefe00A6;">退出这个 Activity
的时候取消订阅</mark> 。<br />
另外还有一些专门为 Android 设计的 RxView, 比如以下防抖动的 View：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">RxView.clicks(btn_click)</span><br><span class="line">        .throttleFirst(3, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-02-05,710,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>rxandroid</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/4985d963fb644c7b84c923e1fae816af6e13f061/</url>
    <content><![CDATA[<h2 id="常用命令">常用命令</h2>
<h3 id="下载项目">1.下载项目</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/qiaogaojian/MyGames.git</span><br></pre></td></tr></table></figure></div>
<h3 id="添加更改文件">2.添加更改文件</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></div>
<p>取消 git add <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git reset file_path</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-08-02,395,250--></p>
<h3 id="提交文件">3.提交文件</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>退出 vi 编辑器: esc + : + wq/q</p>
<h3 id="上传代码">4.上传代码</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure></div>
<h3 id="下载代码">5.下载代码</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure></div>
<h3 id="显示所有分支">6.显示所有分支</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure></div>
<h3 id="切换到分支">7.切换到分支</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure></div>
<h3 id="新建本地分支">8.新建本地分支</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git checkout -b TestBranch</span><br></pre></td></tr></table></figure></div>
<h3 id="推送本地分支到远程">9.推送本地分支到远程</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git push origin TestBranch</span><br><span class="line">git push --set-upstream origin TheScrollofTaiwu</span><br></pre></td></tr></table></figure></div>
<h3 id="删除文件">10.删除文件</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> &lt;file&gt;</span><br></pre></td></tr></table></figure></div>
<h3
id="撤销本地所有未提交文件的修改">11.撤销本地所有未提交文件的修改</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git checkout . //撤销文件更改</span><br><span class="line">git clean -xdf //清除未跟踪文件</span><br></pre></td></tr></table></figure></div>
<h3 id="查看提交历史">12.查看提交历史</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure></div>
<p>退出 log: 英文状态下按 q</p>
<h3 id="查看-git-config">13.查看 git config</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure></div>
<h3 id="查看远程仓库">14.查看远程仓库</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure></div>
<h3 id="删除远程仓库">15.删除远程仓库</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> origin</span><br></pre></td></tr></table></figure></div>
<h3 id="gitlab-新建仓库命令">16.Gitlab 新建仓库命令</h3>
<ol type="1">
<li>Git global setup</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;qiaogaojian&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;qiaogaojian@vip.qq.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li>Create a new repository</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@gitlab.53site.com:qiaogaojian/testremote.git</span><br><span class="line"><span class="built_in">cd</span> testremote</span><br><span class="line"><span class="built_in">touch</span> README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;add README&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></div>
<ol start="3" type="1">
<li>Existing folder</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@gitlab.53site.com:qiaogaojian/testremote.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Initial commit&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></div>
<ol start="4" type="1">
<li>Existing Git repository</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin git@gitlab.53site.com:qiaogaojian/testremote.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure></div>
<h3 id="取消跟踪">17. 取消跟踪</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached remove.txt     <span class="comment"># 删除 readme1.txt 的跟踪，并保留在本地。</span></span><br><span class="line">git <span class="built_in">rm</span> --f remove.txt          <span class="comment"># 删除 readme1.txt 的跟踪，并且删除本地文件。</span></span><br></pre></td></tr></table></figure></div>
<h2 id="git-命令表">Git 命令表</h2>
<figure>
<img
src="https://upload-images.jianshu.io/upload_images/3947109-efdd076117d53040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"
alt="image.png" />
<figcaption aria-hidden="true">image.png</figcaption>
</figure>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数精度问题及解决方案</title>
    <url>/470a5dfca1767e244348ef8f44fe8d57791fbc8d/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://fivecakes.com/p/5f2fa84aa02ad92eba436b17">fivecakes.com</a></p>
</blockquote>
<h2 id="浮点数精度问题">浮点数精度问题</h2>
<p>浮点数精度问题示例： <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0.1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.15f\n\n&quot;</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> b = <span class="number">100000000</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">5</span>;</span><br><span class="line">    <span class="type">float</span> d = b + c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n\n&quot;</span>, d);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 输出为 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="number">0.100000</span> 		    <span class="comment">//正确输出是因为四舍五入了</span></span><br><span class="line"><span class="number">0.1000000015</span>		<span class="comment">//将精确度提高就会发现误差</span></span><br><span class="line"><span class="number">0.100000001490116</span>	<span class="comment">//再次提高精度</span></span><br><span class="line"></span><br><span class="line"><span class="number">100000008.000000</span>	<span class="comment">//加法居然算错了？傻了吧？</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-01-03,491,250--></p>
<h2 id="浮点数精度误差原因">浮点数精度误差原因</h2>
<p><strong>1.
第一种造成精度误差的原因是大多数小数转化为二进制为无限小数，而计算机内存有限，只能保存一部分，</strong></p>
<p>例如：<br />
0.1 转换为二进制是 0.0001100110011001100110011001100...<br />
float
只能保留一部分，所以一定会有误差，好在大多数场景用不到这么高的精度，不过要注意多个小误差累积成大误差。</p>
<p><strong>2.
第二种造成精度误差的原因是因为较大的浮点数与较小的浮点数相加。</strong></p>
<p>例子中 <code>100000000 + 5</code> 居然等于
100000008，这是因为浮点数是用科学计数法来存储数据，即：<br />
<span class="math inline">\(100000000 = 1.011111010111100001 \times
2^{26}\)</span> <span class="math inline">\(5 = 1.01 \times
2^{2}\)</span><br />
两个数相加的时候先要对阶，就是把指数部分统一，按照小阶数化为大阶数的原则：<br />
<span class="math inline">\(5 = 0.00000000000000000000000101 \times
2^{26}\)</span><br />
按照 IEEE 754 标准，<mark style="background: #fefe00A6;">浮点数 float 为
32 位，1 个符号位，8 个指数位，23 个小数位。 </mark> 而
0.00000000000000000000000101（小数点后有 26 位）不能用 23
位保存下来，所以舍入成 0.00000000000000000000001（小数点后有 23
位），就是这里的舍入造成的误差。<br />
对阶后，将尾数相加得到结果：<br />
(0.00000000000000000000001+1.011111010111100001)^{26} = 100000008
<!--SR:!2025-01-02,490,250--></p>
<h2 id="浮点数精度误差问题解决方法">浮点数精度误差问题解决方法</h2>
<p><mark style="background: #fbab4bA6;">浮点数在工程控制，游戏引擎等众多领域有着广泛的应用。但是因为其有误差，所以不适合在金融领域使用。</mark></p>
<p>某水果 3.6 元一斤，某人买了 1.2 斤，总计 4.32 元。如果用 float
存储价格的话，一单的误差比较小看不出差别。但是如果统计一年的营业额，累加很多
float 就会出现较大的误差。</p>
<h3 id="放大成int再还原法">放大成int再还原法</h3>
<p><mark style="background: #83d98fA6;">货币通常只精确到小数点后两位，所以我们可以将其乘
100，用整数存储</mark> 。上面那个例子可以将 3.6 存成 int 型 360，1.2 用
float 存储，4.32 存成 int 型 432(其实 432
由浮点数计算而来也是有误差的，但是一次计算误差非常小，四舍五入就可以得到正确的值)。累加一年营业额时累加的是
int，所以不会有误差。</p>
<h3 id="保存分子分母法">保存分子分母法</h3>
<p>更特殊的情况，某水果 3.6 元一斤，某人买了 1.2 斤，75 折，含税
0.02，快递费 1.5，总价为
3.6x1.2x0.75x0.98+1.5，多次使用浮点数参与运算，有可能造成累积误差。<mark style="background: #83d98fA6;">这种情况可以可以分子和分母分别保存</mark>
。计算时只计算分子，计算的结果也分子分母分别保存，只有显示时才除一下分母，而一次计算的误差非常小，四舍五入就可以得到正确的值。不过用这种方法要小心分子和分母溢出，或者写到一半发现这里要开个平方根或者求个三角函数，然后发现结果根本不是有理数了，进而开始怀疑人生。
<!--SR:!2025-01-01,489,250--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../fc36df4359027415906aab9a57b7d34ca5b192fd">python
数据精度</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../fc36df4359027415906aab9a57b7d34ca5b192fd">python
数据精度</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.理论</category>
        <category>计算机</category>
        <category>体系结构</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>cs</tag>
        <tag>basis</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-line text search in VSCode</title>
    <url>/4a7e963d1a686f40b2a25a3cdd72859ef7705faf/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.waldo.be/2022/01/31/multi-line-text-search-in-vscode-with-regex/">www.waldo.be</a></p>
</blockquote>
<p>just because I needed it recently – and it made me think of this
little gem that I still had to share: what if you have to <strong>search
over multiple lines in multiple files</strong> in VSCode .. something
that actually might happen more than you want to admit.</p>
<p>I actually never knew how to do this decently, until I came across
this tweet: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Well… after some digging I found it (literally few moments after my post).</span><br><span class="line"></span><br><span class="line">One must use [\s\S\n]+? (at least for CRLF UTF-8 files).  </span><br><span class="line">In my case I was searching for all trans-unit occurence with specific source:  </span><br><span class="line">&lt;trans-unit id=&quot;Enum[\s\S\n]+?&lt;/source&gt; </span><br></pre></td></tr></table></figure></div> — phenno (<span class="citation"
data-cites="phenno1">@phenno1</span>) <a
href="https://twitter.com/phenno1/status/1448612532189532160?ref_src=twsrc%5Etfw">October
14, 2021</a></p>
<p>The core of the “solution” is this RegEx: <code>[\s\S\n]+?</code>
或者 <code>[\s\S\n]*?</code></p>
<p>To explain you simply:</p>
<ul>
<li><code>\s</code>: matches any whitespace character (space, table,
line breaks)</li>
<li><code>\S</code>: matches any character that is not a whitespace
character</li>
<li><code>\n</code>: matches a line feed character (code 10)</li>
<li><code>[]</code>: matches any character in this set</li>
<li><code>+</code>: matches one or more of the preceding token – in this
case, the set of any character including the line feed</li>
<li><code>?</code>: causing the preceding quantifier to match as few as
possible. So – take all, but as few as you can.
<!--SR:!2024-12-10,467,250--></li>
</ul>
<h4 id="here-are-a-few-examples">Here are a few examples:</h4>
<p>Find all translation-info spread over multiple lines..</p>
<p><code>&lt;trans-unit id="Enum[\s\S\n]+?&lt;\/source&gt;</code></p>
<p><img
src="https://www.waldo.be/wp-content/uploads/2022/01/image.png" /></p>
<p>Or find “CLEAN19” code snippets with</p>
<p><code>if not CLEAN19[\s\S\n]+?#endif</code> <img
src="https://i0.wp.com/www.waldo.be/wp-content/uploads/2022/01/image-1.png?fit=847%2C589&amp;ssl=1" /></p>
<p>And don’t forget to put your search in VSCode in “RegEx” mode
(ALT+R)!</p>
<p><img
src="https://www.waldo.be/wp-content/uploads/2022/01/image-2.png" /></p>
<p>Thank you, <a href="https://twitter.com/phenno1">phenno</a>, for
sharing! It might not work for all cases, it might need some finetuning
– but for the searches I needed, it always did its job ;-).</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 修改 pip 源为国内镜像源</title>
    <url>/6247ea938466aa6cf2f4294b94f808293af8326b/</url>
    <content><![CDATA[<p><strong>「Python
库默认安装使用的是国外源，速度慢、经常性的超时甚至导致下载失败，选择国内的镜像源速度更快更稳定。」</strong></p>
<p>本文讲一下如何设置和使用国内镜像源。</p>
<h4 id="一.-国内常用镜像源">一. 国内常用镜像源</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">华中理工大学：http://pypi.hustunique.com/</span><br><span class="line">山东理工大学：http://pypi.sdutlinux.org/ </span><br><span class="line">豆瓣：http://pypi.douban.com/simple/</span><br></pre></td></tr></table></figure></div>
<h4 id="二.-win10-环境设置国内镜像源">二. win10 环境设置国内镜像源</h4>
<p><strong>windows系统设置 pip 永久镜像源?</strong></p>
<p>以 windows 为例, 在 user 目录下创建 pip 文件夹，pip 文件夹下并创建
pip.ini 文件，文件内容如下： <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line">[<span class="variable language_">global</span>]</span><br><span class="line">timeout=<span class="number">40</span></span><br><span class="line">index-url=<span class="attr">https</span>:<span class="comment">//pypi.tuna.tsinghua.edu.cn/simple/</span></span><br><span class="line">extra-index-url=</span><br><span class="line">        <span class="attr">http</span>:<span class="comment">//mirrors.aliyun.com/pypi/simple/</span></span><br><span class="line">        <span class="attr">http</span>:<span class="comment">//pypi.douban.com/simple</span></span><br><span class="line">        <span class="attr">http</span>:<span class="comment">//pypi.mirrors.ustc.edu.cn/simple/</span></span><br><span class="line"> </span><br><span class="line">[install]</span><br><span class="line">trusted-host=</span><br><span class="line">        pypi.<span class="property">tuna</span>.<span class="property">tsinghua</span>.<span class="property">edu</span>.<span class="property">cn</span></span><br><span class="line">        mirrors.<span class="property">aliyun</span>.<span class="property">com</span></span><br><span class="line">        pypi.<span class="property">douban</span>.<span class="property">com</span></span><br><span class="line">        pypi.<span class="property">mirrors</span>.<span class="property">ustc</span>.<span class="property">edu</span>.<span class="property">cn</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-02-25,819,250--></p>
<p><img
src="https://mmbiz.qpic.cn/sz_mmbiz_png/h988a0nsgw4LeDd1Nmo1m49c4y7OibemBaCib2rqeRPvAvuCc6tibWaUyKMXKHBKm4iaN5TicE7PoyWUibxGPcTSfr6Q/640?wx_fmt=png" /><img
src="https://mmbiz.qpic.cn/sz_mmbiz_png/h988a0nsgw4LeDd1Nmo1m49c4y7OibemB4AQanAHlMC0IicibhEajhsxWicPUOlTe1NxlibLHqJxG2L816PvtC03BeQ/640?wx_fmt=png" /></p>
<h4 id="三.-临时镜像源">三. 临时镜像源</h4>
<p>如果只是临时使用，不想设置也没关系，当利用 pip
方法安装库时，可指定其中一个源。我们可以这样做：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>
<h4 id="四.-另一种方式安装镜像源">四. 另一种方式安装镜像源</h4>
<p><strong>命令行 设置 pip 镜像源?</strong></p>
<p><mark style="background: #BBFABBA6;">该方法很方便，特别推荐。</mark>
<strong>「1. 打开控制台，输入如下：」</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></div>
<strong>「2.
出现下列内容说明就是配置成功了，ok，快起试一试吧。」</strong> <img
src="https://mmbiz.qpic.cn/sz_mmbiz_png/h988a0nsgw4LeDd1Nmo1m49c4y7OibemBcFmrTpEy1rlU5aB6uAWyCeloG3JEVCJVh7Q2H5GGQKEoOibibq00Oy5w/640?wx_fmt=png" />
<!--SR:!2026-03-25,716,210--></p>
<p><strong>「参考资料：」</strong>
https://www.cnblogs.com/xuexianqi/p/12801475.html</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ollama + continue 实现本地 github copilot</title>
    <url>/4a70d6bb9d15959bdceb5700c8cb347f1260ef3b/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://zhuanlan.zhihu.com/p/686682108">zhuanlan.zhihu.com</a></p>
</blockquote>
<p>官方 github copilot 一年 100 美元，也就是 700
块。本人曾经薅一个月免费的试用过，自动补全代码，还能聊天询问看不懂的代码含义，确实很爽，但是价格实在伤不起。其他云厂商也提供了类似的工具，但是皆有
代码安全问题，泄露了公司代码，打工人也得跑路。</p>
<p>这么多开源的 LLM 模型，能否用开源的模型，玩自己的本地的 copilot
呢？下面我们就来解锁这个新姿势:</p>
<p><mark style="background: #fefe00A6;">特别说明</mark> :
<strong>该方法对于电脑上没有 GPU 的童鞋也适用</strong>。</p>
<h3 id="第一步-安装-ollama">第一步: 安装 ollama</h3>
<p>ollama 地址: <a href="https://ollama.com/">Ollama</a> <a
href="https://github.com/ollama/ollama?tab=readme-ov-file#ollama">GitHub</a>
<a
href="https://github.com/ollama/ollama/blob/main/docs/faq.md#where-are-models-stored">QA</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置环境变量: </span></span><br><span class="line">OLLAMA_MODELS=D:\AI\models</span><br><span class="line">OLLAMA_ORIGINS=app://obsidian.md*</span><br></pre></td></tr></table></figure></div>
<h3 id="第二步-通过-ollama-命令下载模型">第二步: 通过 ollama
命令下载模型</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">ollama run qwen2:7b           <span class="comment"># 下载并运行  4.4G</span></span><br><span class="line">/<span class="built_in">set</span> parameter num_ctx <span class="number">32000</span>  <span class="comment"># 设置上下文长度为32000个token</span></span><br><span class="line">/save qwen2:7b                <span class="comment"># 保存模型配置</span></span><br><span class="line">/bye                          <span class="comment"># 退出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型推荐 (保存位置: D:/AI/models)  </span></span><br><span class="line">ollama pull nomic-embed-text         <span class="comment"># 文本转向量 274M</span></span><br><span class="line">ollama pull mxbai-embed-large        <span class="comment"># 文本转向量 669M</span></span><br><span class="line">ollama pull starcoder2:3b            <span class="comment"># 代码补全   1.7G</span></span><br><span class="line">ollama pull deepseek-coder-v2:16b    <span class="comment"># 代码补全   8.9G</span></span><br><span class="line">ollama pull llava                    <span class="comment"># 图片解释   4.7G  </span></span><br></pre></td></tr></table></figure></div>
<p>支持的模型地址: <a href="https://ollama.com/library">library</a>
配置模型存储位置: <a
href="../28bae7ab0f7a286840f2bf0a5f342c3024da2942/#自定义模型存储位置和环境变量（可选）">Ollama
+ Open WebUI 本地 LLM#自定义模型存储位置和环境变量（可选）</a> <a
href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></p>
<p><img
src="https://pic1.zhimg.com/v2-3a6ed0378e74e1e8dbf4b184cceaf098_r.jpg" /></p>
<p><strong>下载过程中，如果发现网速太慢了，可以 ctrl +c
中断命令。然后重新执行 <code>ollama run codellama</code>
命令，可以断点续传。但是千万别关机，如果电脑关机，就只能从头开始了。</strong></p>
<p><strong>ollama 还支持很多其他的模型，如谷歌的 gemma、阿里的
Qwen、starcoder2 等</strong></p>
<p><img
src="https://pic2.zhimg.com/v2-c39389ca58346580a01be2a84e4fe3c5_r.jpg" /><img
src="https://pic1.zhimg.com/v2-42edca07188367e95305fbe94e2b4420_r.jpg" /><img
src="https://pic1.zhimg.com/v2-165dc49a99d05b31fddecb6663089068_r.jpg" /></p>
<h2 id="配置-continue-插件-推荐">配置 Continue 插件 (推荐)</h2>
<p>官网: <a href="https://www.continue.dev/">Continue</a> 源码: <a
href="https://github.com/continuedev/continue">GitHub -
continuedev/continue</a> 文档: <a
href="https://docs.continue.dev/setup/configuration">Continue</a></p>
<p>同时有同学私信，上篇文章中介绍的 <strong>cody ai 需要为每个项目配置
<code>.vscode/settings.json</code>，有没有一次配置，全局使用的方法？下面介绍的
continue 插件刚好满足这个要求</strong></p>
<p>安装插件</p>
<p><img
src="https://pic1.zhimg.com/v2-15f4ff7dd7441668a7bcf6586af45ef4_r.jpg" /></p>
<p>配置插件</p>
<p><img
src="https://pic2.zhimg.com/v2-124a411cc782dfe9a84d98f6ee944185_r.jpg" /></p>
<p>配置文件信息:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;models&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;title&quot;</span>: <span class="string">&quot;ollama&quot;</span>, <span class="comment"># title随便写</span></span><br><span class="line">      <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gemma&quot;</span>, <span class="comment"># model名</span></span><br><span class="line">      <span class="string">&quot;completionOptions&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;apiBase&quot;</span>: <span class="string">&quot;http://127.0.0.1:11434&quot;</span>,</span><br><span class="line">      <span class="string">&quot;provider&quot;</span>: <span class="string">&quot;ollama&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;tabAutocompleteModel&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="string">&quot;gemma&quot;</span>, <span class="comment"># title随便写</span></span><br><span class="line">    <span class="string">&quot;provider&quot;</span>: <span class="string">&quot;ollama&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;gemma&quot;</span>, <span class="comment"># model名</span></span><br><span class="line">    <span class="string">&quot;apiBase&quot;</span>: <span class="string">&quot;http://127.0.0.1:11434&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img
src="https://pic4.zhimg.com/v2-8ea93b298a341af629d00abc0cb7d063_r.jpg" /></p>
<p>代码补全效果:</p>
<p><img
src="https://pic2.zhimg.com/v2-f4c086eeda80c2ef3fa98266f3edeaf1_r.jpg" /></p>
<p>和 ollama 聊天:</p>
<p><img
src="https://pic2.zhimg.com/v2-44e55eca807d46b4120b5ebaf006ec29_r.jpg" /></p>
<p>为代码添加注释:</p>
<p><img
src="https://pic2.zhimg.com/v2-93c210b5b25ed6f4addc020667128b3d_r.jpg" /><img
src="https://pic2.zhimg.com/v2-7abcd15b6f4558c503d04219bc7f0b5d_r.jpg" /></p>
<p>vscode 中使用 ollama 其实还有很多插件，大家可以自己尝试: <a
href="https://github.com/ollama/ollama?tab=readme-ov-file#extensions--plugins">https://github.com/ollama/ollama?tab=readme-ov-file#extensions--plugins</a></p>
<p><img
src="https://pic3.zhimg.com/v2-a90a6e9ee49a7345eb18dccdac48a7d6_r.jpg" /></p>
<h3 id="工程级别上下文">工程级别上下文</h3>
<p><a
href="https://docs.continue.dev/features/codebase-embeddings">Continue</a></p>
<p><a href="https://ollama.ai/">Ollama</a> is the easiest way to get up
and running with open-source language models. It provides an entirely
local REST API for working with LLMs, including generating embeddings.
We recommend using an embeddings model
like <code>nomic-embed-text</code>: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ~/.continue/config.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;embeddingsProvider&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;provider&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ollama&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nomic-embed-text&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;apiBase&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://localhost:11434&quot;</span> <span class="comment">// optional, defaults to http://localhost:11434</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></p>
<h2 id="配置-cody-ai-插件">配置 Cody AI 插件</h2>
<p><img
src="https://pic1.zhimg.com/v2-ad32acc61d166426850fb1aed217b4fc_r.jpg" /></p>
<p><strong>通过 github 账号登录 cody AI，当然其他 google
账号也应该没问题</strong> <a
href="https://sourcegraph.com/cody/manage">官网</a> <a
href="https://sourcegraph.com/docs/tutorials">教程</a></p>
<p><img
src="https://pic1.zhimg.com/v2-70ac2afcd4de11a4a78174f67d4d39c8_r.jpg" /></p>
<p><strong>配置 cody AI</strong></p>
<p><img
src="https://pic2.zhimg.com/v2-5f2bd1e66f2866bbac09a66a930be515_r.jpg" /></p>
<p><strong>修改 cody ai 的配置:</strong> Cody › Autocomplete ›
Advanced:Provider</p>
<p><img
src="https://pic2.zhimg.com/v2-9f1a06f0d70b2020bb6070631132c3f1_r.jpg" /></p>
<p><strong>修改项目目录下的 <code>.vscode/settings.json</code>
文件。</strong> 这一步很重要，很多文章都缺少了这一步:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;cody.autocomplete.experimental.ollamaOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:11434&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: <span class="string">&quot;codellama&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><img
src="https://pic3.zhimg.com/v2-c651bd085255c48b3ebc712bd76586ae_r.jpg" /></p>
<p><strong>此时在该目录下编码代码，就能自动补全了 (如果还不能,
可以重启下 vscode)</strong>:</p>
<p><img
src="https://pic2.zhimg.com/v2-54f898faa54f5aaac26636b7c549397d_r.jpg" /></p>
<p>和 cody ai 聊天，编码:</p>
<p><img
src="https://pic1.zhimg.com/v2-ff5a975ecccc4c8d247e79f4cbf03ea8_r.jpg" /></p>
<h2 id="ollama-插件">Ollama 插件</h2>
<ul>
<li><a href="https://github.com/continuedev/continue">Continue</a></li>
<li><a
href="https://github.com/hinterdupfinger/obsidian-ollama">Obsidian
Ollama plugin</a></li>
<li><a href="https://github.com/longy2k/obsidian-bmo-chatbot">Obsidian
BMO Chatbot plugin</a></li>
<li><a href="https://github.com/pfrankov/obsidian-local-gpt">Obsidian
Local GPT plugin</a></li>
<li><a href="https://github.com/n4ze3m/page-assist">Page
Assist</a> (Chrome Extension)</li>
<li><a href="https://github.com/logancyang/obsidian-copilot">Copilot for
Obsidian plugin</a></li>
<li><a href="https://github.com/ex3ndr/llama-coder">Llama
Coder</a> (Copilot alternative using Ollama)</li>
<li><a href="https://github.com/bernardo-bruning/ollama-copilot">Ollama
Copilot</a> (Proxy that allows you to use ollama as a copilot like
Github copilot)</li>
<li><a
href="https://github.com/MassimilianoPasquini97/raycast_ollama">Raycast
extension</a></li>
<li><a
href="https://github.com/mxyng/discollama">Discollama</a> (Discord bot
inside the Ollama discord channel)</li>
<li><a href="https://github.com/omagdy7/ollama-logseq">Logseq Ollama
plugin</a></li>
<li><a
href="https://github.com/andersrex/notesollama">NotesOllama</a> (Apple
Notes Ollama plugin)</li>
<li><a href="https://github.com/samalba/dagger-chatbot">Dagger
Chatbot</a></li>
<li><a href="https://github.com/mekb-turtle/discord-ai-bot">Discord AI
Bot</a></li>
<li><a href="https://github.com/ruecat/ollama-telegram">Ollama Telegram
Bot</a></li>
<li><a href="https://github.com/ej52/hass-ollama-conversation">Hass
Ollama Conversation</a></li>
<li><a href="https://github.com/abrenneke/rivet-plugin-ollama">Rivet
plugin</a></li>
<li><a href="https://github.com/herval/cliobot">Cliobot</a> (Telegram
bot with Ollama support)</li>
<li><a
href="https://docs.openinterpreter.com/language-model-setup/local-models/ollama">Open
Interpreter</a></li>
<li><a href="https://github.com/rjmacarthy/twinny">twinny</a> (Copilot
and Copilot chat alternative using Ollama)</li>
<li><a
href="https://github.com/RussellCanfield/wingman-ai">Wingman-AI</a> (Copilot
code and chat alternative using Ollama and Hugging Face)</li>
<li><a href="https://github.com/tusharhero/aitelegrambot">AI Telegram
Bot</a> (Telegram bot using Ollama in backend)</li>
<li><a href="https://github.com/yaroslavyaroslav/OpenAI-sublime-text">AI
ST Completion</a> (Sublime Text 4 AI assistant plugin with Ollama
support)</li>
<li><a
href="https://github.com/kevinthedang/discord-ollama">Discord-Ollama
Chat Bot</a> (Generalized TypeScript Discord Bot w/ Tuning
Documentation)</li>
<li><a href="https://github.com/rapmd73/Companion">Discord AI
chat/moderation bot</a> Chat/moderation bot written in python. Uses
Ollama to create personalities.</li>
<li><a href="https://github.com/nischalj10/headless-ollama">Headless
Ollama</a> (Scripts to automatically install ollama client &amp; models
on any OS for apps that depends on ollama server)</li>
</ul>
<h2 id="参考">参考</h2>
<p><a
href="https://medium.com/@akshayd02/local-coding-assistant-3faa2b6719be">Local
Coding Assistant. Local-Coding-Assistant | by Akshay Dongare |
Medium</a></p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../28bae7ab0f7a286840f2bf0a5f342c3024da2942/#自定义模型存储位置和环境变量（可选）">Ollama
+ Open WebUI 本地 LLM#自定义模型存储位置和环境变量（可选）</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://github.com/ollama/ollama/issues/2551">Can we change where
the models are stored in windows · Issue #2551 · ollama/ollama ·
GitHub</a><a href="#fnref1" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>AI</category>
        <category>Agent</category>
      </categories>
  </entry>
  <entry>
    <title>Npm 配置国内源</title>
    <url>/6d601709f7477b517baf2a678bf0221c6bd7e53c/</url>
    <content><![CDATA[<p>刚安装的 npm
使用默认的源会感觉特别特别慢，所以，非常有必要使用国内的源，比如说众所周知的淘宝镜像源</p>
<ol type="1">
<li><strong>查看当前源</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li><strong>设置国内源</strong><a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure></div>
<ol start="3" type="1">
<li><strong>还原默认源</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></div>
<h2 id="参考">参考</h2>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://cloud.tencent.com/developer/article/1372949">npm使用国内镜像加速的几种方法-腾讯云开发者社区-腾讯云</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>打造一套知识笔记管理系统</title>
    <url>/6e508ab096e0a186a795dd726f21fb8429c4186e/</url>
    <content><![CDATA[<h2 id="一.-什么是知识管理系统">一. 什么是知识管理系统？</h2>
<p>文章开始前，我们先来问一个问题，什么是知识管理系统，它能帮助我们干啥？</p>
<p>那什么是知识管理系统呢？</p>
<p>我这里先不回答这个问题，我直接给你个场景你来看~</p>
<p><strong>假如你床头有 10
本书，你要在其中找到一本书，你会怎么找？</strong></p>
<p>你可能会说，扫一眼就找到了啊。</p>
<p>但是，假如你现在身处世界上最大的图书馆：美国国会图书馆，藏书超 2.1
亿本，现在你想在里边找到某一本书，请问你如何找？</p>
<p>一本一本翻吗？</p>
<p>累死你，2.1 亿这个数字我给你换算了一下，把 2.1
亿本书铺起来可绕地球近两圈。</p>
<p>不仅仅找书，图书馆每天还要在其中处理上千万次的查询、借书、还书、入库………</p>
<p>试问，假如你是图书管理员，仅凭借大脑，你能处理这么大的信息量么？</p>
<p>那么他们是如何是如何解决这些问题的？</p>
<p><strong>当然是靠着一套管理系统，让一切规律化，规则化，系统化，把人解放出来。</strong></p>
<p><img src="/images/1614591657.png" /></p>
<p>同理，<strong>我们的知识管理系统就相当于这个图书管理系统，而知识就如同这一本本图书，当有了套系统去管理它们以后，我们就相当于拥有了另外的一个大脑</strong>，如此就可以把我们大脑不擅长的东西，全部扔给这个外脑，让它帮助我们记忆，整理等等。</p>
<p>好了，通过以上，你知道了<strong>知识管理系统就相当于我们外接一个大脑</strong>，那么为什么说你必须建立外脑呢？</p>
<h2 id="二为什么你必须建立外脑">二：为什么你必须建立外脑？</h2>
<h3 id="大脑是用来思考的不是用来记忆的">1
大脑是用来思考的，不是用来记忆的。</h3>
<p>记忆，尤其是死记硬背，是最反人性的，进化论告诉我们，大脑只会记住最能帮助我们生存的信息，至于无关紧要的，它为了节省脑力资源会尽可能的忘记它们~</p>
<p>同样的大脑处理信息也是如此，它只能处理眼下的小部分信息，当面对大量信息处理的时候，它就会罢工。</p>
<p>我们平常用脑的时候，感觉思绪乱，头昏脑涨，就是因为大脑处理的信息已经超过了它的负荷，大脑的机制天生就不是为了记忆和处理大量信息而设计的！！！</p>
<p>但是在现实生活中，我们又需要处理和记住很多信息和知识点，以便使用的时候可以随用随取，那应该怎么办呢？</p>
<p>当然是建立外脑！！！</p>
<p>前面说了我们大脑不擅长的记忆和大规模信息管理，但这却是我们外脑所擅长的。我们的大脑会遗忘，但是外脑它永远也不会忘的，你建立的这个外脑就会和你的大脑形成互补，各发挥其所长。</p>
<p>正如上面的图书管理案例，我们不需要记住每本书的信息，我们想要的时候，只要知道怎么从图书管理系统中找到它们即可。</p>
<p>所以想发挥大脑真正的威力，就把它从记忆中解放出来，让它去思考，而不是让它去记忆。</p>
<p><img src="/images/1614591657.jpg" /></p>
<p>有同学看到这里可能会抬杠：有必要弄这么一个外脑吗，我大脑就够用了啊。</p>
<p>当你只想做个 “撸瑟”
的时候，觉得这辈子能搬个砖，扛个水泥就够了，那么你就可以离开了，因为你确实没有这个需求。</p>
<p>但是你想获得不断成长，要获得更强的能力，想要在社会的激烈竞争中有足够的竞争力，你的知识储备必然需要被扩大，这种情况下，你要靠脑子记忆吗？</p>
<p>回想你上学的生涯就知道了，那是多么痛的领悟~</p>
<p>正如上文案例，你只有十本书的时候，当然不需要建立外脑，想要啥扫一眼就够了，但是当你有
1000 本、10000 本、一百万、一个亿本的时候呢？</p>
<p>以上只是我们必须建立外脑的一个理由之一，除此之外，还有一个更重要的理由。</p>
<h3 id="外脑是为了帮助大脑更好的记住">2
外脑是为了帮助大脑更好的记住</h3>
<p>有逻辑关系的知识，你用的时候才能想起来。</p>
<p>为什么会这样说呢？</p>
<p>同样我们先不回答这个问题，给你来个小测试。</p>
<p>现在思考一下：我让你说水果的名字，你看看你能说出多少个水果。</p>
<p>你可能会说，这有什么难的：苹果，香蕉，梨、橘子、火龙果、西瓜….</p>
<p>但是你发现越往下，你思考的时间就越长，越说不出来。</p>
<p>你可以先暂停阅读试试~</p>
<p>那么我再换一个问题，请告诉如西红柿炒鸡蛋怎么做？</p>
<p>你可能想都不用想，直接就可以脱口而出：准备食材–&gt; 洗菜切菜—&gt;
爆锅开炒—&gt;…..</p>
<p>为什么会这样？</p>
<p><strong>因为前者大脑索引的是一个点一个点的信息，后者索引的一整个结构，一整套流程，一整张知识的网。</strong></p>
<p>你看，点状的东西被大脑索引是很困难的，但是有逻辑有结构的东西则不同，后者一索引就是一大片，一整个体系。当你把点状的知识编织成一张网后，它们就会形成你的思维模型，这样，你用的时候才能想起来。</p>
<p>很多人抱怨，学过的东西用不出来，反思一下，从小到大，你调用你知识储备的时候是不是都像是上面想水果一样，想到哪是哪。</p>
<p>仔细反思下：</p>
<blockquote>
<p>你整理过你的知识吗？</p>
<p>你的知识是成结构的吗？</p>
<p>你脑中有这么一张庞大的知识结构网吗？</p>
</blockquote>
<p>而把知识打入外脑的过程就是在编织你这张网，所以建立外脑的本质就是体系化你知识的过程！！！</p>
<p><img src="/images/1614591658.jpg" /></p>
<p>说了那么多，想必你已经知道建立『外脑』的重要性了，那么如何建立外脑呢？</p>
<h2 id="三如何建立外脑">三：如何建立外脑？</h2>
<p>在正式开始前，我们先了解下外脑是由什么构成的~</p>
<p>其实整个外脑就是由两个系统构成的~</p>
<p><strong>第一个是储存笔记的系统。<br />
第二个则是索引笔记的系统。</strong></p>
<p>这是什么意思呢？</p>
<p>你可以理解成<strong>一个放，一个拿</strong>，这里知道有这么个东西即可，后文会展开介绍。</p>
<p><img src="/images/1614592169.jpg" /></p>
<p>而整个外脑的搭建可以归纳为三步走~</p>
<blockquote>
<p>第一步：把收集知识有序的装进去。</p>
<p>第二步：把知识整理好，设立规则，以供随时提用。</p>
<p>第三步：用的时候可以迅速的把需要的知识拿出来。</p>
</blockquote>
<p>整篇文章的核心下面一张图就概括了，但是为了让你彻底搞定这件事，我会掰开了揉碎了，一步步手把手带你搭出你的知识管理系统。</p>
<p><img src="/images/1614591659.png" /></p>
<p>下面我们先从搭建存放笔记的储存体入手，从零开始搭建整个外脑系统~</p>
<h3 id="选择外脑载体">1、选择外脑载体</h3>
<p>一台能正常跑的电脑系统，前提就是主机，显示屏这些硬件载体，你操作系统再牛逼，没有主机你也跑不起来。</p>
<p>同理，我们的外脑的搭建也是如此，所以建立外脑的第一步，就是找到外脑的载体，即存放我们知识的工具。</p>
<p>那么市面上提供给我们现成的外脑载体都有哪些呢？</p>
<p><img src="/images/1614591659.jpg" /></p>
<p>太多太多了，主流的有道云笔记、印象笔记、onenote
等，都可以作为我们外脑的载体，它们各有优缺点，想详细了解的同学请自行了解，我这里就不展开了，大家凭借喜好选择，总之，都是现成的，任君选择~</p>
<p>我本人的外脑载体为有道云笔记，下文演示，均以此笔记做案例，其他载体同理~</p>
<p><strong>当我们确定了大脑的载体以后呢？</strong></p>
<p>建立几个文件夹后，就开始一顿操作猛如虎，类似下面这样的吗？</p>
<p><img src="/images/1614591660.jpg" /></p>
<p><strong>这样的外脑系统有什么问题呢？</strong></p>
<p>① 层次结构混乱：这样长长的列下来，我不知道你头大没有，别说提取了，我单单看到这一串，头就先大一圈了。</p>
<p>因为这样混乱的结构，含糊其辞的目录，会让你翻看这些东西的时候，对这种凌乱有一种厌恶感。</p>
<p>② 提取困难：混乱的内容，会让真正用的时候找不到，所有的笔记，如果用的时候找不到，或者需要很大的功夫才能找到，那这个外脑系统就没多大意义了。</p>
<p>当你笔记内容少的时候，你还能记得那是哪，但是当大到一定量级了呢，你的外脑一定会崩溃。</p>
<p>③ 知识碎片化：以上所建立的文件夹，之间都是割裂的，笔记与笔记间连接不起来。</p>
<p>我们在文章开始的时候就说了，外脑的作用除了帮我们承担记忆的负担，还有一项职能就是辅助我们大脑为我们建立起知识体系，如果你的笔记之间都是一个个散乱的点，那么外脑的意义就要被砍掉一半。</p>
<p>一句话来说，上面的那些都不是一个好的外脑，因为它并没有解决我们为什么建立外脑的本质问题。</p>
<p><strong>那么什么是好的外脑呢？</strong></p>
<p>① <strong>知识结构体系化</strong>：笔记与笔记间的知识点不分散，不是乱七八糟的，不是碎片化的。</p>
<p>② <strong>方便管理</strong>：看到不头大，结构清晰，一目了然。</p>
<p>③ <strong>提取高效</strong>：最好高效到如同探囊取物，想到就能秒拿到。如果这一点满足不了，找一个想要的信息要半天，那么这套系统就没有多少意义。</p>
<p><img src="/images/1614591661.jpg" />
<!--SR:!2025-01-03,486,250--></p>
<p>好了，到了这里你知道了，一个好的外脑的标准，随着而来的一个问题就是，如何才能让你的外脑达成以上标准。</p>
<p><strong>那么如何让外脑满足以上条件呢？</strong></p>
<p>正如电脑的 windows 系统一样，装上了，我们就无需用乱七八糟反人性的 dos
命令去让计算机工作，所有的一切都有序的跑在这套清爽的图形化系统之上。</p>
<p>同理想让外脑不乱，你必须部署一套规则化的操作系统，让我们的知识笔记全部跑在这套管理系统之上，保证底盘不乱，根基稳，而不是随性而建。</p>
<p>所以找到载体之后，不是一顿操作猛如虎，而是要给我们的外脑装上一个类似
windows 一样的底层系统，而我们这套跑在外脑载体上的系统就是 GTD
系统，所以我们建立外脑的第二步就是给它装上这套系统。</p>
<h3 id="部署-gtd-操作系统">2、部署 GTD 操作系统</h3>
<h3 id="什么是-gtd-系统">什么是 GTD 系统？</h3>
<p>GTD 的英文全称是：Getting Things Done</p>
<p>这是由著名的时间管理人戴维・艾伦在他的著作《尽管去做》里提出的一套<strong>移动硬盘式的任务管理方法，它的核心精髓是把所有待办任务都从大脑里移出去，清空大脑，用外部的工具去管理任务，让大脑的全部资源都用来思考，而又不会遗漏任何一件事。</strong></p>
<p>部署了 GTD 系统在笔记本上，我们就可以借助 GTD
的工作流，不仅拥有了知识管理系统，而且还把我们的日程管理系统也都囊括其中了，极大幅度的解放了我们的大脑。</p>
<p><img src="/images/1614591661-1.jpg" /></p>
<h3 id="如何部署-gtd-系统到笔记本上">如何部署 GTD 系统到笔记本上？</h3>
<p>GTD 工作流总共有 5 个步骤：==收集、厘清、整理、归档、回顾==。</p>
<p>而把它用到我们的外脑上就变成了<strong>信息管理流</strong>，同样也是五个步骤：</p>
<p>GTD 信息流：收集箱、等待处理、将来可能、归档资料、专题研究。
<!--SR:!2025-01-08,490,250--></p>
<p><img src="/images/1614591662.png" /></p>
<p>什么意思呢？</p>
<p>下面分别介绍一下，我们设置的这五个文件夹可以干什么。</p>
<h3 id="收集箱">收集箱</h3>
<p>这个就相当于你在各大平台点的收藏，比如我们拿手机刷到好文了（比如这篇文章哈~），我们就可以把各大平台的好文，一键集中扔到这个收集箱中。</p>
<p>这个东西的作用就是负责收集，你不必操心该放到那个分类，所有的好东西，一股脑扔进去就
OK 了，这样就可以大幅度的解放我们分类归类的时间。</p>
<p>等到了一个固定的时间，比如晚上统一处理，这样既不打断我们当前手头的事情，同时又确保了收藏的文件不会乱七八糟，又能让你认真的评估和精读这篇文章，确保进入你笔记的都是精品。</p>
<p><img src="/images/1614591663-1.jpg" /></p>
<h3 id="等待处理">等待处理</h3>
<p>这个文件夹承载我们当天的日程，备忘录，记事本，沉思录、日记本等等。</p>
<p>你应该有体会，大脑凭记忆力处理这些事情有多坑爹，我们就可以把这些大脑不擅长的事情交给外脑处理。</p>
<p><strong>把日程，待办事项等全部移到这个文件夹里，把这些事情全部从大脑中清理出去，想知道接下来要做什么事情直接来翻这个文件夹</strong>，效率高的飞起。</p>
<p><img src="/images/1614591663.jpg" /></p>
<h3 id="将来可能">将来可能</h3>
<p>这里主要承载计划、规划、想法、点子类的东西。</p>
<p>比如你看到了一个点子，发现了一个项目，你就可以先把它扔到这里，作为你的灵感库。</p>
<p><img src="/images/1614591664.jpg" /></p>
<h3 id="归档资料">归档资料</h3>
<p>这个是我们的知识的大本营，最终所有的信息和笔记都会被归入到这个文件夹中，我们收集到的信息通过整理完毕以后，就放入这里，以供随手复习和使用的时候随时调取。</p>
<p><img src="/images/1614591664-1.jpg" /></p>
<h3 id="专题研究">专题研究</h3>
<p>比如我最近对唱歌比较感兴趣，那么我就可以单独这专题这里建立一个文件夹，专门服务于唱歌，当研究出成果了，再把它归入到归档资料中。</p>
<p><img src="/images/1614591665.jpg" /></p>
<p>当你在你的笔记本上，创建了这个 5 个文件夹后，你的 GTD
系统就部署完成了。</p>
<p>你看，部署了 GTD，通过 GTD
来处理信息后，你的外脑是不是特别有层次感，是不是感觉外脑像是有了灵魂一样~，而不是类似于上面那四个笔记长长的一串。</p>
<p><img src="/images/1614591665-1.jpg" /></p>
<p>那么部署完 GTD 系统后就完了吗？当然不是。</p>
<p>完成了最底层系统的搭建，我们就要开始去处理输入进来的笔记了，前面说了，最终所有的笔记都会被汇总归档到『归档资料』这个文件夹之中，所以我们管理笔记的核心就在此文件夹中。</p>
<p>但是那么多的笔记，怎么去管理啊，还是像上面图中那四个案例一样，列出长长的一串文件夹吗？</p>
<p>下面我们进入本文的第三个模块，来解决以上问题。</p>
<h3 id="规则化信息">3、规则化信息</h3>
<p>给外脑立结构、给笔记立规矩~</p>
<p>我们都知道无规矩不成方圆，如果归入进来的笔记没有规则，那就会乱七八糟，完全没效率可言，所以<strong>我们必须要给输入进来的笔记进行处理，教给它们规矩，让它们变得清晰有规律，只有这样，你提取它的时候才能迅速找到你想要的。</strong></p>
<p>但是要设立那些规矩呢？如何设立呢？</p>
<p>下面提供四大原则，保证让你的笔记规规矩矩的。</p>
<h3 id="最简层原则">最简层原则</h3>
<p>什么是最简层原则？</p>
<p>所谓最简层原则就是<strong>让文件夹尽可能的少，层级尽可能的少</strong>，因为只有数量少，你看起来才不会头大，如果还是一层又一层的文件夹，那就和前面你看到的那四张笔记没啥差别了。</p>
<p>那么如何才能尽可能的少呢？</p>
<p>当然是找一个<strong>可以把所有东西都包括进来的维度，它符合之前文章提到的
MECE 原则，既涵盖了所有笔记特性，又不遗漏，同时又不冗长。</strong></p>
<p>我这里就提供给你一个这样的维度，以笔记的 “用处”
这一个维度进行划分，即：『学习』『工作』『生活』。</p>
<p>你可以随便想，从用处来论，任何笔记都不会逃过这个三个分类的，所以它是符合
MECE
的，我们就以它作为划分知识的标准，作为『归档资料』的打底文件夹，这样我们就实现了最简层。</p>
<p><img src="/images/1614591666.jpg" /></p>
<p>打底文件夹有了，我们就需要根据自己的需求对文件夹做一些进一步细分，但如果你还是建立一串文件夹，整个笔记体系必然会乱，那么如何管理下一级的文件夹呢？</p>
<p>这就用到了让你笔记规矩的第二个原则！！！</p>
<h3 id="目录编码原则">目录编码原则</h3>
<p>什么是目录编码原则？</p>
<p>你可以先思考下这个问题，一本书有那么多的知识点，它是怎么排版才让内容清晰一目了然的？</p>
<p>当然是把图书知识结构整理成目录按照层次编码啊，如下图，这样你看起来结构就会非常清晰，一目了然~</p>
<p>同理，我们对文件夹的层级管理，同样采用这种方式，让文件夹的层级与层级之间建立起逻辑关系。</p>
<p><img src="/images/1614591667.jpg" /></p>
<p>那如何目录编码呢?</p>
<p>这里不进行赘述，我给你做了一张图，扫一眼估计你就会了。</p>
<p><img src="/images/1614591667-1.jpg" /></p>
<p>除了建立起清晰的逻辑层次外，为什么你一定要用目录编码？</p>
<p>因为有了目录编码后，笔记就能实现自动排序！！</p>
<p>云笔记一般都是按照名称排序的，比如，数字 1 在数字 2 前面，字母 A
在字母 B 前面，如此就会非常有序，可参考微信好友目录哈~</p>
<p>如果你没给它这样规则化命名，则会出现乱序情况，会让笔记看起来乱七八糟的，但如果你设置了编码，就能实现自动排序，非常爽啊~</p>
<p><strong>所以我们采用图书目录编码，一箭双雕，不仅让结构逻辑层次清晰，而且还能实现自动排序。</strong></p>
<p>以上我们说了让你笔记规矩的四个原则的前两个原则，有了它们可以让你的笔记结构层次有了一个质的提升，但仅仅是层次清晰还远远不够，想要你的笔记规矩，你还需要第三个原则。</p>
<h3 id="统一命名原则">统一命名原则</h3>
<p>什么是统一命名的原则？</p>
<p>即：无论是文件夹还是笔记本身，都要遵循一套标准的命名原则，只有这样你的笔记才不会乱，切记把笔记命名成这样的无格式笔记，一旦养成这样的习惯，后期会让你有一种想锤死你自己的感觉，相信我~</p>
<p><img src="/images/1614591668.jpg" /></p>
<p>那么用什么标准命名呢？怎么命名？</p>
<p>下面我给出三个方法，让你解决这个问题。</p>
<h3 id="用黄金圈法则命名文件夹">1. 用黄金圈法则命名文件夹</h3>
<p>你学习的任何一个知识点或专题都逃不过黄金圈的终极三问，即：<strong>是什么（what）、为什么（why）、如何做（how）。</strong></p>
<p>比如你想研究演讲的话题，那么你就可以创建三个文件夹：</p>
<blockquote>
<ol type="1">
<li><p>什么是演讲？（what is 演讲）</p></li>
<li><p>为什么要学习和训练演讲？（why 演讲）</p></li>
<li><p>如何训练演讲？（how to 演讲）</p></li>
</ol>
</blockquote>
<p>当你创建了这个三个文件夹后，你就可以把演讲相关的所有知识点按照黄金圈分出的三个文件夹分别归属，如此每个文件夹对应啥内容，一眼望穿~</p>
<p>你看，三个文件夹解决一切，而且看起来是那么的清晰，那么的一目了然~~
<!--SR:!2025-01-02,485,250--></p>
<p><img src="/images/1614591669.jpg" /></p>
<h3 id="笔记文件规范化命名">2. 笔记文件规范化命名</h3>
<p>上面讲的是文件夹的命名方法，这里则是具体到的某个笔记文件命名。</p>
<p>这里也没有太多可讲的，我给你做了一张图，提供了一个公式，你看一眼就秒懂了。</p>
<p><img src="/images/1614591669-1.jpg" /></p>
<p>规则化命名，效果示范~~</p>
<p>你看，这样的笔记标题命名和上图的两小人那张笔记标题命名，那个看起来让人爽？</p>
<p><img src="/images/1614591670.jpg" />
<!--SR:!2025-01-21,551,270--></p>
<h3 id="意义不明的层坚决不要">3. 意义不明的层，坚决不要。</h3>
<p>很多同学在整理笔记到时候都会建一个『其他』的文件夹，请问，你这个『其他』是什么？</p>
<p>你之所以建这个『其他』就是因为，<strong>你也搞不通某个笔记文件属于那个类别了，不好分类的所幸一股脑的扔到这里边。</strong></p>
<p>我告诉你，你在用的时候是根本不会去翻『其他』这个分类的，因为它在你脑中就没有啥概念，你都不知道你放了些啥，应该放些啥，又怎么能指望提取的时候找到呢？</p>
<p>所以，这种意义不明的层，坚决不要。</p>
<p><img src="/images/1614591670.png" /></p>
<p>到了这里，你知道了让笔记规矩的三个原则，但是仅仅知道以上三个原则，还不能让它们很规矩，想要他们更规矩一些，你还需要第四个原则。
<!--SR:!2025-01-04,492,250--></p>
<h3 id="标签化原则">4 标签化原则</h3>
<p>什么是标签化原则？以及为什么要用标签去管理我们的笔记？</p>
<p>我先不回答这个问题，给你出道小题~</p>
<p>假如让你给伟人归类，你会把毛爷爷归到哪一类？</p>
<p><img src="/images/1614591671-1.jpg" /></p>
<p>你会把毛爷爷归到政治家？思想家？军事家？……
抱歉，这些头衔毛爷爷都占了~</p>
<p><img src="/images/1614591671.jpg" /></p>
<p>你看，你是没有办法把他按单一的维度归类的。</p>
<p>如果你单一的把毛爷爷归到一个分类中，比如
“诗人”，那么搜索其他分类，就找不到毛爷爷了，那你就把毛爷爷给定住在某个分类中了，这样做就是有漏的，同理，我们再来看个案例~</p>
<p>你会把前两年大火的《战狼
2》归到什么分类中？你能对它进行单一归类吗？</p>
<p><img src="/images/1614591673.jpg" /></p>
<p>我们之前的文章中讲维度的时候就已经说了，<strong>任何一件事物都可以有很多个维度，如果你把某事物按照一个维度归类，你就相当于把它给定死了。</strong></p>
<p>同理我们的知识依旧如此，很多人的笔记之所以没有效率，用的时候找不到，很大的原因就是你把知识给限定死了。
<!--SR:!2025-01-08,495,250--></p>
<p>比如你学到了一个写作技巧 “如何煽情” ~</p>
<p>如果你单纯的把这个技巧归入到 “写小说”
这个分类中，只有写小说的时候，你才会想起它，那么这个这个知识点就让你学死了，因为这个技巧完全可能套用到写文案，写报告等等….</p>
<p>那么如何解决这个问题呢？</p>
<p>这就回答了上面，为什么要用标签来管理笔记了的问题了。</p>
<p>打标签就是为解决这个问题设置的，你可以给一个知识点打上无数个标签，当你搜索任何一个标签维度的时候都能够索引到这个知识点。</p>
<p>正如上面案例中，只要你给毛爷爷打上了标签，无论你搜 XX
家，都能找到毛爷爷。而《战狼
2》中你搜索商业片也能找到它，搜索战争片也能找到它，搜索吴京也能找到它….</p>
<p>如此，我们就不用纠结于某个知识点具体该归入『储存体』的那个文件夹中，无论是你放到那，只要标签打上了，就不用担心索引问题。</p>
<p>当你部署了一系列标签的时候，你的知识就活了。</p>
<blockquote>
<p>比如：『记忆』这个标签，当你想要这个标签的内容的时候，云笔记就会帮助你，把所有这个被你标记过这个标签的文章给找出来</p>
<p>无论它是你过去的读书笔记，或者是电视剧看到的，演讲听到的，课程中学到的，总之，只要包含这个标签的，一股脑的都会给你抓出来，供你调遣使用……</p>
</blockquote>
<p><img src="/images/1614591673.png" /></p>
<p>下面给你展示一下，我是如何给一个课程打标签的！！！</p>
<p><img src="/images/1614591674-1.png" /></p>
<p>好了
，看到这里你可能会说，完成以上部署，笔记的整体效率是高了很多，知识也给盘活了，但是以上知识之间仍然是割裂的。</p>
<p>笔记与笔记间仍然形成不了体系，而且笔记量和标签一多，标签本身也就乱了，都不知道标签那个是哪个了，那如何解决这一系列问题呢？</p>
<p>下面，我们就进入本文的最后一个模块，部署索引体，让你的外脑的效率彻底飞起来~~</p>
<h2 id="四部署索引体系统">四：部署索引体系统</h2>
<h3 id="什么是储存体和索引体系统">1 什么是储存体和索引体系统？</h3>
<p>储存体就是我们以上忙活的，那都是在部署储存体的系统，即在文件夹里的那一套。</p>
<p>我们前面说了，我们通过标签调取笔记或信息，而索引体系统，就是把标签与标签之间也建立起逻辑关系，形成体系和结构，最后内化成我们的知识体系。</p>
<p>一句话解释，<strong>储存体用于管理 “文件夹的系统”，而索引体则用于管理
“标签的系统”。</strong></p>
<p>为了让两者更有辨识度，文件夹系统作为储存体识别符号『C』，标签系统作为索引体，识别符『S』。</p>
<p><img src="/images/1614591674.png" /></p>
<h3 id="如何搭建索引体">2 如何搭建索引体？</h3>
<p>① 底层系统搭建</p>
<p><strong>储存体有 GTD
作为底层操作系统，那么索引体同样也应该有操作系统作为分类。</strong></p>
<p>索引体的分类规则就是我们前文说的『学习』、『工作』、『生活』三个分类，因为你笔记上所有的东西都逃不过这三点，它是符合
MECE 的。</p>
<p><img src="/images/1614591676.png" /></p>
<p>工作和生活的分类我这里不多介绍，因为这个体系不体系无所谓，大家按照自己的喜好打标签即可。</p>
<p>这里主要介绍的是『学习』，因为这才是承载我们知识标签的大本营，我们所有的知识标签都以这个分类为底。</p>
<p>那么在『学习』这个分类底下，应该怎么去构建知识架构呢？</p>
<p>② 一个维度分类所有知识标签</p>
<p>体系的构成一定有底层分类作为支撑的，所以想要把零散的标签，编织成系统就需要对他们进行分类，那么从作用的维度，你会把
“所有的知识” 标签分成哪几类？</p>
<p>可能每个人都有自己的标准~</p>
<p>我本人按照和参考了 “儒家的最高理想”
把一个人的一生所有的知识分成了四类：
<strong>即：修身的知识、齐家的知识、治国的知识、平天下的知识~</strong>
哈哈，比较中二，不过我看着很顺眼，这个分类仅供参考，如果你也觉得这个维度不错，可以直接拿去用~</p>
<p><img src="/images/1614591676-1.png" />
<!--SR:!2024-12-01,463,250--></p>
<p>好了，有了这个维度，你就可以把你在储存体里打上的标签，按照这四个维度，分门别类的整理在这里边即可，我截取一段我『索引体』系统中的整理效果，供大家参考~</p>
<p>你可以看出来，当『索引体』逐渐完善以后，它就是一套完整，清晰的知识体系~~</p>
<p><img src="/images/1614591677.png" /></p>
<p>③ 区别符号</p>
<p>你可能看到索引体中每个对象的前面都有个符号，有的符号是『 #
』有的符号是『 – 』，这是什么意思呢？</p>
<p>这两个符号是区别符号，前面有『 # 』的，说明它是标签，而前面有『 –
』的说明它不是标签。</p>
<p><strong>这些东西的存在仅仅是为了连接标签，把标签串联成系统的连接符号，帮助我们看的更清晰，更有结构和层次感，它们是不参与索引的。</strong></p>
<p>当然『 – 』符号你可加可不加，但是『 #
』这个符号，我建议一定要加上，原因会在下面说。</p>
<p>④ 通过『索引体』快速提取内容</p>
<p>当一切都搭建完毕以后，剩下的就是我们提取东西的时候了，你可以通过单击标签提取，但是我最常用的就是搜索提取，想要啥，直接搜索，如探囊取物一样酸爽。</p>
<p>比如：在我笔记中，我搜索『写作』这个标签，你看~，云笔记会把我打这个标签的所有内容都给我找了出来。</p>
<p>无论是我个人的随手感想、我读书的笔记，或者我收集到的任何东西，只要它是在这个标签之下，瞬间提取~~</p>
<p><img src="/images/1614591677-1.png" /></p>
<p>⑤ 如何让提取效率更高？</p>
<p>我们在实际的提取笔记的场景中，经常会遇到一个问题~</p>
<p>比如一本书的读书笔记，就在这一篇笔记中，它就可能涵盖无数个知识点，即使我用标签定位到了这篇笔记，想要找到笔记中的我想要的东西，也要翻看好久，那么有没有瞬间就能找到我想要的信息的方法呢？</p>
<p>有的，解决方案就是在笔记文件内处处打标签，如此可以瞬间找到我们想要的内容。</p>
<p>比如下图，我就在这个笔记的某一处的知识点，打上了三个标签，当我需要找这三个标签任意一个的时候，云笔记会迅速帮我找到它所在的位置，并且打上高亮，这样整篇文章都变成了我标签系统中的一个个知识点，它不再属于原作者，而是属于我体系中的一部分。</p>
<p>这就回答了上面所说的为什么要在标签上加一个
<code>#</code>，原因就在这，如果你不加这个 #识别符号
，搜索到的东西就会乱七八糟，异常痛苦啊，这是坑，我已经替你们踩过了~</p>
<p><img src="/images/1614591678.png" /></p>
<p>好了，到了这里，整篇文章也到了结尾了，这个剩下的你只需要在不断的学习过程中去完善和填充这个骨架，最终它就会形成一张庞大的知识结构网，到时候你就神功大成，就可以任意纵横了。</p>
<p><strong>打造完毕后的注意事项</strong></p>
<p>打造完毕后最重要的事情是什么？</p>
<p><strong>1. 把笔记软件本身玩熟</strong></p>
<p>因为这篇文章不是介绍软件功能的，所以几乎没有提到软件本身提供给我们的功能，包括日程模板、思维导图、ORC
等等太多太多了…..</p>
<p>你要是懂得笔记软件提供给我们的各种功能，那么你一定可以玩的非常
6，这个大家请自行了解，网上有的是介绍的，我这里不进行赘述了。</p>
<p><strong>2. 规律性的清理收集箱</strong></p>
<p>正如你装修房子一样，在装修的时候你可以一次性装修的美轮美奂，但是在生活中如果你邋邋遢遢，臭袜子，脏东西到处扔，很快你的新房子也就破旧了，想要让他一直焕然一新，高效运行，你就必须养成干净，卫生，自律的生活习惯。</p>
<p>同理我们的笔记系统依然如此，我们这次打造了一套超级牛逼的系统，但是如果你收集到的资料，长期堆积在收集箱中不去清理，内容被到处归类，那么这套系统很快就会被你搞残。</p>
<p>所以你的习惯，才是保持这套系统高效运转的关键！！！！！！！！</p>
<p>我个人的清理习惯是，每个周末拿出固定的时间，清理一次收集箱，当然如果你比我勤快，且时间充裕，完全可以一天一清理，这样肯定会更好。</p>
<p><strong>3. 迭代内容，删掉过时的东西，填充空白的内容。</strong></p>
<p>刚开始建立起你的外脑的时候，不可能一下子就建成类似我外脑那样的丰富，肯定会有很多需要完善的地方，不断迭代，更新，这才是你的外脑能持续运转，并且越用越顺手的核心。</p>
<p>最后提醒一句：外脑要时常翻阅，只有你时常翻阅它，它才会内化到你的大脑中。</p>
<p><img src="/images/1614591678-1.png" /></p>
<p>文章到这里就结束了，下面我们把上面的内容总结一下！！！</p>
<h2 id="小结一下">小结一下</h2>
<h3 id="一什么是知识管理系统">一：什么是知识管理系统？</h3>
<p>知识管理系统就是帮助我们管理和记忆知识的第二大脑，外脑。
<!--SR:!2024-10-18,435,250--></p>
<h3 id="二为什么要搭建外脑">二：为什么要搭建外脑？</h3>
<ol type="1">
<li><p>信息量多了，我们的大脑是无法记住的，我们需要通过别的方式<mark style="background: #fefe00A6;">记住</mark>
它，并且在用的时候，可以随手提取。</p></li>
<li><p>搭建外脑，本身就是把零碎的东西<mark style="background: #fefe00A6;">体系化</mark>
的过程，就是搭建知识体系的过程，大脑喜欢有结构的东西。
<!--SR:!2024-12-11,476,250--></p></li>
</ol>
<h3 id="三如何搭建外脑">三：如何搭建外脑?</h3>
<p>外脑的构成分成两个部分，第一部分为储存体搭建，第二部分为索引体搭建。</p>
<p>①：搭建储存体</p>
<blockquote>
<p><strong>什么是储存体？</strong></p>
<p>储存体就是管理文件夹、储存笔记的系统</p>
<p><strong>如何搭建储存体？</strong><br />
1. 以 GTD 信息流作为底层系统</p>
<ol start="2" type="1">
<li>规则化信息需要遵循四大原则，即：</li>
</ol>
<p>（1）最简层原则<br />
（2）目录编码原则<br />
（3）统一命名原则<br />
（4）标签化原则 <!--SR:!2024-12-26,480,250--></p>
</blockquote>
<p>②：搭建索引体</p>
<blockquote>
<p><strong>什么是索引体？</strong></p>
<p>索引体就是管理标签的系统。</p>
<p><strong>如何搭建索引体？</strong></p>
<ol type="1">
<li><p>以『学习』、『工作』、『生活』三分类为底层。</p></li>
<li><p>用一个维度涵盖所有『学习』的知识标签：修身的知识、齐家的知识、治国的知识、平天下的知识。</p></li>
</ol>
<p>如何进一步提升索引效率？</p>
<p>笔记内处处打标签 <!--SR:!2024-12-27,480,250--></p>
</blockquote>
<p>③：保证外脑的高效运转</p>
<blockquote>
<ol type="1">
<li><p>玩转笔记软件功能</p></li>
<li><p>规律的清理收集箱</p></li>
<li><p>不断的填充完善，迭代更新笔记。
<!--SR:!2025-01-07,489,250--></p></li>
</ol>
</blockquote>
<p><strong>全文复习导图</strong></p>
<p><img src="/images/v2-30e62eda1a5708b882269c27fe416175_r.jpg" /></p>
<p>原文：https://zhuanlan.zhihu.com/p/191519306</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题添加访问量统计功能</title>
    <url>/71f6d9657f3765736920778e47beb31bca7b24ee/</url>
    <content><![CDATA[<h2 id="开启不蒜子访问量统计功能">1. 开启不蒜子访问量统计功能</h2>
<p>在<code>themes/next/_config.yml</code> 添加属性</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<h2 id="解决live2d冲突问题">2、解决live2d冲突问题</h2>
<p>在<code>themes/next/layout/_partial/footer.njk</code>中隐藏busuanzi组件的外层span
<img src="/images/Pasted%20image%2020221017182619.png" /></p>
<p><strong>参考:</strong></p>
<p><a
href="https://www.jianshu.com/p/c9f83d5b893a">Hexo博客添加访问量统计 -
简书</a></p>
<p><a
href="https://moguangpeng998.github.io/2020/06/13/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%92%9C%E5%AD%90%E5%92%8Clive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Hexo博客不蒜子和live2d看板娘冲突问题解决方案
| MoonBird博客</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>效率</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn 简介</title>
    <url>/783e6c1b8b76139f2840a078b9e9bd8817d41c3f/</url>
    <content><![CDATA[<p>Yarn 是 Facebook 发布的新一代包管理工具，旨在解决以往使用 npm
作为包管理会遇到的一些问题。特点：<mark style="background: #83d98fA6;">快</mark>
、<mark style="background: #83d98fA6;">可靠</mark>
、<mark style="background: #83d98fA6;">安全</mark> 。</p>
<h2 id="yarn-的优点">Yarn 的优点？</h2>
<ul>
<li><strong>速度快</strong> 。速度快主要来自以下两个方面： 　1.
并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm
是按照队列执行每个 package，也就是说必须要等到当前 package
安装完成之后，才能继续后面的安装。而 Yarn
是同步执行所有任务，提高了性能。 　2.
离线模式：如果之前已经安装过一个软件包，用 Yarn
再次安装时之间从缓存中获取，就不用像 npm 那样再从网络下载了。</li>
<li><strong>安装版本统一</strong>：为了防止拉取到不同的版本，Yarn
有一个锁定文件 (lock file)
记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn
就会创建（或更新）yarn.lock
这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm
其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm
shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install
的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm
和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过
shrinkwrap 命令生成 npm-shrinkwrap.json
文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。</li>
<li><strong>更简洁的输出</strong>：npm 的输出信息比较冗长。在执行 npm
install 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn
简洁太多：默认情况下，结合了 emoji
直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</li>
<li><strong>多注册来源处理：</strong>
所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是
npm 要么是 bower, 防止出现混乱不一致。</li>
<li><strong>更好的语义化</strong>： yarn 改变了一些 npm 命令的名称，比如
yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。
<!--SR:!2026-07-12,958,270--></li>
</ul>
<h2 id="常用命令">常用命令</h2>
<p><strong>执行 <code>yarn / yarn install</code> 解析 package.json
时，分为 4 个步骤：</strong></p>
<ol type="1">
<li><strong>依赖关系解析</strong>：yarn 在解析 package.json
文件时，会对其每个依赖包进行遍历分析生成 yarn.lock
文件。该文件描述了项目中每个包以及每个包中所依赖的包的版本信息。<br />
</li>
<li><strong>包下载</strong>：根据第一步中解析的结果下载特定版本的包。如果该包曾经被下载过，则跳过此次的下载操作，直接使用本地缓存，即
yarn 的离线模式特性。<br />
</li>
<li><strong>包关联</strong>：关联拷贝下载或者缓存在全局的包到项目。<br />
</li>
<li><strong>包编译</strong>：编译项目中使用到的包。 <br />
<!--SR:!2025-09-17,640,250--></li>
</ol>
<p>yarn.lock(该文件用于锁定包版本已保障每次编译的结果一致，也可通过 yarn
install --no-lockfile 命令设置不生成 yarn.lock 文件)</p>
<p><strong>yarn &amp; npm 常用命令对比</strong> Yarn 的命令基本跟 npm
的大同小异， 使用 <code>yarn init</code> 生成 package.json 文件， 用
<code>yarn add</code>和 <code>yarn add --dev</code> 分别替换
<code>npm install --save</code> 和<code>npm install --dev</code>
命令即可。</p>
<table width="825">
<thead>
<tr>
<th>
NPM
</th>
<th>
YARN
</th>
<th>
说明
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
npm init
</td>
<td>
yarn init
</td>
<td>
初始化某个项目
</td>
</tr>
<tr>
<td>
npm install/link
</td>
<td>
yarn install/link
</td>
<td>
默认的安装依赖操作
</td>
</tr>
<tr>
<td>
npm install taco —save
</td>
<td>
yarn add taco
</td>
<td>
安装某个依赖，并且默认保存到 package.
</td>
</tr>
<tr>
<td>
npm uninstall taco —save
</td>
<td>
yarn remove taco
</td>
<td>
移除某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco —save-dev
</td>
<td>
yarn add taco —dev
</td>
<td>
安装某个开发时依赖项目
</td>
</tr>
<tr>
<td>
npm update taco —save
</td>
<td>
yarn upgrade taco
</td>
<td>
更新某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco --global
</td>
<td>
yarn global add taco
</td>
<td>
安装某个全局依赖项目
</td>
</tr>
<tr>
<td>
npm publish/login/logout
</td>
<td>
yarn publish/login/logout
</td>
<td>
发布 / 登录 / 登出，一系列 NPM Registry 操作
</td>
</tr>
<tr>
<td>
npm run/test
</td>
<td>
yarn run/test
</td>
<td>
运行某个命令
</td>
</tr>
</tbody>
</table>
<!--SR:!2026-05-28,818,250-->
<h2 id="设置国内源">设置国内源</h2>
<p>yarn 原仓库包下载不稳定时需要设置国内源</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure></div>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Server</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Regex the Easy Way</title>
    <url>/799d5e4c35595743aaac52034a738a7e954c720e/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">github.com</a></p>
</blockquote>
<p><img
src="/images/68747470733a2f2f692e696d6775722e636f6d2f6259776c3756662e706e67.png" /></p>
<h2 id="什么是正则表达式">什么是正则表达式？</h2>
<blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。
<!--SR:!2026-02-20,829,290--></p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular
expression”这个词比较拗口，我们常使用缩写的术语 “regex” 或“regexp”。
正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。
我们使用以下正则表达式来验证一个用户名：</p>
<p><img src="/images/regexp-cn.png" /></p>
<p>以上的正则表达式可以接受
<code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。
但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h2 id="基本匹配">1. 基本匹配</h2>
<p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。
例如：一个正则表达式
<code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;the&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>==正则表达式是大小写敏感的==
，所以<code>The</code>不会匹配<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-11-13,481,270-->
<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="元字符">2. 元字符</h2>
<p>正则表达式主要依赖于元字符。
元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<table>
<thead>
<tr>
<th align="center">
元字符
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
.
</td>
<td>
句号匹配任意单个字符除了换行符。
</td>
</tr>
<tr>
<td align="center">
[ ]
</td>
<td>
字符种类。匹配方括号内的任意字符。
</td>
</tr>
<tr>
<td align="center">
[^]
</td>
<td>
否定的字符种类。匹配除了方括号里的任意字符
</td>
</tr>
<tr>
<td align="center">
*
</td>
<td>
匹配 &gt;=0 个重复的在 * 号之前的字符。
</td>
</tr>
<tr>
<td align="center">
+
</td>
<td>
匹配 &gt;=1 个重复的 + 号前的字符。
</td>
</tr>
<tr>
<td align="center">
?
</td>
<td>
标记? 之前的字符为可选.
</td>
</tr>
<tr>
<td align="center">
{n,m}
</td>
<td>
匹配 num 个大括号之前的字符或字符集 (n &lt;= num &lt;= m).
</td>
</tr>
<tr>
<td align="center">
(xyz)
</td>
<td>
字符集，匹配与 xyz 完全相等的字符串.
</td>
</tr>
<tr>
<td align="center">
|
</td>
<td>
或运算符，匹配符号前或后的字符.
</td>
</tr>
<tr>
<td align="center">
&lt;/td&gt;
<td>
转义字符, 用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $  |</code>
</td>
</tr>
<tr>
<td align="center">
^
</td>
<td>
从开始行开始匹配.
</td>
</tr>
<tr>
<td align="center">
$
</td>
<td>
从末端开始匹配.
</td>
</tr>
</tbody>
</table>
<!--SR:!2026-11-18,895,250-->
<h3 id="点运算符-.">2.1 点运算符 <code>.</code></h3>
<p><code>.</code>是元字符中最简单的例子。
<code>.</code>匹配任意单个字符，但不匹配==换行符==。
例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。
<!--SR:!2024-12-21,485,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;.ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h3 id="字符集">2.2 字符集</h3>
<p>字符集也叫做字符类。 方括号用来指定一个字符集。
在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。
例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和
<code>The</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[Tt]he&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号。 表达式 <code>ar[.]</code> 匹配
<code>ar.</code>字符串</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ar[.]&quot; =&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a>
<!--SR:!2024-11-29,471,250--></p>
<p><strong>2.2.1 否定字符集</strong></p>
<p>一般来说 <code>^</code>
表示一个字符串的<strong>开头</strong>，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。
例如，表达式<code>[^c]ar</code>
匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[^c]ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a>
<!--SR:!2024-11-15,464,250--></p>
<h3 id="重复次数">2.3 重复次数</h3>
<p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code>
的，用来指定匹配子模式的次数。
这些元字符在不同的情况下有着不同的意思。</p>
<p><strong>2.3.1 <code>*</code> 号</strong></p>
<p><code>*</code>号匹配
在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式
<code>a*</code> 匹配 0 或更多个以 a
开头的字符。表达式<code>[a-z]*</code>
匹配一个行中所有以小写字母开头的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[a-z]*&quot; =&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。
<code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配
0 或更多个空格开头和 0 或更多个空格结尾的 cat 字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;\s*cat\s*&quot; =&gt; The fat cat sat on the concatenation.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a>
<!--SR:!2024-11-06,461,250--></p>
<p><strong>2.3.2 <code>+</code> 号</strong></p>
<p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。
例如表达式<code>c.+t</code>
匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;c.+t&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a>
<!--SR:!2024-10-05,433,250--></p>
<p><strong>2.3.3 <code>?</code> 号</strong></p>
<p>在正则表达式中元字符 <code>?</code>
标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式
<code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]?he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a>
<!--SR:!2024-08-25,408,250--></p>
<h3 id="号">2.4 <code>&#123;&#125;</code> 号</h3>
<p>在正则表达式中 <code>&#123;&#125;</code>
是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式
<code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数。 例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位
0~9 的数字。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<p>如果逗号也省略掉则表示重复固定的次数。 例如，<code>[0-9]&#123;3&#125;</code>
匹配 3 位数字</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a>
<!--SR:!2025-09-19,641,250--></p>
<h3 id="exp-特征标群">2.5 <code>(exp)</code> 特征标群</h3>
<p>特征标群是一组写在 <code>(exp)</code> 中的子模式。<code>(exp)</code>
中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如,
表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个
<code>ab</code>。如果没有使用 <code>(exp)</code> ，那么表达式
<code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code>
。再比如之前说的 <code>&#123;&#125;</code>
是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code>
前加上特征标群 <code>(exp)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code>
表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或
<code>gar</code> 或 <code>par</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(c|g|p)ar&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a>
<!--SR:!2024-12-12,428,230--></p>
<h3 id="或运算符">2.6 <code>|</code> 或运算符</h3>
<p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或
<code>car</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he|car&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a>
<!--SR:!2025-07-24,608,250--></p>
<h3 id="转码特殊字符">2.7 转码特殊字符</h3>
<p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定
<code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code>
这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线
<code>\</code>。</p>
<p>例如 <code>.</code>
是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code>
则要写成 <code>\.</code> 以下这个例子
<code>\.?</code>是选择性匹配<code>.</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(f|c|m)at\.?&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a>
<!--SR:!2026-12-14,909,250--></p>
<h3 id="锚点">2.8 锚点</h3>
<p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code>
指定开头，<code>$</code> 指定结尾。</p>
<p><strong>2.8.1 <code>^</code> 号</strong></p>
<p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果
<code>a</code>。但如果使用 <code>^b</code>
将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以
<code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或
<code>the</code> 开头的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;^(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a>
<!--SR:!2025-07-28,610,250--></p>
<p><strong>2.8.2 <code>$</code> 号</strong></p>
<p>同理于 <code>^</code> 号，<code>$</code>
号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)$&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a>
<!--SR:!2024-12-07,475,250--></p>
<h2 id="简写字符集">3. 简写字符集</h2>
<p>正则表达式提供一些常用的字符集简写。如下:</p>
<table>
<thead>
<tr>
<th align="center">
简写
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
<code>.</code>
</td>
<td>
除换行符外的所有字符
</td>
</tr>
<tr>
<td align="center">
<code>\w</code>
</td>
<td>
匹配所有字母数字，等同于 <code><code>[a-zA-Z0-9_]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\W</code>
</td>
<td>
匹配所有非字母数字，即符号，等同于： <code><code>[^\w]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\d</code>
</td>
<td>
匹配数字： <code><code>[0-9]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\D</code>
</td>
<td>
匹配非数字： <code><code>[^\d]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\s</code>
</td>
<td>
匹配所有空格字符，等同于： <code><code>[\t\n\f\r\p&#123;Z&#125;]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\S</code>
</td>
<td>
匹配所有非空格字符： <code><code>[^\s]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\f</code>
</td>
<td>
匹配一个换页符
</td>
</tr>
<tr>
<td align="center">
<code>\n</code>
</td>
<td>
匹配一个换行符
</td>
</tr>
<tr>
<td align="center">
<code>\r</code>
</td>
<td>
匹配一个回车符
</td>
</tr>
<tr>
<td align="center">
<code>\t</code>
</td>
<td>
匹配一个制表符
</td>
</tr>
<tr>
<td align="center">
<code>\v</code>
</td>
<td>
匹配一个垂直制表符
</td>
</tr>
<tr>
<td align="center">
<code>\p</code>
</td>
<td>
匹配 CR/LF（等同于 <code><code>\r\n</code></code>），用来匹配 DOS
行终止符
</td>
</tr>
</tbody>
</table>
<!--SR:!2024-12-09,477,250-->
<h2 id="零宽度断言前后预查">4. 零宽度断言（前后预查）</h2>
<p><strong>先行断言和后发断言</strong>（合称
lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但==不包括在匹配列表中==）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和
<code>$10.88</code> 中获得所有以 <code>$</code>
字符开头的数字，我们将使用以下的正则表达式
<code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code>
并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">
符号
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
?=
</td>
<td>
正先行断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?!
</td>
<td>
负先行断言 - 排除
</td>
</tr>
<tr>
<td align="center">
?&lt;=
</td>
<td>
正后发断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?&lt;!
</td>
<td>
负后发断言 - 排除
</td>
</tr>
</tbody>
</table>
<!--SR:!2026-02-17,727,250-->
<h3 id="exp-放在后面-匹配后面跟的是exp">4.1 (?=exp) 放在后面
匹配后面跟的是exp</h3>
<p><code>?=exp</code> 正先行断言，表示第一部分表达式之后必须跟着
<code>?=exp</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用
<code>()</code>。在括号内部使用一个问号和等号：
<code>(?=exp)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。 例如，表达式
<code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code>
，即 <code>The</code> 和 <code>the</code> 后面紧跟着
<code>(空格)fat</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?=\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a>
<!--SR:!2024-09-04,413,250--></p>
<h3 id="exp-放在后面-匹配后面跟的不是exp">4.2 (?!exp) 放在后面
匹配后面跟的不是exp</h3>
<p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为
其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和
<code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成
<code>!</code> 也就是 <code>(?!exp)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?!\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a>
<!--SR:!2024-11-11,463,250--></p>
<h3 id="exp-放在前面-匹配后面跟的是exp">4.3 (?&lt;= exp) 放在前面
匹配后面跟的是exp</h3>
<p>正后发断言 记作<code>(?&lt;=exp)</code>
用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配
<code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或
<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;=(T|t)he\s)(fat|mat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/avH165/1">在线练习</a>
<!--SR:!2024-11-19,453,250--></p>
<h3 id="exp-放在前面-匹配后面跟的不是exp">4.4 (?&lt;!exp) 放在前面
匹配后面跟的不是exp</h3>
<p>负后发断言 记作 <code>(?&lt;!exp)</code>
用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配
<code>cat</code>，且其前不跟着 <code>The</code> 或
<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;!(T|t)he\s)(cat)&quot; =&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a>
<!--SR:!2024-11-20,467,250--></p>
<h2 id="标志">5. 标志</h2>
<p>标志也叫模式修正符，因为它可以用来==修改表达式的搜索结果==。
这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">
标志
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
i
</td>
<td>
忽略大小写。
</td>
</tr>
<tr>
<td align="center">
g
</td>
<td>
全局搜索。
</td>
</tr>
<tr>
<td align="center">
m
</td>
<td>
多行修饰符：锚点元字符 <code>^</code> <code>$</code>
工作范围在每行的起始。
</td>
</tr>
</tbody>
</table>
<!--SR:!2024-12-18,483,250-->
<h3 id="忽略大小写-case-insensitive">5.1 忽略大小写 (Case
Insensitive)</h3>
<p>修饰语 <code>i</code> 用于忽略大小写。 例如，表达式
<code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的
<code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和
<code>The</code>，<code>g</code> 表示全局搜索。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/The/gi&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a>
<!--SR:!2026-06-22,808,250--></p>
<h3 id="全局搜索-global-search">5.2 全局搜索 (Global search)</h3>
<p>修饰符 <code>g</code>
常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。
例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+
<code>at</code>，并返回全部结果。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/g&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a>
<!--SR:!2024-08-20,407,250--></p>
<h3 id="多行修饰符-multiline">5.3 多行修饰符 (Multiline)</h3>
<p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code>
用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符
<code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code>
后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据
<code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/&quot; =&gt; The fat</span><br><span class="line">                cat sat</span><br><span class="line">                on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/gm&quot; =&gt; The fat</span><br><span class="line">                  cat sat</span><br><span class="line">                  on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a>
<!--SR:!2024-12-17,482,250--></p>
<h3 id="贪婪匹配与惰性匹配-greedy-vs-lazy-matching">6.
贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3>
<p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用
<code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*?at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a>
<!--SR:!2024-09-20,423,250--></p>
<h2 id="正则替换">6. 正则替换</h2>
<p>正则替换时如果要引用匹配的内容, 需要加分组<code>'#&#123;2,&#125;.*\n'</code>
=&gt; <code>'(#&#123;2,&#125;.*\n)'</code>, 根据分组的顺序获取内容, 从1开始,
如<code>/1</code>或<code>$1</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">## Title</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">paragraph</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 寻找下方段落只有1个换行的标题, 替换为加一个换行的标题, \1(其他语言有$1的)是匹配文本分组的占位符</span></span><br><span class="line">res = re.sub(<span class="string">r&quot;(#&#123;2,&#125;.*\n)(?!\n)&quot;</span>, <span class="string">r&#x27;\1\n&#x27;</span>, content)  </span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-01-01,704,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/491620052">滚蛋吧，正则表达式！
- 知乎</a></p>
<p><a href="https://regex-vis.com/">Regex Vis</a></p>
<p><a href="https://regexlearn.com/zh-cn">Regex Learn -
逐步从零基础到高阶。</a></p>
<p><a href="https://regex101.com/">regex101: build, test, and debug
regex</a></p>
<p><a href="https://ihateregex.io/">i Hate Regex - The Regex Cheat
Sheet</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出 python 闭包</title>
    <url>/83ffdcf23d70b022afa1eb2f4d72b9d25fedffe3/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://zhuanlan.zhihu.com/p/22229197">zhuanlan.zhihu.com</a></p>
</blockquote>
<p>周围有些同事初学 python，往往对 python 的一些高级特性，比如生成器
(Generator), 闭包(closure)，装饰器(Decorator)
感到有点不太容易理解，虽然这些特性并非 python
独有，但真的掌握了一定会让你感觉原来生活如此美好。</p>
<h2 id="闭包介绍">1. 闭包介绍</h2>
<p>闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。举个栗子先：</p>
<p><img
src="https://pic3.zhimg.com/0bf070da6fba4187510d4f423f451dd2_b.png" /><img
src="https://pic4.zhimg.com/564bc6ce56fc4cf2bf5128cd6c60b477_b.png" /><img
src="https://pic1.zhimg.com/dee4a1e824a6da024b5eace407eeab90_r.jpg" /><img
src="https://pic1.zhimg.com/f54f1765811dd5c13f415ec25cf2072c_b.png" /><img
src="https://pic2.zhimg.com/5ea23ecb27f7aa70eff3b6e445093f31_b.png" /></p>
<h2 id="常见错误">2. 常见错误</h2>
<h3
id="闭包无法修改外部函数的局部变量">闭包无法修改外部函数的局部变量</h3>
<p><img
src="https://pic1.zhimg.com/37066f1c440ecf7a31f685728119cfa8_r.jpg" />
这个是什么意思呢？ 如果 innerFunc 可以修改 x 的值的话，x
的值前后会发生变化，但结果是：</p>
<p><img
src="https://pic3.zhimg.com/a7d6feca997ecb0262aaa2875a77c4fa_b.png" /></p>
<h3 id="python-循环中不包含域的概念">python 循环中不包含域的概念</h3>
<p><img
src="https://pic3.zhimg.com/0c44b9dee2b981816d4137a432c4185e_b.png" /></p>
<p>按照大家正常的理解，应该输出的是 0, 2, 4 对吧？但实际输出的结果是: 4,
4, 4. 原因是什么呢？loop 在 python 中是没有域的概念的，flist
在像列表中添加 func 的时候，并没有保存 i 的值，而是当执行 f(2)
的时候才去取，这时候循环已经结束，i 的值是 2，所以结果都是 4。</p>
<p>其实修改方案也挺简单的：</p>
<p><img
src="https://pic1.zhimg.com/b61fccab921e91f626fb0488a0bace5c_r.jpg" /></p>
<h2 id="闭包的作用">3. 闭包的作用</h2>
<p>闭包可以保存当前的运行环境，以一个类似棋盘游戏的例子来说明。假设棋盘大小为
50*50，左上角为坐标系原点 (0,0)，我需要一个函数，接收 2
个参数，分别为方向 (direction)，步长 (step)，该函数控制棋子的运动。
这里需要说明的是，每次运动的起点都是上次运动结束的终点。</p>
<p>参考代码：</p>
<p><img
src="https://pic3.zhimg.com/9ce54b9dd939bb31e18923e7b3618d42_b.png" /><img
src="https://pic3.zhimg.com/dcbee56a8bcc7d164dddd39d68ee80b6_b.png" /></p>
<p>当然，闭包在爬虫以及 web
应用中都有很广泛的应用，并且闭包也是装饰器的基础，这些内容笔者会在后续的文章中分别介绍，这里就不多谈了。理解了本文中的概念，你应该知道的关于闭包的知识也差不多了，请在自己的编程中尽情使用吧。</p>
<p><strong>参考连接</strong>：</p>
<ol type="1">
<li><p><a
href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Closure_%28computer_programming%29">Closure
(computer programming)</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/11408515/about-python-closure">About
python closure</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//www.jb51.net/article/54498.htm">Python
中的闭包实例详解_python_脚本之家</a></p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d 的路径</title>
    <url>/7d7a52061d7af51fd67558debeb4fb9867018108/</url>
    <content><![CDATA[<h2
id="application.persistentdatapath">Application.persistentDataPath</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> userPath = Application.persistentDataPath + <span class="string">&quot;/user.json&quot;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>全平台<mark style="background: #83d98fA6;">可修改可新建</mark>
.</li>
<li>Application.persistentDataPath
是<mark style="background: #83d98fA6;">最合适用来存放下载资源</mark>
的地方</li>
<li>只有在项目第一次运行之后才能找到这个路径,所以<mark style="background: #fbab4bA6;">不合适预先存放东西</mark></li>
<li>IOS 上该目录下的东西可以被 iCloud 自动备份
<!--SR:!2024-09-26,32,250--></li>
</ul>
<h2 id="resources">Resources</h2>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Resources.Load()</span><br></pre></td></tr></table></figure>
<ul>
<li>Resources
文件夹是一个<mark style="background: #fbab4bA6;">只读</mark>
的文件夹</li>
<li>建议这个文件夹下<mark style="background: #83d98fA6;">只放
Prefab</mark> 或者一些 Object 对象</li>
<li>放在这里的资源文件<mark style="background: #fbab4bA6;">不管项目中有没有使用都会被打包</mark>
. <!--SR:!2024-09-22,28,250--></li>
</ul>
<h2 id="streamingassets">StreamingAssets</h2>
<p>下面是 Unity 官方给的代码,适合读取文件 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ExampleClass</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> filePath = System.IO.Path.Combine(Application.streamingAssetsPath, <span class="string">&quot;MyFile&quot;</span>);</span><br><span class="line">  <span class="keyword">public</span> <span class="built_in">string</span> result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="function">IEnumerator <span class="title">Example</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (filePath.Contains(<span class="string">&quot;://&quot;</span>)) &#123;</span><br><span class="line">      WWW www = <span class="keyword">new</span> WWW(filePath);</span><br><span class="line">      <span class="keyword">yield</span> <span class="keyword">return</span> www;</span><br><span class="line">      result = www.text;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      result = System.IO.File.ReadAllText(filePath);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
下面是网上的代码,不太好,因为 Android 设备最好用 www 读取 <figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">  <span class="built_in">string</span> filepath = Application.dataPath +<span class="string">&quot;/StreamingAssets&quot;</span>+<span class="string">&quot;/my.xml&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> UNITY_IPHONE</span></span><br><span class="line">  <span class="built_in">string</span> filepath = Application.dataPath +<span class="string">&quot;/Raw&quot;</span>+<span class="string">&quot;/my.xml&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> UNITY_ANDROID</span></span><br><span class="line">  <span class="built_in">string</span> filepath = <span class="string">&quot;jar:file://&quot;</span> + Application.dataPath + <span class="string">&quot;!/assets/&quot;</span>+<span class="string">&quot;/my.xml;</span></span><br></pre></td></tr></table></figure> -
StreamingAssets
一般用来<mark style="background: #83d98fA6;">存放视频</mark>
等文件,文件<mark style="background: #fbab4bA6;">不会被 Unity 加密</mark>
- 在 pc/Mac
电脑中可实现对文件实施“增删查改”等操作，但在<mark style="background: #fbab4bA6;">移动端只支持读取操作</mark>
。 - <mark style="background: #83d98fA6;">只读的物件适合放这里</mark>
<!--SR:!2024-09-10,20,250--></p>
<h2 id="实例">实例</h2>
<h3 id="ios">IOS</h3>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 66%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Application.dataPath</td>
<td>Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data</td>
</tr>
<tr class="even">
<td>Application.streamingAssetsPath</td>
<td>Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/xxx.app/Data/Raw</td>
</tr>
<tr class="odd">
<td>Application.persistentDataPath</td>
<td>Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Documents</td>
</tr>
<tr class="even">
<td>Application.temporaryCachePath</td>
<td>Application/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/Library/Caches</td>
</tr>
</tbody>
</table>
<h3 id="android">Android</h3>
<table>
<colgroup>
<col style="width: 42%" />
<col style="width: 57%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Application.dataPath</td>
<td>/data/app/xxx.xxx.xxx.apk</td>
</tr>
<tr class="even">
<td>Application.streamingAssetsPath</td>
<td>jar:file:///data/app/xxx.xxx.xxx.apk/!/assets</td>
</tr>
<tr class="odd">
<td>Application.persistentDataPath</td>
<td>/data/data/xxx.xxx.xxx/files</td>
</tr>
<tr class="even">
<td>Application.temporaryCachePath</td>
<td>/data/data/xxx.xxx.xxx/cache</td>
</tr>
</tbody>
</table>
<!--SR:!2024-09-20,26,250-->
<h3 id="windows">Windows</h3>
<table>
<colgroup>
<col style="width: 37%" />
<col style="width: 62%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Application.dataPath</td>
<td>/Assets</td>
</tr>
<tr class="even">
<td>Application.streamingAssetsPath</td>
<td>/Assets/StreamingAssets</td>
</tr>
<tr class="odd">
<td>Application.persistentDataPath</td>
<td>C:/Users/xxxx/AppData/LocalLow/CompanyName/ProductName</td>
</tr>
<tr class="even">
<td>Application.temporaryCachePath</td>
<td>C:/Users/xxxx/AppData/Local/Temp/CompanyName/ProductName</td>
</tr>
</tbody>
</table>
<!--SR:!2024-09-21,27,250-->
<h3 id="mac">Mac</h3>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Application.dataPath</td>
<td>/Assets</td>
</tr>
<tr class="even">
<td>Application.streamingAssetsPath</td>
<td>/Assets/StreamingAssets</td>
</tr>
<tr class="odd">
<td>Application.persistentDataPath</td>
<td>/Users/xxxx/Library/Caches/CompanyName/Product Name</td>
</tr>
<tr class="even">
<td>Application.temporaryCachePath</td>
<td>/var/folders/57/6b4_9w8113x2fsmzx_yhrhvh0000gn/T/CompanyName/Product
Name</td>
</tr>
</tbody>
</table>
<h3 id="windows-web-player">Windows Web Player</h3>
<table>
<colgroup>
<col style="width: 31%" />
<col style="width: 68%" />
</colgroup>
<thead>
<tr class="header">
<th>类型</th>
<th>路径</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Application.dataPath</td>
<td>file:///D:/MyGame/WebPlayer (即导包后保存的文件夹，html
文件所在文件夹)</td>
</tr>
<tr class="even">
<td>Application.streamingAssetsPath</td>
<td></td>
</tr>
<tr class="odd">
<td>Application.persistentDataPath</td>
<td></td>
</tr>
<tr class="even">
<td>Application.temporaryCachePath</td>
<td></td>
</tr>
</tbody>
</table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3D高级编程 主程手记</title>
    <url>/85a8d7cf0061c7513eee1428d9cc967e890dd99c/</url>
    <content><![CDATA[<h2 id="第1章-软件架构">第1章 软件架构</h2>
<h3 id="架构的意义">1.1 架构的意义</h3>
<p>在软件系统中，架构的重要性不言而喻，项目从研发到上线运营，我们要在不同的方案中选择合适的架构，例如，前端渲染引擎是自己研发，还是使用商业引擎？商业引擎是使用Unity3D，还是Unreal或其他？具体到怎么用，则要考虑是使用UGUI，还是使用NGUI？UI里的事件系统如何进行统一处理？AI行为算法是选择行为树，还是状态机，抑或是选择事件型决策树？数据如何获取和存储？场景如何拆分？是否需要将资源分离出去？是使用长连接还是短连接？是选择TCP还是UDP？服务器端是用C++，还是用Java或Python？是全部使用关系型数据库，还是加入Cache机制？网络协议是用Protocol
Buff，还是用JSON或XML，抑或是使用完全自定义格式等。</p>
<p>这些项目中的每个子系统都要有自己的方向，把子系统的决策方向合起来再加入它们之间的关联调用就构成了一个完整的架构，即每个系统、模块、组件都是软件系统架构中的一部分。</p>
<p>一个完整的架构图通常会伴随些许子系统的细节，或者说子模块的架构图。UML对象关系图就是一种架构图，它描述了数据类之间的关系，可把系统中的对象用文字和连接图的方式描述清楚。部署图也是其中一种架构图，它把需要多少种服务器、它们分别起到什么作用，以及它们相互之间的关系描述清楚了，而时序图则把系统程序调用的次序与流程描述清楚了。这些不同角度的架构图合起来就构成了一个完整的项目架构图。如果把子系统架构细节略去，在不关心细节的情况下，描述各系统的合作方式，展现给人们的是整体的解决方案，从宏观的角度看整个项目的布局，会让人一目了然。</p>
<p>可以把软件架构理解为软件程序的架子，与现实中的书架有异曲同工之妙，这个架子上有很多大大小小的格子，每个格子里都可以放置固定种类的程序。架子有大有小，大的需要花费点时间去定制，小的则轻便快捷。</p>
<p>架子的大小是由设计师决定的，设计师根据客户的需求设计，假如放置的空间大，且需要承载的东西多，那么就往容量大的方向设计，让它能容纳更多的东西，能放置各种不同类型的程序，反之则做得简约些，这样更容易理解，又轻又快。</p>
<p>架子完成后要拿出去用，如果一出现异常情况就倒了或散架了，就不算是一个好的架子，架子的好坏可从以下几个方面进行评估。</p>
<ol type="1">
<li><strong>承载力</strong></li>
</ol>
<p>书架上能放多少东西，能放多重的东西，是使用者（这里使用者可以为客户、玩家或程序员）比较关注的问题。</p>
<p>从软件架构的程序意义来说，一个架构能承载多少个逻辑系统，当代码行数扩展到100万行时是否依然能够有序且规范地运行，以及程序员彼此工作的模块耦合度是否依然能保持原来的设计要求，能够承载多少个程序员共同开发，共同开发的效率又如何，这是对软件架构承载力的评定指标。</p>
<p>从架构的目标上来看，对于服务器来说，当前架构能承受多少人同时访问，能承载的日均访问量是多少，这就是它承载力的体现。而对于客户端来说，能显示多少UI元素，可渲染多少模型（包括同屏渲染和非同屏渲染），则是它的承载力的体现。</p>
<ol start="2" type="1">
<li><strong>可扩展性</strong></li>
</ol>
<p>如果书架上只能放书，这个书架的用途就太单一了，花瓶不能放、箱子不能放、鞋子不能放、袋子不能放、衣服不能放，客户八成不买单。</p>
<ol start="3" type="1">
<li><strong>易用性</strong></li>
</ol>
<p>易用性是架构师比较容易忽视的一个点。如果架构师设计了完整的架构，但具体执行时被程序员认为不好用，这时架构师还是执着地推动它的使用，那么团队间就会加深矛盾，这样开发效率就会下降。</p>
<ol start="4" type="1">
<li><strong>可伸缩性</strong></li>
</ol>
<p>还是用书架比喻，假设现在没有这么多书和东西要放，房子也不够大，那么书架如果可以折叠缩小到我需要的大小则会更受用户欢迎，这就是可伸缩性的体现。</p>
<p>若软件架构能像我们制造的书架一样可随时放大或随时折叠缩小，那就太好了。当需要的承载量没有这么大时，可以不使用不需要的功能，化繁为简，只启用需要的部分功能，这样就可以随时简化开发流程。</p>
<ol start="5" type="1">
<li><strong>容错性以及错误的感知力</strong></li>
</ol>
<p>书架也会有磕磕碰碰的时候，同样也会出现因某处做工不精导致使用时歪歪斜斜的情况，如果我们保证不了完全没有问题，至少需要保证它不会因为一点小小的毛病而彻底散架。</p>
<p>从服务器端角度，容错性包括数据库容错性、应用服务器容错性、缓存服务器容错性，以及中心服务器容错性，每个环节出现问题都会通知相关中心服务器改变策略，或者监控服务器检测得知该服务器出现故障，自动更换成备用服务器或者更换链路。</p>
<p>从客户端角度，容错性包括当程序发生错误时，是否同样能够继续保持运行而不崩溃；当这个页面程序出错时，是否依然能够运行其他程序而不闪退或崩溃。同时所有出现的程序错误，都能及时地记录下来并发送到后台，存储为错误日志，便于开发人员及时得到详细的错误信息，能够根据错误信息快速找出问题所在。</p>
<h3 id="软件架构的思维方式">1.2 软件架构的思维方式</h3>
<p>《优秀架构师必须掌握的架构思维》的文章就很好地对抽象能力进行了分析，以下三种抽象能力源自这篇文章。</p>
<p><strong>第一种：分层思维</strong></p>
<p>分层是我们应对和管理复杂性的基本思维武器。</p>
<p>面对一个复杂的系统，我们一开始总是无从下手，就好比一下子在我们面前摆了很多的问题，杂乱无章。这很大程度上会导致我们慌张、焦急、惶恐。分层思维，能很好地帮助我们抽象一个复杂系统的架构层次，从而清晰地描述有多少层面的事务需要我们解决，以及解决层级的先后次序。</p>
<p><strong>第二种：分治思维</strong></p>
<p>分而治之也是应对和管理复杂性的一般性方法</p>
<p>对于一个无法一次解决的大问题，我们先把大问题分解成若干个子问题，如果子问题还无法解决，则继续分解成子子问题，直到可以直接解决为止，这就是分解（divide）的过程；然后将子子问题的解组合成子问题的解，再将子问题的解组合成原问题的解，这就是组合（combine）的过程。</p>
<p><strong>第三种：演化思维</strong></p>
<p>经常有人讨论：架构是设计出来的还是演化出来的？基于多年的经验，我认为架构既是设计出来的，同时也是演化出来的。对于互联网系统，基本上可以说是三分设计，七分演化，既在设计中演化，又在演化中设计，是一个不断迭代的过程。</p>
<h3 id="如何构建unity3d项目">1.3 如何构建Unity3D项目</h3>
<ol type="1">
<li><strong>前端与后端架构之间的共性</strong></li>
</ol>
<p>前后端架构的目标都是高性能、高可用、可扩展、安全、可容错。对于前端来说，除了这些目标特性外，还需要加入更多的用户体验，包括视觉效果和操作灵敏度。</p>
<p>作为前端工程师，用户体验是比较重要的，这种体验涉及很多方面，包括性能、视觉效果，以及操作上的人性化等。例如，如何让游戏加载速度更流畅、如何制作更绚丽的特效、如何减少电量的消耗、如何最快地响应用户操作等。</p>
<ol start="2" type="1">
<li><strong>培养架构设计思维</strong></li>
</ol>
<p>良好的架构设计思维的培养，离不开工作中大量高质量项目的实战锻炼，以及平时的学习、思考和总结。</p>
<p>基本的架构设计思维在大学计算机课程（比如数据结构和算法）中可以找到，大学里以学习理论知识为主。回头看，基本的架构设计思维在那时就已经埋下种子，后面的工程实践会进一步消化和应用所学的理论知识，随着经验的积累，我们能够解决的问题的复杂性和规模逐渐变大，但所用的方法依然是抽象、分层、分治和演化。</p>
<ol start="3" type="1">
<li><strong>试着构建Unity3D项目</strong></li>
</ol>
<p>我们可以使用以上方法来试着构建Unity3D项目。下面采用分层的思维方式先确定架构的层级，如图1-8所示。</p>
<p>图1-8　Unity3D分层设计</p>
<p>把整个项目分成五大层级，即网络层、数据管理层、资源管理层、核心逻辑框架层、UI框架层。</p>
<p>第2章 C#技术要点<br />
2.1　Unity3D中C#的底层原理</p>
<p>Unity底层在运行C#程序时有两种机制，一种是Mono，另一种是IL2CPP。</p>
<p>这里要引出一个很重要的概念“IL”。IL的全称是Intermediate
Language，但很多时候我们看到的是CIL（Common Intermediate
Language，特指在.NET平台下的IL标准），其实大部分文章中提到的IL和CIL表示的是同一个东西，即中间语言。</p>
<p>IL是一种低阶（lowest-level）的人类可读的编程语言。我们可以将通用语言翻译成IL，然后汇编成字节码，最后运行在虚拟机上；也可以把IL看作一个面向对象的汇编语言，只是它必须运行在虚拟机上，而且是完全基于堆栈的语言。也就是说，C#、VB、J#这种遵循CLI规范的高级语言，会被各自的编译器编译成中间语言IL（CIL），当需要运行它们时就会被实时地加载到运行时库中，由虚拟机动态地编译成汇编代码（JIT）并执行。</p>
<p>2.1 Unity3D中C#的底层原理<br />
其实IL有三种转译模式。</p>
<p>·Just-in-time（JIT）编译：在程序运行过程中将CIL转译为机器码。</p>
<p>·Ahead-of-Time（AOT）编译：将IL转译成机器码并存储在文件中，此文件并不能完全独立运行。通常此种模式可产生出绝大部分JIT模式所产生的机器码，只是有部分例外，例如trampolines或是控管监督相关的代码仍旧需要JIT来运行。</p>
<p>·完全静态编译：这个模式只支持少数平台，它基于AOT编译模式更进一步产生所有的机器码。完全静态编译模式可以让程序在运行期完全不需要用到JIT，这个做法适用于iOS操作系统、PlayStation
3以及XBox 360等不允许使用JIT的操作系统。</p>
<p>Unity在打包iOS操作系统的时候就使用了第三种方式，而在Android和Windows上则使用JIT实时编译来运行代码。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
        <category>book</category>
      </categories>
      <tags>
        <tag>srcard</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化 ARouter</title>
    <url>/8abe118f14be78884377a6dfc907d6cf95994120/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904035003138062">juejin.cn</a></p>
</blockquote>
<p>前面两篇文章分别介绍了 Android 组件化基础知识以及 Android 组件化过程
Application 的相关知识，在阅读本文之前可以先阅读下面两篇文章：</p>
<ul>
<li><a href="../3b4772e22e0b7c32dd35ae81cbe686a7e7df3307">Android
组件化基础</a></li>
<li><a href="../28dd4828541f68e92120f55d44762989d0ad2a57">Android 组件化
Application</a></li>
</ul>
<p>Android 组件化过程中涉及到不同 module
之间界面的跳转也是分厂重要的，如果要对自己经手的项目进行组件化改造，ARouter
是一个非常容易上手的路由框架，由大厂开发团队维护，相信质量是没有问题的。</p>
<p>ARouter 是 albaba 团队开源的一个 Android App
组件化改造的一个框架，支持模块之间的路由、通信、拦截功能，相比原生跳转来说更能适应组件化开发，本文主要通过实例总结一下
Arouter 的常用功能，具体如下：</p>
<ol type="1">
<li>ARouter 的配置</li>
<li>应用内跳转</li>
<li>应用内携带参数跳转</li>
<li>Activity 返回结果处理</li>
<li>通过 Uri 跳转及参数解析</li>
<li>Module 之间的跳转</li>
<li>服务调用</li>
<li>显示效果</li>
</ol>
<h3 id="arouter-的配置">ARouter 的配置</h3>
<p>在对应的 build.gradle 文件中配置 ARouter 的相关依赖如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [<span class="attr">AROUTER_MODULE_NAME:</span> project.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    <span class="comment">//api与compiler匹配使用，使用最新版可以保证兼容</span></span><br><span class="line">    compile <span class="string">&#x27;com.alibaba:arouter-api:1.5.2&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.5.2&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以选择配置路由表自动加载，在项目下面的 build.gradle
文件中进行配置，配置方式如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GROOVY"><figure class="iseeu highlight /groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表自动加载插件</span></span><br><span class="line">apply <span class="attr">plugin:</span> <span class="string">&#x27;com.alibaba.arouter&#x27;</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.0.1&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//ARouter</span></span><br><span class="line">        classpath <span class="string">&quot;com.alibaba:arouter-register:1.0.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此外，还需在 Application 中初始化 ARouter，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 必须在初始化ARouter之前配置</span></span><br><span class="line">    <span class="keyword">if</span> (BuildConfig.DEBUG)&#123;</span><br><span class="line">        <span class="comment">// 日志开启</span></span><br><span class="line">        ARouter.openLog();</span><br><span class="line">        <span class="comment">// 调试模式开启，如果在install run模式下运行，则必须开启调试模式</span></span><br><span class="line">        ARouter.openDebug();</span><br><span class="line">    &#125;</span><br><span class="line">    ARouter.init(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="arouter应用内跳转">ARouter应用内跳转</h3>
<p>使用 ARouter 进行应用内跳转非常简单，只需要在要跳转的 Activity 上添加
<a href="https://link.juejin.cn?target="><span class="citation"
data-cites="Route">@Route</span></a> 注解即可，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置的path至少需要两级，如/xx/xxx</span></span><br><span class="line"><span class="meta">@Route(path = FirstActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/firstActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后使用 ARouter
提供的跳转方式来进行应用内部之间的跳转，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用内跳转</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(FirstActivity.PATH)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-26,765,250-->
<h3 id="应用内携带参数跳转">应用内携带参数跳转</h3>
<p>ARouter 通过 withString 等一系列 with
开头的方法设置与之对应的参数来进行参数传递，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用内携带参数跳转</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(SecondActivity.PATH)</span><br><span class="line">        .withString(SecondActivity.PARAM, <span class="string">&quot;这是跳转携带的参数&quot;</span>)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<p>然后使用 Intent 在跳转到的 Activity 中使用 Intent
获取传递过来的参数，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = SecondActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/secondActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARAM</span> <span class="operator">=</span> <span class="string">&quot;param&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line"></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="keyword">if</span> (intent!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> intent.getStringExtra(PARAM);</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, param, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-05-13,772,250-->
<h3 id="activity-返回结果处理">Activity 返回结果处理</h3>
<p>Activity 返回结果处理和原生几乎一致，即在跳转时携带
requestCode，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity返回结果处理</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(ThreeActivity.PATH)</span><br><span class="line">        .navigation(<span class="built_in">this</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></div>
<p>然后，在 Activity 返回的时候使用 Intent 携带参数 setResult
即可，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = ThreeActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/threeActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARAM_RESULT</span> <span class="operator">=</span> <span class="string">&quot;param_result&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_three);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="comment">//setResult</span></span><br><span class="line">        intent.putExtra(PARAM_RESULT,<span class="string">&quot;这是返回携带的参数&quot;</span>);</span><br><span class="line">        setResult(RESULT_OK,intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="通过-uri-跳转及参数解析">通过 Uri 跳转及参数解析</h3>
<p>ARouter 还支持通过 Uri 进行跳转，首先创建一个无界面的 Activity
用于监听 Scheme 事件，由该 Activity 进行统一转发 Uri，所有的 Uri
都要通过这里然后进行分发跳转，可以很好的进行 Uri
的控制，一定程度上提高了使用 Uri 跳转的安全性，实行一个无界面的 Activiry
如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchemeFilterActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line">        <span class="comment">// 统一外部跳转的Uri，实现路由器统一分发，减少只依靠Intent属性匹配带来的安全风险</span></span><br><span class="line">        ARouter.getInstance().build(uri).navigation(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">NavCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onArrival</span><span class="params">(Postcard postcard)</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 AndroidManifest 文件中配置 host、scheme 以及
Action，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">&lt;activity android:&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;data</span><br><span class="line">            android:host=<span class="string">&quot;test.manu.com&quot;</span></span><br><span class="line">            android:scheme=<span class="string">&quot;arouter&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;action android: /&gt;</span><br><span class="line">        &lt;action android: /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android: /&gt;</span><br><span class="line">        &lt;category android: /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></div>
<p>然后，在 assets 文件夹中创建一个 html 文件，通过点击跳转链接完成 Uri
的跳转，html 内容如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;跳转测试&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;自定义Scheme&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;!--不带参数--&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;arouter://test.manu.com/test/fiveActivity&quot;</span>&gt;arouter:<span class="comment">//test111.manu.com/test/fiveActivity&lt;/a&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;!--携带参数--&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;arouter://test.manu.com/test/sixActivity?&gt;arouter://test111.manu.com/test/sixActivity?name=alex&amp;age=18&amp;score=&#123;&quot;</span>score<span class="string">&quot;:&quot;</span><span class="number">90</span><span class="string">&quot;,&quot;</span>rank<span class="string">&quot;:&quot;</span><span class="number">2</span><span class="string">&quot;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-02,470,250-->
<p>具体效果查看运行效果图。</p>
<p>然后，使用 WebView 加载该 Html，就可以跳转到对应的 Activity
了，也就是链接中的 fiveActivity 和 SixActivity，两个 Activity
分别如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FiveActivity</span></span><br><span class="line"><span class="meta">@Route(path = FiveActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FiveActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/fiveActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_five);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SixActivity</span></span><br><span class="line"><span class="meta">@Route(path = SixActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SixActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/sixActivity&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果要在Uri中传递自定义对象，在参数中要使用json字符串(encodeURI转码)传递，</span></span><br><span class="line">    <span class="comment">// 创建一个实现了SerializationService接口的类完成json的解析</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ScoreBean score;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@BindView(R.id.tvData)</span></span><br><span class="line">    TextView tvData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_six);</span><br><span class="line">        ButterKnife.bind(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 参数自动依赖注入</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot; + score;</span></span><br><span class="line"><span class="string">        tvData.setText(info);</span></span><br><span class="line"><span class="string">        Log.i(&quot;</span>SixActivity<span class="string">&quot;, info);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="module-之间的跳转">Module 之间的跳转</h3>
<p>主 module 和子 module 和子 module 之间的跳转也非常容易，如主 module
跳转子 module，当然主 module 和子 module 都在配置 ARouter
才可以进行进行跳转，可在主 module 中创建一个接口管理要跳转的子 module
的路径，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 管理跳转路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MODULE_ONE</span> <span class="operator">=</span> <span class="string">&quot;/module1/module-one&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MODULE_TWO</span> <span class="operator">=</span> <span class="string">&quot;/module2/module-two&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后，直接进行跳转，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转Module-one</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(Module.MODULE_ONE)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-11-19,726,270-->
<h3 id="服务调用">服务调用</h3>
<p>ARouter 里面的服务调用不能和 Android 里面的 Service
相混淆，<mark style="background: #83d98fA6;">ARouter
的里面的服务调用实际上是对某个业务的封装</mark> ，通过 ARouter
这一层的统一封装，使得调用起来更方便，只需知道路径和名称就可以随意调用，实现
IProvider 创建一个 Service 如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = &quot;/service/singleService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleService</span> <span class="keyword">implements</span> <span class="title class_">IProvider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/service/singleService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;这是对外提供的服务&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context;</span><br><span class="line">        Log.i(<span class="string">&quot;SingleService&quot;</span>, <span class="string">&quot;SingleService has init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 然后就可以调用了，调用方式如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过服务类class调用</span></span><br><span class="line">ARouter.getInstance().navigation(SingleService.class).showMessage();</span><br><span class="line"><span class="comment">// 通过服务类Path调用</span></span><br><span class="line">((SingleService) ARouter.getInstance()</span><br><span class="line">        .build(SingleService.PATH)</span><br><span class="line">        .navigation())</span><br><span class="line">        .showMessage();</span><br></pre></td></tr></table></figure></div>
此外，还可以使用依赖注入的方式完成服务的调用，这种方式便于多个服务进行管理，创建一个服务管理类如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceManage</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingleService singleService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceManage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过依赖注入的方式获取服务</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getService</span><span class="params">()</span>&#123;</span><br><span class="line">        singleService.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 然后通过服务管理类调用具体的服务如下：<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务管理，通过依赖注入的方式获取服务</span></span><br><span class="line"><span class="type">ServiceManage</span> <span class="variable">manage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceManage</span>();</span><br><span class="line">manage.getService();</span><br></pre></td></tr></table></figure></div></p>
<h2 id="参考">参考</h2>
<p><a
href="https://github.com/alibaba/ARouter/blob/master/README_CN.md">ARouter
中文文档</a> <a
href="https://blog.csdn.net/ovo2263/article/details/126692637">ARouter路由表的自动加载（多模块）</a></p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../3b4772e22e0b7c32dd35ae81cbe686a7e7df3307">Android
组件化基础</a></li>
<li><a href="../28dd4828541f68e92120f55d44762989d0ad2a57">Android 组件化
Application</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 开发环境搭建 Win10</title>
    <url>/8ae045022243ef5d9908e342c7c63a7c1c8c7951/</url>
    <content><![CDATA[<h2 id="安装">1. 安装</h2>
<p><strong>安装 NVM</strong> (用来安装和管理 Node)</p>
<ul>
<li>下载: <a
href="https://github.com/coreybutler/nvm-windows/releases">nvm
下载地址</a></li>
<li>版本说明:
<ul>
<li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li>
<li>nvm-setup.zip：安装版，推荐使用</li>
</ul></li>
<li>安装 nvm 之前要先卸载之前安装的所有 node.js 版本,
并且删除相关的文件夹,例如：<code>C: /Users/AppData/Roaming/npm</code></li>
<li>安装文件夹名不要出现中文和空格。</li>
<li>打开 CMD，输入 nvm，安装成功则会如下图所示，它会显示出当前 nvm
版本以及 nvm 的命令： <img
src="https://cdn.learnku.com/uploads/images/202104/01/64262/tYfMg16LUe.png!large" /></li>
</ul>
<p><mark style="background: #fbab4bA6;">注意:</mark>
某个版本下全局安装的模块，只有在当前版本能够使用</p>
<p>如果遇到错误:<code>ERROR open \settings.txt: The system cannot find the file specified.</code><a
href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a> 需要设置环境变量
并且需要添加到Path中 <code>%NVM_HOME%</code> <code>%NVM_SYMLINK%</code>:
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">NVM_HOME=D:\Program\nvm</span><br><span class="line">NVM_SYMLINK=D:\Program\nodejs</span><br></pre></td></tr></table></figure></div> <strong>安装 yarn</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure></div>
<h2 id="配置">2. 配置</h2>
<p><a href="../6d601709f7477b517baf2a678bf0221c6bd7e53c">Npm
配置国内源</a> <a
href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#设置国内源">Yarn
简介#设置国内源</a></p>
<h2 id="使用">3. 使用</h2>
<p><a href="../9907c57e67333c562c3494060e11a99492819663">Npm
常用命令</a> <a
href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#常用命令">Yarn
简介#常用命令</a></p>
<p><strong>nvm 常用命令有哪些?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nvm list 　　　　　　  <span class="comment"># 显示已安装的版本（同 nvm list installed）</span></span><br><span class="line">nvm list available 　 <span class="comment"># 显示所有可以下载的版本</span></span><br><span class="line">nvm list installed 　 <span class="comment"># 显示已安装的版本</span></span><br><span class="line"></span><br><span class="line">nvm install 14.5.0 　 <span class="comment"># 安装14.5.0版本node</span></span><br><span class="line">nvm install latest 　 <span class="comment"># 安装最新版本node</span></span><br><span class="line"><span class="comment"># nvm install 时，有可能会出现无权限安装的问题，如果遇到此问题，请 `以管理员身份运行` cmd。</span></span><br><span class="line"></span><br><span class="line">nvm use 14.5.0 　　　 <span class="comment"># 使用14.5.0版本node</span></span><br><span class="line">nvm uninstall 14.5.0  <span class="comment"># 卸载14.5.0版本node</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">arch</span> 　　　　　　  <span class="comment"># 显示 node 是运行在32位还是64位系统上的</span></span><br><span class="line">nvm on 　　　　　　　  <span class="comment"># 开启nodejs版本管理</span></span><br><span class="line">nvm off 　　　　　　　 <span class="comment"># 关闭nodejs版本管理</span></span><br><span class="line">nvm proxy [url] 　　  <span class="comment"># 设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</span></span><br><span class="line"></span><br><span class="line">nvm version 　　　　   <span class="comment"># 显示nvm版本。version可简化为v。</span></span><br><span class="line">nvm -h 　　　　　　　  <span class="comment"># 可以看到nvm的所有命令，都有相应的解释。</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-07-08,1115,252-->
<h2 id="参考">参考</h2>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#常用命令">Yarn
简介#常用命令</a></li>
<li><a href="../9907c57e67333c562c3494060e11a99492819663">Npm
常用命令</a></li>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../6d601709f7477b517baf2a678bf0221c6bd7e53c">Npm
配置国内源</a></li>
<li><a
href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#设置国内源">Yarn
简介#设置国内源</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://github.com/coreybutler/nvm-windows/issues/68">ERROR open
.txt: The system cannot find the file specified. · Issue #68 ·
coreybutler/nvm-windows · GitHub</a> <a
href="https://blog.csdn.net/gaochengyidlmu/article/details/54907366">Fetching
Title#61e3</a>
https://blog.csdn.net/gaochengyidlmu/article/details/54907366<a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>Node</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境</title>
    <url>/8ed3626f24d1fafe372135071b6d2bc66a7b7436/</url>
    <content><![CDATA[<h2 id="通用">通用</h2>
<p><a
href="../2f541a5b90f26c46fb796140e663c803782106b1">主题颜色配置</a> <a
href="../ede2b0f326cdb7d2a878a721e773c0e144518b12">代码编辑快捷键</a> <a
href="../9d54504bc8bd2899900331486882cfef2ce2387b">Chrome 插件</a> <a
href="../923da1700a639cfc5c1a5fdde0afe20bd17e81b7">Obsidian 插件</a> <a
href="../f1e9fc99122870bddb3abca4f847c81f5f177ebb">VSCode 插件</a> <a
href="../878aaea789f0bd452b9d2701c8ad4706b4b709a2">Jetbrains IDE
插件</a> <a href="../600341243df07e5a18820141b257c2b890dbb448">Jetbrains
IDE 设置备份</a> <a
href="../ba4d3c5e49d683b99255b352902e5b23dfbf964f">开发环境配置</a></p>
<h2 id="sdk">SDK</h2>
<ul>
<li>Go <a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
<li>Lua</li>
<li>Rust</li>
<li>Node <code>win10:</code> <a
href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node 开发环境搭建
Win10</a> <code>linux:</code> <a
href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
<li>Python3 <a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
<li>NetCore</li>
<li>SDKMan <a href="../062fda01f805f0eaa0479ca38bac3bd29ea0edac">SdkMan
使用指南</a></li>
<li>Java <a href="https://www.openlogic.com/openjdk-downloads">open
jdk</a></li>
</ul>
<h2 id="服务">服务</h2>
<ul>
<li><p>Nginx <a
href="../764842d31549539a63861526520b2b5d19bc1253">Dokcer 部署
Nginx</a></p></li>
<li><p>Docker <a
href="../900f6481b01d496a97b2c1479b20c221f71698fb">Deepin
Docker安装</a></p></li>
<li><p>MySQL <a href="../94d82bea286dc15c7e282ae272ed44f7f4b3223f">MySQL
开发环境</a> <a
href="../76534026b09bb952e51a65a63972fa8253a32d8c">Docker 部署 MySQL
开发环境</a></p></li>
<li><p>MongoDB <a
href="../dd5684d9b1e9b588daf144d16b8b45c0527370f4">Docker 部署 MongoDB
服务</a></p></li>
<li><p>Redis <a
href="../861888681da7294751e3d24405f703d1c58921a3">Docker 部署
Redis</a></p></li>
<li><p>Kafka <a
href="../c101dd2ac5422e359559d58f54f542b784bc7765">Docker 部署
kafka+zookeeper</a></p></li>
</ul>
<h2 id="后端">后端</h2>
<ul>
<li>Egg</li>
<li>Flask</li>
<li>Django</li>
<li>Spring Cloud</li>
<li>Goframe</li>
</ul>
<h2 id="前端">前端</h2>
<ul>
<li>Vue</li>
<li>React</li>
</ul>
<h2 id="区块链">区块链</h2>
<ul>
<li>geth</li>
<li>Truffle</li>
<li>Hardhat</li>
<li>Brownie</li>
<li>Ganache</li>
</ul>
<h2 id="工具">工具</h2>
<h3 id="通用-1">通用</h3>
<ul>
<li>VSCode <a href="../b36e0e8f3287754a39d573bb7b464ef6c2088a31">VSCode
安装与配置</a></li>
<li>Chrome</li>
</ul>
<h3 id="linux">Linux</h3>
<ul>
<li>SmartGit</li>
<li>Git <a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
<li>Rime <a href="../56835a45b617b5f884111cb72461efd4e8cee3c1">Deepin
使用 Rime 输入法</a></li>
<li>Fish <a href="../044ea9df5bcf1e3efabeff79dd0bc4f3fc7ca80a">Fish
命令行工具</a></li>
<li>Vimx</li>
<li>Htop</li>
<li>ScreenFetch</li>
<li>Jenkins <a href="../c7af277db65c9f546506b7d9b64e134bc8e31453">Docker
安装 Jenkins</a></li>
</ul>
<h3 id="windows">Windows</h3>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../56835a45b617b5f884111cb72461efd4e8cee3c1">Deepin 使用
Rime 输入法</a></li>
<li><a href="../b36e0e8f3287754a39d573bb7b464ef6c2088a31">VSCode
安装与配置</a></li>
<li><a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../764842d31549539a63861526520b2b5d19bc1253">Dokcer 部署
Nginx</a></li>
<li><a href="../923da1700a639cfc5c1a5fdde0afe20bd17e81b7">Obsidian
插件</a></li>
<li><a href="../900f6481b01d496a97b2c1479b20c221f71698fb">Deepin
Docker安装</a></li>
<li><a href="../c7af277db65c9f546506b7d9b64e134bc8e31453">Docker 安装
Jenkins</a></li>
<li><a href="../94d82bea286dc15c7e282ae272ed44f7f4b3223f">MySQL
开发环境</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
<li><a href="../dd5684d9b1e9b588daf144d16b8b45c0527370f4">Docker 部署
MongoDB 服务</a></li>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
<li><a
href="../ba4d3c5e49d683b99255b352902e5b23dfbf964f">开发环境配置</a></li>
<li><a
href="../ede2b0f326cdb7d2a878a721e773c0e144518b12">代码编辑快捷键</a></li>
<li><a href="../044ea9df5bcf1e3efabeff79dd0bc4f3fc7ca80a">Fish
命令行工具</a></li>
<li><a
href="../2f541a5b90f26c46fb796140e663c803782106b1">主题颜色配置</a></li>
<li><a href="../600341243df07e5a18820141b257c2b890dbb448">Jetbrains IDE
设置备份</a></li>
<li><a href="../21d813e79c3ecd509e540067546ff82d51254b80">Go
开发环境搭建</a></li>
<li><a href="../861888681da7294751e3d24405f703d1c58921a3">Docker 部署
Redis</a></li>
<li><a href="../c101dd2ac5422e359559d58f54f542b784bc7765">Docker 部署
kafka+zookeeper</a></li>
<li><a href="../f1e9fc99122870bddb3abca4f847c81f5f177ebb">VSCode
插件</a></li>
<li><a href="../9d54504bc8bd2899900331486882cfef2ce2387b">Chrome
插件</a></li>
<li><a href="../878aaea789f0bd452b9d2701c8ad4706b4b709a2">Jetbrains IDE
插件</a></li>
<li><a href="../062fda01f805f0eaa0479ca38bac3bd29ea0edac">SdkMan
使用指南</a></li>
<li><a href="../76534026b09bb952e51a65a63972fa8253a32d8c">Docker 部署
MySQL 开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>2.工作</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>开发环境</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Databinding 报错 Index -1 out of bounds for length</title>
    <url>/940fa5d4c82596b1111053d70ed03ffbdcb792aa/</url>
    <content><![CDATA[<h2 id="问题">问题</h2>
<p>新建布局后打包编译出错: <img
src="/images/abf0554391db58ba13e6b783dd284f9.jpg" /></p>
<h2 id="分析">分析</h2>
<h3 id="出错代码">出错代码</h3>
<p><code>XmlEditor.java</code> <img
src="/images/Pasted%20image%2020230130161512.png" /></p>
<h3 id="测试">测试</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line1</span> <span class="operator">=</span> <span class="string">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;utf-8\&quot;?&gt;&lt;!--15710579216--&gt;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> line1.lastIndexOf(<span class="string">&quot;&lt;/&quot;</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="解决">解决</h2>
<p>Debug 发现 node.getStop().line == 1,
也就是文件内容的最后一行是第一行, 但是这个文件实际上是113行,
由此得出结论: 该程序没有识别出文件的换行.</p>
<p><img src="/images/Pasted%20image%2020230130165042.png" /> 使用
notepad++ 检查问题文件的换行编码, 是 CR</p>
<p><img src="/images/Pasted%20image%2020230130165211.png" /> 更改为
CRLF, 问题解决</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>问题记录</category>
      </categories>
      <tags>
        <tag>android</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/8f6545d7e67011208be5a476458127a9efcf702f/</url>
    <content><![CDATA[<h1 id="双链测试笔记-3">双链测试笔记 3</h1>
<p>双链测试笔记 3 和 双链测试笔记 2 同名, 用于测试同名笔记的双链解析</p>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#链接">Obsidian+Hexo
Markdown 测试#链接</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#链接">Obsidian+Hexo
Markdown 测试#链接</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
        <category>deep</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>obsidian</tag>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>syncthing 如何移动同步仓库位置</title>
    <url>/983777fa8d6e26387aa399926786d604ff49cdb5/</url>
    <content><![CDATA[<p><strong>how to move syncthing folder position?</strong></p>
<ol type="1">
<li>Make sure the folder is <mark style="background: #018bffA6;">up to
date</mark> with the remote. (probably not strictly necessary)</li>
<li><mark style="background: #018bffA6;">Stop Syncthing</mark> (Pausing
the folder could be enough)</li>
<li><mark style="background: #018bffA6;">Copy the folder</mark> to the
external drive (e.g. using rsync or equivalent).</li>
<li><mark style="background: #018bffA6;">Edit the path in syncthing
config file</mark>
(C:/Users/Administrator/AppData/Local/Syncthing/config.xml )</li>
<li><mark style="background: #018bffA6;">Restart syncthing</mark></li>
<li>Wait for scanning and initial sync (exchanging and comparing
metadata to be sure the contents are the same as on remote) to
finish.</li>
<li>if everything works ok, delete the original folder
<!--SR:!2026-11-14,914,250--></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>效率</category>
        <category>Syncthing</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>syncthing</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 常用命令</title>
    <url>/9907c57e67333c562c3494060e11a99492819663/</url>
    <content><![CDATA[<h3 id="安装模块">1. 安装模块</h3>
<p><strong>npm 安装命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm i/install moduleName    <span class="comment"># 安装模块；i 是 install 的缩写，两者功能是一样的</span></span><br><span class="line">npm i moduleName -g         <span class="comment"># 全局安装模块</span></span><br><span class="line">npm i moduleName@0.0.1      <span class="comment"># 安装模块的指定版本</span></span><br><span class="line"></span><br><span class="line">npm i moduleName --save     <span class="comment"># 安装并保存至 package.json 文件的 dependencies 中</span></span><br><span class="line">npm i moduleName --save-dev <span class="comment"># 安装并保存至 package.json 文件的 devDependencies 中</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-02-26,829,252-->
<p><strong>npm 直接从 github 安装 module</strong></p>
<ul>
<li><strong>命令行</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm install qiaogaojian/pouchdb-server  </span><br></pre></td></tr></table></figure></div> 或者<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm install git://github.com/qiaogaojian/pouchdb-server<span class="comment">#sqlite5  </span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>package.json</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;git://github.com/user/project.git#commit-ish&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div> 或者<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">   <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;user/project#branch_name&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div> <!--SR:!2022-10-20,22,252--></li>
</ul>
<h3 id="查看已安装模块">2. 查看已安装模块</h3>
<p><strong>npm查看已安装模块命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span>                       <span class="comment"># 查看所有局部安装的模块</span></span><br><span class="line">npm <span class="built_in">ls</span> -g                    <span class="comment"># 查看所有全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm <span class="built_in">ls</span> moduleName            <span class="comment"># 查看指定模块的局部安装情况</span></span><br><span class="line">npm <span class="built_in">ls</span> moduleName -g         <span class="comment"># 查看指定模块的全局安装情况</span></span><br><span class="line"></span><br><span class="line">npm view moduleName          <span class="comment"># 查看当前源中指定模块的信息</span></span><br><span class="line">npm view moduleName versions <span class="comment"># 查看当前源中指定模块的所有历史版本</span></span><br><span class="line">npm view moduleName version  <span class="comment"># 查看当前源中指定模块的最新版本</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-04-19,1080,252-->
<h3 id="卸载模块">3. 卸载模块</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm uninstall moduleName</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-10-02,956,252-->
<h3 id="更新模块">4. 更新模块</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照 package.json 中的描述更新模块，且会在 package.json 文件中保存更新后的版本描述；</span></span><br><span class="line"><span class="comment"># ^a.b.c 更新至 a 下的最新版本</span></span><br><span class="line"><span class="comment"># ~a.b.c 更新至 a.b 下的最新版本</span></span><br><span class="line"><span class="comment"># a.b.c 不会做任何更新</span></span><br><span class="line">npm update </span><br><span class="line"></span><br><span class="line">npm update moduleName <span class="comment"># 更新指定模块</span></span><br></pre></td></tr></table></figure></div>
<h3 id="npm-源查看与修改">5. npm 源查看与修改</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config get registry                                 <span class="comment"># 查看当前 npm 源地址</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org <span class="comment"># 将 npm 源设置成相应的地址</span></span><br></pre></td></tr></table></figure></div>
<h3 id="万能的-help">6. 万能的 help</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">help</span> <span class="comment"># 当忘记了相应命令后，查看帮助</span></span><br></pre></td></tr></table></figure></div>
<h3 id="npm-注意事项">npm 注意事项</h3>
<ol type="1">
<li>package-lock.json 需要提交</li>
</ol>
<p>npm 从 5.0 版本开始添加了 package-lock.json 文件 (下称 lock
文件)；用于保证再次安装模块时能安装同样的版本；如果未保存 lock 文件；npm
会安装符合描述规则的最新版本如 gulp 中的 ^3.0.0 会安装 3.9.1
版本；这就容易造成一些版本不兼容的问题；
<!--SR:!2025-08-24,718,252--></p>
<ol start="2" type="1">
<li>时间精力允许的情况下，可进一步了解 npm</li>
</ol>
<ul>
<li>packge.json 中各字段的意义</li>
<li>package-lock.json 的由来与作用 </li>
<li>npm 包的发布与更新 </li>
<li>npm 源的搭建</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../8ae045022243ef5d9908e342c7c63a7c1c8c7951">Node
开发环境搭建 Win10</a></li>
<li><a href="../bc518616254162513c0aac7de77d137853f3de88">Deepin Node
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/a1051e510da0bf87d685c05b40001b7020d14a66/</url>
    <content><![CDATA[<h1 id="双链测试笔记-2">双链测试笔记 2</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#图表">Obsidian+Hexo
Markdown 测试#图表</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#图表">Obsidian+Hexo
Markdown 测试#图表</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>obsidian</tag>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Import module from different directory</title>
    <url>/a3d6224e07f3c409b4249b2586771a47b6619562/</url>
    <content><![CDATA[<h2
id="method-1-import-module-from-different-directory-by-append-sys.path">Method
1: Import module from different directory by append sys.path</h2>
<p>We can use <strong>sys.path</strong> to add the path of the new
different folder (the folder from where we want to import the modules)
to the system path so that Python can also look for the module in that
directory if it doesn’t find the module in its current directory.
As <strong>sys.path</strong> falls under the <strong>list type
class</strong> so, we can easily use the insert method to add the folder
path.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">import_root_path = os.path.abspath(<span class="string">&#x27;import/root/path/&#x27;</span>)  </span><br><span class="line">sys.path.append(import_root_path)</span><br></pre></td></tr></table></figure></div>
<h2 id="method-2-using-the-pythonpath-environment-variable">Method 2:
Using the PYTHONPATH environment variable</h2>
<p>if you don’t want to use the <strong>sys</strong> module to set the
path of the new directory. You can assign a directory path to the
PYTHONPATH variable and still get your program working.</p>
<ul>
<li>In Linux, we can use the following command in the terminal to set
the path:</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=’path/to/directory’  </span><br></pre></td></tr></table></figure></div>
<ul>
<li>In the Windows system :</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">SET PYTHONPATH=”path/to/directory”  </span><br></pre></td></tr></table></figure></div>
<p>To see if the PYTHONPATH variable holds the path of the new folder,
we can use the following command:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure></div>
<p><strong>注意:</strong></p>
<ul>
<li>把项目根目录加入环境变量(手动或通过脚本)<br />
</li>
<li>import 导入路径以项目根目录下的源码目录 src 为起始</li>
</ul>
<p><strong>参考:</strong></p>
<ul>
<li><a href="../eea6f6f9dc0e74e490943dd05c233acb06584080">Python import
导入其他脚本</a></li>
<li><a
href="https://www.geeksforgeeks.org/python-import-module-from-different-directory/">Python
– Import module from different directory - GeeksforGeeks</a></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../eea6f6f9dc0e74e490943dd05c233acb06584080">Python import
导入其他脚本</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../eea6f6f9dc0e74e490943dd05c233acb06584080">Python import
导入其他脚本</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 Python 的命名规范</title>
    <url>/a1dcb051cc7db83c41b918e5988ea92fe6151d29/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://mp.weixin.qq.com/s?src=11×tamp=1658813253&amp;ver=3943&amp;signature=rCEdWJcul585rSrw*vj*31qqKuqpuyjfoKsndxF88l6GQJ2nYUFoeIaXuil-zzPuDJx1HpltWSNMqT0hSJRkWO4MvJTiW4uipN7*uN2rpgW2MPfTIMNuW4k2D0SeknEl&amp;new=1">mp.weixin.qq.com</a></p>
</blockquote>
<p>命名规范在编写代码中起到很重要的作用，虽然不遵循命名规范，程序可能也可以运行，但是使用命名规范可以更加直观地了解代码所代表的含义。</p>
<p>Python 的命名规范（其它编程语言也差不多）</p>
<ol type="1">
<li>不能以数字开头，不能出现中文。</li>
<li>命名以字母开头，包含数字，字母（区分大小写），下划线。</li>
<li>不能包含关键字。</li>
</ol>
<p>下面具体说说 Python 的命名规范:</p>
<h2 id="类">1.类</h2>
<p><strong>python 类命名规则?</strong></p>
<p><mark style="background: #be9affA6;">类</mark>
<mark style="background: #018bffA6;">项目</mark>
<mark style="background: #fefe00A6;">异常</mark>
的命名遵循<strong>大驼峰</strong>规则,
单词首字母总是大写，私有类可以下划线开头。如: <code>MyClass</code>。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchool</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2025-10-25,687,270--></p>
<h2 id="函数">2.函数<!--SR:!2023-04-15,158,250--></h2>
<p><strong>Python 函数命名规则?</strong></p>
<p>函数名<strong>一律小写</strong>，<mark style="background: #fefe00A6;">若有多个单词用下划线隔开</mark>
。另外，<mark style="background: #fefe00A6;">私有函数下划线开头</mark>
。 <mark style="background: #be9affA6;">文件</mark>
<mark style="background: #018bffA6;">包</mark>
<mark style="background: #fefe00A6;">模块</mark>
<mark style="background: #57e8b8A6;">函数方法</mark>
<mark style="background: #83d98fA6;">变量</mark> 的命名规则是一样的:
<mark style="background: #83d98fA6;">全小写 + 下划线</mark> 如:
<code>this_is_var</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_private_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-07-27,1102,250--></p>
<h2 id="变量">3.变量</h2>
<p><strong>Python 变量命名规则?</strong></p>
<ul>
<li><strong>变量</strong>名最好小写，若有多个使用下划线分开 。</li>
<li><strong>常量</strong>使用<mark style="background: #fefe00A6;">全大写</mark>
，多个单词使用下划线隔开 。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">20</span></span><br><span class="line">this_is_a_variable = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MAX_NUM = <span class="number">1000</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-08-12,1112,250--></li>
</ul>
<p><strong>Python 命名规约?</strong></p>
<p><img
src="https://mmbiz.qpic.cn/mmbiz_png/IibUVnJ665WriaXQa5CcJ1j5qgLSB3nsDEn4yWicaNcbcIiaicvN6nb3dCtx3sxVaddqBgNbr2mZ0SvSoWPBLhom7aw/640?wx_fmt=png" />
<!--SR:!2026-08-05,883,250--></p>
<p><strong>额外补充：</strong></p>
<p><strong>1. 缩写</strong></p>
<p>命名应当尽量使用全拼写的单词，缩写的情况有如下两种： 1.
常用的缩写，如 XML.ID 等，在命名时也应只大写首字母，如 XmlParser。 2.
命名中含有长单词，对某个单词进行缩写。这时应使用约定成俗的缩写方式。</p>
<p>例如： function 缩写为 fn text 缩写为 txt object 缩写为 obj count
缩写为 cnt number 缩写为 num，等。</p>
<p><strong>2. 下划线</strong></p>
<p>一个前导下划线：表示非公有。 一个后缀下划线：避免关键字冲突。</p>
<p>两个前导下划线：当命名一个类属性引起名称冲突时使用。
两个前导和后缀下划线：“magic”（有特殊用图）对象或者属性，例如__init__或者__file__。绝对不要创造这样的名字，而只是使用它们。</p>
<p>注意：关于下划线的使用存在一些争议。</p>
<p><strong>3. 特定命名方式</strong></p>
<p>主要是指 <code>__xxx__</code>
形式的系统保留字命名法。项目中也可以使用这种命名，它的意义在于这种形式的变量是只读的，这种形式的类成员函数尽量不要重载。如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, parent = <span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">self.__id__ = <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">self.__parent__ = parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__message__</span>(<span class="params">self, msgid</span>):</span><br></pre></td></tr></table></figure></div>
<p>其中 <strong>id</strong>.<code>__parent__</code> 和
<code>__message__</code> 都采用了系统保留字命名法。</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 第三方库 RxLifecycle 使用详解</title>
    <url>/a31b43851dd6c6ce45804f9ffd2e15b3c82d7d6a/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://blog.csdn.net/qq_36699930/article/details/89001357">blog.csdn.net</a></p>
</blockquote>
<p>Github: <a
href="https://github.com/trello/RxLifecycle">RxLifecycle</a></p>
<h2 id="rxlifecycle-依赖">RxLifecycle 依赖</h2>
<ul>
<li>注意：本文使用的版本是 4.0.2 版本</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxLifecycle  </span></span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle:4.0.2&#x27;</span>  </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components-preference:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android-lifecycle:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-kotlin:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android-lifecycle-kotlin:4.0.2&#x27;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="rxlifecycle-介绍">RxLifecycle 介绍</h2>
<p><strong>RxLifecycle 目的</strong>：解决 RxJava
使用中的==内存泄漏==问题。</p>
<p><strong>RxLifecycle 核心思想</strong>：通过监听 Activity、Fragment
的生命周期，来自动==断开订阅==防止内存泄漏。</p>
<p>例如，当使用 RxJava 订阅并执行耗时任务后，当 Activity 被 finish
时，如果耗时任务还未完成，没有及时取消订阅，就会导致 Activity
无法被回收，从而引发内存泄漏。</p>
<p>为了解决这个问题，就产生了 RxLifecycle，让 RxJava
变得有生命周期感知，使得其能及时取消订阅，避免出现内存泄漏问题。</p>
<p>它可以让 Observable
发布的事件和当前的组件绑定，实现生命周期同步。<br />
从而实现当前组件生命周期结束时，自动取消对 Observable 订阅。
<!--SR:!2025-11-03,653,250!2024-12-29,481,250--></p>
<p><strong>目前网上对 RxJava 的内存泄漏有几种方案</strong></p>
<ol type="1">
<li>手动为 RxJava
的每一次订阅进行控制，指定在哪个生命周期方法调用时取消订阅；</li>
<li>当前组件生命周期结束时，自动取消对 Observable 订阅</li>
</ol>
<p>上述两种方式我都使用过，RxLifecycle
显然对于第一种方式，更简单直接，并且能够在 Activity/Fragment
容器的指定生命周期取消订阅，实在是好用。</p>
<p><strong>RxJava 的内存泄漏案例</strong></p>
<p>每隔 1 秒打印，无限循环：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// interval 默认在新线程，所以需要切换回主线程</span></span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>打印结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">09.004</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: onCreate: </span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">11.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">12.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">13.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">2</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">14.028</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">3</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">15.050</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: onDestroy: </span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">15.061</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">4</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">16.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">5</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">17.028</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">6</span></span><br></pre></td></tr></table></figure></div>
<p>我们发现执行 onDestroy()
方法后，还会继续执行，因为没有及时解除订阅，在退出 activity
的时候，异步线程还在执行，对 activity
还存在引用，此时就会产生内存泄漏。</p>
<h2 id="rxlifecycle-的使用-继承">RxLifecycle 的使用 (继承)</h2>
<p><strong>添加依赖</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理rxjava内存泄漏   </span></span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle:4.0.2&#x27;</span>  </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components:4.0.2&#x27;</span> </span><br></pre></td></tr></table></figure></div>
<p><strong>Activity/Fragment 需继承
RxAppCompatActivity/RxFragment，目前支持的有如下：</strong><br />
<img
src="https://img-blog.csdnimg.cn/20200311220545331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njk5OTMw,size_16,color_FFFFFF,t_70" /></p>
<p><strong>1. 继承 RxAppCompatActivity ：</strong></p>
<p>Activity 需要继承 RxAppCompatActivity，Fragment 需要继承
RxFragment。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在项目中针对 base 类的容器中继承实现对应的 Rx 类即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>2. 使用 compose 操作符绑定容器生命周期</strong></p>
<p>有两种方式：</p>
<p><strong>方式 1：使用 bindToLifecycle()</strong></p>
<p>以 Activity 为例，在 Activity 中使用 bindToLifecycle() 方法，完成
Observable
发布的事件和当前的组件绑定，实现生命周期同步。从而实现当前组件生命周期结束时，自动取消对
Observable 订阅，代码如下：</p>
<p>在 onResume() 进行绑定订阅，则在 onPause()
进行解除订阅，生命周期是两两对应的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在某个生命周期进行绑定，在对应的生命周期进行订阅解除,当执行onDestory()时, 自动解除订阅</span></span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(<span class="built_in">this</span>.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-02-16,715,250-->
<p><strong>方式 2：使用 bindUntilEvent()</strong></p>
<p>使用 ActivityEvent 类，其中的 CREATE、START、 RESUME、PAUSE、STOP、
DESTROY 分别对应生命周期内的方法。使用 bindUntilEvent
指定在哪个生命周期方法调用时取消订阅：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())         </span><br><span class="line">                <span class="comment">// 手动指定在生命周期onDestory()时，取消订阅。</span></span><br><span class="line">                .compose(<span class="built_in">this</span>.&lt;Long&gt;bindUntilEvent(ActivityEvent.DESTROY))</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-01-03,696,250-->
<p>打印结果：</p>
<p>我们发现执行，在退出 activity
的时候，解除了订阅，不再继续执行，解决类内存泄漏。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">38.296</span> <span class="number">29186</span>-<span class="number">29186</span>/? E/xyh: onCreate: </span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">41.311</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">43.310</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">45.311</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">2</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">46.723</span> <span class="number">29186</span>-<span class="number">29186</span>/com.xiaoyehai.rxlifecycle E/xyh: 解除了订阅</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">46.724</span> <span class="number">29186</span>-<span class="number">29186</span>/com.xiaoyehai.rxlifecycle E/xyh: onDestroy:</span><br></pre></td></tr></table></figure></div>
<p><strong>以 Activity 为例，主要有如下两种方法：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">bindToLifecycle()  <span class="comment">//在某个生命周期进行绑定，在对应的生命周期进行订阅解除。</span></span><br><span class="line"><span class="comment">//在onResume()进行绑定订阅，则在onPause()进行解除订阅，生命周期是两两对应的。</span></span><br><span class="line"></span><br><span class="line">bindUntilEvent(<span class="meta">@NonNull</span> ActivityEvent event)  <span class="comment">//该方法指定在哪个生命周期方法调用时取消订阅。</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-11-30,470,250-->
<p>Fragment 也有同样的两种方法，只是方法名会有所不同。</p>
<p>其中 ActivityEvent 是一个枚举类，对应于 Activity 的生命周期：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ActivityEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    CREATE,</span><br><span class="line">    START,</span><br><span class="line">    RESUME,</span><br><span class="line">    PAUSE,</span><br><span class="line">    STOP,</span><br><span class="line">    DESTROY</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="lifecycleprovider-的使用-非继承">LifecycleProvider 的使用
(非继承)</h2>
<p>上面的方式需要继承 RxAppCompatActivity，如果我们自己有
BaseActivity，所以不能继承
RxActvivty，RxAppCompatActivity、RxFragment，NaviActivity。</p>
<p>为了保持代码的灵活性，我们只需要添加下面的依赖即可:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Android生命周期作为提供者</span></span><br><span class="line"> implementation <span class="string">&#x27;com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        LifecycleProvider&lt;Lifecycle.Event&gt; provider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(provider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">29.329</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">31.327</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">33.108</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: 解除了订阅</span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">33.111</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: onDestroy:</span><br></pre></td></tr></table></figure></div>
<p><strong>把 LifecycleProvider 抽取到 BaseActivity 中</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> LifecycleProvider&lt;Lifecycle.Event&gt; mLifecycleProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(getLayoutId());</span><br><span class="line"></span><br><span class="line">        mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(mLifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里我们要用到 LifecycleProvide 这个接口。值得一提的是这个接口已经在
RxAppCompatActivity 中实现了，所以为什么可以继承
RxAppCompatActivity，赋予接口引用就可以使用它了。</p>
<h2 id="mvp-中使用-rxlifecycle">MVP 中使用 RxLifecycle</h2>
<p>这只是一个很简单的 mvp 案例，主要是演示 RxLifecycle 在 mvp
中的使用，在项目实际开发中可以进行封装。</p>
<p><strong>不需要继承 RxAppCompatActivity/RxFragment 方式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> <span class="keyword">implements</span> <span class="title class_">MainView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        <span class="type">MainPresenter</span> <span class="variable">mainPresenter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainPresenter</span>(mLifecycleProvider, <span class="built_in">this</span>);</span><br><span class="line">        mainPresenter.loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onSuccess: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Observable&lt;Long&gt; <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Observable&lt;Long&gt; observable =</span><br><span class="line">                Observable</span><br><span class="line">                        .interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                        .subscribeOn(Schedulers.io())</span><br><span class="line">                        .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> observable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainPresenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LifecycleProvider&lt;Lifecycle.Event&gt; lifecycleProvider;</span><br><span class="line">    <span class="keyword">public</span> MainView mainView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainModel mMainModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainPresenter</span><span class="params">(LifecycleProvider&lt;Lifecycle.Event&gt; lifecycleProvider, MainView mainView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lifecycleProvider = lifecycleProvider;</span><br><span class="line">        <span class="built_in">this</span>.mainView = mainView;</span><br><span class="line">        mMainModel = <span class="keyword">new</span> <span class="title class_">MainModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        mMainModel.loadData()</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .compose(lifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Long aLong)</span> &#123;</span><br><span class="line">                        mainView.onSuccess(aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>使用继承 RxAppCompatActivity/RxFragment 方式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">MainPresenter</span> <span class="variable">mainPresenter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainPresenter</span>(bindToLifecycle(), <span class="built_in">this</span>);</span><br><span class="line">mainPresenter.loadData();</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainPresenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LifecycleTransformer lifecycleTransformer;</span><br><span class="line">    <span class="keyword">public</span> MainView mainView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainModel mMainModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainPresenter</span><span class="params">(LifecycleTransformer lifecycleTransformer, MainView mainView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lifecycleTransformer = lifecycleTransformer;</span><br><span class="line">        <span class="built_in">this</span>.mainView = mainView;</span><br><span class="line">        mMainModel = <span class="keyword">new</span> <span class="title class_">MainModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        mMainModel.loadData()</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .compose(lifecycleTransformer)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Long aLong)</span> &#123;</span><br><span class="line">                        mainView.onSuccess(aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="fragment-中使用-rxlifecycle">Fragment 中使用 RxLifecycle</h2>
<p>Fragment 中使用和在 Activity 中的使用基本一致。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> LifecycleProvider&lt;Lifecycle.Event&gt; mLifecycleProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(getLayoutId(),container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line">		 <span class="comment">//要用this,he fragment的生命周期绑定在一起如果使用getActivity()的话就是和Activity的生命周期绑定在一起</span></span><br><span class="line">        <span class="comment">//mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(getActivity());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeFrgament</span> <span class="keyword">extends</span> <span class="title class_">BaseFragment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.fragment_home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(mLifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroyView();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;HomeFrgament==onDestroyView: &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;HomeFrgament==onDestroy: &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>rxlifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note1</title>
    <url>/a58ee0e911c1ffedefc347d0eac29b0f5fae0d41/</url>
    <content><![CDATA[<h1 id="双链测试笔记-1">双链测试笔记 1</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#注脚">Obsidian+Hexo
Markdown 测试#注脚</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#注脚">Obsidian+Hexo
Markdown 测试#注脚</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>obsidian</tag>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d 的碰撞</title>
    <url>/b42efea08a2620b83a399d3125c240052c42e7f9/</url>
    <content><![CDATA[<h2 id="碰撞的两种形式">碰撞的两种形式</h2>
<ul>
<li><strong>Collision</strong>:
<mark style="background: #fefe00A6;">有物理碰撞</mark> 效果, 触发
<mark style="background: #018bffA6;">OnCollision</mark> 事件.</li>
<li><strong>Trigger</strong>:
<mark style="background: #fefe00A6;">没有物理碰撞</mark> 效果, 触发
<mark style="background: #018bffA6;">OnTrigger</mark> 事件.</li>
</ul>
<h2 id="触发的条件">触发的条件</h2>
<p><strong>Collision 触发的条件</strong> 1.
<mark style="background: #fefe00A6;">双方都有碰撞体</mark><br />
2. <mark style="background: #fefe00A6;">撞的一方必须有刚体</mark> 3.
<mark style="background: #fbab4bA6;">双方都不可勾选 Trigger
触发器</mark> 4. <mark style="background: #fbab4bA6;">双方不可同时勾选
Kinematic 选项</mark></p>
<p><strong>Trigger 触发的条件</strong> 1.
<mark style="background: #fefe00A6;">双发都有碰撞体</mark> 2.
<mark style="background: #fefe00A6;">撞的一方必要有刚体</mark> 3.
<mark style="background: #57e8b8A6;">至少有一方勾选 Trigger
触发器</mark> <!--SR:!2024-09-17,23,250--></p>
<h2 id="回调的事件">回调的事件</h2>
<p><strong>Trigger</strong> - OnTriggerEnter() - OnTriggerStay() -
OnTriggerExit()</p>
<p><strong>Collision</strong> - OnCollisionEnter() - OnCollisionStay() -
OnCollisionExit()</p>
<ol type="1">
<li><strong>Enter</strong> 事件表示两物体接触的瞬间,会执行一次</li>
<li><strong>Stay</strong> 事件表示两物体持续接触,会不断执行</li>
<li><strong>Exit</strong> 事件表示当两物体分开瞬间,会执行一次
<!--SR:!2024-09-08,18,250--></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 安装与配置</title>
    <url>/b36e0e8f3287754a39d573bb7b464ef6c2088a31/</url>
    <content><![CDATA[<p><strong>下载地址</strong> https://code.visualstudio.com/download</p>
<p><strong>设置备份地址</strong>
git@gitee.com:qiaogaojian/codegist.git</p>
<p><strong>插件备份地址</strong>
git@github.com:qiaogaojian/vscode-plugin.git</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>VSCode</category>
      </categories>
      <tags>
        <tag>tool</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>Node child_process 多进程</title>
    <url>/a7dfacda4d5233de9201c42abc49d0f223c52099/</url>
    <content><![CDATA[<h2 id="关于-childprocess-类">关于 ChildProcess 类</h2>
<p>1、<code>ChildProcess</code> 类的实例都是 <a
href="http://nodejs.cn/s/pGAddE"><code>EventEmitter</code></a>，表示衍生的子进程<br />
2、每个实例都有 stdout, stdin, stderr 三个流对象<br />
3、通过 fork 产生的子进程与父进程可以用 send 方法及监听 message
事件来相互通信<br />
4、 几个事件： error , message , exit , close , disconnect
<!--SR:!2025-01-09,496,250--></p>
<h2 id="child_process-创建异步进程方法">child_process
创建异步进程方法</h2>
<p>以下四个方法均返回 ChildProcess 的实例</p>
<h3 id="child_process.exec">child_process.exec</h3>
<p>语法：<code>child_process.exec(command[, options][, callback])</code>
注意：<br />
1、command 是一个 shell 命令的字符串，包含了命令的参数<br />
2、可以使用 callback；<br />
3、衍生一个 shell 然后在该 shell 中执行 command，command 一般是 shell
内置的 命令，如 ls,cat 等，也可以是 shell 脚本组成的文件，如 start.sh 等
<!--SR:!2025-01-26,509,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数版</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;cat *.js missing_file | wc -l&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 版</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> exec = util.<span class="title function_">promisify</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">lsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; stdout, stderr &#125; = <span class="keyword">await</span> <span class="title function_">exec</span>(<span class="string">&#x27;cat *.js missing_file | wc -l&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout:&#x27;</span>, stdout);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stderr:&#x27;</span>, stderr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">lsExample</span>();</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.execfile">child_process.execFile</h3>
<p>语法：<code>child_process.execFile(file[, args][, options][, callback])</code>
注意：<br />
1、与 exec
的不同是，命令的参数不能放在第一个参数，只能作为第二个参数传递；<br />
2、默认情况下不会衍生 shell，指定的可执行 file
直接作为新进程衍生，使其比 child_process.exec() 稍微更高效<br />
3、file 是要运行的可执行文件的名称或路径，如 node.exe，不能是 start.js
这种脚本文件 <!--SR:!2025-04-15,462,230--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数版</span></span><br><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;--version&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 版</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> execFile = util.<span class="title function_">promisify</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">execFile</span>);</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; stdout &#125; = <span class="keyword">await</span> <span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;--version&#x27;</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getVersion</span>();</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.fork">child_process.fork</h3>
<p>语法：<code>child_process.fork(modulePath[, args][, options])</code>
注意：<br />
1、该接口专门用于衍生新的 Node.js 进程<br />
2、modulePath 是要在 node 子进程中运行的模块，由于是 node.js
的进程，所以可以是 start.js 这种 js 文件<br />
3、无回调，参数要以第二个参数传入<br />
4、返回的子进程将内置一个额外的 ipc
通信通道，允许消息在父进程和子进程之间来回传递。
<!--SR:!2024-11-06,447,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPC 通道</span></span><br><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = child_process.<span class="title function_">fork</span>(<span class="string">&#x27;./child.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message from child: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="string">&#x27;parent&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message from parent: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="string">&#x27;child&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 node parent.js的 result </span></span><br><span class="line">message <span class="keyword">from</span> <span class="attr">child</span>: &#123;<span class="string">&quot;from&quot;</span>:<span class="string">&quot;child&quot;</span>&#125;</span><br><span class="line">message <span class="keyword">from</span> <span class="attr">parent</span>: &#123;<span class="string">&quot;from&quot;</span>:<span class="string">&quot;parent&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.spawn">child_process.spawn</h3>
<p>语法：<code>child_process.spawn(command[, args][, options])</code>
注意：使用给定的 command 衍生一个新进程，并带上 args 中的命令行参数。
<!--SR:!2024-12-25,480,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">spawn</span>;</span><br><span class="line"><span class="keyword">var</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;bad_command&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Failed to start child process 1.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;nonexistFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">child2.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error msg from process 2: &#x27;</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child2.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Failed to start child process 2.&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="child_process-创建异步进程方法的区别">child_process
创建异步进程方法的区别</h2>
<p><mark style="background: #fefe00A6;">主要的区别在于第一个参数的含义不同：</mark><br />
- 对于 exec 和 execFile 传递的是 command 或 可执行文件，类似 ls 或者
start.sh 或者 node; 可接受回调; 二者不同的是命令的参数位置<br />
- fork 传递的是 node 支持的脚本，类似 start.js，无回调<br />
- spawn 是以上三个方法实现的基础。</p>
<p>对于构建开发环境而言，一般至少会起两个进程，主进程起
devServer；还需一个进程起 mock API 服务器，所以一般用 fork 较多</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">fork</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略 sass 任务</span></span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;dev-server&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  gulpLivereload.<span class="title function_">listen</span>();</span><br><span class="line">  gulp.<span class="title function_">watch</span>(<span class="string">&#x27;./public/scss/*.scss&#x27;</span>, gulp.<span class="title function_">series</span>([<span class="string">&#x27;sass&#x27;</span>]));</span><br><span class="line">  <span class="title function_">fork</span>(<span class="string">&#x27;./server.js&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">series</span>([<span class="string">&#x27;sass&#x27;</span>,<span class="string">&#x27;dev-server&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// fork(&#x27;./server.js&#x27;) 还可以用这样替换</span></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;node ./server.js&#x27;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">child.<span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;./server.js&#x27;</span>],<span class="function">(<span class="params">err,stdout,stderr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>
<p>然后一个 gulp 命令就会启动两个进程</p>
<p><strong>参考:</strong></p>
<ul>
<li><a
href="http://nodejs.cn/api/child_process.html#child_process_child_process">child_process（子进程）</a></li>
<li><a
href="https://github.com/chyingp/nodejs-learning-guide">nodejs-learning-guide</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Deepin Node 开发环境搭建</title>
    <url>/bc518616254162513c0aac7de77d137853f3de88/</url>
    <content><![CDATA[<h2 id="安装-1">1. 安装 <a href="#fn1" class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></h2>
<p><strong>使用 n 安装和管理 Node</strong></p>
<p>安装命令:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 npm</span></span><br><span class="line">sudo apt-get install npm</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yarn</span></span><br><span class="line">sudo npm i -g yarn</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 n, n 模块是管理 nodejs 版本的</span></span><br><span class="line">sudo npm i -g n</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="配置">2. 配置</h2>
<ul>
<li><a href="../6d601709f7477b517baf2a678bf0221c6bd7e53c">Npm
配置国内源</a></li>
<li><a
href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#设置国内源">Yarn
简介#设置国内源</a></li>
</ul>
<h2 id="使用">3. 使用</h2>
<ul>
<li><a href="../9907c57e67333c562c3494060e11a99492819663">Npm
常用命令</a></li>
<li><a href="../1c49ae91b656f5d2caa0311bc6cfce64372e7f4e">N
常用命令</a></li>
<li><a href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#常用命令">Yarn
简介#常用命令</a></li>
</ul>
<h2 id="参考">参考</h2>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#常用命令">Yarn
简介#常用命令</a></li>
<li><a href="../9907c57e67333c562c3494060e11a99492819663">Npm
常用命令</a></li>
<li><a href="../1c49ae91b656f5d2caa0311bc6cfce64372e7f4e">N
常用命令</a></li>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../6d601709f7477b517baf2a678bf0221c6bd7e53c">Npm
配置国内源</a></li>
<li><a
href="../783e6c1b8b76139f2840a078b9e9bd8817d41c3f/#设置国内源">Yarn
简介#设置国内源</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://juejin.cn/post/6844903889087496200">npm/yarn设置淘宝镜像源
- 掘金</a><a href="#fnref1" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Android UI 架构演进：从 MVC 到 MVP、MVVM、MVI</title>
    <url>/b5c94ee71c83595061907a47eace2c60e1cb444c/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/7072020104212381732">juejin.cn</a></p>
</blockquote>
<h2 id="前言">前言</h2>
<p>为了优化代码设计，业界先后提出了 MVC、MVP、MVVM 和 MVI
等架构设计。这四个模式讨论是 “如何管理 UI” 这个话题，采用的手段都是
“关注点分离”，只是实现的细节不同。最开始是没有采用任何模式的状态，不管是视图代码还是表现逻辑全都写在
Activity
里面，很明显这样的代码耦合度非常高，难以进行维护和测试，可读性也不好。</p>
<blockquote>
<p>提示：耦合度高是现象，关注点分离是手段，易维护性和易测试性是结果，模式是可复用的经验。</p>
</blockquote>
<h2 id="mvc">1. MVC</h2>
<p>MVC 其实是 Android 默认的设计，MVC 里将代码分为三个部分：</p>
<ul>
<li><strong>View：</strong> Layout XML 文件；</li>
<li><strong>Model：</strong>
负责管理业务数据逻辑，如网络请求、数据库处理；</li>
<li><strong>Controller：</strong> Activity 负责处理表现逻辑。</li>
</ul>
<p>MVC 初步解决了 Activity 代码太多的问题，但也有缺点：我们的初衷
Activity / Fragment 是只处理表现逻辑的部分 ，但现实是 Activity
天然不可避免要处理 UI，也要处理用户交互，说明 Activity 本身天然承担了
View 的角色。那么这个架构就会造成 Activity
里糅合了视图和业务的代码，分离程度不够。</p>
<p><img
src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2de76425e6f041e19f7ab971592ee2a2~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" />
<!--SR:!2025-10-19,639,250--></p>
<h2 id="mvp">2. MVP</h2>
<p>为了将 Activity 中的表现逻辑彻底分离出来，业界提出了 MVP 的设计。MVP
同样将代码划分为三个部分：</p>
<ul>
<li><strong>View：</strong> Activity 和 Layout XML 文件；</li>
<li><strong>Model：</strong>
负责管理业务数据逻辑，如网络请求、数据库处理；</li>
<li><strong>Presenter：</strong> 负责处理表现逻辑。</li>
</ul>
<p>在实现细节上，View 和 Presenter 中间会定义一个协议接口
Contract，这个接口会约定 View 如何向 Presenter 发指令和 Presenter 如何
Callback 给 View。这样的架构里 Activity 不再有表现逻辑的部分，Activity
作为 View 的角色只处理和 UI
有关的事情。但还是存在一些<mark style="background: #fa518dA6;">缺点</mark>
：</p>
<ul>
<li><strong>双向依赖：</strong> View 和 Presenter 是双向依赖的，一旦
View 层做出改变，相应地 Presenter 也需要做出调整。在业务语境下，View
层变化是大概率事件；</li>
<li><strong>内存泄漏风险：</strong> Presenter 持有 View
层的引用，当用户关闭了 View 层，但 Model
层仍然在进行耗时操作，就会有内存泄漏风险。虽然有解决办法，但还是存在风险点和复杂度（弱引用
/ onDestroy() 回收 Presenter）。</li>
<li><strong>协议接口类膨胀：</strong> View 层和 Presenter
层的交互需要定义接口方法，当交互非常复杂时，需要定义很多接口方法和回调方法，也不好维护。</li>
</ul>
<p><img
src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7521d3d3d024b56b7f71e7716d03199~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" />
<!--SR:!2026-03-21,742,250--></p>
<h2 id="mvvm">3. MVVM</h2>
<p>MVVM 模式改动在于中间的 Presenter 改为 ViewModel，MVVM
同样将代码划分为三个部分：</p>
<ul>
<li><strong>View：</strong> Activity 和 Layout XML 文件，与 MVP 中 View
的概念相同；</li>
<li><strong>Model：</strong>
负责管理业务数据逻辑，如网络请求、数据库处理，与 MVP 中 Model
的概念相同；</li>
<li><strong>ViewModel：</strong>
存储视图状态，负责处理表现逻辑，并将数据设置给可观察数据容器。</li>
</ul>
<p>在实现细节上，View 和 Presenter 从双向依赖变成 View 可以向 ViewModel
发指令，但 ViewModel 不会直接向 View 回调，而是让 View
通过观察者的模式去监听数据的变化，有效规避了 MVP 双向依赖的缺点。但 MVVM
本身也存在一些<mark style="background: #fa518dA6;">缺点</mark> ：</p>
<ul>
<li><strong>多数据流：</strong> View 与 ViewModel
的交互分散，缺少唯一修改源，不易于追踪；</li>
<li><strong>LiveData 膨胀：</strong> 复杂的页面需要定义多个
MutableLiveData，并且都需要暴露为不可变的 LiveData。
<!--SR:!2025-08-25,651,270--></li>
</ul>
<p><img
src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7732993ca97b48b486a47ad331898a2e~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" /></p>
<blockquote>
<p>DataBinding、ViewModel 和 LiveData 等组件是 Google 为了帮助我们实现
MVVM 模式提供的架构组件，它们并不是 MVVM 的本质，只是实现上的工具。</p>
<ul>
<li><strong>Lifecycle：</strong> 生命周期状态回调；</li>
<li><strong>LiveData：</strong> 可观察的数据存储类；</li>
<li><strong>databinding：</strong> 可以自动同步 UI 和 data，不用再
findviewById()；</li>
<li><strong>ViewModel：</strong>
存储界面相关的数据，这些数据不会在手机旋转等配置改变时丢失。</li>
</ul>
</blockquote>
<h2 id="mvi">4. MVI</h2>
<p>MVI 模式的改动在于将 View 和 ViewModel 之间的多数据流改为基于
ViewState 的单数据流。MVI 将代码分为以下四个部分：</p>
<ul>
<li><strong>View：</strong> Activity 和 Layout XML 文件，与 MVVM 中 View
的概念相同；</li>
<li><strong>Intent：</strong> 定义数据操作，是将数据传到 Model
的唯一来源，相比 MVVM 是新的概念；</li>
<li><strong>ViewModel：</strong> 存储视图状态，负责处理表现逻辑，并将
ViewState 设置给可观察数据容器；</li>
<li><strong>ViewState：</strong>
一个数据类，包含页面状态和对应的数据。</li>
</ul>
<p>在实现细节上，View 和 ViewModel 之间的多个交互（多 LiveData
数据流）变成了单数据流。无论 View 有多少个视图状态，只需要订阅一个
ViewState 便可以获取所有状态，再根据 ViewState
去响应。当然，实践中应该根据状态之间的关联程度来决定数据流的个数，不应该为了使用
MVI 模式而强行将多个无关的状态压缩在同一个数据流中。</p>
<ul>
<li><strong>唯一可信源：</strong> 数据只有一个来源（ViewModel），与 MVVM
的思想相同；</li>
<li><strong>单数据流：</strong> View 和 ViewModel
之间只有一个数据流，只有一个地方可以修改数据，确保数据是安全稳定的。并且
View 只需要订阅一个 ViewState 就可以获取所有状态和数据，相比 MVVM
是新的特性；</li>
<li><strong>响应式：</strong> ViewState 包含页面当前的状态和数据，View
通过订阅 ViewState 就可以完成页面刷新，相比于 MVVM 是新的特性。</li>
</ul>
<p>但 MVI 本身也存在一些缺点：</p>
<ul>
<li><strong>State 膨胀：</strong> 所有视图变化都转换为
ViewState，还需要管理不同状态下对应的数据。实践中应该根据状态之间的关联程度来决定使用单流还是多流；</li>
<li><strong>内存开销：</strong> ViewState
是不可变类，状态变更时需要创建新的对象，存在一定内存开销；</li>
<li><strong>局部刷新：</strong> View 根据 ViewState 响应，不易实现局部
Diff 刷新，可以使用 Flow#distinctUntilChanged()
来刷新来减少不必要的刷新。</li>
</ul>
<p>不过，MVI 并不是一个全新的设计模式，其背后设计理念与 Redux
模式如出一辙。在 Redux 里完全可以找到与 MVI 相同的各个要素，而且明显
Redux 的命名方式更加清晰无歧义，小伙伴们知道 Model - View - Intent
这个命名方式的原始出处的话，可以告诉我一声。</p>
<ul>
<li>View - View</li>
<li>Action - Intent</li>
<li>Store - ViewModel</li>
<li>State - ViewState</li>
<li>Reducer - Model</li>
</ul>
<p><img
src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c38cf4320d2f40429ccf4d0d04ff77d3~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image?" /></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="KOTLIN"><figure class="iseeu highlight /kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、ViewModel</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainViewModel</span>: <span class="type">ViewModel</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> mModel = MainModel()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mIntent = Channel&lt;MainIntent&gt;(Channel.UNLIMITED)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> _state = MutableStateFlow&lt;MainViewState&gt;(MainViewState.Idle)</span><br><span class="line">    <span class="keyword">val</span> state: StateFlow&lt;MainViewState&gt;</span><br><span class="line">        <span class="keyword">get</span>() = _state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        viewModelScope.launch &#123;</span><br><span class="line">            mIntent.consumeAsFlow().collect &#123;</span><br><span class="line">                <span class="keyword">when</span> (it) &#123;</span><br><span class="line">                    <span class="keyword">is</span> MainIntent.FetchNew -&gt; fetchNews()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">fetchNews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        viewModelScope.launch &#123;</span><br><span class="line">            _state.value = MainViewState.Loading</span><br><span class="line">            _state.value = <span class="keyword">try</span> &#123;</span><br><span class="line">                MainViewState.News(mModel.fetchNews())</span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                MainViewState.Error(e.localizedMessage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、ViewState</span></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">MainViewState</span> &#123;</span><br><span class="line">    <span class="keyword">object</span> Idle : MainViewState()</span><br><span class="line">    <span class="keyword">object</span> Loading : MainViewState()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">News</span>(<span class="keyword">val</span> news: List&lt;New&gt;) : MainViewState()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Error</span>(<span class="keyword">val</span> error: String?) : MainViewState()</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3、Intent</span></span><br><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">MainIntent</span> &#123;</span><br><span class="line">    <span class="keyword">object</span> FetchNew : MainIntent()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4、View</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MainActivity</span> : <span class="type">AppCompatActivity</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mainViewModel: MainViewModel</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">observeViewModel</span><span class="params">()</span></span> &#123;</span><br><span class="line">        lifecycleScope.launch &#123;</span><br><span class="line">            mainViewModel.state.collect &#123;</span><br><span class="line">                <span class="keyword">when</span> (it) &#123;</span><br><span class="line">                    <span class="keyword">is</span> MainViewState.Idle -&gt; &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">is</span> MainViewState.Loading -&gt; &#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">is</span> MainViewState.News -&gt; &#123;</span><br><span class="line">                        renderList(it.news)</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">is</span> MainViewState.Error -&gt; &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">renderList</span><span class="params">(news: <span class="type">List</span>&lt;<span class="type">New</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></div>
<h2 id="mvpmvvm-和-mvi-的对比">5. MVP、MVVM 和 MVI 的对比</h2>
<p><strong>MVVM 和 MVP 的思想是相同的</strong>，最本质的概念就是
Activity 里做的事情太多了，所以要把 Activity 中与 UI
无关的部分抽离出来，交给别人做。这个 “别人” 在 MVP 里叫作 Presenter，在
MVVM 里叫作 ViewModel。而不论是 MVP 中的约定接口，还是 ViewModel
里的观察者模式，这些都是实现上的细节而已。</p>
<p>MVI
与前者的主要区别不在于强调严格的单向数据流，而在于从命令式的开发模式，转变为响应式的开发模式。我们并不是说越新潮，越复杂的架构就是最好的，只有合适的架构才是最好的。但是不可否认，从
React 到 Flutter，从 MVI 到
Compose，响应式编程似乎有一统天下的趋势。未来会怎么样，我们拭目以待。
<!--SR:!2025-02-08,504,250--></p>
<p><strong>参考:</strong></p>
<ul>
<li><a
href="https://link.juejin.cn?target=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DqDyb6AkX0s0"
title="https://www.youtube.com/watch?v=qDyb6AkX0s0">iPlayground 2019 |
漫談 iOS 架構：MVC / MVVM / VIPER 與 Redux</a></li>
<li><a
href="https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FchcF5vRnFTvSlPti9mfa6A"
title="https://mp.weixin.qq.com/s/chcF5vRnFTvSlPti9mfa6A">关于
MVC/MVP/MVVM 的一些错误认识</a></li>
<li><a href="https://juejin.cn/post/7022624191723601928"
title="https://juejin.cn/post/7022624191723601928">MVVM 进阶版：MVI
架构了解一下~ - 掘金</a></li>
<li><a href="https://juejin.cn/post/7025222741322121223"
title="https://juejin.cn/post/7025222741322121223">MVI
架构更佳实践：支持 LiveData 属性监听 - 掘金</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.理论</category>
        <category>计算机</category>
        <category>软件工程</category>
        <category>架构</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>架构</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 使用 MSVC 编译器搭建 OpenGL 开发环境</title>
    <url>/bdc8ce261b86b2dc4f472d991d541565885ab76f/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/qiaogaojian/cpp_learn-opengl">github.com</a></p>
</blockquote>
<p>因为 windows 环境下使用 g++ 编译器 assimp 库链接失败, 报错 "undefined
reference to'Assimp::Importer::Importer()", 后来发现使用 MSVC
编译器没有这个问题, 踩了几个坑终于搭建成功, 在此记录一下基于VSCode +
MSVC编译器的 OpenGL 开发环境配置.</p>
<p>另外, mingw/g++ 开发环境在 g++ 分支 visual studio 开发环境在 vs2019
分支.</p>
<h3 id="安装所需软件">1. 安装所需软件</h3>
<ul>
<li><p>VSCode 安装 C++ extension</p></li>
<li><p>下载安装 <a
href="https://github.com/assimp/assimp/releases/tag/v3.3.1/">assimp-sdk-3.3.1-setup_vs2017.exe</a></p></li>
<li><p>安装带 C++ build tools 的 Visual Studio, 下载独立的 <a
href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++
build tools</a> 也可以.</p></li>
<li><p>其他所用的库在<a
href="https://github.com/qiaogaojian/learn-opengl.git">项目</a>中的
include 文件夹里</p></li>
</ul>
<h3 id="配置环境变量">2. 配置环境变量</h3>
<ul>
<li>Path 中添加 assimp 库</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Opengl\Assimp\bin\x86  <span class="comment"># 这样就不需要把assimp.dll放到build目录了</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>新建 INCLUDE 环境变量, 添加以下目录</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\include</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\include</span><br><span class="line">D:\Program\VS2019\VS\Common7\Tools</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\ucrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\um</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\shared</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\winrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\cppwinrt</span><br></pre></td></tr></table></figure></div>
<ul>
<li>新建 LIB 环境变量, 添加以下目录</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\UnitTest\lib</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\ucrt\x86</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\um\x86</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-vscode">3. 配置 vscode</h3>
<ul>
<li>新建目录 OpenGl 并使用 VSCode 打开, <code>.vscode</code> 目录下
(没有就新建) 创建 <code>settings.json</code>, 配置以下内容</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;C:\\Windows\\Sysnative\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="string">&quot;/k&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="string">&quot;D:/Program Files/VS2019/VS/Common7/Tools/VsDevCmd.bat&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;*.json&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsonc&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.cfg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.fsh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;glsl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iomanip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>.vscode 下创建 <code>c_cpp_properties.json</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_gb2312&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>.vscode 下创建 <code>tasks.json</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;/Od&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Zi&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/EHsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/MD&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/W4&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fd:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fo:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fe:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/shader_loader.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/stb_image.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/assimp/lib/assimp.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glfw/lib-vc2019/glfw3.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glad/lib/glad.o&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/OpenGL32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/User32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/Gdi32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/shell32.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Link /NODEFAULTLIB:msvcrt.lib&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$msCompile&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl.exe&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>.vscode 下创建 <code>launch.json</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Windows) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppvsdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="注意事项">注意事项</h3>
<ol type="1">
<li><p>要确保环境变量和项目中的库保持一致 要么都是 x86 要么都是
x64</p></li>
<li><p>确保使用 vsdevcmd 进行编译</p></li>
<li><p>遇到 "undefined reference to xxx", 先检查 tasks.json
链接缺失的库, 再检查环境变量</p></li>
<li><p>编译时需要引用 build 文件夹, 但是 build 文件夹 git 已忽略,
因此需要自己提前新建好</p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.理论</category>
        <category>计算机</category>
        <category>图形学</category>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>vscode</tag>
        <tag>opengl</tag>
        <tag>mscv</tag>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>Git submodule 子模块的管理和使用</title>
    <url>/c03df0ff2688939d6c5b13b71effd8499a69c17a/</url>
    <content><![CDATA[<h2 id="使用前提">使用前提</h2>
<p>经常碰到这种情况：当你在一个 Git
项目上工作时，你需要在其中使用另外一个 Git
项目。也许它是一个第三方开发的 Git
库或者是你独立开发和并在多个父项目中使用的。这个情况下一个常见的问题产生了：你想将两个项目单独处理但是又需要在其中一个中使用另外一个。</p>
<p>在 Git
中你可以用子模块<code>submodule</code>来管理这些项目，<code>submodule</code>允许你将一个
Git 仓库当作另外一个 Git
仓库的子目录。这允许你克隆另外一个仓库到你的项目中并且保持你的提交相对独立。</p>
<h2 id="添加子模块">添加子模块</h2>
<p><strong>添加子模块命令?</strong></p>
<p>此文中统一将远程项目<code>git@gitee.com:qiaogaojian/framework.git</code>克隆到本地<code>Framework</code>文件夹。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ git submodule add git@gitee.com:qiaogaojian/framework.git Framework</span><br></pre></td></tr></table></figure></div> <!--SR:!2026-04-06,777,230--></p>
<p>添加子模块后运行<code>git status</code>, 可以看到目录有增加 1
个文件<code>.gitmodules</code>, 这个文件用来保存子模块的信息。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial commit</span><br><span class="line"></span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">    new file:   .gitmodules</span><br><span class="line">    new file:   assets</span><br></pre></td></tr></table></figure></div>
<h2 id="查看子模块">查看子模块</h2>
<p><strong>查看子模块命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule</span><br><span class="line"> e33f854d3f51f5ebd771a68da05ad0371a3c0570 assets (heads/master)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2027-07-28,1125,250-->
<h2 id="更新子模块">更新子模块</h2>
<ul>
<li><p><strong>更新项目内子模块到最新版本命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule update</span><br></pre></td></tr></table></figure></div></li>
<li><p>更新子模块为远程项目的最新版本</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule update --remote</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h2 id="克隆包含子模块的项目">克隆包含子模块的项目</h2>
<p>克隆包含子模块的项目有二种方法：一种是先克隆父项目，再更新子模块；另一种是直接递归克隆整个项目。</p>
<h3 id="克隆父项目再更新子模块">克隆父项目，再更新子模块</h3>
<ol type="1">
<li>克隆父项目</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/maonx/vimwiki-assets.git assets</span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li>查看子模块</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule</span><br><span class="line"> -e33f854d3f51f5ebd771a68da05ad0371a3c0570 assets</span><br></pre></td></tr></table></figure></div>
<p>子模块前面有一个<code>-</code>，说明子模块文件还未检入（空文件夹）。</p>
<ol start="3" type="1">
<li>初始化子模块</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule init</span><br><span class="line">Submodule &#x27;assets&#x27; (https://github.com/maonx/vimwiki-assets.git) registered for path &#x27;assets&#x27;</span><br></pre></td></tr></table></figure></div>
<p>初始化模块只需在克隆父项目后运行一次。</p>
<ol start="4" type="1">
<li>更新子模块</li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git submodule update</span><br><span class="line">Cloning into &#x27;assets&#x27;...</span><br><span class="line">remote: Counting objects: 151, done.</span><br><span class="line">remote: Compressing objects: 100% (80/80), done.</span><br><span class="line">remote: Total 151 (delta 18), reused 0 (delta 0), pack-reused 70</span><br><span class="line">Receiving objects: 100% (151/151), 1.34 MiB | 569.00 KiB/s, done.</span><br><span class="line">Resolving deltas: 100% (36/36), done.</span><br><span class="line">Checking connectivity... done.</span><br><span class="line">Submodule path &#x27;assets&#x27;: checked out &#x27;e33f854d3f51f5ebd771a68da05ad0371a3c0570&#x27;</span><br></pre></td></tr></table></figure></div>
<h3 id="递归克隆整个项目">递归克隆整个项目</h3>
<p><strong>clone 带子模块的项目?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/maonx/vimwiki-assets.git assets --recursive</span><br></pre></td></tr></table></figure></div>
<p>递归克隆整个项目，子模块已经同时更新了，一步到位。
<!--SR:!2026-10-01,939,250--></p>
<h2 id="修改子模块">修改子模块</h2>
<p>在子模块中修改文件后，直接提交到远程项目分支。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git ci -m &quot;commit&quot;</span><br><span class="line">$ git push origin HEAD:master</span><br></pre></td></tr></table></figure></div>
<h2 id="删除子模块">删除子模块</h2>
<p><strong>怎么删除子模块?</strong></p>
<p><strong>删除子模块比较麻烦，需要手动删除相关的文件，否则在添加子模块时有可能出现错误</strong><br />
同样以删除<code>assets</code>文件夹为例</p>
<ol type="1">
<li><p>删除子模块文件夹 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">rm</span> --cached assets</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> -rf assets</span><br><span class="line">$ <span class="built_in">rm</span> -rf .git/modules/assets</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>删除<code>.gitmodules</code>文件中相关子模块信息
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">[submodule <span class="string">&quot;assets&quot;</span>]</span><br><span class="line">  path = assets</span><br><span class="line">  url = https://github.com/maonx/vimwiki-assets.git</span><br></pre></td></tr></table></figure></div></p></li>
<li><p>删除<code>.git/config</code>中的相关子模块信息 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">[submodule <span class="string">&quot;assets&quot;</span>]</span><br><span class="line">  url = https://github.com/maonx/vimwiki-assets.git</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-10,709,210--></p></li>
</ol>
<h2 id="更换子模块">更换子模块</h2>
<ul>
<li>先删除</li>
<li>再添加</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd">Git
开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 项目管理最佳实践 Poetry</title>
    <url>/c2aa9ce5b53296bdbf24749de59d8daea028f787/</url>
    <content><![CDATA[<p><mark style="background: #83d98fA6;">最好只用poetry来运行python程序,
安装使用 micromamba 或 pip, 导出 environment.yaml 或
requirements.txt</mark></p>
<h2 id="依赖管理">依赖管理</h2>
<p>依赖管理一直都在编程语言中占据着至关重要的地位，无论是
Python、JavaScript 还是 Java、Go。</p>
<p>虽然不同编程语言的依赖管理工具不尽相同，但是它们追求的目标都是大同小异的。能够对项目以来进行更加轻松统一的管理，能够更加便捷的进行项目迁移和部署。</p>
<p>因此，就出现了 maven、npm、pip 这些依赖包管理工具，但是，对比于 Java
和 JS，Python
在依赖管理方面更加特殊。所以，先后出现了多款不同的管理工具，每一次升级都是为了更好的做好
Python 的依赖包管理工具。</p>
<h2 id="python-的特殊性">Python 的特殊性</h2>
<p>Python
在依赖包管理方面主要的特殊性就来自于，不仅需要考虑项目以来的第三方包，还要着重考虑<strong>虚拟环境</strong>。这一点，是由于
Python 和 Java、JS 这些编程语言本质上存在差异导致的。</p>
<p>Java、JS
是<strong>以项目进行隔离</strong>，每当开发一个项目，依赖包都是安装在项目工程路径下。每个工程之间是隔离的，这样，即便是不同工程用到同一个包的不同版本，它们之间也不会产生冲突。</p>
<p>但是，Python 则不同，在 Python 中无法通过工程对依赖包进行隔离。</p>
<p>当我们之间使用<code>pip</code>安装第三方包时，所有的依赖都会安装到安装目录下的<code>site-packages</code>。</p>
<p>试想一下，如果我们开发 A 工程，用到了
TensorFlow<code>v0.1</code>。但是，开发 B 工程，需要用到
TensorFlow<code>v0.2</code>。这时候，site-packages
下的依赖包就会产生冲突，后面安装的依赖包就会把前面已经安装的版本卸载掉然后再安装新版本依赖包。</p>
<p>显然，这样是非常不友好的。</p>
<h2 id="现有虚拟环境的局限性">现有虚拟环境的局限性</h2>
<p>为了解决这个问题，<strong>虚拟环境</strong>就起到了至关重要的作用。</p>
<p>在开发不同的工程时，可以创建并激活不同的虚拟环境。这样，不同的工程就会用到不同环境下的解析器，我们也可以把依赖包安装到不同虚拟环境的
site-packages 路径下。</p>
<p>因此，在 Python 中依赖管理一般指代<strong>依赖管理 +
虚拟环境</strong>。</p>
<h3 id="virtualenv-的局限性">virtualenv 的局限性</h3>
<p>以往，针对 Python 依赖管理和虚拟环境经常会用到 2
个工具：<code>pip</code>和<code>virtualenv</code>。</p>
<p>其中 pip 用于依赖包的管理，virtualenv 用于虚拟环境的管理。</p>
<p>这样虽然解决了不同工程之间环境隔离的问题，但是也存在着明显的不足：</p>
<ul>
<li>需要同时依赖 2 款管理工具<br />
</li>
<li>不能动态更新 requirements.txt</li>
</ul>
<p>其中比较突出的问题就是第 2 点。</p>
<p>在工程开发过程中，需要一个配置文件来记录依赖包和环境参数，例如，maven
的 pom.xml、npm 的 package.json。</p>
<p>而在 Python 中常用的就是 requirements.txt。</p>
<p>这种纯文本的格式只能用于记录依赖包的名称，而不能像 yaml、json、xml
这些文本存储格式一样记录更多环境参数信息。</p>
<p>另外，更致命的一点就是，每次导出依赖包都需要手动执行<code>pip freeze &gt; requirements.txt</code>命令。很明显，这样是非常不合理的。试想一下，如果由于忙碌忘记手动执行这项操作，那么费九牛二虎之力部署到生产环境之后发现报错，这样会造成很大的损失。</p>
<p>因此，<code>pipenv</code>就诞生了。</p>
<h3 id="pipenv-的局限性">pipenv 的局限性</h3>
<p>pipenv 是由 requests、flask 等知名工具包的作者 Kenneth Reitz 于 2017
年发布的一款 Python 依赖包管理工具。</p>
<p>pipenv 可以看成是 pip+virtualenv 两款工具的合体，它集合了 pip
的依赖包管理和 virtualenv 虚拟环境管理于一身。另外，在依赖包记录方面使用
Pipfile 替代原来的
requirements.txt。而且，它能够自动记录并更新记录文件，这样就不再需要手动执行命令来更新
requirements.txt。</p>
<p>pipenv 的出现的确大大降低了 Python
依赖包管理的复杂度，提升了项目开发、工程迁移的效率。</p>
<p>因此，近几年关于 pipenv 的评价一直都非常好，各大内容平台对于 pipenv
称颂的文章更是<strong>多如牛毛</strong>。</p>
<p>但是，我至今没有成为 pipenv 的忠实用户，而且，也不会选择 pipenv
来代替原来 pip+virtualenv 的方案。</p>
<p>我相信，那些满篇称颂 pipenv 的作者也未必是它的忠实用户。</p>
<p>不可否认，pipenv 在 Python
依赖包管理方面提供了一个很好的解决方案。但是，它依然有一些致命的缺陷，比原来
pip+virtualenv 方案的繁琐、手动操作更为棘手。</p>
<ul>
<li>Lock 速度缓慢<br />
</li>
<li>强行更新不相干依赖<br />
</li>
<li>依赖处理效果较差</li>
</ul>
<p>这里举个例子来解释一下第 3 点。</p>
<p>使用 pipenv 安装一个包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ pipenv install oslo.utils==1.4.0</span><br></pre></td></tr></table></figure></div>
<p>这时候就会发生报错，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">Could not find a version that matches pbr!=0.7,!=2.1.0,&lt;1.0,&gt;=0.6,&gt;=2.0.0</span><br></pre></td></tr></table></figure></div>
<p>这个报错的含义是无法找到合适版本的 pbr，即便是有合适的版本，pipenv
也会简单粗暴的抛出错误，无法完成依赖包的处理和安装。</p>
<p>这时，更为优秀的工具包出现了，它就是 <strong>poetry</strong>。</p>
<h2 id="依赖管理的最佳实践-poetry">依赖管理的最佳实践 poetry</h2>
<h3 id="什么是-poetry">什么是 poetry</h3>
<p>poetry 是一款可以管理 Python 依赖、环境，同时可以用于 Python
工程打包和发布的一款第三方工具包。</p>
<p>poetry
通过配置文件<code>pyproject.toml</code>来完成依赖管理、环境配置、基本信息配置等功能。相当于把
Python
项目中的<code>Pipfile</code>、<code>setup.py</code>、<code>setup.cfg</code>、<code>requirements.txt</code>、<code>MANIFEST.in</code>融合到一起。</p>
<p>通过<code>pyproject.toml</code>文件，不仅可以配置依赖包，还可以用于区分开发、测试、生产环境、配置源路径。
<!--SR:!2026-11-09,1000,270--></p>
<h3 id="为什么选择-poetry">为什么选择 poetry</h3>
<p>poetry 相比于 pipenv 具有很多明显优势的功能：</p>
<ul>
<li>更强大的依赖处理功能<br />
</li>
<li>易于打包和构建 Python 工程<br />
</li>
<li>易于发布工具包<br />
</li>
<li>结构化展示依赖关系<br />
<!--SR:!2025-01-20,506,250--></li>
</ul>
<p><strong>1. 更强大的依赖处理功能</strong></p>
<p>以前面介绍 pipenv 的例子来介绍 poetry 在依赖处理方面的强大之处。</p>
<p>pipenv 在安装工具包遇到直观的问题时会直接报错，并终止。</p>
<p>而使用 poetry 安装则不会，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry add oslo.utils=1.4.0  </span><br><span class="line">- Installing pytz (2018.3)  </span><br><span class="line">- Installing netifaces (0.10.6)  - Installing netaddr (0.7.19)  - Installing oslo.i18n (2.1.0)  - Installing iso8601 (0.1.12)  - Installing six (1.11.0)  - Installing babel (2.5.3)  - Installing pbr (0.11.1)  - Installing oslo.utils (1.4.0)</span><br></pre></td></tr></table></figure></div>
<p>poetry
在遇到<code>pbr (&gt;=0.6,!=0.7,&lt;1.0)</code>这个限定条件时，它会尝试去安装最新的
pbr(0.11.1
版)，同时会选择<code>oslo.i18n==3.20.0</code>，但是，这时候发现<code>oslo.i18n</code>的版本和
pbr 最新版本冲突。如果在 pipenv 中则会报错。但是 poetry
会尝试找出解决方案，最后发现<code>oslo.i18n==2.1.0</code>时可以满足所有相互依赖关系的要求。最终，成功安装依赖包。
<!--SR:!2024-10-22,440,250--></p>
<p><strong>2. 易于打包和构建 Python 工程</strong></p>
<p>在工程开发过程中，项目迁移和工程化部署是无法绕开的问题。</p>
<p>如果需要把我们的工程部署到生产环境服务器上，这时候就需要用到 Python
的打包和安装功能。</p>
<p>在以往，会写繁琐的<code>setup.py</code>、<code>setup.cfg</code>。而在
poetry 中，一行命令就可以解决，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry build </span><br><span class="line">Building poetry (1.0.0)- Building sdist- Built poetry-1.0.0.tar.gz- Building wheel- Built poetry-1.0.0-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure></div>
<p><strong>3. 易于发布工具包</strong></p>
<p>如果想要把工程发布到 PyPI 仓库怎么办？</p>
<p>在 poetry
中，只需要简单配置一下<code>pyproject.toml</code>，就可以实现一行命令发布工具包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry publish</span><br><span class="line">Publishing poetry (1.0.0) to PyPI  - Uploading poetry-1.0.0.tar.gz 100%  - Uploading poetry-1.0.0-py2.py3-none-any.whl 58%</span><br></pre></td></tr></table></figure></div>
<p><strong>结构化展示依赖关系</strong></p>
<p>Python
是一款对第三方工具包依赖很强的一种编程语言，一个项目中会用到很多款不同的工具包，而这些包的依赖关系是什么样的，很多开发者对其了解却很少。</p>
<p>poetry
可以实现结构化展示每个工具包的依赖关系，让工程的依赖一目了然，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry show --treerequests-toolbelt 0.8.0 A utility belt <span class="keyword">for</span> advanced <span class="built_in">users</span>...</span><br><span class="line">└── requests &lt;3.0.0,&gt;=2.0.1    </span><br><span class="line">├── certifi &gt;=2017.4.17    </span><br><span class="line">├── chardet &gt;=3.0.2,&lt;3.1.0    </span><br><span class="line">├── idna &gt;=2.5,&lt;2.7    </span><br><span class="line">└── urllib3 &lt;1.23,&gt;=1.21.1</span><br><span class="line"></span><br><span class="line">$ poetry show --latestpendulum 2.0.4   1.4.5 Python datetimes made easy.django   1.11.11 2.0.3 A high-level Python Web framework ...requests 2.18.4  2.18.4 Python HTTP <span class="keyword">for</span> Humans.</span><br></pre></td></tr></table></figure></div>
<h3 id="micromamba-poetry-安装脚本4">Micromamba Poetry 安装脚本[^4]</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"> <span class="comment"># 安装 micromamba 和 poetry</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">command</span> -v micromamba &amp;&gt;/dev/null; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;micromamba is already installed.&quot;</span></span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/usr/local/bin/micromamba shell hook -s posix)</span>&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;micromamba is installing...&quot;</span></span><br><span class="line">    <span class="built_in">mkdir</span> -p /usr/local/bin</span><br><span class="line">    curl -Ls https://micro.mamba.pm/api/micromamba/linux-64/latest | tar -xvj -C /usr/local bin/micromamba </span><br><span class="line">    <span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(/usr/local/bin/micromamba shell hook -s posix)</span>&quot;</span></span><br><span class="line">    /usr/local/bin/micromamba shell init -s bash -p ~/micromamba  <span class="comment"># this writes to your .bashrc file</span></span><br><span class="line">    <span class="built_in">source</span> ~/.bashrc</span><br><span class="line">    <span class="built_in">cat</span> &gt; ~/.condarc &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">channels: </span></span><br><span class="line"><span class="string">  - defaults</span></span><br><span class="line"><span class="string">show_channel_urls: true</span></span><br><span class="line"><span class="string">default_channels:</span></span><br><span class="line"><span class="string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main</span></span><br><span class="line"><span class="string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r</span></span><br><span class="line"><span class="string">  - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2</span></span><br><span class="line"><span class="string">custom_channels:</span></span><br><span class="line"><span class="string">  conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  pytorch-lts: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud</span></span><br><span class="line"><span class="string">  deepmodeling: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">    micromamba config append channels conda-forge        </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">    </span><br><span class="line">micromamba create -p ./venv python=3.9 -y</span><br><span class="line">micromamba activate ./venv</span><br><span class="line">micromamba run -p ./venv python -m pip install poetry==1.7.0 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="poetry-安装和初始化-1">Poetry 安装和初始化 <a href="#fn1"
class="footnote-ref" id="fnref1"
role="doc-noteref"><sup>1</sup></a></h3>
<h5 id="poetry-安装">poetry 安装</h5>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************************* Linux, macOS *********************************</span></span><br><span class="line">$ curl -sSL https://install.python-poetry.org | python3 -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装特定版本 poetry</span></span><br><span class="line">$ curl -sSL https://install.python-poetry.org | POETRY_VERSION=1.1.2 python3 -</span><br><span class="line"></span><br><span class="line"><span class="comment"># ********************************* Windows (Powershell) *********************************</span></span><br><span class="line"><span class="comment"># If you have installed Python through the Microsoft Store, replace `py` with `python` in the command below.</span></span><br><span class="line">$ (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -  </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h5 id="poetry-环境变量">poetry 环境变量</h5>
<p>这里配置的环境变量对于通过sshpass执行的命令无效，如果需要全局变量，可参考：<a
href="../06ebd355770738c865ee28ef13d2206bbfb36692/#环境变量">_Linux
常用命令#环境变量</a> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ********************************* Linux, macOS *********************************</span></span><br><span class="line">$ sudo su</span><br><span class="line"></span><br><span class="line">$ vim ~/.bashrc</span><br><span class="line"><span class="comment"># 添加以下环境变量</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">&quot;/root/.local/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">export</span> PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># sshpass 远程执行时需要设置软链接, 添加sshpass缺少的环境变量</span></span><br><span class="line">$ <span class="built_in">ln</span> -s /root/.local/bin/poetry poetry</span><br><span class="line"></span><br><span class="line"><span class="comment"># ********************************* Windows *********************************</span></span><br><span class="line">%APPDATA%\Python\Scripts</span><br></pre></td></tr></table></figure></div></p>
<p>The installer creates a <code>poetry</code> wrapper in a well-known,
platform-specific directory:</p>
<ul>
<li><code>$HOME/.local/bin</code> on Unix.</li>
<li><code>%APPDATA%\Python\Scripts</code> on Windows.</li>
<li><code>$POETRY_HOME/bin</code> if <code>$POETRY_HOME</code> is
set.</li>
</ul>
<p>If this directory is not present in your <code>$PATH</code>, you can
add it in order to invoke Poetry as <code>poetry</code>. Alternatively,
the full path to the <code>poetry</code> binary can always be used:</p>
<ul>
<li><code>~/.local/share/pypoetry/venv/bin/poetry</code> on
Linux/Unix.</li>
<li><code>%APPDATA%\pypoetry\venv\Scripts\poetry</code> on Windows.</li>
<li><code>~/Library/Application Support/pypoetry/venv/bin/poetry</code> on
MacOS.</li>
<li><code>$POETRY_HOME/venv/bin/poetry</code> if <code>$POETRY_HOME</code> is
set.</li>
</ul>
<h5 id="poetry-配置-venv-到项目文件夹">poetry 配置 venv
到项目文件夹</h5>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry config virtualenvs.create <span class="literal">true</span></span><br><span class="line">$ poetry config virtualenvs.in-project <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-07-02,212,249-->
<p><strong>fish 配置</strong></p>
<p><a href="../e13093cac8ccdc5b3204f4d66ee9a7db927ce606">Fish 添加 PATH
路径(环境变量)</a></p>
<p><strong>poetry 工程初始化</strong></p>
<p>如果当前还没有创建工程，可以使用 poetry 新建工程：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry new poetry-demo</span><br></pre></td></tr></table></figure></div>
<p>这时候，会创建一个包含如下内容的工程，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">poetry-demo</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.rst</span><br><span class="line">├── poetry_demo</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_poetry_demo.py</span><br></pre></td></tr></table></figure></div>
<p>除了新建工程，还可以在已有工程的基础上进行创建，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry init</span><br></pre></td></tr></table></figure></div>
<p>这时候，它会让你输入包名称、版本号等信息，你可以选择输入，也可以选择按下<code>ENTER</code>键使用默认值。
<!--SR:!2024-09-30,424,250--></p>
<h4 id="poetry-更换国内镜像源">poetry 更换国内镜像源</h4>
<p>在 pyproject.toml 配置文件中最下方添加国内镜像源地址配置,
提高下载速度。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TOML"><figure class="iseeu highlight /toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span>  </span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aliyun&quot;</span>  </span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;http://mirrors.aliyun.com/pypi/simple&quot;</span>  </span><br><span class="line"><span class="attr">default</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<h4 id="poetry-运行-python-脚本">poetry 运行 Python 脚本</h4>
<p>切换到项目中 pyproject.toml 同级目录下， 执行 peotry run python
脚本文件即可。(代码import路径要从项目根目录开始)
<!--SR:!2026-04-04,753,250--></p>
<p><strong>Pycharm 中使用 poetry</strong></p>
<p><img src="/images/Pasted%20image%2020230509162121.png" />
打开项目的终端并运行 <code>poetry env info</code> 命令，找到项目对应的虚拟环境文件夹所在位置(<code>Executable 字段</code>)，按照下图步骤打开并选中
Scripts 目录下的 Python 后，就可以用 Pycharm 引入虚拟环境了 <img
src="/images/Pasted%20image%2020221027182115.png" />
<!--SR:!2025-05-01,443,250--></p>
<h3 id="poetry-依赖包管理">poetry 依赖包管理</h3>
<ul>
<li><strong>本地代码依赖</strong></li>
</ul>
<p>依赖当前工程目录的 package <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">tool.poetry</span>]  </span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">packages</span> <span class="string">=</span> [&#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;common&quot;</span>&#125;,&#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;core&quot;</span>&#125;]</span><br></pre></td></tr></table></figure></div> 依赖其他工程目录的 package
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line">[<span class="string">tool.poetry</span>]</span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="string">packages</span> <span class="string">=</span> [</span><br><span class="line">    &#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;src&quot;</span>, <span class="string">from=&quot;D:/git/Tweaks/tweaks_python&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;core&quot;</span>, <span class="string">from=&quot;D:/git/Tweaks/tweaks_python/src&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">include</span> <span class="string">=</span> <span class="string">&quot;common&quot;</span>, <span class="string">from=&quot;D:/git/Tweaks/tweaks_python/src&quot;</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div> 配置完后需要执行命令: <code>poetry install</code>
路径无效会报下面的错误: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry install</span><br><span class="line">Installing dependencies from lock file</span><br><span class="line">Warning: poetry.lock is not consistent with pyproject.toml. You may be getting improper dependencies. Run `poetry lock [--no-update]` to fix it.</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-03-16,372,230--></p>
<ul>
<li><strong>安装依赖包</strong></li>
</ul>
<p>可以使用 add 命令来安装一款 Python 工具包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry add numpy</span><br></pre></td></tr></table></figure></div>
<p>还可以，通过添加配置参数<code>--dev</code>来区分不同环境下的依赖包。</p>
<p>可以使用 install
命令直接解析并安装<code>pyproject.toml</code>的依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry install</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-08-18,836,250-->
<ul>
<li><strong>从远程仓库安装依赖</strong>[^5] [^6]</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># poetry add git+&lt;protocol&gt;://git@&lt;repository&gt;/&lt;owner&gt;/&lt;project&gt;.git#&lt;git_ref&gt;</span></span><br><span class="line">poetry add git+ssh://git@gitlab.blabla.co/nubela/project-a.git</span><br><span class="line">poetry add git+https://git@github.com/agn-7/sqladmin.git</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-21,150,250-->
<ul>
<li><strong>从 requirements.txt 文件中安装依赖</strong> <a href="#fn2"
class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">cat requirements.txt | xargs poetry add</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-01,185,249-->
<ul>
<li><strong>从 github 私有库安装依赖包</strong>[^3]</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry add git+ssh://git@github.com/qiaogaojian/pycore.git</span><br><span class="line">$ pip install git+ssh://git@github.com/qiaogaojian/pycore.git --upgrade</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-04,186,249-->
<ul>
<li><strong>更新依赖包</strong></li>
</ul>
<p>更新所有锁定版本的依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry update</span><br></pre></td></tr></table></figure></div>
<p>更新指定依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry update numpy</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>卸载依赖包</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry remove numpy</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-01-10,497,250-->
<ul>
<li><strong>查看依赖树</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry show --tree</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-08-29,242,249-->
<h3 id="poetry-虚拟环境管理">poetry 虚拟环境管理</h3>
<ul>
<li><strong>激活虚拟环境</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry shell</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-28,423,250-->
<ul>
<li><strong>查看虚拟环境信息</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> info</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-01-24,509,250-->
<ul>
<li><strong>显示虚拟环境列表</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-09-30,640,250-->
<ul>
<li><strong>删除虚拟环境</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> remove python3.7</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-02-14,284,250-->
<p><strong>Poetry 常用命令行界面 (CLI) 命令</strong></p>
<p><img src="/images/v2-97299659f5761d6e00d72b0529b14dab_b.jpg" />
<!--SR:!2026-02-07,717,250--></p>
<h2 id="集成到-obsidian">集成到 Obsidian</h2>
<ol type="1">
<li>安装插件 <a
href="https://github.com/twibiral/obsidian-execute-code">GitHub -
twibiral/obsidian-execute-code: Obsidian Plugin to execute code in a
note.</a></li>
<li>配置插件 <img
src="/images/Pasted%20image%2020221203204432.png" /></li>
<li>打开目录 <code>%LocalAppData%/Obsidian</code> 新建
pyproject.toml</li>
<li>poetry 项目配置 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TOML"><figure class="iseeu highlight /toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[tool.poetry]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;obsidian&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">description</span> = <span class="string">&quot;obsidian dependencies&quot;</span></span><br><span class="line"><span class="attr">authors</span> = [<span class="string">&quot;bs2h &lt;bs2h@xxx.com&gt;&quot;</span>]</span><br><span class="line"><span class="attr">packages</span> = [</span><br><span class="line">    &#123;include = <span class="string">&quot;src&quot;</span>, from=<span class="string">&quot;D:/git/Tweaks/tweaks_python&quot;</span>&#125;,</span><br><span class="line">    &#123;include = <span class="string">&quot;core&quot;</span>, from=<span class="string">&quot;D:/git/Tweaks/tweaks_python/src&quot;</span>&#125;,</span><br><span class="line">    &#123;include = <span class="string">&quot;common&quot;</span>, from=<span class="string">&quot;D:/git/Tweaks/tweaks_python/src&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dependencies]</span></span><br><span class="line"><span class="attr">python</span> = <span class="string">&quot;^3.9&quot;</span></span><br><span class="line"><span class="attr">hexbytes</span> = <span class="string">&quot;^0.2.2&quot;</span></span><br><span class="line"><span class="attr">environs</span> = <span class="string">&quot;^9.5.0&quot;</span></span><br><span class="line"><span class="attr">PyMySQL</span> = <span class="string">&quot;^1.0.2&quot;</span></span><br><span class="line"><span class="attr">redis</span> = <span class="string">&quot;^4.1.4&quot;</span></span><br><span class="line"><span class="attr">pymongo</span> = <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line"><span class="attr">web3</span> = <span class="string">&quot;5.13.1&quot;</span></span><br><span class="line"><span class="attr">bloxroute-cli</span> = <span class="string">&quot;^1.109.9&quot;</span></span><br><span class="line"><span class="attr">kafka-python</span> = <span class="string">&quot;^2.0.2&quot;</span></span><br><span class="line"><span class="attr">flask</span> = <span class="string">&quot;^2.2.2&quot;</span></span><br><span class="line"><span class="attr">matplotlib</span> = <span class="string">&quot;^3.6.0&quot;</span></span><br><span class="line"><span class="attr">seaborn</span> = <span class="string">&quot;^0.12.1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tool.poetry.dev-dependencies]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[build-system]</span></span><br><span class="line"><span class="attr">requires</span> = [<span class="string">&quot;poetry-core&gt;=1.0.0&quot;</span>]</span><br><span class="line"><span class="attr">build-backend</span> = <span class="string">&quot;poetry.core.masonry.api&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置国内源</span></span><br><span class="line"><span class="section">[[tool.poetry.source]]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aliyun&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;http://mirrors.aliyun.com/pypi/simple&quot;</span></span><br><span class="line"><span class="attr">default</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div></li>
<li>测试代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> core.time_class <span class="keyword">import</span> Time</span><br><span class="line"><span class="keyword">from</span> core.base_class <span class="keyword">import</span> Core</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    core = Core()  </span><br><span class="line">    core.init(<span class="string">&quot;dev&quot;</span>)  </span><br><span class="line">    logger = core.logger</span><br><span class="line"></span><br><span class="line">    cur_time_str = Time.get_cur_timestr()  </span><br><span class="line">    logger.info(<span class="string">f&quot;local timestr: <span class="subst">&#123;cur_time_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="引用">引用</h2>
<p><a href="https://github.com/pypa/pipx">pipx: Install and Run Python
Applications in Isolated Environments</a> <a
href="https://github.com/python-poetry/poetry/issues/6719">Failed to
create the collection when try adding any dependencies · Issue #6719 ·
python-poetry/poetry · GitHub</a> <a
href="https://github.com/python-poetry/poetry/issues/1917">Keyring
errors during non-publishing operations · Issue #1917 ·
python-poetry/poetry · GitHub</a> <a
href="https://stackoverflow.com/questions/39539110/pyvenv-not-working-because-ensurepip-is-not-available">python
- pyvenv not working because ensurepip is not available - Stack
Overflow</a> <a
href="../2b9c7abe1d255b7d5bce4c9b3e11ee7195afffb4">Python Micromamba +
Poetry 环境管理</a> <a
href="../8efeac92a7aadd61a7f9c1413a43c9943393b97e">Poetry add 报错 xxx
not found in known hashes</a> <a
href="https://blog.kyomind.tw/python-poetry/">最佳 Python
套件管理器——Poetry 完全入門指南 - Code and Me</a> [^3]: <a
href="https://blog.csdn.net/qq_40851623/article/details/118190014">Fetching
Title#z5uq</a> [^4]: <a
href="../2b9c7abe1d255b7d5bce4c9b3e11ee7195afffb4/#Micromamba%20的安装与配置">Python
Micromamba + Poetry 环境管理#Micromamba 的安装与配置</a> [^5]: <a
href="https://stackoverflow.com/questions/59621373/how-do-i-add-a-python-package-built-by-poetry-to-another-python-project-with-poe">How
do I add a python package built by poetry to another python project with
poetry? - Stack Overflow</a> [^6]: <a
href="https://python-poetry.org/docs/cli/#add">Commands | Documentation
| Poetry - Python dependency management and packaging made easy</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../06ebd355770738c865ee28ef13d2206bbfb36692/#环境变量">_Linux
常用命令#环境变量</a></li>
<li><a href="../e13093cac8ccdc5b3204f4d66ee9a7db927ce606">Fish 添加 PATH
路径(环境变量)</a></li>
<li><a
href="../2b9c7abe1d255b7d5bce4c9b3e11ee7195afffb4/#Micromamba%20的安装与配置">Python
Micromamba + Poetry 环境管理#Micromamba 的安装与配置</a></li>
<li><a href="../293983b1ba374aae7708250721a2366501937648">Python
开发环境</a></li>
<li><a href="../2b9c7abe1d255b7d5bce4c9b3e11ee7195afffb4">Python
Micromamba + Poetry 环境管理</a></li>
<li><a href="../8efeac92a7aadd61a7f9c1413a43c9943393b97e">Poetry add
报错 xxx not found in known hashes</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p><a
href="https://python-poetry.org/docs/#installing-with-the-official-installer">Poetry
- Python dependency management and packaging made easy</a><a
href="#fnref1" class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p><a
href="https://stackoverflow.com/questions/62764148/how-to-import-requirements-txt-from-an-existing-project-using-poetry">python
- How to import requirements.txt from an existing project using Poetry -
Stack Overflow</a><a href="#fnref2" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>删除系统盘大文件</title>
    <url>/c447e815541f626d9f66413da6c89bc53b25f493/</url>
    <content><![CDATA[<h2 id="hiberfil.sys">hiberfil.sys</h2>
<p>删除系统盘大文件 “hiberfil.sys” 的方法</p>
<p>最近我的电脑系统 C 盘空间满了，在清理磁盘空间时在系统盘下有两个超 G
的隐藏文件，一个是 pagefile.sys，2G 左右，一个是 hiberfil.sys，6G
左右，前面一个文件虚拟内存。</p>
<p>而 “hiberfil.sys”
是系统休眠文件，其大小和物理内存一样大，它可以删除掉，但却不能手动删除掉，只要在
“控制面板” 中打开 “电源选项”，之后在电源管理对话框的“休眠” 标签下，去掉
“启用休眠” 前的勾，重新启动计算机后，休眠文件就会自动删除。</p>
<p>更直接和简便的方法如下：</p>
<ol type="1">
<li>如果使用了休眠功能，那么打开系统盘就会有一个很大的 hiberfil.sys
文件，它是将用户正在运行的程序，保存在这里，再启动系统就很快了。如要清理它，可以这样操作：</li>
</ol>
<p><img
src="https://pic1.zhimg.com/v2-8fc27d38d274fcb7c490ed53af578510_r.jpg" /></p>
<ol start="2" type="1">
<li>开始→所有程序→附件→右键命令提示符→以管理员身份运行（否则可能会出错）。</li>
</ol>
<p><img
src="https://pic1.zhimg.com/v2-dd2f9db5b12cd1188269310b6d03bf50_b.jpg" /></p>
<ol start="3" type="1">
<li>在命令提示符中输入：<code>powercfg -hibernate off</code>
按回车（Enter 键）执行命令即可关闭休眠功能。</li>
</ol>
<p><img
src="https://pic2.zhimg.com/v2-296731b0305298b85b6989fe8bc24e5d_r.jpg" /></p>
<ol start="4" type="1">
<li>再去开始菜单的关机选项中查看，休眠菜单已经没有了。</li>
</ol>
<p><img
src="https://pic2.zhimg.com/v2-b9f90b8c8334f36d982af74ff5d3b659_r.jpg" /></p>
<ol start="5" type="1">
<li>再到系统盘查看，数 G 大小的 hiberfil.sys
文件也没有了（如还有可以自行删除）。</li>
</ol>
<p><img
src="https://pic2.zhimg.com/v2-ea53ffbe0ec80a1beaaa836efe851795_r.jpg" /></p>
<ol start="6" type="1">
<li>如要再次开启休眠功能，可以在命令提示符中输入：powercfg -hibernate on
按回车（Enter 键）执行命令即可打开休眠功能（无需重启电脑）。</li>
</ol>
<p><img
src="https://pic2.zhimg.com/v2-4ac5f8412a02c86ede29b11f961a9969_r.jpg" /></p>
<ol start="7" type="1">
<li>还可以在控制面板的电源选项中调整启用休眠的等待时间。</li>
</ol>
<p><img
src="https://pic4.zhimg.com/v2-01c40936d6a8956177f6bafbf4e6c4ab_b.jpg" /></p>
<p>进入 C:WindowsSystem32 找到 cmd.exe 点右键—- 以管理员身份运行<br />
在 cmd 模式下输入命令 “powercfg -h off” 回车<br />
重新启动计算机，再去看看已经没了！<br />
（不需要关闭账户控制）</p>
<p>删除系统盘 hiberfil.sys 总结</p>
<p><code>hiberfil.sys</code> 是系统休眠文件,
可以通过关闭系统休眠功能自动删除 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">powercfg -hibernate off // 关删除</span><br><span class="line">powercfg -hibernate on  // 开恢复</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-02-17,507,250--></p>
<h2 id="pagefile.sys">pagefile.sys</h2>
<p>“pagefile.sys”
是页面交换文件，即虚拟内存文件，这个文件可以通过关闭虚拟内存删除，也可以改变其大小和存放位置：方法如下：</p>
<h3 id="删除">删除</h3>
<ol type="1">
<li>右击桌面此电脑图标，选择属性 <img
src="https://exp-picture.cdn.bcebos.com/32fe25ef354f50b8c17daf6cdc4afa32929c189e.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_auto%2Fquality%2Cq_80" /></li>
<li>点击左上方的高级系统设置<br />
<img
src="https://exp-picture.cdn.bcebos.com/340e4eb8b43ea8db2009fd85189c2cf7deb2169e.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_auto%2Fquality%2Cq_80" /></li>
<li>打开系统属性窗口，点击性能的设置按钮<br />
<img
src="https://exp-picture.cdn.bcebos.com/3aae2b4f50b8b43ede9850fd7132939c2df7199e.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_auto%2Fquality%2Cq_80" /></li>
<li>新的窗口中，点击高级选项下的更改按钮，取消第一行的自动管理所有驱动器的分页文件大小，选择无分页位文件，点击设置，确定即可<br />
<img
src="https://exp-picture.cdn.bcebos.com/51f9aa3ea8db574a8271942ba7f7dfb2dd19179e.jpg?x-bce-process=image%2Fresize%2Cm_lfit%2Cw_500%2Climit_1%2Fformat%2Cf_auto%2Fquality%2Cq_80" /></li>
</ol>
<h3 id="更改大小位置">更改大小位置</h3>
<ol type="1">
<li><p>右击 “我的电脑 / 属性”，然后在对话框的“高级” 标签下单击 “性能”
下的 “设置” 按钮，在”性能选项”对话框中切换到 “高级” 标签下，再单击
“虚拟内存” 下的 “更改” 按钮，即可根据需要更改页面文件的大小。</p></li>
<li><p>先选中 C 盘，然后选 “无分页文件”，再点“设置”
按钮；之后选中要生成该文件的盘符，在下面点选 “自定义大小”
并输入合适的数值，此数值通常为物理内存的 1.5 倍，再单击
“设置”，最后单击“确定” 就可以了。</p></li>
<li><p>重新启动电脑，该文件就会存放到其他分区上了。</p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>系统</category>
        <category>Win</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>win10</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 第三方库 Retrofit 的使用</title>
    <url>/c822f5520df37779e7b590310ec2bdc3096b1604/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://segmentfault.com/a/1190000021628790">segmentfault.com</a></p>
</blockquote>
<h2 id="retrofit-简介">Retrofit 简介</h2>
<p>Retrofit 是一个在 Android 开发中非常流行的网络框架，底层依赖 OkHttp。
Retrofit 和 OkHttp 都出自 Square 的技术团队。</p>
<p>Retrofit 的 GitHub 地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/square/retrofit</span></span><br></pre></td></tr></table></figure></div>
<p>应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装
==Header、URL、请求参数==等信息，之后由 OkHttp
完成后续的请求操作，在服务端返回数据之后， OkHttp 将原始的结果交给
Retrofit, Retrofit 再根据用户的需求==对结果进行解析==的过程。</p>
<p>Retrofit 支持大多数的 Http 方法。
<!--SR:!2027-03-02,950,250!2024-12-12,468,250--></p>
<h2 id="retrofit-的特点">Retrofit 的特点</h2>
<ol type="1">
<li>Retrofit 是可插拔的，允许不同的执行机制及其库用于执行 http
调用。允许 API
请求，与应用程序其余部分中任何现有线程模型或任务框架无缝组合。</li>
</ol>
<p>Retrofit 为常见的框架提供了适配器 (Adapter):</p>
<ul>
<li>RxJaval.x Observable &amp; Single -
com.squareup.retrofit2:adapter-rxjava</li>
<li>RxJava2.x Observable, Flowable, Single, Completable &amp; Maybe -
com.squareup.retrofit2:adapter-rxjava2</li>
<li>Guava ListenableFuture - com.squareup.retrofit2:adapter-guava</li>
<li>Java 8 CompletableFuture - com.squareup.retrofit2:adapter-java8</li>
</ul>
<ol start="2" type="1">
<li>允许不同的序列化格式及其库，用于将 Java 类型转换为其 http
表示形式，并将 http 实体解析为 Java 类型。</li>
</ol>
<p>Retrofit 为常见的序列化格式提供了转换器 (Converter):</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String):
com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>开源社区也己经为其他库和序列化格式创建了各种第三方转换器
(Converter):</p>
<ul>
<li>LoganSquare -
com.github.aurae.retrofit2:converter-logansquare:1.4.1</li>
<li>FastJson - org.ligboy.retrofit2:converter-fastjson:2.1.0 和
org.ligboy.retrofit2:converter-fastjson-android:2.1.0</li>
</ul>
<p>OkHttp 的特点如下：</p>
<ul>
<li>支持 HTTP2/SPDY 黑科技</li>
<li>socket 自动选择最优路线，并支持自动重连。</li>
<li>拥有自动维护的 socket 连接池，减少握手次数</li>
<li>拥有队列线程池，轻松写并发</li>
<li>拥有 Interceptors 轻松处理请求与响应（比如透明 GZIP 压缩、
LOGGING）</li>
<li>基于 Headers 的缓存策略。</li>
</ul>
<h2 id="retrofit-与-rxjava-的完美配合">Retrofit 与 RxJava
的完美配合</h2>
<p>Retrofit 是一个网络框架，如果想尝试响应式的编程方式，则可以结合
RxJava 一起使用。Retrofit 对 RxJava1 和 RxJava2 都提供了 Adapter。</p>
<p>案例：将苏州市南门地区的 PM2.5、PM10、SO2 的数据展示到 App 上。
pm25.in
是一个公益性的网站，免费提供空气质量数据。在调用这些接口之前，<br />
需要去该网站注册，并申请一个 AppKey</p>
<p>Retrofit 使用步骤如下：</p>
<h3 id="添加-retrofit-依赖">1. 添加 Retrofit 依赖</h3>
<p>在 App 的 build.gradle 中添加所需要的 Retrofit 库，以及 RxJava2 的
adapter 库。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.7.1&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:adapter-rxjava2:2.7.1&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.ligboy.retrofit2:converter-fastjson-android:2.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&quot;com.squareup.okhttp3:logging-interceptor:4.3.1&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="创建-retrofitmanager">2. 创建 RetrofitManager</h3>
<p>一般需要创建 Retrofit 管理类，在这里创建一个名为 RetrofitManager
类，方便在<br />
整个 App 中使用。</p>
<p>RetrofitManager 代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetrofitManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title function_">retrofit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retrofit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">HttpLoggingInterceptor</span> <span class="variable">loggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>()</span><br><span class="line">                    .setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line"></span><br><span class="line">            <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">                    .writeTimeout(<span class="number">30_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .readTimeout(<span class="number">20_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .connectTimeout(<span class="number">15_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .addInterceptor(loggingInterceptor)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            retrofit = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(APIService.API_BASE_SERVER_URL)</span><br><span class="line">                    .addConverterFactory(FastJsonConverterFactory.create())</span><br><span class="line">                    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                    .client(okHttpClient)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retrofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建-apiservice">3. 创建 APIService</h3>
<p>接下来，我们需要定义网络请求的接口。 pm25.in
提供了多个获取空气质量数据的接口，这里选取其中 3
个接口，分别是获取一个城市所有监测点的 PM2.5
数据、获取一个城市所有监测点的 PM10 数据、获取一个城市所有监测点的 SO2
数据接口。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">APIService</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">API_BASE_SERVER_URL</span> <span class="operator">=</span> <span class="string">&quot;http://www.pm25.in/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/pm2_5.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;PM25Model&gt;&gt; <span class="title function_">pm25</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/pm10.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;PM10Model&gt;&gt; <span class="title function_">pm10</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/so2.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;SO2Model&gt;&gt; <span class="title function_">so2</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 APIService 中，每个方法返回的类型都是 Maybe 类型，其实也可以返回
Observable、Flowable 等类型。</p>
<h3 id="retrofit-的使用">4. Retrofit 的使用</h3>
<p>下面的代码分别调用了 3 个接口，井过滤出了南门地区的相关数据。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">APIService</span> <span class="variable">apiService</span> <span class="operator">=</span> RetrofitManager.retrofit().create(APIService.class);</span><br><span class="line"></span><br><span class="line">apiService.pm25(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM25Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm25Models != <span class="literal">null</span> &amp;&amp; !pm25Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM25Model&gt;, MaybeSource&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM25Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM25Model pm25Model : pm25Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm25Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm25Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;PM25Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(PM25Model pm25Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM25.Success-&gt; &quot;</span> + pm25Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM25.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">apiService.pm10(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM10Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm10Models != <span class="literal">null</span> &amp;&amp; !pm10Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM10Model&gt;, MaybeSource&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM10Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM10Model pm10Model : pm10Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm10Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm10Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;PM10Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(PM10Model pm10Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM10.Success-&gt; &quot;</span> + pm10Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM10.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">apiService.so2(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;SO2Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> so2Models != <span class="literal">null</span> &amp;&amp; !so2Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;SO2Model&gt;, MaybeSource&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;SO2Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (SO2Model so2Model : so2Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(so2Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(so2Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;SO2Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(SO2Model so2Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;SO2.Error-&gt; &quot;</span> + so2Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;SO2.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>这里还使用了 maybeToMain() 方法，它的代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line">fun &lt;T&gt; maybeToMain(): MaybeTransformer&lt;T, T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> MaybeTransformer &#123; upstream -&gt;</span><br><span class="line">        upstream.subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>它用于切换线程，返回 MaybeTransformer 对象。因为 apiService
中每个返回的方法都是<br />
Maybe 类型，所以这里会用到 MaybeTransformer 。使用了 maybeToMain() 后
，除网络请求是在<br />
io() 线程中运行外，其余的操作都是在主线程中运行的.</p>
<p>也可以让 filter、 flatMap 操作也在 io()
线程中运行，展示数据时才切换回主线程。</p>
<h3 id="常见使用场景">5. 常见使用场景</h3>
<p>接下来列举一些 Retrofit 其余常见的使用场景。</p>
<ol type="1">
<li><strong>合并多个网络请求</strong></li>
</ol>
<p>如：需要在某一个信息流列表中插入多条广告，每一条广告都需要做一次网络请求。这时就可以考虑使用
zip
操作符，将请求信息流，以及请求的多个广告的请求合并起来，等所有请求完成之后，再用合并函数将广告插到信息流固定的位置上，最后以列表的形式呈现给用户。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">APIService</span> <span class="variable">apiService</span> <span class="operator">=</span> RetrofitManager.retrofit().create(APIService.class);</span><br><span class="line"></span><br><span class="line">Maybe&lt;PM25Model&gt; pm25ModelMaybe = apiService.pm25(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM25Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm25Models != <span class="literal">null</span> &amp;&amp; !pm25Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM25Model&gt;, MaybeSource&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM25Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM25Model pm25Model : pm25Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm25Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm25Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Maybe&lt;PM10Model&gt; pm10ModelMaybe = apiService.pm10(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM10Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm10Models != <span class="literal">null</span> &amp;&amp; !pm10Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM10Model&gt;, MaybeSource&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM10Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM10Model pm10Model : pm10Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm10Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm10Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Maybe&lt;SO2Model&gt; so2ModelMaybe = apiService.so2(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;SO2Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> so2Models != <span class="literal">null</span> &amp;&amp; !so2Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;SO2Model&gt;, MaybeSource&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;SO2Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (SO2Model so2Model : so2Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(so2Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(so2Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maybe.zip(pm25ModelMaybe, pm10ModelMaybe, so2ModelMaybe, <span class="keyword">new</span> <span class="title class_">Function3</span>&lt;PM25Model, PM10Model, SO2Model, ZipObject&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ZipObject <span class="title function_">apply</span><span class="params">(PM25Model pm25Model, PM10Model pm10Model, SO2Model so2Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;zip-&gt; \r\n&quot;</span> + pm25Model + <span class="string">&quot;\r\n&quot;</span> + pm10Model + <span class="string">&quot;\r\n&quot;</span> + so2Model);</span><br><span class="line">        <span class="type">ZipObject</span> <span class="variable">zipObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipObject</span>();</span><br><span class="line"></span><br><span class="line">        zipObject.pm2_5 = pm25Model.pm2_5;</span><br><span class="line">        zipObject.pm2_5_24h = pm25Model.pm2_5_24h;</span><br><span class="line">        zipObject.pm2_5_quality = pm25Model.quality;</span><br><span class="line"></span><br><span class="line">        zipObject.pm10 = pm10Model.pm10;</span><br><span class="line">        zipObject.pm10_24h = pm10Model.pm10_24h;</span><br><span class="line"></span><br><span class="line">        zipObject.so2 = so2Model.so2;</span><br><span class="line">        zipObject.so2_24h = so2Model.so2_24h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> zipObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;ZipObject&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ZipObject zipObject)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Success-&gt; &quot;</span> + zipObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Error-&gt; &quot;</span> + throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li><strong>返回默认值</strong></li>
</ol>
<p>有时, 网络请求失败可以使用 onErrorReturn 操作符,
一个空的对象作为默认值。</p>
<ol start="3" type="1">
<li><strong>多个网络请求嵌套使用</strong></li>
</ol>
<p>若是 A 请求完成之后，才能去调用 B 请求，则可以考虑使用 flatMap
操作符。</p>
<ol start="4" type="1">
<li><strong>重试机制</strong></li>
</ol>
<p>对于一些重要的接口，需要采用重试机制。因为有些时候用户的网络环境比较差，第一次请求接口超时了，那么再一次请求可能就会成功。虽然有一定的延时，但至少返回了数据，保证了用户体验。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">apiService.loadContent(params)</span><br><span class="line">        .retryWhen(<span class="keyword">new</span> <span class="title class_">RetryWithDelay</span>(<span class="number">3</span>, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></div>
<p>在这里 retryWhen 操作符与 RetryWithDelay 一起搭配使用，表示有 3
次重试机会，每次的延迟时间是 1000ms。 RetryWithDelay 是一个工具类，使用
kotlin 语言编写。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="KOTLIN"><figure class="iseeu highlight /kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RetryWithDelay</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> maxRetries: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> retryDelayMillis: <span class="built_in">Int</span></span><br><span class="line">) : Function&lt;Flowable&lt;<span class="keyword">out</span> Throwable&gt;, Publisher&lt;*&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> retryCount: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.retryCount = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(attempts: <span class="type">Flowable</span>&lt;<span class="type">out</span> <span class="type">Throwable</span>&gt;)</span></span>: Publisher&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> attempts.flatMap &#123; throwable -&gt;</span><br><span class="line">            <span class="keyword">if</span> (++retryCount &lt;= maxRetries) &#123;</span><br><span class="line">                Flowable.timer(retryDelayMillis.toLong(), TimeUnit.MILLISECONDS)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Flowable.error(throwable)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d 2048 核心算法讲解</title>
    <url>/cab1f2b2edb0ac557cd0412d335fefec51fe2f82/</url>
    <content><![CDATA[<p>2048是一款非常好玩的游戏，经常让人花费好几个小时来玩它。
游戏目标是将相同值的格子“合并”在一起，合并到一起后原来格子的值翻倍。
当玩家在她想要的方向上滑动时，格子被移动到一边并且生成新的格子。
如果玩家达到了2048，那么就赢了游戏。
这篇文档主要用来介绍如何在Unity中来制作这个游戏。</p>
<h2 id="输入系统">输入系统</h2>
<p>游戏实现了通过键盘的箭头键来控制格子移动的方法,
我们通过一个枚举来获取用户的输入和一个必须由我们想要使用的每个输入方法实现的接口IInputDetector。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public enum InputDirection</span><br><span class="line">&#123;</span><br><span class="line">    Left, Right, Top, Bottom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface IInputDetector</span><br><span class="line">&#123;</span><br><span class="line">    InputDirection? DetectInputDirection();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>DetectInputDirection方法的返回值已经实现为Nullable类型，因为用户可能根本没有输入。
现在，让我们访问第一个通过键盘输入的输入法。
如下所示，代码非常简单明了</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public class ArrowKeysDetector : MonoBehaviour, IInputDetector</span><br><span class="line">&#123;</span><br><span class="line">    public InputDirection? DetectInputDirection()</span><br><span class="line">    &#123;</span><br><span class="line">        if (Input.GetKeyUp(KeyCode.UpArrow))</span><br><span class="line">            return InputDirection.Top;</span><br><span class="line">        else if (Input.GetKeyUp(KeyCode.DownArrow))</span><br><span class="line">            return InputDirection.Bottom;</span><br><span class="line">        else if (Input.GetKeyUp(KeyCode.RightArrow))</span><br><span class="line">            return InputDirection.Right;</span><br><span class="line">        else if (Input.GetKeyUp(KeyCode.LeftArrow))</span><br><span class="line">            return InputDirection.Left;</span><br><span class="line">        else</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="全局变量">全局变量</h2>
<p>Globals类包含有关Rows，Columns和AnimationDuration的静态变量。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public static class Globals</span><br><span class="line">&#123;</span><br><span class="line">    public readonly static int Rows = 4;</span><br><span class="line">    public readonly static int Columns = 4;</span><br><span class="line">    public static readonly float AnimationDuration = 0.05f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="格子相关数据结构">格子相关数据结构</h2>
<p>ItemMovementDetails类用于携带有关即将移动和/或复制的对象的详细信息。
NewRow /
NewColumn属性包含项目在数组中的位置信息，而GOToAnimateScale和GOToAnimatePosition属性包含有关即将移动和/或扩展的游戏对象的信息。
正常的过程是移动一个项目（改变它的位置），但如果这个项目将与另一个项目合并，那么这也将改变它的大小（然后消失）。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public class ItemMovementDetails</span><br><span class="line">&#123;</span><br><span class="line">    public GameObject GOToAnimateScale &#123; get; set; &#125;</span><br><span class="line">    public GameObject GOToAnimatePosition &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public int NewRow &#123; get; set; &#125;</span><br><span class="line">    public int NewColumn &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public ItemMovementDetails(int newRow, int newColumn, GameObject goToAnimatePosition, GameObject goToAnimateScale)</span><br><span class="line">    &#123;</span><br><span class="line">        NewRow = newRow;</span><br><span class="line">        NewColumn = newColumn;</span><br><span class="line">        GOToAnimatePosition = goToAnimatePosition;</span><br><span class="line">        GOToAnimateScale = goToAnimateScale;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>Item类很简单</p>
<ul>
<li><p>Value属性包含项目的值（例如2,4,8,16等）</p></li>
<li><p>row和column属性包含此项目所属的数组的相应行和列值</p></li>
<li><p>GO属性包含对此Item引用的Unity GameObject的引用</p></li>
<li><p>WasJustDuplicated值是指此项目在此移动中是否重复</p></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public class Item</span><br><span class="line">&#123;</span><br><span class="line">    public int Value &#123; get; set; &#125;</span><br><span class="line">    public int Row &#123; get; set; &#125;</span><br><span class="line">    public int Column &#123; get; set; &#125;</span><br><span class="line">    public GameObject GO &#123; get; set; &#125;</span><br><span class="line">    public bool WasJustDuplicated &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>ItemArray类包含一个私有成员，一个名为matrix的二维项目数组。
它还公开了一个索引器，以提供对此数组的访问。
如果项占据数组中的位置，则矩阵[row，column]项包含对它的引用。
否则，matrix [row，column]为null。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public class ItemArray</span><br><span class="line">&#123;</span><br><span class="line">private Item[,] matrix = new Item[Globals.Rows, Globals.Columns];</span><br><span class="line">public Item this[int row, int column]</span><br><span class="line">&#123;</span><br><span class="line">    get</span><br><span class="line">    &#123;</span><br><span class="line">        return matrix[row, column];</span><br><span class="line">    &#125;</span><br><span class="line">    set</span><br><span class="line">    &#123;</span><br><span class="line">        matrix[row, column] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此方法获取数组中的非null项。 它用于在每次移动后创建新格子。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public void GetRandomRowColumn(out int row, out int column)</span><br><span class="line">&#123;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        row = random.Next(0, Globals.Rows);</span><br><span class="line">        column = random.Next(0, Globals.Columns);</span><br><span class="line">    &#125; while (matrix[row, column] != null);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>每次滑动后都会调用此方法，并将所有WasJustDuplicated值设置为false。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">private void ResetWasJustDuplicatedValues()</span><br><span class="line">&#123;</span><br><span class="line">    for (int row = 0; row &lt; Globals.Rows; row++)</span><br><span class="line">        for (int column = 0; column &lt; Globals.Columns; column++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (matrix[row, column] != null &amp;&amp; matrix[row, column].WasJustDuplicated)</span><br><span class="line">                matrix[row, column].WasJustDuplicated = false;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此方法检查作为参数传递的两个项（通过其列/行索引）是否具有相同的值。首先，它检查传递的索引是否超出范围。然后它检查此数组位置中的项是否为空，以及它是否只是重复（即在当前滑动后它没有重复）。如果所有这些检查都是真的，那么</p>
<ul>
<li><p>我们复制第一个项目值并将WasJustDuplicated字段设置为true</p></li>
<li><p>我们在保持对它的引用之后从数组中删除第二个项目，以便为它设置动画</p></li>
<li><p>我们返回一个ItemMovementDetails类的新实例，它携带项目的信息以使其位置具有动画效果，并使项目的比例为动画（并最终消失）。</p></li>
</ul>
<p>关于根据用户的滑动项目的移动，我们有各种场景我们必须涵盖。请记住，数组中的空项表示空格。</p>
<p>因此，我们假设X是空列，2是值为“2”的列。我们还假设左滑动。可能发生的一些情况如下，以及滑动后的相应项目移动。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">a）2 | 2 | X | X =&gt; 4 | X | X | X.</span><br><span class="line"></span><br><span class="line">b）2 | X | 2 | X =&gt; 4 | X | X | X.</span><br><span class="line"></span><br><span class="line">c）2 | 2 | X | 2 =&gt; 4 | 2 | X | X. //前两个&#x27;2&#x27;将合并，第三个将移动到第二列</span><br><span class="line"></span><br><span class="line">d）X | 2 | 2 | 2 =&gt; 4 | 2 | X | X. //与先前选项相同的情况。前两个&#x27;2&#x27;合并，移动到第一列，第三个&#x27;2&#x27;移动到第二列。</span><br><span class="line"></span><br><span class="line">e）4 | 2 | 2 | X =&gt; 4 | 4 | X | X.</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">private ItemMovementDetails AreTheseTwoItemsSame(</span><br><span class="line">int originalRow, int originalColumn, int toCheckRow, int toCheckColumn)</span><br><span class="line">&#123;</span><br><span class="line">    if (toCheckRow &lt; 0 || toCheckColumn &lt; 0 || toCheckRow &gt;= Globals.Rows || toCheckColumn &gt;= Globals.Columns)</span><br><span class="line">    return null;</span><br><span class="line"></span><br><span class="line">        if (matrix[originalRow, originalColumn] != null &amp;&amp; matrix[toCheckRow, toCheckColumn] != null</span><br><span class="line">        &amp;&amp; matrix[originalRow, originalColumn].Value == matrix[toCheckRow, toCheckColumn].Value</span><br><span class="line">        &amp;&amp; !matrix[toCheckRow, toCheckColumn].WasJustDuplicated)</span><br><span class="line">        &#123;</span><br><span class="line">            matrix[toCheckRow, toCheckColumn].Value *= 2;</span><br><span class="line">            matrix[toCheckRow, toCheckColumn].WasJustDuplicated = true;</span><br><span class="line">            var GOToAnimateScaleCopy = matrix[originalRow, originalColumn].GO;</span><br><span class="line">            matrix[originalRow, originalColumn] = null;</span><br><span class="line">            return new ItemMovementDetails(toCheckRow, toCheckColumn, matrix[toCheckRow, toCheckColumn].GO, GOToAnimateScaleCopy);</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此方法将项目移动到应该去的位置（基于值检查）。它将项目分配给新位置并“取消”旧项目。此外，它检查它旁边的项目是否具有相同的值。如果是这种情况，我们会返回此信息，而如果它们不同，我们只返回已移动项目的详细信息。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">private ItemMovementDetails MoveItemToNullPositionAndCheckIfSameWithNextOne</span><br><span class="line">(int oldRow, int newRow, int itemToCheckRow, int oldColumn, int newColumn, int itemToCheckColumn)</span><br><span class="line">&#123;</span><br><span class="line">    matrix[newRow, newColumn] = matrix[oldRow, oldColumn];</span><br><span class="line">    matrix[oldRow, oldColumn] = null;</span><br><span class="line"></span><br><span class="line">    ItemMovementDetails imd2 = AreTheseTwoItemsSame(newRow, newColumn, itemToCheckRow,</span><br><span class="line">    itemToCheckColumn);</span><br><span class="line">    if (imd2 != null)</span><br><span class="line">    &#123;</span><br><span class="line">        return imd2;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        return new ItemMovementDetails(newRow, newColumn, matrix[newRow, newColumn].GO, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此方法将项目移动到应该去的位置（基于值检查）。它将项目分配给新位置并“取消”旧项目。此外，它检查它旁边的项目是否具有相同的值。如果是这种情况，我们会返回此信息，而如果它们不同，我们只返回已移动项目的详细信息。</p>
<p>我们有两种移动项目的方法。滑动是水平时调用的一个，垂直滑动调用的一个。在编写代码时，我首先创建了一个“MoveLeft”方法。经过多次测试，修复等，我创建了“MoveRight”。然后，我很清楚它们可以合并为一个方法，所以我创建了MoveHorizontal方法。再次，经过多次测试和修复后，对方法进行了转换和调整，以创建MoveVertical方法。这些方法有很多共同点，它们当然可以合并为一个“Move”方法。但是，我强烈认为这会使本教程复杂化。因此，我决定将它们保留原样。现在，它们在功能上非常相似，所以我们只描述“MoveHorizontal”。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ItemMovementDetails&gt; <span class="title">MoveHorizontal</span>(<span class="params">HorizontalMovement horizontalMovement</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ResetWasJustDuplicatedValues();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> movementDetails = <span class="keyword">new</span> List&lt;ItemMovementDetails&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">int</span> relativeColumn = horizontalMovement == HorizontalMovement.Left ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> columnNumbers = Enumerable.Range(<span class="number">0</span>, Globals.Columns);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (horizontalMovement == HorizontalMovement.Right)</span><br><span class="line">    &#123;</span><br><span class="line">        columnNumbers = columnNumbers.Reverse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法从重置所有WasJustDuplicated值开始。
然后，根据运动是左还是右，我们得到-1或1.这将有助于确定要比较的项目。
如果向左滑动，我们将剩下的所有项目移动，因此我们需要将每个项目与前一项目（-1一项）进行比较，以便测试相似性。
转移，我们使用Enumerable.Range方法来获取列索引。
此方法将返回包含[0,1,2,3，...，Globals.Columns-1]的列表。
如果滑动是正确的，那么我们颠倒columnNumbers列表的顺序。
这是因为我们需要以正确的方向循环colums。
如果向左滑动，我们将首先检查第一列是否为null，然后是第二列等。这就是为什么因为我们要将第一个非空项目从左侧开始移动到第一个空位置。
如果我们有正确的滑动，我们需要在相反的方向上执行此操作。
这就是我们反转columnNumbers列表的原因。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">int</span> row = Globals.Rows - <span class="number">1</span>; row &gt;= <span class="number">0</span>; row--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="built_in">int</span> column <span class="keyword">in</span> columnNumbers)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (matrix[row, column] == <span class="literal">null</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        ItemMovementDetails imd = AreTheseTwoItemsSame(row, column, row, column + relativeColumn);</span><br><span class="line">        <span class="keyword">if</span> (imd != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            movementDetails.Add(imd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，我们开始循环。 当然，我们会检查所有行。
然后，我们遍历所有列，从columnNumbers列表中获取索引。
在遍历每一行时，我们首先检查每个项目是否为null。
如果它为null，我们继续检查下一个项目（通过检查下一列 -
下一个意味着-1或1，具体取决于滑动。当我们到达非空列时，我们检查此列是否与
再次，“旁边”表示-1或1，具体取决于滑动是左还是右。如果这些项是相同的，那么我们将此信息添加到movingDetails列表并继续循环
下一栏。</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> columnFirstNullItem = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> numberOfItemsToTake = horizontalMovement == HorizontalMovement.Left? column : Globals.Columns – column;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bool</span> emptyItemFound = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">columnFirstNullItem++)</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> tempColumnFirstNullItem <span class="keyword">in</span> columnNumbers.Take(numberOfItemsToTake))</span><br><span class="line">&#123;</span><br><span class="line">        columnFirstNullItem = tempColumnFirstNullItem;</span><br><span class="line">    <span class="keyword">if</span> (matrix[row, columnFirstNullItem] == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        emptyItemFound = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果这些项不相同，那么我们必须在当前的第一个空位置移动我们当前引用的项。
对于左侧滑动，如果项目是[row，column]，那么唯一可能的位置是从[row，0]到[row，column-1]，因此我们需要columnNumbers列表中的第一个列项。
对于右滑动，唯一可能的位置是从[row，Globals.Columns-1]到[row，column +
1]，因此我们需要第一个Globals.Columns - 来自reverse
columnNumbers列表的列项。 我们在这些列中执行循环（使用Take
LINQ方法）保持对每个列号的引用（通过columnFirstNullItem变量）并检查每个项是否为null。
如果我们找到一个，我们退出循环。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">    if (!emptyItemFound)</span><br><span class="line">    &#123;</span><br><span class="line">        continue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ItemMovementDetails newImd =MoveItemToNullPositionAndCheckIfSameWithNextOne</span><br><span class="line">    (row, row, row, column, columnFirstNullItem, columnFirstNullItem + relativeColumn);</span><br><span class="line"></span><br><span class="line">    movementDetails.Add(newImd);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return movementDetails;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果我们没有找到空项，则当前引用的项位于正确的位置，因此我们保持原样。
如果我们这样做，那么我们将当前引用的项移动到null位置，并创建ItemMovementDetails类的实例，以便携带动画信息。
在MoveHorizontal方法的末尾，我们返回movementDetails列表，其中包含必须执行的所有动画的信息。</p>
<h2 id="游戏结束判定">游戏结束判定</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public bool CheckGameOver()</span><br><span class="line">&#123;</span><br><span class="line">    for (int row = 0; row &lt; Globals.Rows; row++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int column = 0; column &lt; Globals.Columns; column++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (matrix[row, column] == null)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int x = 0; x &lt; Globals.Rows; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int y = 0; y &lt; Globals.Columns - 1; y++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (matrix[x, y].Value == matrix[x, y + 1].Value)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (int y = 0; y &lt; Globals.Columns; y++)</span><br><span class="line">    &#123;</span><br><span class="line">        for (int x = 0; x &lt; Globals.Rows - 1; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            if (matrix[x, y].Value == matrix[x + 1, y].Value)</span><br><span class="line">            &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>结束判定很简单,遍历看矩阵中有没有空 或 有没有两个相邻且相等的数</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
      </categories>
  </entry>
  <entry>
    <title>Obsidian+Hexo Markdown 测试</title>
    <url>/cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/</url>
    <content><![CDATA[<h1 id="双链测试">双链测试</h1>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<h1 id="markdown-示例">Markdown 示例</h1>
<p>Markdown简易入门教程<br />
使用方式：打开 Source Mode 就可以看到所有markdown格式，照着来用就行了  
 </p>
<h2 id="标题">标题</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 标题一  </span><br><span class="line">  </span><br><span class="line">## 标题二  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">### 标题三  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">#### 标题四  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">##### 标题五  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">###### 标题六</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="文本">文本</h2>
<p><strong>粗体</strong></p>
<blockquote>
<p>引用</p>
</blockquote>
<p><del>中划线</del></p>
<p><u>下划线</u></p>
<hr />
<p><mark style="background: #fefe00A6;">三空格+换行＝换行</mark>  </p>
<p><em>斜体</em></p>
<p><strong><em>斜体加粗体</em></strong></p>
<p><strong>常用markdown标记?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**粗体**   </span><br><span class="line"></span><br><span class="line">&gt; 引用   </span><br><span class="line"></span><br><span class="line">~~中划线~~   </span><br><span class="line"></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt; </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">三空格+换行＝换行   </span><br><span class="line"></span><br><span class="line">*斜体*   </span><br><span class="line"></span><br><span class="line">***斜体加粗体***   </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-16,64,250-->
<h2 id="段落">段落</h2>
<h3 id="链接">链接</h3>
<p><a href="https://gitee.com/qiaogaojian">链接</a><br />
<a href="/download/ide-eval-resetter.zip">ide-eval-resetter.zip</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">[链接](链接地址)  </span><br><span class="line">[[obsidian双链]]</span><br></pre></td></tr></table></figure></div>
<h3 id="图片">图片</h3>
<p><img src="/images/Pasted%20image%2020221009213236.png" /> <img
src="/images/0-2.png" /> <img
src="https://upload-images.jianshu.io/upload_images/3947109-1c9256e2c1f95874.png"
alt="image.png" /> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">![](远程图片地址)</span><br><span class="line">![[obsidian 图片]]</span><br><span class="line">![](obsidian 本地图片名字)</span><br></pre></td></tr></table></figure></div></p>
<h3 id="代码">代码</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWord</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWord&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://google.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stackoverflow&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://stackoverflow.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span>  </span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;github&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://github.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://google.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;stackoverflow&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://stackoverflow.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div>
<h3 id="表格">表格</h3>
<table>
<thead>
<tr class="header">
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>行 1 列 1</td>
<td>行 1 列 2</td>
</tr>
<tr class="even">
<td>行 2 列 1</td>
<td>行 2 列 2</td>
</tr>
</tbody>
</table>
<p><strong>markdown 表格标记</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">| 标题1     | 标题2     |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 行 1 列 1 | 行 1 列 2 |</span><br><span class="line">| 行 2 列 1 | 行 2 列 2 |</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-08-19,10,250-->
<h3 id="公式">公式</h3>
<p><strong>数学公式</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LATEX"><figure class="iseeu highlight /latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>y = x<span class="built_in">^</span>2<span class="built_in">$</span></span><br></pre></td></tr></table></figure></div> <span class="math inline">\(y=x^2\)</span></p>
<blockquote>
<p>注: Latex语法参考<a
href="../27281cf24631a2d2dd870e4d71da1804018c315f">常用 LaTeX
公式符号</a></p>
</blockquote>
<h2 id="列表">列表</h2>
<h3 id="无序">无序</h3>
<ul>
<li>普通序列
<ul>
<li>1
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul></li>
<li>2</li>
<li>3</li>
</ul></li>
<li>普通序列</li>
<li>普通序列</li>
<li>普通序列</li>
</ul>
<h3 id="有序">有序</h3>
<ol type="1">
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
</ol>
<h3 id="混合">混合</h3>
<ul>
<li>混合序列
<ul>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ul></li>
<li>混合序列</li>
<li>混合序列
<ol type="1">
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ol></li>
<li>混合序列</li>
</ul>
<h3 id="任务">任务</h3>
<p><strong>任务列表</strong></p>
<ul class="task-list">
<li><input type="checkbox" disabled="" />
未完成<br />
</li>
<li><input type="checkbox" disabled="" checked="" />
已完成<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] 未完成   </span><br><span class="line">- [x] 已完成   </span><br></pre></td></tr></table></figure></div> <!--SR:!2022-08-16,7,250--></li>
</ul>
<h2 id="图表">图表</h2>
<p><strong>mermaid 流程图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br><span class="line">B--&gt;c</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">graph LR
A-->B
B-->c</pre>
<!--SR:!2022-11-07,57,250-->
<p><strong>mermaid 时序图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: How are you?</span><br><span class="line">B-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">sequenceDiagram
A->>B: How are you?
B->>A: Great!</pre>
<!--SR:!2022-11-15,64,250-->
<p><strong>mermaid 甘特图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 3d</span><br><span class="line"></span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 6d</span><br><span class="line"></span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">gantt
dateFormat YYYY-MM-DD

section S1
T1: 2014-01-01, 3d

section S2
T2: 2014-01-11, 6d

section S3
T3: 2014-01-02, 9d</pre>
<!--SR:!2022-10-11,40,250-->
<h2 id="注脚">注脚</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MD"><figure class="iseeu highlight /md"><table><tr><td class="code"><pre><span class="line">Here is a simple footnote[^1].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">My reference.</span></span><br></pre></td></tr></table></figure></div>
<p>Here is a simple footnote<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>A footnote can also have multiple lines<a href="#fn2"
class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>.</p>
<p>You can also use words, to fit your writing style more closely<a
href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"><sup>3</sup></a>.</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a href="../27281cf24631a2d2dd870e4d71da1804018c315f">常用 LaTeX
公式符号</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>My reference.<a href="#fnref1"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Every new line should be prefixed
with 2 spaces.<br />
This allows you to have a footnote with multiple lines.<a href="#fnref2"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Named footnotes will still render
with numbers instead of the text but allow easier identification and
linking.<br />
This footnote also has been made with a different syntax using 4 spaces
for new lines.<a href="#fnref3" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>obsidian</tag>
        <tag>test</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL 常用命令</title>
    <url>/dcc5087256bf04dfed9318c7f0a5de8bb5f26feb/</url>
    <content><![CDATA[<h2 id="sql的概念">SQL的概念</h2>
<p>SQL 是结构化查询语言,是what型语音,而非how型语言,
SQL代码按照作用可以分为以下三种</p>
<ul>
<li><strong>dml</strong>
数据库<mark style="background: #fefe00A6;">操作</mark> 语言
(<strong>使用者</strong>角度,增删改查,占<mark style="background: #be9affA6;">80%</mark>
) 这80%当中,查询又占<mark style="background: #be9affA6;">80%</mark></li>
<li><strong>ddl</strong>
数据库<mark style="background: #fefe00A6;">定义</mark> 语言
(<strong>创建者</strong>角度,建表,建库,建视图,<mark style="background: #be9affA6;">15%</mark>
)</li>
<li><strong>dcl</strong>
数据库<mark style="background: #fefe00A6;">控制</mark> 语言
(<strong>管理员</strong>角度,DBA,<mark style="background: #be9affA6;">5%</mark>
) <!--SR:!2024-12-06,403,250--></li>
</ul>
<h2 id="ddl-数据库定义语言">DDL 数据库定义语言</h2>
<p>建表就是声明表头的过程</p>
<h3 id="数值型">数值型</h3>
<p><strong>整型数值范围</strong></p>
<table>
<thead>
<tr class="header">
<th>类型</th>
<th>字节数</th>
<th style="text-align: right;">范围</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>tinyint</td>
<td>1-8位</td>
<td style="text-align: right;">+-128</td>
</tr>
<tr class="even">
<td>smallint</td>
<td>2-16位</td>
<td style="text-align: right;">+-32, 768</td>
</tr>
<tr class="odd">
<td>mediumint</td>
<td>3-24位</td>
<td style="text-align: right;">+-8, 388, 608</td>
</tr>
<tr class="even">
<td>int</td>
<td>4-32位</td>
<td style="text-align: right;">+-2, 147, 483, 648</td>
</tr>
<tr class="odd">
<td>bigint</td>
<td>8-64位</td>
<td style="text-align: right;">+-9, 223, 372, 036, 854, 775, 808</td>
</tr>
</tbody>
</table>
<p><strong>可选参数</strong> - unsigned 无符号 - zerofill(M) 固定宽度M
填充0 (隐含附带 unsigned 属性) <!--SR:!2024-12-05,400,250--></p>
<h3 id="浮点">浮点</h3>
<p>会有精度损失 - float - double</p>
<h3 id="定点">定点</h3>
<p>没有精度损失 - decimal</p>
<p><code>[M,D]</code> M:位数 D:精度</p>
<h3 id="字符串">字符串</h3>
<div class="line-block">类型 | 特点 |<br />
--# | --# |<br />
char | 定长 速度快|<br />
varchar | 不定长 速度慢|<br />
blob | 二进制 防止字符集过滤信息丢失|<br />
enum | 固定的几个值|</div>
<p><strong>字符字节数</strong> | 编码 | 英文字母 | 中文汉字 | 标点符号 |
| ---# | ------# | ------# | ------# | | GBK | 1 | 2 | 1 | | UTF-8 | 1 |
3 | 1 | <!--SR:!2026-06-13,737,250--></p>
<h3 id="日期时间">日期时间</h3>
<ul>
<li>year</li>
<li>date</li>
<li>time</li>
<li>datetime</li>
<li>timestamp</li>
</ul>
<h3 id="默认值">默认值</h3>
<ul>
<li>not null default 'value'</li>
<li>primary key</li>
<li>auto increment</li>
</ul>
<h3 id="类型取值范围汇总">类型取值范围汇总</h3>
<table>
<colgroup>
<col style="width: 33%" />
<col style="width: 33%" />
<col style="width: 33%" />
</colgroup>
<thead>
<tr class="header">
<th>类 型</th>
<th>大 小</th>
<th>描 述</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>CAHR(Length)</td>
<td>Length字节</td>
<td>定长字段，长度为0~255个字符</td>
</tr>
<tr class="even">
<td>VARCHAR(Length)</td>
<td>String长度:1字节或String长度:2字节</td>
<td>变长字段，长度为0~65 535个字符</td>
</tr>
<tr class="odd">
<td>TINYTEXT</td>
<td>String长度:1字节</td>
<td>字符串，最大长度为255个字符</td>
</tr>
<tr class="even">
<td>TEXT</td>
<td>String长度:2字节</td>
<td>字符串，最大长度为65 535个字符</td>
</tr>
<tr class="odd">
<td>MEDIUMTEXT</td>
<td>String长度:3字节</td>
<td>字符串，最大长度为16 777 215个字符</td>
</tr>
<tr class="even">
<td>LONGTEXT</td>
<td>String长度:4字节</td>
<td>字符串，最大长度为4 294 967 295个字符</td>
</tr>
<tr class="odd">
<td>TINYINT(Length)</td>
<td>1字节</td>
<td>范围：-128<sub>127，或者0</sub>255（无符号）</td>
</tr>
<tr class="even">
<td>SMALLINT(Length)</td>
<td>2字节</td>
<td>范围：-32 768~32 767，或者0~65 535（无符号）</td>
</tr>
<tr class="odd">
<td>MEDIUMINT(Length)</td>
<td>3字节</td>
<td>范围：-8 388 608~8 388 607，或者0~16 777 215（无符号）</td>
</tr>
<tr class="even">
<td>INT(Length)</td>
<td>4字节</td>
<td>范围：-2 147 483 648~2 147 483 647，或者0~4 294 967
295（无符号）</td>
</tr>
<tr class="odd">
<td>BIGINT(Length)</td>
<td>8字节</td>
<td>范围：-9 223 372 036 854 775 808~9 223 372 036 854 775 807，或者0~18
446 744 073 709 551 615（无符号）</td>
</tr>
<tr class="even">
<td>FLOAT(Length, Decimals)</td>
<td>4字节</td>
<td>具有浮动小数点的较小的数</td>
</tr>
<tr class="odd">
<td>DOUBLE(Length, Decimals)</td>
<td>8字节</td>
<td>具有浮动小数点的较大的数</td>
</tr>
<tr class="even">
<td>DECIMAL(Length, Decimals)</td>
<td>Length:1字节或Length:2字节</td>
<td>存储为字符串的DOUBLE，允许固定的小数点</td>
</tr>
<tr class="odd">
<td>DATE</td>
<td>3字节</td>
<td>采用YYYY-MM-DD格式</td>
</tr>
<tr class="even">
<td>DATETIME</td>
<td>8字节</td>
<td>采用YYYY-MM-DD HH:MM:SS格式</td>
</tr>
<tr class="odd">
<td>TIMESTAMP</td>
<td>4字节</td>
<td>采用YYYYMMDDHHMMSS格式；可接受的范围终止于2037年</td>
</tr>
<tr class="even">
<td>TIME</td>
<td>3字节</td>
<td>采用HH:MM:SS格式</td>
</tr>
<tr class="odd">
<td>ENUM</td>
<td>1或2字节</td>
<td>Enumeration(枚举)的简写，这意味着每一列都可以具有多个可能的值之一</td>
</tr>
<tr class="even">
<td>SET</td>
<td>1、2、3、4或8字节</td>
<td>与ENUM一样，只不过每一列都可以具有多个可能的值</td>
</tr>
</tbody>
</table>
<!--SR:!2024-09-14,208,230-->
<h3 id="存储引擎的区别">存储引擎的区别</h3>
<table>
<thead>
<tr class="header">
<th>特点</th>
<th>MyIsam</th>
<th>InnoDB</th>
<th>Memory</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>批量插入速度</td>
<td>高</td>
<td>低</td>
<td>高</td>
</tr>
<tr class="even">
<td>事务</td>
<td></td>
<td>支持</td>
<td></td>
</tr>
<tr class="odd">
<td>全文索引</td>
<td>支持</td>
<td></td>
<td></td>
</tr>
<tr class="even">
<td>锁机制</td>
<td>表锁</td>
<td>行锁</td>
<td></td>
</tr>
<tr class="odd">
<td>存储限制</td>
<td>没有</td>
<td>64TB</td>
<td></td>
</tr>
</tbody>
</table>
<!--SR:!2024-08-21,345,250-->
<h3 id="字符集">字符集</h3>
<p>数据表设置 <strong>charset</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%charact%&#x27;;</span><br><span class="line">mysql&gt; set names utf8;</span><br></pre></td></tr></table></figure></div> - 字符集选
<code>utf8</code> - 排序规则选 <code>utf8_general_ci</code></p>
<h3 id="索引">索引</h3>
<p>索引是一种树形结构 提高了查的速度 减慢了增删改的速度
一般在查询频繁高和重复率低的列加索引 - primary key 主键索引 - index
普通索引 - unique index 唯一性索引 - fulltext index 全文索引
全文索引中文无效 一般用分词+索引 如sphinx <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">create table test</span><br><span class="line">(</span><br><span class="line">    id int,</span><br><span class="line">    name char(10),</span><br><span class="line">    email char(20),</span><br><span class="line">    primary key(id),</span><br><span class="line">    key name(name),</span><br><span class="line">    unique key email(email)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"># 索引长度</span><br><span class="line">key email(emial(10)) # 取前10个字符作为索引 为了把重复的内容剔除</span><br><span class="line"></span><br><span class="line"># 多列索引</span><br><span class="line">create table name</span><br><span class="line">(</span><br><span class="line">    xing char(2),</span><br><span class="line">    ming char(10),</span><br><span class="line">    key xm(xing,ming)</span><br><span class="line">);</span><br><span class="line"># 左前缀: 0 两个 第一次 索引生效  只有第二个无效</span><br><span class="line">explain select * from name where xing = &quot;michael&quot; \G;</span><br><span class="line"></span><br><span class="line"># 冗余索引 被多个覆盖</span><br><span class="line">key xm(xing,ming),</span><br><span class="line">key m(ming)</span><br></pre></td></tr></table></figure></div></p>
<h3 id="事务">事务</h3>
<p>事务 要么都完成 要么都失败, 具有以下特点 - 隔离性 - 原子性 - 一致性 -
持久性 需要使用引擎: <strong>innodb</strong> 流程: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">开启事务          start transaction</span><br><span class="line">运行sql</span><br><span class="line">提交,同时生效\回滚 commit\rollback</span><br></pre></td></tr></table></figure></div></p>
<h3 id="触发器-trigger">触发器 trigger</h3>
<ul>
<li>监视地点:表</li>
<li>监视行为:增 删 改</li>
<li>触发时间:after</li>
<li>触发事件:增 删 改</li>
</ul>
<p>创建触发器语法 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">create trigger tgName</span><br><span class="line">after/before insert/delete/update</span><br><span class="line">on tableName</span><br><span class="line">for each row</span><br><span class="line">sql; # 触发语句</span><br></pre></td></tr></table></figure></div> 删除触发器: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">drop trigger tgName;</span><br></pre></td></tr></table></figure></div></p>
<h3 id="优化">优化</h3>
<ul>
<li>定长不定长分离</li>
<li>常用不常用分离</li>
</ul>
<h2 id="sql-语句">SQL 语句</h2>
<h3 id="连接数据库">连接数据库</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ mysql -h localhost -u root -p</span><br><span class="line"></span><br><span class="line"># 查看数据库状态</span><br><span class="line">mysql&gt; status;</span><br><span class="line">--------------</span><br><span class="line">D:\xampp\MySQL\bin\mysql.exe  Ver 14.14 Distrib 5.5.47, for Win32 (x86)</span><br><span class="line"></span><br><span class="line">Connection id:          3</span><br><span class="line">Current database:       test</span><br><span class="line">Current user:           root@localhost</span><br><span class="line">SSL:                    Not in use</span><br><span class="line">Using delimiter:        ;</span><br><span class="line">Server version:         5.5.47 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:       10</span><br><span class="line">Connection:             localhost via TCP/IP</span><br><span class="line">Server characterset:    utf8</span><br><span class="line">Db     characterset:    latin1</span><br><span class="line">Client characterset:    gbk</span><br><span class="line">Conn.  characterset:    gbk</span><br><span class="line">TCP port:               3306</span><br><span class="line">Uptime:                 8 hours 13 min 28 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 171  Slow queries: 0  Opens: 78  Flush tables: 1  Open tables: 0  Queries per second avg: 0.005</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-12-18,631,250-->
<h3 id="建表">建表</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; CREATE TABLE tem</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; id int,</span><br><span class="line">    -&gt; name varchar(20)</span><br><span class="line">    -&gt; )charset utf8;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO tem VALUES</span><br><span class="line">    -&gt; (1,&quot;Michael&quot;),</span><br><span class="line">    -&gt; (2,null);</span><br><span class="line">Query OK, 2 rows affected (0.00 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM tem;</span><br><span class="line">+------+---------+</span><br><span class="line">| id   | name    |</span><br><span class="line">+------+---------+</span><br><span class="line">|    1 | Michael |</span><br><span class="line">|    2 | NULL    |</span><br><span class="line">+------+---------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-03-20,478,250-->
<h3 id="选择表">选择表</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 显示所有数据库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| client             |</span><br><span class="line">| messageboard       |</span><br><span class="line">| my_db              |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| test               |</span><br><span class="line">| unitypackage       |</span><br><span class="line">+--------------------+</span><br><span class="line">8 rows in set (0.01 sec)</span><br><span class="line"></span><br><span class="line"># 打开 test 数据库</span><br><span class="line">mysql&gt; use test</span><br><span class="line">Database changed</span><br><span class="line"></span><br><span class="line"># 显示 test 数据库所有的表</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------+</span><br><span class="line">| Tables_in_test |</span><br><span class="line">+----------------+</span><br><span class="line">| a              |</span><br><span class="line">| b              |</span><br><span class="line">| boy            |</span><br><span class="line">| category       |</span><br><span class="line">| girl           |</span><br><span class="line">| goods          |</span><br><span class="line">| m              |</span><br><span class="line">| mian           |</span><br><span class="line">| result         |</span><br><span class="line">| t              |</span><br><span class="line">| user           |</span><br><span class="line">+----------------+</span><br><span class="line">11 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-04-29,710,250-->
<h3 id="查看表结构">查看表结构</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc user;</span><br><span class="line">+-------+----------------------+------+-----+---------+----------------+</span><br><span class="line">| Field | Type                 | Null | Key | Default | Extra          |</span><br><span class="line">+-------+----------------------+------+-----+---------+----------------+</span><br><span class="line">| uid   | int(11)              | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| name  | varchar(20)          | NO   |     |         |                |</span><br><span class="line">| age   | smallint(5) unsigned | NO   |     | 0       |                |</span><br><span class="line">+-------+----------------------+------+-----+---------+----------------+</span><br><span class="line">3 rows in set (0.02 sec)</span><br><span class="line"># null 属于比较特殊的类型,不能用 = 号,要用 is, 一般来说 为了方便管理 一个字段的值不能为 null</span><br><span class="line"></span><br><span class="line">mysql&gt; show create table user;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-01-18,650,250-->
<h3 id="表管理">表管理</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 表的详细信息</span><br><span class="line">mysql&gt; show table status \G;</span><br><span class="line"></span><br><span class="line"># 表的详细信息</span><br><span class="line">mysql&gt; show table status where name = &quot;user&quot; \G;</span><br><span class="line"></span><br><span class="line"># 清空表</span><br><span class="line">mysql&gt; truncate  # 相当于 drop + create</span><br><span class="line">mysql&gt; delete    # 相当于删除表数据</span><br><span class="line"></span><br><span class="line"># 重命名表</span><br><span class="line">rename table user to userhack</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-11-01,388,250-->
<h3 id="数据的备份和恢复">数据的备份和恢复</h3>
<p>备份与恢复 系统运行中, 增量备份,与整体备份. 例: 每周日整体备份一次,
周一到周六备份当天. 如果周五出了问题,可以用周日的整体 +
周一,二,三,四来恢复. 备份的工具 有第3方的收费备份工作,
目前我们所学的是系统自带的备份功能, mysqldump Mysqldump可以导出
<strong>库</strong> 和 <strong>表</strong> 导出的是建表语句及insert语句
<!--SR:!2024-11-13,395,250--></p>
<h5 id="导出">导出</h5>
<ul>
<li><strong>例1: 导出库下面的表</strong>
<code>Mysqldump -u用户名 -p密码 库名 表1 表2 表3 &gt; 地址/备份文件名称</code></li>
<li><strong>例2:导出一个库下面的所有表</strong>
<code>Mysqldump -u用户名 -p密码 库名 &gt; 地址/备份文件名称</code></li>
<li><strong>例3: 以库为单位导出</strong>
<code>Mysqldump -u用户名 -p密码 -B 库1 库2 库3 &gt; 地址/备份文件名称</code></li>
<li><strong>例4: 如何导出所有库</strong>
<code>Mysqldump -u用户名 -p密码 -A &gt; 地址/备份文件名称</code></li>
</ul>
<h5 id="恢复">恢复</h5>
<ol type="1">
<li><strong>不登陆到mysql命令行</strong></li>
</ol>
<ul>
<li>针对表级的备份文件
<code>Mysql -u用户名 -p密码 库名 &lt; 表级备份文件地址</code></li>
<li>针对库级的备份文件
<code>Mysql -u用户名 -p密码 &lt; 库级备份文件地址</code></li>
</ul>
<ol start="2" type="1">
<li><strong>登陆到mysql命令行</strong></li>
</ol>
<ul>
<li>对于表级的备份文件 <code>Mysql &gt; use 库名</code>
<code>Mysql&gt; source 备份文件地址</code></li>
<li>对于库级的备份文件 <code>Mysql&gt; source 备份文件地址</code></li>
</ul>
<h3 id="插入数据-insert-into">插入数据 INSERT INTO</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 插入单条数据</span><br><span class="line"># INSERT INTO 要插入的表 (字段1,字段1) VALUES (字段1的值,字段2的值);</span><br><span class="line">mysql&gt; INSERT INTO user (uid,name) VALUES (2,&quot;Michael&quot;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 插入多条数据</span><br><span class="line">mysql&gt; INSERT INTO user VALUES</span><br><span class="line">    -&gt; (3,&quot;张三&quot;,20), # 列与值, 严格对应</span><br><span class="line">    -&gt; (4,&quot;李四&quot;,21), # 数字不必加引号,字符串必须加引号</span><br><span class="line">    -&gt; (5,&quot;王五&quot;,22);  </span><br><span class="line">Query OK, 3 rows affected (0.00 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM user;</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">| uid | name   | age |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">|   1 | gaojian|  25 |</span><br><span class="line">|   2 | 迈克尔 |  19 |</span><br><span class="line">|   3 | 张三   |  20 |</span><br><span class="line">|   4 | 李四   |  21 |</span><br><span class="line">|   5 | 王五   |  22 |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-02-07,662,250-->
<h3 id="删除数据-delete-from">删除数据 DELETE FROM</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># DELETE FROM 所在的表 WHERE 要删除行</span><br><span class="line">mysql&gt; delete FROM user WHERE uid=3;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM user;</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">| uid | name   | age |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">|   1 | gaojian|  25 |</span><br><span class="line">|   2 | 迈克尔 |  19 |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-08-04,770,250-->
<h3 id="更改数据-update-set">更改数据 UPDATE SET</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># UPDATE 改哪张表 SET 你要改哪几列的值 WHERE 在哪些行生效 </span><br><span class="line">mysql&gt; UPDATE user SET age=18, uid=2 WHERE name=&quot;Michael&quot;; # 更新多个属性时记得加逗号&#x27;,&#x27; 属性的顺序和表结构保持一致</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM user;</span><br><span class="line">+-----+----------+-----+</span><br><span class="line">| uid | name     | age |</span><br><span class="line">+-----+----------+-----+</span><br><span class="line">|   1 | gaojian  |  25 |</span><br><span class="line">|   2 | Michael  |  18 |</span><br><span class="line">|   3 | Michelle |  26 |</span><br><span class="line">+-----+----------+-----+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-11-19,843,250-->
<h3 id="查询数据-select-from">查询数据 SELECT FROM</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 查询所有字段</span><br><span class="line">mysql&gt; SELECT * FROM user;</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">| uid | name   | age |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">|   1 | gaojian|  25 |</span><br><span class="line">+-----+--------+-----+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 查询特殊字段</span><br><span class="line"># SELECT 要查询的列 FROM 所在的表 WHERE 要查询的行</span><br><span class="line">mysql&gt;  SELECT uid,name FROM user WHERE uid&gt;=3;</span><br><span class="line">+-----+------+</span><br><span class="line">| uid | name |</span><br><span class="line">+-----+------+</span><br><span class="line">|   3 | 张三 |</span><br><span class="line">|   4 | 李四 |</span><br><span class="line">|   5 | 王五 |</span><br><span class="line">+-----+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<p><strong>常见错误:</strong> 以下五种子查询的顺序是固定的不可改变的
where, group by, having, order by, limit
<!--SR:!2024-09-23,361,250--></p>
<h3 id="子查询">子查询</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># where 子句</span><br><span class="line">mysql&gt; SELECT * FROM goods WHERE goods_id=(SELECT max(goods_id) FROM goods);</span><br><span class="line">+----------+------------+--------+----------+-----------+--------------+------------+--------------+-------------+</span><br><span class="line">| goods_id | goods_name | cat_id | brand_id | goods_sn  | goods_number | shop_price | market_price | click_count |</span><br><span class="line">+----------+------------+--------+----------+-----------+--------------+------------+--------------+-------------+</span><br><span class="line">|       32 | 诺基亚Cn85 |      3 |        1 | ecs000032 |            4 |    3010.00 |      3612.00 |           9 |</span><br><span class="line">+----------+------------+--------+----------+-----------+--------------+------------+--------------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># from 子句</span><br><span class="line">select * from (select * from goods order by cat_id asc,goods_id desc) as tem group by cat_id order by goods_id;</span><br><span class="line"></span><br><span class="line"># exists 子句</span><br><span class="line">select * from category where exists (select * from goods where goods.cat_id=category.cat_id);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-02-27,467,250-->
<h3 id="模糊查询">模糊查询</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 多个字符 %</span><br><span class="line">mysql&gt; select * from goods where goods_name like &quot;诺基亚%&quot;;</span><br><span class="line"></span><br><span class="line"># 单个字符 _</span><br><span class="line">mysql&gt; select * from goods where goods_name like &quot;诺基亚N__&quot;;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-02-26,467,250-->
<h3 id="排序">排序</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 排序 多层排序</span><br><span class="line">mysql&gt; select goods_id,goods_name,cat_id,shop_price from goods order by cat_id,shop_price desc;</span><br><span class="line"></span><br><span class="line"># asc  升序</span><br><span class="line"># desc 降序</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-01,405,250-->
<h3 id="截取">截取</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 一个结果集获得之后 有选择性的选择一部分结果  有两个参数 offset,range</span><br><span class="line">mysql&gt; select * from goods order by shop_price desc limit 3;</span><br><span class="line"># 这个才是常规的写法</span><br><span class="line">mysql&gt; select * from goods order by shop_price desc limit 2,3;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from goods order by goods_id desc limit 0,1;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-10-15,379,250-->
<h3 id="连接">连接</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 内连</span><br><span class="line">mysql&gt; SELECT boy.hid,boy.bname,girl.gname</span><br><span class="line">    -&gt; FROM boy INNER JOIN girl</span><br><span class="line">    -&gt; ON boy.hid=girl.hid;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| hid  | bname  | gname  |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| B    | 杨过   | 小龙女 |</span><br><span class="line">| C    | 陈冠希 | 张柏芝 |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 左连</span><br><span class="line">mysql&gt; SELECT boy.hid,boy.bname,girl.gname</span><br><span class="line">    -&gt; FROM boy LEFT JOIN girl</span><br><span class="line">    -&gt; ON boy.hid=girl.hid;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| hid  | bname  | gname  |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| A    | 屌丝   | NULL   |</span><br><span class="line">| B    | 杨过   | 小龙女 |</span><br><span class="line">| C    | 陈冠希 | 张柏芝 |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 右连</span><br><span class="line">mysql&gt; SELECT boy.hid,boy.bname,girl.gname</span><br><span class="line">    -&gt; FROM boy RIGHT JOIN girl</span><br><span class="line">    -&gt; ON boy.hid = girl.hid;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| hid  | bname  | gname  |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| B    | 杨过   | 小龙女 |</span><br><span class="line">| C    | 陈冠希 | 张柏芝 |</span><br><span class="line">| NULL | NULL   | 死宅女 |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># 外连</span><br><span class="line">mysql&gt; SELECT boy.hid,boy.bname,girl.gname</span><br><span class="line">    -&gt; FROM boy FULL OUTER JOIN girl</span><br><span class="line">    -&gt; ON boy.hid = girl.hid;</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| hid  | bname  | gname  |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| A    | 屌丝   | NULL   |</span><br><span class="line">| B    | 杨过   | 小龙女 |</span><br><span class="line">| C    | 陈冠希 | 张柏芝 |</span><br><span class="line">| NULL | NULL   | 死宅女 |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-11-10,387,250-->
<h3 id="常用函数">常用函数</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># count</span><br><span class="line">mysql&gt; SELECT count(*) FROM goods;</span><br><span class="line">+----------+</span><br><span class="line">| count(*) |</span><br><span class="line">+----------+</span><br><span class="line">|       31 |</span><br><span class="line">+----------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># replace </span><br><span class="line">mysql&gt; UPDATE goods</span><br><span class="line">    -&gt; SET goods_name= replace(goods_name, &#x27;诺基亚&#x27;, &#x27;HTC&#x27;)</span><br><span class="line">    -&gt; WHERE goods_name LIKE &#x27;诺基亚%&#x27;;</span><br><span class="line">Query OK, 8 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 8  Changed: 8  Warnings: 0</span><br><span class="line"></span><br><span class="line"># max</span><br><span class="line">mysql&gt; SELECT max(goods_id) FROM goods;</span><br><span class="line">+---------------+</span><br><span class="line">| max(goods_id) |</span><br><span class="line">+---------------+</span><br><span class="line">|            32 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># min</span><br><span class="line">mysql&gt; SELECT min(goods_id) FROM goods;</span><br><span class="line">+---------------+</span><br><span class="line">| min(goods_id) |</span><br><span class="line">+---------------+</span><br><span class="line">|             1 |</span><br><span class="line">+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># sum</span><br><span class="line">mysql&gt; SELECT sum(goods_number) FROM goods;</span><br><span class="line">+-------------------+</span><br><span class="line">| sum(goods_number) |</span><br><span class="line">+-------------------+</span><br><span class="line">|               313 |</span><br><span class="line">+-------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line"># avg</span><br><span class="line">mysql&gt; SELECT avg(shop_price) FROM goods;</span><br><span class="line">+-----------------+</span><br><span class="line">| avg(shop_price) |</span><br><span class="line">+-----------------+</span><br><span class="line">|     1232.526774 |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-09-19,800,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Server</category>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>mysql</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>Comprehensive Python Cheatsheet</title>
    <url>/cd7caae4024eeeb56d5d2f7e13705f7dcf74560b/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/gto76/python-cheatsheet">github.com</a></p>
</blockquote>
<blockquote>
<p>Comprehensive Python Cheatsheet. Contribute to
gto76/python-cheatsheet development by creating an acc......</p>
</blockquote>
<h1 id="comprehensive-python-cheatsheet">Comprehensive Python
Cheatsheet</h1>
<p><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/image_888.jpeg" /></p>
<h2 id="contents">Contents</h2>
<p><strong>1. Collections:</strong> <strong><a
href="#list"><code>List</code></a>,</strong> <strong><a
href="#dictionary"><code>Dictionary</code></a>,</strong> <strong><a
href="#set"><code>Set</code></a>,</strong> <strong><a
href="#tuple"><code>Tuple</code></a>,</strong> <strong><a
href="#range"><code>Range</code></a>,</strong> <strong><a
href="#enumerate"><code>Enumerate</code></a>,</strong> <strong><a
href="#iterator"><code>Iterator</code></a>,</strong> <strong><a
href="#generator"><code>Generator</code></a>.</strong><br />
<strong>2. Types:</strong> <strong><a
href="#type"><code>Type</code></a>,</strong> <strong><a
href="#string"><code>String</code></a>,</strong> <strong><a
href="#regex"><code>Regular_Exp</code></a>,</strong> <strong><a
href="#format"><code>Format</code></a>,</strong> <strong><a
href="#numbers-1"><code>Numbers</code></a>,</strong> <strong><a
href="#combinatorics"><code>Combinatorics</code></a>,</strong>
<strong><a href="#datetime"><code>Datetime</code></a>.</strong><br />
<strong>3. Syntax:</strong> <strong><a
href="#arguments"><code>Args</code></a>,</strong> <strong><a
href="#inline"><code>Inline</code></a>,</strong> <strong><a
href="#imports"><code>Import</code></a>,</strong> <strong><a
href="#decorator"><code>Decorator</code></a>,</strong> <strong><a
href="#class"><code>Class</code></a>,</strong> <strong><a
href="#duck-types"><code>Duck_Types</code></a>,</strong> <strong><a
href="#enum"><code>Enum</code></a>,</strong> <strong><a
href="#exceptions"><code>Exception</code></a>.</strong><br />
<strong>4. System:</strong> <strong><a
href="#exit"><code>Exit</code></a>,</strong> <strong><a
href="#print"><code>Print</code></a>,</strong> <strong><a
href="#input"><code>Input</code></a>,</strong> <strong><a
href="#command-line-arguments"><code>Command_Line_Arguments</code></a>,</strong>
<strong><a href="#open"><code>Open</code></a>,</strong> <strong><a
href="#paths"><code>Path</code></a>,</strong> <strong><a
href="#os-commands"><code>OS_Commands</code></a>.</strong><br />
<strong>5. Data:</strong> <strong><a
href="#json"><code>JSON</code></a>,</strong> <strong><a
href="#pickle"><code>Pickle</code></a>,</strong> <strong><a
href="#csv"><code>CSV</code></a>,</strong> <strong><a
href="#sqlite"><code>SQLite</code></a>,</strong> <strong><a
href="#bytes"><code>Bytes</code></a>,</strong> <strong><a
href="#struct"><code>Struct</code></a>,</strong> <strong><a
href="#array"><code>Array</code></a>,</strong> <strong><a
href="#memory-view"><code>Memory_View</code></a>,</strong> <strong><a
href="#deque"><code>Deque</code></a>.</strong><br />
<strong>6. Advanced:</strong> <strong><a
href="#threading"><code>Threading</code></a>,</strong> <strong><a
href="#operator"><code>Operator</code></a>,</strong> <strong><a
href="#introspection"><code>Introspection</code></a>,</strong>
<strong><a
href="#metaprogramming"><code>Metaprograming</code></a>,</strong>
<strong><a href="#eval"><code>Eval</code></a>,</strong> <strong><a
href="#coroutines"><code>Coroutines</code></a>.</strong><br />
<strong>7. Libraries:</strong> <strong><a
href="#progress-bar"><code>Progress_Bar</code></a>,</strong> <strong><a
href="#plot"><code>Plot</code></a>,</strong> <strong><a
href="#table"><code>Table</code></a>,</strong> <strong><a
href="#curses"><code>Curses</code></a>,</strong> <strong><a
href="#logging"><code>Logging</code></a>,</strong> <strong><a
href="#scraping"><code>Scraping</code></a>,</strong> <strong><a
href="#web"><code>Web</code></a>,</strong> <strong><a
href="#profiling"><code>Profile</code></a>,</strong><br />
<strong><a href="#numpy"><code>NumPy</code></a>,</strong> <strong><a
href="#image"><code>Image</code></a>,</strong> <strong><a
href="#audio"><code>Audio</code></a>,</strong> <strong><a
href="#pygame"><code>Games</code></a>,</strong> <strong><a
href="#pandas"><code>Data</code></a>.</strong></p>
<h2 id="main"><a href="#main"></a>Main</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:     # Runs main() if file wasn&#x27;t imported.</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="list"><a href="#list"></a>List</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       # Or: &lt;list&gt;[from_inclusive : to_exclusive : ±step]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.append(&lt;el&gt;)            # Or: &lt;list&gt; += [&lt;el&gt;]</span><br><span class="line">&lt;list&gt;.extend(&lt;collection&gt;)    # Or: &lt;list&gt; += &lt;collection&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.sort()                  # Sorts in ascending order.</span><br><span class="line">&lt;list&gt;.reverse()               # Reverses the list in-place.</span><br><span class="line">&lt;list&gt; = sorted(&lt;collection&gt;)  # Returns a new sorted list.</span><br><span class="line">&lt;iter&gt; = reversed(&lt;list&gt;)      # Returns reversed iterator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">sum_of_elements  = sum(&lt;collection&gt;)</span><br><span class="line">elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))</span><br><span class="line">flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))</span><br><span class="line">product_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)</span><br><span class="line">list_of_chars    = list(&lt;str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>For details about sorted(), min() and max() see <a
href="#sortable">sortable</a>.</strong></li>
<li><strong>Module <a href="#operator">operator</a> provides functions
itemgetter() and mul() that offer the same functionality as <a
href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     # Inserts item at index and moves the rest to the right.</span><br><span class="line">&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    # Removes and returns item at index or from the end.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     # Returns number of occurrences. Also works on strings.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     # Returns index of the first occurrence or raises ValueError.</span><br><span class="line">&lt;list&gt;.remove(&lt;el&gt;)            # Removes first occurrence of the item or raises ValueError.</span><br><span class="line">&lt;list&gt;.clear()                 # Removes all items. Also works on dictionary and set.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="dictionary"><a href="#dictionary"></a>Dictionary</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.</span><br><span class="line">value  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value of type.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.</span><br><span class="line">&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.</span><br><span class="line">&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.</span><br><span class="line">value = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError.</span><br><span class="line">&#123;k for k, v in &lt;dict&gt;.items() if v == value&#125;    # Returns set of keys that point to the value.</span><br><span class="line">&#123;k: v for k, v in &lt;dict&gt;.items() if k in keys&#125;  # Returns a dictionary, filtered by keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="counter"><a href="#counter"></a>Counter</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; colors = [&#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;red&#x27;]</span><br><span class="line">&gt;&gt;&gt; counter = Counter(colors)</span><br><span class="line">&gt;&gt;&gt; counter[&#x27;yellow&#x27;] += 1</span><br><span class="line">Counter(&#123;&#x27;blue&#x27;: 3, &#x27;red&#x27;: 2, &#x27;yellow&#x27;: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; counter.most_common()[0]</span><br><span class="line">(&#x27;blue&#x27;, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="set"><a href="#set"></a>Set</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt; = set()                                   # `&#123;&#125;` returns a dictionary.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= &#123;&lt;el&gt;&#125;</span><br><span class="line">&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.</span><br><span class="line">&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.</span><br><span class="line">&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn&#x27;t raise an error.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="frozen-set"><a href="#frozen-set"></a>Frozen Set</h3>
<ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an
element in a set.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frozenset&gt; = frozenset(&lt;collection&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="tuple"><a href="#tuple"></a>Tuple</h2>
<p><strong>Tuple is an immutable and hashable list.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tuple&gt; = ()                                # Empty tuple.</span><br><span class="line">&lt;tuple&gt; = (&lt;el&gt;,)                           # Or: &lt;el&gt;,</span><br><span class="line">&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="named-tuple"><a href="#named-tuple"></a>Named Tuple</h3>
<p><strong>Tuple's subclass with named elements.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import namedtuple</span><br><span class="line">&gt;&gt;&gt; Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)</span><br><span class="line">&gt;&gt;&gt; p = Point(1, y=2)</span><br><span class="line">Point(x=1, y=2)</span><br><span class="line">&gt;&gt;&gt; p[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; p.x</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; getattr(p, &#x27;y&#x27;)</span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="range"><a href="#range"></a>Range</h2>
<p><strong>Immutable and hashable sequence of integers.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;range&gt; = range(stop)                       # range(to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop)                # range(from_inclusive, to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop, ±step)         # range(from_inclusive, to_exclusive, ±step_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [i for i in range(3)]</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="enumerate"><a href="#enumerate"></a>Enumerate</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">for i, el in enumerate(&lt;collection&gt; [, i_start]):</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="iterator"><a href="#iterator"></a>Iterator</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = iter(&lt;collection&gt;)                 # `iter(&lt;iter&gt;)` returns unmodified iterator.</span><br><span class="line">&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     # A sequence of return values until &#x27;to_exclusive&#x27;.</span><br><span class="line">&lt;el&gt;   = next(&lt;iter&gt; [, default])           # Raises StopIteration or returns &#x27;default&#x27; on end.</span><br><span class="line">&lt;list&gt; = list(&lt;iter&gt;)                       # Returns a list of iterator&#x27;s remaining elements.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="itertools"><a href="#itertools"></a>Itertools</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.count(start=0, step=1)          # Returns updated value endlessly. Accepts floats.</span><br><span class="line">&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])          # Returns element endlessly or &#x27;times&#x27; times.</span><br><span class="line">&lt;iter&gt; = it.cycle(&lt;collection&gt;)             # Repeats the sequence endlessly.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])   # Empties collections in order (figuratively).</span><br><span class="line">&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)     # Empties collections inside a collection in order.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)    # Only returns first &#x27;to_exclusive&#x27; elements.</span><br><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, …)     # `to_exclusive, +step_size`. Indices can be None.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="generator"><a href="#generator"></a>Generator</h2>
<ul>
<li><strong>Any function that contains a yield statement returns a
generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def count(start, step):</span><br><span class="line">    while True:</span><br><span class="line">        yield start</span><br><span class="line">        start += step</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = count(10, 2)</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(10, 12, 14)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="type"><a href="#type"></a>Type</h2>
<ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__</span><br><span class="line">&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(&#x27;a&#x27;), &#x27;a&#x27;.__class__, str</span><br><span class="line">(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="some-types-do-not-have-built-in-names-so-they-must-be-imported"><a
href="#some-types-do-not-have-built-in-names-so-they-must-be-imported"></a>Some
types do not have built-in names, so they must be imported:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="abstract-base-classes"><a
href="#abstract-base-classes"></a>Abstract Base Classes</h3>
<p><strong>Each abstract base class specifies a set of virtual
subclasses. These classes are then recognized by isinstance() and
issubclass() as subclasses of the ABC, although they are really not. ABC
can also manually decide whether or not a specific class is its virtual
subclass, usually based on which methods the class has implemented. For
instance, Iterable ABC looks for method iter(), while Collection ABC
looks for iter(), contains() and len().</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence</span><br><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">|                  |  Iterable  | Collection |  Sequence  |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">| list, range, str |    yes     |    yes     |    yes     |</span><br><span class="line">| dict, set        |    yes     |    yes     |            |</span><br><span class="line">| iter             |    yes     |            |            |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Number)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">|                    |  Number  |  Complex |   Real   | Rational | Integral |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">| int                |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |</span><br><span class="line">| float              |   yes    |   yes    |   yes    |          |          |</span><br><span class="line">| complex            |   yes    |   yes    |          |          |          |</span><br><span class="line">| decimal.Decimal    |   yes    |          |          |          |          |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="string"><a href="#string"></a>String</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.strip(&#x27;&lt;chars&gt;&#x27;)              # Strips all passed characters from both ends.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on &#x27;sep&#x27; str at most &#x27;maxsplit&#x27; times.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains a substring.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces &#x27;old&#x27; with &#x27;new&#x27; at most &#x27;count&#x27; times.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.</span><br><span class="line">&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also: <code>'lstrip()'</code>, <code>'rstrip()'</code> and
<code>'rsplit()'</code>.</strong></li>
<li><strong>Also: <code>'lower()'</code>, <code>'upper()'</code>,
<code>'capitalize()'</code> and <code>'title()'</code>.</strong></li>
</ul>
<h3 id="property-methods"><a href="#property-methods"></a>Property
Methods</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isnumeric()   |          |          |   yes    |   yes    |   yes    |</span><br><span class="line">| isdigit()     |          |          |          |   yes    |   yes    |</span><br><span class="line">| isdecimal()   |          |          |          |          |   yes    |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also: <code>'isspace()'</code> checks for
<code>'[ \t\n\r\f\v\x1c-\x1f\x85\u2000…]'</code>.</strong></li>
</ul>
<h2 id="regex"><a href="#regex"></a>Regex</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with &#x27;new&#x27;.</span><br><span class="line">&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.</span><br><span class="line">&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.</span><br><span class="line">&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # Searches for first occurrence of the pattern.</span><br><span class="line">&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.</span><br><span class="line">&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Argument 'new' can be a function that accepts a Match object
and returns a string.</strong></li>
<li><strong>Search() and match() return None if they can't find a
match.</strong></li>
<li><strong>Argument <code>'flags=re.IGNORECASE'</code> can be used with
all functions.</strong></li>
<li><strong>Argument <code>'flags=re.MULTILINE'</code> makes
<code>'^'</code> and <code>'$'</code> match the start/end of each
line.</strong></li>
<li><strong>Argument <code>'flags=re.DOTALL'</code> makes dot also
accept the <code>'\n'</code>.</strong></li>
<li><strong>Use <code>r'\1'</code> or <code>'\\1'</code> for
backreference (<code>'\1'</code> returns a character with octal code
1).</strong></li>
<li><strong>Add <code>'?'</code> after <code>'*'</code> and
<code>'+'</code> to make them non-greedy.</strong></li>
</ul>
<h3 id="match-object"><a href="#match-object"></a>Match Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).</span><br><span class="line">&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part in the first bracket.</span><br><span class="line">&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="special-sequences"><a href="#special-sequences"></a>Special
Sequences</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;\d&#x27; == &#x27;[0-9]&#x27;                                # Matches decimal characters.</span><br><span class="line">&#x27;\w&#x27; == &#x27;[a-zA-Z0-9_]&#x27;                         # Matches alphanumerics and underscore.</span><br><span class="line">&#x27;\s&#x27; == &#x27;[ \t\n\r\f\v]&#x27;                        # Matches whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>By default, decimal characters, alphanumerics and
whitespaces from all alphabets are matched unless
<code>'flags=re.ASCII'</code> argument is used.</strong></li>
<li><strong>As shown above, it restricts all special sequence matches to
the first 128 characters and prevents <code>'\s'</code> from accepting
<code>'[\x1c-\x1f]'</code> (the so-called separator
characters).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters
will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<h2 id="format"><a href="#format"></a>Format</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = f&#x27;&#123;&lt;el_1&gt;&#125;, &#123;&lt;el_2&gt;&#125;&#x27;            # Curly brackets can also contain expressions.</span><br><span class="line">&lt;str&gt; = &#x27;&#123;&#125;, &#123;&#125;&#x27;.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: &#x27;&#123;0&#125;, &#123;a&#125;&#x27;.format(&lt;el_1&gt;, a=&lt;el_2&gt;)</span><br><span class="line">&lt;str&gt; = &#x27;%s, %s&#x27; % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C style formatting.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="attributes"><a href="#attributes"></a>Attributes</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Person = collections.namedtuple(&#x27;Person&#x27;, &#x27;name height&#x27;)</span><br><span class="line">&gt;&gt;&gt; person = Person(&#x27;Jean-Luc&#x27;, 187)</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;person.height&#125;&#x27;</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;&#123;p.height&#125;&#x27;.format(p=person)</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="general-options"><a href="#general-options"></a>General
Options</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&lt;el&gt;:&lt;10&#125;                               # &#x27;&lt;el&gt;      &#x27;</span><br><span class="line">&#123;&lt;el&gt;:^10&#125;                               # &#x27;   &lt;el&gt;   &#x27;</span><br><span class="line">&#123;&lt;el&gt;:&gt;10&#125;                               # &#x27;      &lt;el&gt;&#x27;</span><br><span class="line">&#123;&lt;el&gt;:.&lt;10&#125;                              # &#x27;&lt;el&gt;......&#x27;</span><br><span class="line">&#123;&lt;el&gt;:0&#125;                                 # &#x27;&lt;el&gt;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Options can be generated dynamically:
<code>f'&#123;&lt;el&gt;:&#123;&lt;str/int&gt;&#125;[…]&#125;'</code>.</strong></li>
<li><strong>Adding <code>'!r'</code> before the colon converts object to
string by calling its <a href="#class">repr()</a> method.</strong></li>
</ul>
<h3 id="strings"><a href="#strings"></a>Strings</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;abcde&#x27;:10&#125;                             # &#x27;abcde     &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:10.3&#125;                           # &#x27;abc       &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:.3&#125;                             # &#x27;abc&#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;!r:10&#125;                           # &quot;&#x27;abcde&#x27;   &quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="numbers"><a href="#numbers"></a>Numbers</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;123456:10&#125;                              # &#x27;    123456&#x27;</span><br><span class="line">&#123;123456:10,&#125;                             # &#x27;   123,456&#x27;</span><br><span class="line">&#123;123456:10_&#125;                             # &#x27;   123_456&#x27;</span><br><span class="line">&#123;123456:+10&#125;                             # &#x27;   +123456&#x27;</span><br><span class="line">&#123;123456:=+10&#125;                            # &#x27;+   123456&#x27;</span><br><span class="line">&#123;123456: &#125;                               # &#x27; 123456&#x27;</span><br><span class="line">&#123;-123456: &#125;                              # &#x27;-123456&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="floats"><a href="#floats"></a>Floats</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1.23456:10.3&#125;                           # &#x27;      1.23&#x27;</span><br><span class="line">&#123;1.23456:10.3f&#125;                          # &#x27;     1.235&#x27;</span><br><span class="line">&#123;1.23456:10.3e&#125;                          # &#x27; 1.235e+00&#x27;</span><br><span class="line">&#123;1.23456:10.3%&#125;                          # &#x27;  123.456%&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="comparison-of-presentation-types"><a
href="#comparison-of-presentation-types"></a>Comparison of presentation
types:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |    &#123;&lt;float&gt;&#125;   |   &#123;&lt;float&gt;:f&#125;  |   &#123;&lt;float&gt;:e&#125;  |   &#123;&lt;float&gt;:%&#125;  |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |   &#x27;5.6789e-05&#x27; |    &#x27;0.000057&#x27;  | &#x27;5.678900e-05&#x27; |    &#x27;0.005679%&#x27; |</span><br><span class="line">|  0.00056789  |   &#x27;0.00056789&#x27; |    &#x27;0.000568&#x27;  | &#x27;5.678900e-04&#x27; |    &#x27;0.056789%&#x27; |</span><br><span class="line">|  0.0056789   |   &#x27;0.0056789&#x27;  |    &#x27;0.005679&#x27;  | &#x27;5.678900e-03&#x27; |    &#x27;0.567890%&#x27; |</span><br><span class="line">|  0.056789    |   &#x27;0.056789&#x27;   |    &#x27;0.056789&#x27;  | &#x27;5.678900e-02&#x27; |    &#x27;5.678900%&#x27; |</span><br><span class="line">|  0.56789     |   &#x27;0.56789&#x27;    |    &#x27;0.567890&#x27;  | &#x27;5.678900e-01&#x27; |   &#x27;56.789000%&#x27; |</span><br><span class="line">|  5.6789      |   &#x27;5.6789&#x27;     |    &#x27;5.678900&#x27;  | &#x27;5.678900e+00&#x27; |  &#x27;567.890000%&#x27; |</span><br><span class="line">| 56.789       |  &#x27;56.789&#x27;      |   &#x27;56.789000&#x27;  | &#x27;5.678900e+01&#x27; | &#x27;5678.900000%&#x27; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |  &#123;&lt;float&gt;:.2&#125;  |  &#123;&lt;float&gt;:.2f&#125; |  &#123;&lt;float&gt;:.2e&#125; |  &#123;&lt;float&gt;:.2%&#125; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |    &#x27;5.7e-05&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-05&#x27;   |      &#x27;0.01%&#x27;   |</span><br><span class="line">|  0.00056789  |    &#x27;0.00057&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-04&#x27;   |      &#x27;0.06%&#x27;   |</span><br><span class="line">|  0.0056789   |    &#x27;0.0057&#x27;    |      &#x27;0.01&#x27;    |   &#x27;5.68e-03&#x27;   |      &#x27;0.57%&#x27;   |</span><br><span class="line">|  0.056789    |    &#x27;0.057&#x27;     |      &#x27;0.06&#x27;    |   &#x27;5.68e-02&#x27;   |      &#x27;5.68%&#x27;   |</span><br><span class="line">|  0.56789     |    &#x27;0.57&#x27;      |      &#x27;0.57&#x27;    |   &#x27;5.68e-01&#x27;   |     &#x27;56.79%&#x27;   |</span><br><span class="line">|  5.6789      |    &#x27;5.7&#x27;       |      &#x27;5.68&#x27;    |   &#x27;5.68e+00&#x27;   |    &#x27;567.89%&#x27;   |</span><br><span class="line">| 56.789       |    &#x27;5.7e+01&#x27;   |     &#x27;56.79&#x27;    |   &#x27;5.68e+01&#x27;   |   &#x27;5678.90%&#x27;   |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>When both rounding up and rounding down are possible, the
one that returns result with even last digit is chosen. That makes
<code>'&#123;6.5:.0f&#125;'</code> a <code>'6'</code> and <code>'&#123;7.5:.0f&#125;'</code>
an <code>'8'</code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented
exactly by a float (<code>.5</code>, <code>.25</code>, …).</strong></li>
</ul>
<h3 id="ints"><a href="#ints"></a>Ints</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;90:c&#125;                                   # &#x27;Z&#x27;</span><br><span class="line">&#123;90:b&#125;                                   # &#x27;1011010&#x27;</span><br><span class="line">&#123;90:X&#125;                                   # &#x27;5A&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="numbers-1"><a href="#numbers-1"></a>Numbers</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt;      = int(&lt;float/str/bool&gt;)                # Or: math.floor(&lt;float&gt;)</span><br><span class="line">&lt;float&gt;    = float(&lt;int/str/bool&gt;)                # Or: &lt;real&gt;e±&lt;int&gt;</span><br><span class="line">&lt;complex&gt;  = complex(real=0, imag=0)              # Or: &lt;real&gt; ± &lt;real&gt;j</span><br><span class="line">&lt;Fraction&gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)</span><br><span class="line">&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           # Or: Decimal((sign, digits, exponent))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'int(&lt;str&gt;)'</code> and
<code>'float(&lt;str&gt;)'</code> raise ValueError on malformed
strings.</strong></li>
<li><strong>Decimal numbers are stored exactly, unlike most floats where
<code>'1.1 + 2.2 != 3.3'</code>.</strong></li>
<li><strong>Floats can be compared with:
<code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>.</strong></li>
<li><strong>Precision of decimal operations is set with:
<code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</strong></li>
</ul>
<h3 id="basic-functions"><a href="#basic-functions"></a>Basic
Functions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         # Or: &lt;num&gt; ** &lt;num&gt;</span><br><span class="line">&lt;num&gt; = abs(&lt;num&gt;)                                # &lt;float&gt; = abs(&lt;complex&gt;)</span><br><span class="line">&lt;num&gt; = round(&lt;num&gt; [, ±ndigits])                 # `round(126, -1) == 130`</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="math"><a href="#math"></a>Math</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from math import e, pi, inf, nan, isinf, isnan    # `&lt;el&gt; == nan` is always False.</span><br><span class="line">from math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.</span><br><span class="line">from math import log, log10, log2                 # Log can accept base as second arg.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="statistics"><a href="#statistics"></a>Statistics</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="random"><a href="#random"></a>Random</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import random, randint, choice        # Also shuffle, gauss, triangular, seed.</span><br><span class="line">&lt;float&gt; = random()                                # A float inside [0, 1).</span><br><span class="line">&lt;int&gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].</span><br><span class="line">&lt;el&gt;    = choice(&lt;sequence&gt;)                      # Keeps the sequence intact.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="bin-hex"><a href="#bin-hex"></a>Bin, Hex</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = ±0b&lt;bin&gt;                                  # Or: ±0x&lt;hex&gt;</span><br><span class="line">&lt;int&gt; = int(&#x27;±&lt;bin&gt;&#x27;, 2)                          # Or: int(&#x27;±&lt;hex&gt;&#x27;, 16)</span><br><span class="line">&lt;int&gt; = int(&#x27;±0b&lt;bin&gt;&#x27;, 0)                        # Or: int(&#x27;±0x&lt;hex&gt;&#x27;, 0)</span><br><span class="line">&lt;str&gt; = bin(&lt;int&gt;)                                # Returns &#x27;[-]0b&lt;bin&gt;&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="bitwise-operators"><a href="#bitwise-operators"></a>Bitwise
Operators</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             # And (0b1100 &amp; 0b1010 == 0b1000).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             # Or  (0b1100 | 0b1010 == 0b1110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           # Left shift. Use &gt;&gt; for right.</span><br><span class="line">&lt;int&gt; = ~&lt;int&gt;                                    # Not. Also -&lt;int&gt; - 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="combinatorics"><a href="#combinatorics"></a>Combinatorics</h2>
<ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to
the list() function first!</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product([0, 1], repeat=3)</span><br><span class="line">[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),</span><br><span class="line"> (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product(&#x27;abc&#x27;, &#x27;abc&#x27;)                      #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),              # b x  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;), (&#x27;c&#x27;, &#x27;c&#x27;)]              # c x  x  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;c&#x27;)]                                      # b .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations_with_replacement(&#x27;abc&#x27;, 2)    #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b .  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;c&#x27;)]                                      # c .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.permutations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b x  .  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;)]                          # c x  x  .</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="datetime"><a href="#datetime"></a>Datetime</h2>
<ul>
<li><strong>Module 'datetime' provides 'date' <code>&lt;D&gt;</code>,
'time' <code>&lt;T&gt;</code>, 'datetime' <code>&lt;DT&gt;</code> and
'timedelta' <code>&lt;TD&gt;</code> classes. All are immutable and
hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware'
<code>&lt;a&gt;</code>, meaning they have defined timezone, or 'naive'
<code>&lt;n&gt;</code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's
timezone.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import date, time, datetime, timedelta</span><br><span class="line">from dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="constructors"><a href="#constructors"></a>Constructors</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.</span><br><span class="line">&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.</span><br><span class="line">&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, …`.</span><br><span class="line">&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microsecond=0`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of
the week as an int, with Monday being 0.</strong></li>
<li><strong><code>'fold=1'</code> means the second pass in case of time
jumping back for one hour.</strong></li>
<li><strong>Timedelta normalizes arguments to ±days, seconds
(&lt;86 400) and microseconds (&lt; 1M).</strong></li>
</ul>
<h3 id="now"><a href="#now"></a>Now</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive datetime.</span><br><span class="line">&lt;DTn&gt;    = DT.utcnow()                      # Naive datetime from current UTC time.</span><br><span class="line">&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware datetime from current tz time.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>To extract time use <code>'&lt;DTn&gt;.time()'</code>,
<code>'&lt;DTa&gt;.time()'</code> or
<code>'&lt;DTa&gt;.timetz()'</code>.</strong></li>
</ul>
<h3 id="timezone"><a href="#timezone"></a>Timezone</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tzinfo&gt; = UTC                              # UTC timezone. London without DST.</span><br><span class="line">&lt;tzinfo&gt; = tzlocal()                        # Local timezone. Also gettz().</span><br><span class="line">&lt;tzinfo&gt; = gettz(&#x27;&lt;Continent&gt;/&lt;City&gt;&#x27;)      # &#x27;Continent/City_Name&#x27; timezone or None.</span><br><span class="line">&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        # Datetime, converted to the passed timezone.</span><br><span class="line">&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Unconverted object with a new timezone.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="encode"><a href="#encode"></a>Encode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&#x27;&lt;iso&gt;&#x27;)    # Object from ISO string. Raises ValueError.</span><br><span class="line">&lt;DT&gt;     = DT.strptime(&lt;str&gt;, &#x27;&lt;format&gt;&#x27;)   # Datetime from str, according to format.</span><br><span class="line">&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.</span><br><span class="line">&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         # Local time DTn from seconds since the Epoch.</span><br><span class="line">&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  # Aware datetime from seconds since the Epoch.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>ISO strings come in following forms:
<code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[±HH:MM]'</code>, or
both separated by an arbitrary character. All parts following hours are
optional.</strong></li>
<li><strong>Python uses the Unix Epoch:
<code>'1970-01-01 00:00 UTC'</code>,
<code>'1970-01-01 01:00 CET'</code>, ...</strong></li>
</ul>
<h3 id="decode"><a href="#decode"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=&#x27;T&#x27;)      # Also: `timespec=&#x27;auto/hours/minutes/seconds/…&#x27;`.</span><br><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(&#x27;&lt;format&gt;&#x27;)    # Custom string representation.</span><br><span class="line">&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="format-1"><a href="#format-1"></a>Format</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dt = datetime.strptime(&#x27;2015-05-14 23:39:00.00 +2000&#x27;, &#x27;%Y-%m-%d %H:%M:%S.%f %z&#x27;)</span><br><span class="line">&gt;&gt;&gt; dt.strftime(&quot;%A, %dth of %B &#x27;%y, %I:%M%p %Z&quot;)</span><br><span class="line">&quot;Thursday, 14th of May &#x27;15, 11:39PM UTC+02:00&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'%Z'</code> only accepts <code>'UTC/GMT'</code> and
local timezone's code. <code>'%z'</code> also accepts
<code>'±HH:MM'</code>.</strong></li>
<li><strong>For abbreviated weekday and month use <code>'%a'</code> and
<code>'%b'</code>.</strong></li>
</ul>
<h3 id="arithmetics"><a href="#arithmetics"></a>Arithmetics</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DT&gt;   = &lt;D/DT&gt;  ± &lt;TD&gt;                   # Returned datetime can fall into missing hour.</span><br><span class="line">&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                # Returns the difference, ignoring time jumps.</span><br><span class="line">&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  # Ignores time jumps if they share tzinfo object.</span><br><span class="line">&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; ±% &lt;TD&gt;.</span><br><span class="line">&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   # How many weeks/years there are in TD. Also //.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="arguments"><a href="#arguments"></a>Arguments</h2>
<h3 id="inside-function-call"><a href="#inside-function-call"></a>Inside
Function Call</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">func(&lt;positional_args&gt;)                           # func(0, 0)</span><br><span class="line">func(&lt;keyword_args&gt;)                              # func(x=0, y=0)</span><br><span class="line">func(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inside-function-definition"><a
href="#inside-function-definition"></a>Inside Function Definition</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...</span><br><span class="line">def func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...</span><br><span class="line">def func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Default values are evaluated when function is first
encountered in the scope.</strong></li>
<li><strong>Any mutation of a mutable default value will persist between
invocations.</strong></li>
</ul>
<h2 id="splat-operator"><a href="#splat-operator"></a>Splat
Operator</h2>
<h3 id="inside-function-call-1"><a
href="#inside-function-call-1"></a>Inside Function Call</h3>
<p><strong>Splat expands a collection into positional arguments, while
splatty-splat expands a dictionary into keyword arguments.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">args   = (1, 2)</span><br><span class="line">kwargs = &#123;&#x27;x&#x27;: 3, &#x27;y&#x27;: 4, &#x27;z&#x27;: 5&#125;</span><br><span class="line">func(*args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="is-the-same-as"><a href="#is-the-same-as"></a>Is the same
as:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">func(1, 2, x=3, y=4, z=5)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inside-function-definition-1"><a
href="#inside-function-definition-1"></a>Inside Function Definition</h3>
<p><strong>Splat combines zero or more positional arguments into a
tuple, while splatty-splat combines zero or more keyword arguments into
a dictionary.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def add(*a):</span><br><span class="line">    return sum(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add(1, 2, 3)</span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="legal-argument-combinations"><a
href="#legal-argument-combinations"></a>Legal argument
combinations:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args): ...               # f(1, 2, 3)</span><br><span class="line">def f(x, *args): ...            # f(1, 2, 3)</span><br><span class="line">def f(*args, z): ...            # f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(**kwargs): ...            # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*, x, y, z): ...          # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line">def f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="other-uses"><a href="#other-uses"></a>Other Uses</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;set&gt;   = &#123;*&lt;coll.&gt; [, ...]&#125;    # Or: set(&lt;collection&gt;) [| ...]</span><br><span class="line">&lt;dict&gt;  = &#123;**&lt;dict&gt; [, ...]&#125;    # Or: dict(**&lt;dict&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="inline"><a href="#inline"></a>Inline</h2>
<h3 id="lambda"><a href="#lambda"></a>Lambda</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.</span><br><span class="line">&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="comprehensions"><a
href="#comprehensions"></a>Comprehensions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]</span><br><span class="line">&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;set&gt;  = &#123;i+5 for i in range(10)&#125;                   # Or: &#123;5, 6, ..., 14&#125;</span><br><span class="line">&lt;dict&gt; = &#123;i: i*2 for i in range(10)&#125;                # Or: &#123;0: 0, 1: 2, ..., 9: 18&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [l+r for l in &#x27;abc&#x27; for r in &#x27;abc&#x27;]</span><br><span class="line">[&#x27;aa&#x27;, &#x27;ab&#x27;, &#x27;ac&#x27;, ..., &#x27;cc&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="map-filter-reduce"><a href="#map-filter-reduce"></a>Map, Filter,
Reduce</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])</span><br><span class="line">&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Reduce must be imported from the functools
module.</strong></li>
</ul>
<h3 id="any-all"><a href="#any-all"></a>Any, All</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(el)` True for any element.</span><br><span class="line">&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="conditional-expression"><a
href="#conditional-expression"></a>Conditional Expression</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [a if a else &#x27;zero&#x27; for a in (0, 1, 2, 3)]</span><br><span class="line">[&#x27;zero&#x27;, 1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="named-tuple-enum-dataclass"><a
href="#named-tuple-enum-dataclass"></a>Named Tuple, Enum, Dataclass</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line">Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)                  # Creates a tuple&#x27;s subclass.</span><br><span class="line">point = Point(0, 0)                                 # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">Direction = Enum(&#x27;Direction&#x27;, &#x27;n e s w&#x27;)            # Creates an enum.</span><br><span class="line">direction = Direction.n                             # Returns its member.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">Player = make_dataclass(&#x27;Player&#x27;, [&#x27;loc&#x27;, &#x27;dir&#x27;])   # Creates a class.</span><br><span class="line">player = Player(point, direction)                   # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="imports"><a href="#imports"></a>Imports</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import &lt;module&gt;            # Imports a built-in or &#x27;&lt;module&gt;.py&#x27;.</span><br><span class="line">import &lt;package&gt;           # Imports a built-in or &#x27;&lt;package&gt;/__init__.py&#x27;.</span><br><span class="line">import &lt;package&gt;.&lt;module&gt;  # Imports a built-in or &#x27;&lt;package&gt;/&lt;module&gt;.py&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Package is a collection of modules, but it can also define
its own objects.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python
files with an optional init script.</strong></li>
<li><strong>Running <code>'import &lt;package&gt;'</code> does not
automatically provide access to the package's modules unless they are
explicitly imported in its init script.</strong></li>
</ul>
<h2 id="closure"><a href="#closure"></a>Closure</h2>
<p><strong>We have/get a closure in Python when:</strong></p>
<ul>
<li><strong>A nested function references a value of its enclosing
function and then</strong></li>
<li><strong>the enclosing function returns the nested
function.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_multiplier(a):</span><br><span class="line">    def out(b):</span><br><span class="line">        return a * b</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>If multiple nested functions within enclosing function
reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use
<code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</strong></li>
</ul>
<h3 id="partial"><a href="#partial"></a>Partial</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import operator as op</span><br><span class="line">&gt;&gt;&gt; multiply_by_3 = partial(op.mul, 3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Partial is also useful in cases when function needs to be
passed as an argument because it enables us to set its arguments
beforehand.</strong></li>
<li><strong>A few examples being:
<code>'defaultdict(&lt;function&gt;)'</code>,
<code>'iter(&lt;function&gt;, to_exclusive)'</code> and dataclass's
<code>'field(default_factory=&lt;function&gt;)'</code>.</strong></li>
</ul>
<h3 id="non-local"><a href="#non-local"></a>Non-Local</h3>
<p><strong>If variable is being assigned to anywhere in the scope, it is
regarded as a local variable, unless it is declared as a 'global' or a
'nonlocal'.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_counter():</span><br><span class="line">    i = 0</span><br><span class="line">    def out():</span><br><span class="line">        nonlocal i</span><br><span class="line">        i += 1</span><br><span class="line">        return i</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = get_counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="decorator"><a href="#decorator"></a>Decorator</h2>
<ul>
<li><strong>A decorator takes a function, adds some functionality and
returns it.</strong></li>
<li><strong>It can be any <a href="#callable">callable</a>, but is
usually implemented as a function that returns a <a
href="#closure">closure</a>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@decorator_name</span><br><span class="line">def function_that_gets_passed_to_decorator():</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="debugger-example"><a href="#debugger-example"></a>Debugger
Example</h3>
<p><strong>Decorator that prints function's name every time the function
is called.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def out(*args, **kwargs):</span><br><span class="line">        print(func.__name__)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the
passed function (func) to the function it is wrapping
(out).</strong></li>
<li><strong>Without it <code>'add.__name__'</code> would return
<code>'out'</code>.</strong></li>
</ul>
<h3 id="lru-cache"><a href="#lru-cache"></a>LRU Cache</h3>
<p><strong>Decorator that caches function's return values. All
function's arguments must be hashable.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import lru_cache</span><br><span class="line"></span><br><span class="line">@lru_cache(maxsize=None)</span><br><span class="line">def fib(n):</span><br><span class="line">    return n if n &lt; 2 else fib(n-2) + fib(n-1)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Default size of the cache is 128 values. Passing
<code>'maxsize=None'</code> makes it unbounded.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 1000 by
default. To increase it use
<code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</strong></li>
</ul>
<h3 id="parametrized-decorator"><a
href="#parametrized-decorator"></a>Parametrized Decorator</h3>
<p><strong>A decorator that accepts arguments and returns a normal
decorator that accepts a function.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(print_result=False):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def out(*args, **kwargs):</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            print(func.__name__, result if print_result else &#x27;&#x27;)</span><br><span class="line">            return result</span><br><span class="line">        return out</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@debug(print_result=True)</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Using only <code>'@debug'</code> to decorate the add()
function would not work here, because debug would then receive the add()
function as a 'print_result' argument. Decorators can however manually
check if the argument they received is a function and act
accordingly.</strong></li>
</ul>
<h2 id="class"><a href="#class"></a>Class</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        class_name = self.__class__.__name__</span><br><span class="line">        return f&#x27;&#123;class_name&#125;(&#123;self.a!r&#125;)&#x27;</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.a)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def get_class_name(cls):</span><br><span class="line">        return cls.__name__</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Return value of repr() should be unambiguous and of str()
readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for
str().</strong></li>
<li><strong>Methods decorated with <code>'@staticmethod'</code> do not
receive 'self' nor 'cls' as their first arg.</strong></li>
</ul>
<h4 id="str-use-cases"><a href="#str-use-cases"></a>Str() use
cases:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el&gt;)</span><br><span class="line">f&#x27;&#123;&lt;el&gt;&#125;&#x27;</span><br><span class="line">logging.warning(&lt;el&gt;)</span><br><span class="line">csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])</span><br><span class="line">raise Exception(&lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="repr-use-cases"><a href="#repr-use-cases"></a>Repr() use
cases:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print/str/repr([&lt;el&gt;])</span><br><span class="line">f&#x27;&#123;&lt;el&gt;!r&#125;&#x27;</span><br><span class="line">Z = dataclasses.make_dataclass(&#x27;Z&#x27;, [&#x27;a&#x27;]); print/str/repr(Z(&lt;el&gt;))</span><br><span class="line">&gt;&gt;&gt; &lt;el&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="constructor-overloading"><a
href="#constructor-overloading"></a>Constructor Overloading</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a=None):</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inheritance"><a href="#inheritance"></a>Inheritance</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age  = age</span><br><span class="line"></span><br><span class="line">class Employee(Person):</span><br><span class="line">    def __init__(self, name, age, staff_num):</span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self.staff_num = staff_num</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="multiple-inheritance"><a
href="#multiple-inheritance"></a>Multiple Inheritance</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class A: pass</span><br><span class="line">class B: pass</span><br><span class="line">class C(A, B): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>MRO determines the order in which parent classes are
traversed when searching for a method or an attribute:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; C.mro()</span><br><span class="line">[&lt;class &#x27;C&#x27;&gt;, &lt;class &#x27;A&#x27;&gt;, &lt;class &#x27;B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="property"><a href="#property"></a>Property</h3>
<p><strong>Pythonic way of implementing getters and
setters.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        return &#x27; &#x27;.join(self._name)</span><br><span class="line"></span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self, value):</span><br><span class="line">        self._name = value.split()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person = Person()</span><br><span class="line">&gt;&gt;&gt; person.name = &#x27;\t Guido  van Rossum \n&#x27;</span><br><span class="line">&gt;&gt;&gt; person.name</span><br><span class="line">&#x27;Guido van Rossum&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="dataclass"><a href="#dataclass"></a>Dataclass</h3>
<p><strong>Decorator that automatically generates init(), repr() and
eq() special methods.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import dataclass, field</span><br><span class="line"></span><br><span class="line">@dataclass(order=False, frozen=False)</span><br><span class="line">class &lt;class_name&gt;:</span><br><span class="line">    &lt;attr_name_1&gt;: &lt;type&gt;</span><br><span class="line">    &lt;attr_name_2&gt;: &lt;type&gt; = &lt;default_value&gt;</span><br><span class="line">    &lt;attr_name_3&gt;: list/dict/set = field(default_factory=list/dict/set)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Objects can be made sortable with <code>'order=True'</code>
and immutable with <code>'frozen=True'</code>.</strong></li>
<li><strong>For object to be hashable, all attributes must be hashable
and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because
<code>'&lt;attr_name&gt;: list = []'</code> would make a list that is
shared among all instances. Its 'default_factory' argument can be any <a
href="#callable">callable</a>.</strong></li>
<li><strong>For attributes of arbitrary type use
<code>'typing.Any'</code>.</strong></li>
</ul>
<h4 id="inline-1"><a href="#inline-1"></a>Inline:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_attribute_names&gt;)</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_tuples&gt;)</span><br><span class="line">&lt;tuple&gt; = (&#x27;&lt;attr_name&gt;&#x27;, &lt;type&gt; [, &lt;default_value&gt;])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="rest-of-type-annotations-cpython-interpreter-ignores-them-all"><a
href="#rest-of-type-annotations-cpython-interpreter-ignores-them-all"></a>Rest
of type annotations (CPython interpreter ignores them all):</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...</span><br><span class="line">&lt;var_name&gt;: typing.List/Set/Iterable/Sequence/Optional[&lt;type&gt;]</span><br><span class="line">&lt;var_name&gt;: typing.Dict/Tuple/Union[&lt;type&gt;, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="slots"><a href="#slots"></a>Slots</h3>
<p><strong>Mechanism that restricts objects to attributes listed in
'slots' and significantly reduces their memory footprint.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyClassWithSlots:</span><br><span class="line">    __slots__ = [&#x27;a&#x27;]</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="copy"><a href="#copy"></a>Copy</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from copy import copy, deepcopy</span><br><span class="line">&lt;object&gt; = copy(&lt;object&gt;)</span><br><span class="line">&lt;object&gt; = deepcopy(&lt;object&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="duck-types"><a href="#duck-types"></a>Duck Types</h2>
<p><strong>A duck type is an implicit type that prescribes a set of
special methods. Any object that has those methods defined is considered
a member of that duck type.</strong></p>
<h3 id="comparable"><a href="#comparable"></a>Comparable</h3>
<ul>
<li><strong>If eq() method is not overridden, it returns
<code>'id(self) == id(other)'</code>, which is the same as
<code>'self is other'</code>.</strong></li>
<li><strong>That means all objects compare not equal by
default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it
returns NotImplemented, in which case the right object is consulted.
False is returned if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq()
defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyComparable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="hashable"><a href="#hashable"></a>Hashable</h3>
<ul>
<li><strong>Hashable object needs both hash() and eq() methods and its
hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash
value, meaning default hash() that returns <code>'id(self)'</code> will
not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if
you only implement eq().</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyHashable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self._a = a</span><br><span class="line">    @property</span><br><span class="line">    def a(self):</span><br><span class="line">        return self._a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sortable"><a href="#sortable"></a>Sortable</h3>
<ul>
<li><strong>With 'total_ordering' decorator, you only need to provide
eq() and one of lt(), gt(), le() or ge() special methods and the rest
will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while
max() only requires gt(). However, it is best to define them all so that
confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their
values get compared in order until a pair of unequal values is found.
The comparison of this two values is then returned. The shorter sequence
is considered smaller in case of all values being equal.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import total_ordering</span><br><span class="line"></span><br><span class="line">@total_ordering</span><br><span class="line">class MySortable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a &lt; other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="iterator-1"><a href="#iterator-1"></a>Iterator</h3>
<ul>
<li><strong>Any object that has methods next() and iter() is an
iterator.</strong></li>
<li><strong>Next() should return next item or raise
StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="python-has-many-different-iterator-objects"><a
href="#python-has-many-different-iterator-objects"></a>Python has many
different iterator objects:</h4>
<ul>
<li><strong>Sequence iterators returned by the <a
href="#iterator">iter()</a> function, such as list_iterator and
set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a>
module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator
functions</a> and <a href="#comprehensions">generator
expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a>
function, etc.</strong></li>
</ul>
<h3 id="callable"><a href="#callable"></a>Callable</h3>
<ul>
<li><strong>All functions and classes have a call() method, hence are
callable.</strong></li>
<li><strong>When this cheatsheet uses <code>'&lt;function&gt;'</code> as
an argument, it actually means
<code>'&lt;callable&gt;'</code>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __call__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="context-manager"><a href="#context-manager"></a>Context
Manager</h3>
<ul>
<li><strong>Enter() should lock the resources and optionally return an
object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed
to the exit() method.</strong></li>
<li><strong>If it wishes to suppress the exception it must return a true
value.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyOpen:</span><br><span class="line">    def __init__(self, filename):</span><br><span class="line">        self.filename = filename</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        self.file = open(self.filename)</span><br><span class="line">        return self.file</span><br><span class="line">    def __exit__(self, exc_type, exception, traceback):</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; with open(&#x27;test.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="line">...     file.write(&#x27;Hello World!&#x27;)</span><br><span class="line">&gt;&gt;&gt; with MyOpen(&#x27;test.txt&#x27;) as file:</span><br><span class="line">...     print(file.read())</span><br><span class="line">Hello World!</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="iterable-duck-types"><a href="#iterable-duck-types"></a>Iterable
Duck Types</h2>
<h3 id="iterable"><a href="#iterable"></a>Iterable</h3>
<ul>
<li><strong>Only required method is iter(). It should return an iterator
of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter()
defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyIterable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; obj = MyIterable([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; [el for el in obj]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; 1 in obj</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="collection"><a href="#collection"></a>Collection</h3>
<ul>
<li><strong>Only required methods are iter() and len(). Len() should
return the number of items.</strong></li>
<li><strong>This cheatsheet actually means
<code>'&lt;iterable&gt;'</code> when it uses
<code>'&lt;collection&gt;'</code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds
scarier and more vague than 'collection'. The only drawback of this
decision is that a reader could think a certain function doesn't accept
iterators when it does, since iterators are the only built-in objects
that are iterable but are not collections.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyCollection:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sequence"><a href="#sequence"></a>Sequence</h3>
<ul>
<li><strong>Only required methods are len() and getitem().</strong></li>
<li><strong>Getitem() should return an item at the passed index or raise
IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that
has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has len()
and getitem() defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MySequence:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line">    def __reversed__(self):</span><br><span class="line">        return reversed(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="discrepancies-between-glossary-definitions-and-abstract-base-classes"><a
href="#discrepancies-between-glossary-definitions-and-abstract-base-classes"></a>Discrepancies
between glossary definitions and abstract base classes:</h4>
<ul>
<li><strong>Glossary defines iterable as any object with iter() or
getitem() and sequence as any object with getitem() and len(). It does
not define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() checks
whether object/class has method iter(), while ABC Collection checks for
iter(), contains() and len().</strong></li>
</ul>
<h3 id="abc-sequence"><a href="#abc-sequence"></a>ABC Sequence</h3>
<ul>
<li><strong>It's a richer interface than the basic
sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(),
index() and count().</strong></li>
<li><strong>Unlike <code>'abc.Iterable'</code> and
<code>'abc.Collection'</code>, it is not a duck type. That is why
<code>'issubclass(MySequence, abc.Sequence)'</code> would return False
even if MySequence had all the methods defined. It however recognizes
list, tuple, range, str, bytes, bytearray, memoryview and deque, because
they are registered as Sequence's virtual subclasses.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import abc</span><br><span class="line"></span><br><span class="line">class MyAbcSequence(abc.Sequence):</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="table-of-required-and-automatically-available-special-methods"><a
href="#table-of-required-and-automatically-available-special-methods"></a>Table
of required and automatically available special methods:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">|            |  Iterable  | Collection |  Sequence  | abc.Sequence |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |</span><br><span class="line">| contains() |    Yes     |    Yes     |    Yes     |     Yes      |</span><br><span class="line">| len()      |            |    REQ     |    REQ     |     REQ      |</span><br><span class="line">| getitem()  |            |            |    REQ     |     REQ      |</span><br><span class="line">| reversed() |            |            |    Yes     |     Yes      |</span><br><span class="line">| index()    |            |            |            |     Yes      |</span><br><span class="line">| count()    |            |            |            |     Yes      |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Other ABCs that generate missing methods are:
MutableSequence, Set, MutableSet, Mapping and
MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in
<code>'&lt;abc&gt;.__abstractmethods__'</code>.</strong></li>
</ul>
<h2 id="enum"><a href="#enum"></a>Enum</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum, auto</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;enum_name&gt;(Enum):</span><br><span class="line">    &lt;member_name_1&gt; = &lt;value_1&gt;</span><br><span class="line">    &lt;member_name_2&gt; = &lt;value_2_a&gt;, &lt;value_2_b&gt;</span><br><span class="line">    &lt;member_name_3&gt; = auto()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>If there are no numeric values before auto(), it returns
1.</strong></li>
<li><strong>Otherwise it returns an increment of the last numeric
value.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;                 # Returns a member.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;[&#x27;&lt;member_name&gt;&#x27;]              # Returns a member or raises KeyError.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                      # Returns a member or raises ValueError.</span><br><span class="line">&lt;str&gt;    = &lt;member&gt;.name                        # Returns member&#x27;s name.</span><br><span class="line">&lt;obj&gt;    = &lt;member&gt;.value                       # Returns member&#x27;s value.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">list_of_members = list(&lt;enum&gt;)</span><br><span class="line">member_names    = [a.name for a in &lt;enum&gt;]</span><br><span class="line">member_values   = [a.value for a in &lt;enum&gt;]</span><br><span class="line">random_member   = random.choice(list(&lt;enum&gt;))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_next_member(member):</span><br><span class="line">    members = list(member.__class__)</span><br><span class="line">    index   = (members.index(member) + 1) % len(members)</span><br><span class="line">    return members[index]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inline-2"><a href="#inline-2"></a>Inline</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#x27;fork knife spoon&#x27;)</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, [&#x27;fork&#x27;, &#x27;knife&#x27;, &#x27;spoon&#x27;])</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#123;&#x27;fork&#x27;: 1, &#x27;knife&#x27;: 2, &#x27;spoon&#x27;: 3&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="user-defined-functions-cannot-be-values-so-they-must-be-wrapped"><a
href="#user-defined-functions-cannot-be-values-so-they-must-be-wrapped"></a>User-defined
functions cannot be values, so they must be wrapped:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">LogicOp = Enum(&#x27;LogicOp&#x27;, &#123;&#x27;AND&#x27;: partial(lambda l, r: l and r),</span><br><span class="line">                           &#x27;OR&#x27;:  partial(lambda l, r: l or r)&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Member names are in all caps because trying to access a
member that is named after a reserved keyword raises
SyntaxError.</strong></li>
</ul>
<h2 id="exceptions"><a href="#exceptions"></a>Exceptions</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="complex-example"><a href="#complex-example"></a>Complex
Example</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code_1&gt;</span><br><span class="line">except &lt;exception_a&gt;:</span><br><span class="line">    &lt;code_2_a&gt;</span><br><span class="line">except &lt;exception_b&gt;:</span><br><span class="line">    &lt;code_2_b&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;code_2_c&gt;</span><br><span class="line">finally:</span><br><span class="line">    &lt;code_3&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Code inside the <code>'else'</code> block will only be
executed if <code>'try'</code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code>'finally'</code> block will always be
executed (unless a signal is received).</strong></li>
</ul>
<h3 id="catching-exceptions"><a href="#catching-exceptions"></a>Catching
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt;: ...</span><br><span class="line">except &lt;exception&gt; as &lt;name&gt;: ...</span><br><span class="line">except (&lt;exception&gt;, [...]): ...</span><br><span class="line">except (&lt;exception&gt;, [...]) as &lt;name&gt;: ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code>'traceback.print_exc()'</code> to print the error
message to stderr.</strong></li>
<li><strong>Use <code>'print(&lt;name&gt;)'</code> to print just the
cause of the exception (its arguments).</strong></li>
<li><strong>Use <code>'logging.exception(&lt;message&gt;)'</code> to log
the exception.</strong></li>
</ul>
<h3 id="raising-exceptions"><a href="#raising-exceptions"></a>Raising
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">raise &lt;exception&gt;</span><br><span class="line">raise &lt;exception&gt;()</span><br><span class="line">raise &lt;exception&gt;(&lt;el&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="re-raising-caught-exception"><a
href="#re-raising-caught-exception"></a>Re-raising caught
exception:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt; as &lt;name&gt;:</span><br><span class="line">    ...</span><br><span class="line">    raise</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="exception-object"><a href="#exception-object"></a>Exception
Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">arguments = &lt;name&gt;.args</span><br><span class="line">exc_type  = &lt;name&gt;.__class__</span><br><span class="line">filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename</span><br><span class="line">func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name</span><br><span class="line">line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)</span><br><span class="line">traceback = &#x27;&#x27;.join(traceback.format_tb(&lt;name&gt;.__traceback__))</span><br><span class="line">error_msg = &#x27;&#x27;.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="built-in-exceptions"><a href="#built-in-exceptions"></a>Built-in
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit                   # Raised by the sys.exit() function.</span><br><span class="line"> +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).</span><br><span class="line"> +-- Exception                    # User-defined exceptions should be derived from this class.</span><br><span class="line">      +-- ArithmeticError         # Base class for arithmetic errors.</span><br><span class="line">      |    +-- ZeroDivisionError  # Raised when dividing by zero.</span><br><span class="line">      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.</span><br><span class="line">      +-- AttributeError          # Raised when an attribute is missing.</span><br><span class="line">      +-- EOFError                # Raised by input() when it hits end-of-file condition.</span><br><span class="line">      +-- LookupError             # Raised when a look-up on a collection fails.</span><br><span class="line">      |    +-- IndexError         # Raised when a sequence index is out of range.</span><br><span class="line">      |    +-- KeyError           # Raised when a dictionary key or set element is missing.</span><br><span class="line">      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.</span><br><span class="line">      +-- NameError               # Raised when an object is missing.</span><br><span class="line">      +-- OSError                 # Errors such as “file not found” or “disk full” (see Open).</span><br><span class="line">      |    +-- FileNotFoundError  # When a file or directory is requested but doesn&#x27;t exist.</span><br><span class="line">      +-- RuntimeError            # Raised by errors that don&#x27;t fall into other categories.</span><br><span class="line">      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.</span><br><span class="line">      +-- StopIteration           # Raised by next() when run on an empty iterator.</span><br><span class="line">      +-- TypeError               # Raised when an argument is of wrong type.</span><br><span class="line">      +-- ValueError              # When an argument is of right type but inappropriate value.</span><br><span class="line">           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="collections-and-their-exceptions"><a
href="#collections-and-their-exceptions"></a>Collections and their
exceptions:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">|           |    List    |    Set     |    Dict    |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">| getitem() | IndexError |            |  KeyError  |</span><br><span class="line">| pop()     | IndexError |  KeyError  |  KeyError  |</span><br><span class="line">| remove()  | ValueError |  KeyError  |            |</span><br><span class="line">| index()   | ValueError |            |            |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="useful-built-in-exceptions"><a
href="#useful-built-in-exceptions"></a>Useful built-in exceptions:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">raise TypeError(&#x27;Argument is of wrong type!&#x27;)</span><br><span class="line">raise ValueError(&#x27;Argument is of right type but inappropriate value!&#x27;)</span><br><span class="line">raise RuntimeError(&#x27;None of above!&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="user-defined-exceptions"><a
href="#user-defined-exceptions"></a>User-defined Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyError(Exception): pass</span><br><span class="line">class MyInputError(MyError): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="exit"><a href="#exit"></a>Exit</h2>
<p><strong>Exits the interpreter by raising SystemExit
exception.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.exit()                        # Exits with exit code 0 (success).</span><br><span class="line">sys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.</span><br><span class="line">sys.exit(&lt;int&gt;)                   # Exits with passed exit code.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="print"><a href="#print"></a>Print</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el_1&gt;, ..., sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'file=sys.stderr'</code> for messages about
errors.</strong></li>
<li><strong>Use <code>'flush=True'</code> to forcibly flush the
stream.</strong></li>
</ul>
<h3 id="pretty-print"><a href="#pretty-print"></a>Pretty Print</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pprint import pprint</span><br><span class="line">pprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Levels deeper than 'depth' get replaced by
'...'.</strong></li>
</ul>
<h2 id="input"><a href="#input"></a>Input</h2>
<p><strong>Reads a line from user input or pipe if present.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = input(prompt=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before
reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input
stream gets exhausted.</strong></li>
</ul>
<h2 id="command-line-arguments"><a
href="#command-line-arguments"></a>Command Line Arguments</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">scripts_path = sys.argv[0]</span><br><span class="line">arguments    = sys.argv[1:]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="argument-parser"><a href="#argument-parser"></a>Argument
Parser</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from argparse import ArgumentParser, FileType</span><br><span class="line">p = ArgumentParser(description=&lt;str&gt;)</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, action=&#x27;store_true&#x27;)  # Flag.</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, type=&lt;type&gt;)          # Option.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=1)                    # First argument.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;+&#x27;)                  # Remaining arguments.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;*&#x27;)                  # Optional arguments.</span><br><span class="line">args  = p.parse_args()                                            # Exits on error.</span><br><span class="line">value = args.&lt;name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'help=&lt;str&gt;'</code> to set argument
description that will be displayed in help message.</strong></li>
<li><strong>Use <code>'default=&lt;el&gt;'</code> to set the default
value.</strong></li>
<li><strong>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files.
Accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<h2 id="open"><a href="#open"></a>Open</h2>
<p><strong>Opens the file and returns a corresponding file
object.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt; = open(&lt;path&gt;, mode=&#x27;r&#x27;, encoding=None, newline=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'encoding=None'</code> means that the default encoding
is used, which is platform dependent. Best practice is to use
<code>'encoding="utf-8"'</code> whenever possible.</strong></li>
<li><strong><code>'newline=None'</code> means all different end of line
combinations are converted to '' on read, while on write all ''
characters are converted to system's default line
separator.</strong></li>
<li><strong><code>'newline=""'</code> means no conversions take place,
but input is still broken into chunks by readline() and readlines() on
every '', ' and ''.</strong></li>
</ul>
<h3 id="modes"><a href="#modes"></a>Modes</h3>
<ul>
<li><strong><code>'r'</code> - Read (default).</strong></li>
<li><strong><code>'w'</code> - Write (truncate).</strong></li>
<li><strong><code>'x'</code> - Write or fail if the file already
exists.</strong></li>
<li><strong><code>'a'</code> - Append.</strong></li>
<li><strong><code>'w+'</code> - Read and write (truncate).</strong></li>
<li><strong><code>'r+'</code> - Read and write from the
start.</strong></li>
<li><strong><code>'a+'</code> - Read and write from the
end.</strong></li>
<li><strong><code>'t'</code> - Text mode (default).</strong></li>
<li><strong><code>'b'</code> - Binary mode (<code>'br'</code>,
<code>'bw'</code>, <code>'bx'</code>, …).</strong></li>
</ul>
<h3 id="exceptions-1"><a href="#exceptions-1"></a>Exceptions</h3>
<ul>
<li><strong><code>'FileNotFoundError'</code> can be raised when reading
with <code>'r'</code> or <code>'r+'</code>.</strong></li>
<li><strong><code>'FileExistsError'</code> can be raised when writing
with <code>'x'</code>.</strong></li>
<li><strong><code>'IsADirectoryError'</code> and
<code>'PermissionError'</code> can be raised by any.</strong></li>
<li><strong><code>'OSError'</code> is the parent class of all listed
exceptions.</strong></li>
</ul>
<h3 id="file-object"><a href="#file-object"></a>File Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.seek(0)                      # Moves to the start of the file.</span><br><span class="line">&lt;file&gt;.seek(offset)                 # Moves &#x27;offset&#x27; chars/bytes from the start.</span><br><span class="line">&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.</span><br><span class="line">&lt;bin_file&gt;.seek(±offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads &#x27;size&#x27; chars/bytes or until EOF.</span><br><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.</span><br><span class="line">&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.</span><br><span class="line">&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.</span><br><span class="line">&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.</span><br><span class="line">&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even
writelines().</strong></li>
</ul>
<h3 id="read-text-from-file"><a href="#read-text-from-file"></a>Read
Text from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-text-to-file"><a href="#write-text-to-file"></a>Write Text
to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_file(filename, text):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        file.write(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="paths"><a href="#paths"></a>Paths</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from os import getcwd, path, listdir, scandir</span><br><span class="line">from glob import glob</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = getcwd()                   # Returns the current working directory.</span><br><span class="line">&lt;str&gt;  = path.join(&lt;path&gt;, ...)     # Joins two or more pathname components.</span><br><span class="line">&lt;str&gt;  = path.abspath(&lt;path&gt;)       # Returns absolute path.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = path.basename(&lt;path&gt;)      # Returns final component of the path.</span><br><span class="line">&lt;str&gt;  = path.dirname(&lt;path&gt;)       # Returns path without the final component.</span><br><span class="line">&lt;tup.&gt; = path.splitext(&lt;path&gt;)      # Splits on last period of the final component.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = listdir(path=&#x27;.&#x27;)          # Returns filenames located at path.</span><br><span class="line">&lt;list&gt; = glob(&#x27;&lt;pattern&gt;&#x27;)          # Returns paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = path.exists(&lt;path&gt;)        # Or: &lt;Path&gt;.exists()</span><br><span class="line">&lt;bool&gt; = path.isfile(&lt;path&gt;)        # Or: &lt;DirEntry/Path&gt;.is_file()</span><br><span class="line">&lt;bool&gt; = path.isdir(&lt;path&gt;)         # Or: &lt;DirEntry/Path&gt;.is_dir()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;stat&gt; = os.stat(&lt;path&gt;)            # Or: &lt;DirEntry/Path&gt;.stat()</span><br><span class="line">&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/…  # Modification time, size in bytes, …</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="direntry"><a href="#direntry"></a>DirEntry</h3>
<p><strong>Unlike listdir(), scandir() returns DirEntry objects that
cache isfile, isdir and on Windows also stat information, thus
significantly increasing the performance of code that requires
it.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = scandir(path=&#x27;.&#x27;)          # Returns DirEntry objects located at path.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns whole path as a string.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="path-object"><a href="#path-object"></a>Path Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.</span><br><span class="line">&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path(&#x27;.&#x27;).</span><br><span class="line">&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().</span><br><span class="line">&lt;Path&gt; = Path.home()                # Returns user&#x27;s home directory (absolute).</span><br><span class="line">&lt;Path&gt; = Path(__file__).resolve()   # Returns script&#x27;s path if cwd wasn&#x27;t changed.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component&#x27;s extension.</span><br><span class="line">&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.</span><br><span class="line">&lt;iter&gt; = &lt;Path&gt;.glob(&#x27;&lt;pattern&gt;&#x27;)   # Returns Paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="os-commands"><a href="#os-commands"></a>OS Commands</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import os, shutil, subprocess</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.chdir(&lt;path&gt;)                    # Changes the current working directory.</span><br><span class="line">os.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Permissions are in octal.</span><br><span class="line">os.makedirs(&lt;path&gt;, mode=0o777)     # Creates all path&#x27;s dirs. Also: `exist_ok=False`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">shutil.copy(from, to)               # Copies the file. &#x27;to&#x27; can exist or be a dir.</span><br><span class="line">shutil.copytree(from, to)           # Copies the directory. &#x27;to&#x27; must not exist.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.rename(from, to)                 # Renames/moves the file or directory.</span><br><span class="line">os.replace(from, to)                # Same, but overwrites &#x27;to&#x27; if it exists.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.remove(&lt;path&gt;)                   # Deletes the file.</span><br><span class="line">os.rmdir(&lt;path&gt;)                    # Deletes the empty directory.</span><br><span class="line">shutil.rmtree(&lt;path&gt;)               # Deletes the directory.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry
objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError
or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<h3 id="shell-commands"><a href="#shell-commands"></a>Shell
Commands</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pipe&gt; = os.popen(&#x27;&lt;command&gt;&#x27;)      # Executes command in sh/cmd. Returns its stdout pipe.</span><br><span class="line">&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)       # Reads &#x27;size&#x27; chars or until EOF. Also readline/s().</span><br><span class="line">&lt;int&gt;  = &lt;pipe&gt;.close()             # Closes the pipe. Returns None on success.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="sends-1-1-to-the-basic-calculator-and-captures-its-output"><a
href="#sends-1--1-to-the-basic-calculator-and-captures-its-output"></a>Sends
'1 + 1' to the basic calculator and captures its output:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; subprocess.run(&#x27;bc&#x27;, input=&#x27;1 + 1\n&#x27;, capture_output=True, text=True)</span><br><span class="line">CompletedProcess(args=&#x27;bc&#x27;, returncode=0, stdout=&#x27;2\n&#x27;, stderr=&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="sends-test.in-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-test.out"><a
href="#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout"></a>Sends
test.in to the basic calculator running in standard mode and saves its
output to test.out:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from shlex import split</span><br><span class="line">&gt;&gt;&gt; os.popen(&#x27;echo 1 + 1 &gt; test.in&#x27;)</span><br><span class="line">&gt;&gt;&gt; subprocess.run(split(&#x27;bc -s&#x27;), stdin=open(&#x27;test.in&#x27;), stdout=open(&#x27;test.out&#x27;, &#x27;w&#x27;))</span><br><span class="line">CompletedProcess(args=[&#x27;bc&#x27;, &#x27;-s&#x27;], returncode=0)</span><br><span class="line">&gt;&gt;&gt; open(&#x27;test.out&#x27;).read()</span><br><span class="line">&#x27;2\n&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="json"><a href="#json"></a>JSON</h2>
<p><strong>Text file format for storing collections of strings and
numbers.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">&lt;str&gt;    = json.dumps(&lt;object&gt;)     # Converts object to JSON string.</span><br><span class="line">&lt;object&gt; = json.loads(&lt;str&gt;)        # Converts JSON string to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-object-from-json-file"><a
href="#read-object-from-json-file"></a>Read Object from JSON File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_json_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return json.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-object-to-json-file"><a
href="#write-object-to-json-file"></a>Write Object to JSON File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_json_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        json.dump(an_object, file, ensure_ascii=False, indent=2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pickle"><a href="#pickle"></a>Pickle</h2>
<p><strong>Binary file format for storing Python objects.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   # Converts object to bytes object.</span><br><span class="line">&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    # Converts bytes object to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-object-from-file"><a href="#read-object-from-file"></a>Read
Object from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_pickle_file(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return pickle.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-object-to-file"><a href="#write-object-to-file"></a>Write
Object to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_pickle_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        pickle.dump(an_object, file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="csv"><a href="#csv"></a>CSV</h2>
<p><strong>Text file format for storing spreadsheets.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read"><a href="#read"></a>Read</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.</span><br><span class="line">&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or newlines embedded inside quoted fields will not be
interpreted correctly!</strong></li>
<li><strong>To print the spreadsheet to the console use <a
href="#table">Tabulate</a> library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a
href="#dataframe-plot-encode-decode">Pandas</a> library.</strong></li>
</ul>
<h3 id="write"><a href="#write"></a>Write</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.</span><br><span class="line">&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or ' will be added in front of every '' on platforms that use
'' line endings!</strong></li>
</ul>
<h3 id="parameters"><a href="#parameters"></a>Parameters</h3>
<ul>
<li><strong><code>'dialect'</code> - Master parameter that sets the
default values. String or a Dialect object.</strong></li>
<li><strong><code>'delimiter'</code> - A one-character string used to
separate fields.</strong></li>
<li><strong><code>'quotechar'</code> - Character for quoting fields that
contain special characters.</strong></li>
<li><strong><code>'doublequote'</code> - Whether quotechars inside
fields are/get doubled or escaped.</strong></li>
<li><strong><code>'skipinitialspace'</code> - Is space character at the
start of the field stripped by the reader.</strong></li>
<li><strong><code>'lineterminator'</code> - How writer terminates rows.
Reader is hardcoded to '', ', ''.</strong></li>
<li><strong><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but
numbers which are read as floats, 3: None.</strong></li>
<li><strong><code>'escapechar'</code> - Character for escaping
quotechars if doublequote is False.</strong></li>
</ul>
<h3 id="dialects"><a href="#dialects"></a>Dialects</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">|                  |     excel    |   excel-tab  |     unix     |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">| delimiter        |       &#x27;,&#x27;    |      &#x27;\t&#x27;    |       &#x27;,&#x27;    |</span><br><span class="line">| quotechar        |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |</span><br><span class="line">| doublequote      |      True    |      True    |      True    |</span><br><span class="line">| skipinitialspace |     False    |     False    |     False    |</span><br><span class="line">| lineterminator   |    &#x27;\r\n&#x27;    |    &#x27;\r\n&#x27;    |      &#x27;\n&#x27;    |</span><br><span class="line">| quoting          |         0    |         0    |         1    |</span><br><span class="line">| escapechar       |      None    |      None    |      None    |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-rows-from-csv-file"><a
href="#read-rows-from-csv-file"></a>Read Rows from CSV File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_csv_file(filename, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        return list(csv.reader(file, dialect))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-rows-to-csv-file"><a
href="#write-rows-to-csv-file"></a>Write Rows to CSV File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_csv_file(filename, rows, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        writer = csv.writer(file, dialect)</span><br><span class="line">        writer.writerows(rows)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="sqlite"><a href="#sqlite"></a>SQLite</h2>
<p><strong>A server-less database engine that stores each database into
a separate file.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Opens existing or new file. Also &#x27;:memory:&#x27;.</span><br><span class="line">&lt;conn&gt;.close()                                  # Closes the connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-1"><a href="#read-1"></a>Read</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)            # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).</span><br><span class="line">&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-1"><a href="#write-1"></a>Write</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                       # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.</span><br><span class="line">&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or"><a href="#or"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),</span><br><span class="line">    &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                   # depending on whether any exception occurred.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="placeholders"><a href="#placeholders"></a>Placeholders</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;list/tuple&gt;)         # Replaces &#x27;?&#x27;s in query with values.</span><br><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;dict/namedtuple&gt;)    # Replaces &#x27;:&lt;key&gt;&#x27;s with values.</span><br><span class="line">&lt;conn&gt;.executemany(&#x27;&lt;query&gt;&#x27;, &lt;coll_of_above&gt;)  # Runs execute() multiple times.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None,
bool, datetime.date or datetime.datetime.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a
href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<h3 id="example"><a href="#example"></a>Example</h3>
<p><strong>Values are not actually saved in this example because
<code>'conn.commit()'</code> is omitted!</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; conn = sqlite3.connect(&#x27;test.db&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;INSERT INTO person VALUES (NULL, ?, ?)&#x27;, (&#x27;Jean-Luc&#x27;, 187)).lastrowid</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;SELECT * FROM person&#x27;).fetchall()</span><br><span class="line">[(1, &#x27;Jean-Luc&#x27;, 187)]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sqlalchemy"><a href="#sqlalchemy"></a>SqlAlchemy</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install sqlalchemy</span><br><span class="line">from sqlalchemy import create_engine, text</span><br><span class="line">&lt;engine&gt; = create_engine(&#x27;&lt;url&gt;&#x27;).connect()     # Url: &#x27;dialect://user:password@host/dbname&#x27;.</span><br><span class="line">&lt;conn&gt;   = &lt;engine&gt;.connect()                   # Creates a connection. Also &lt;conn&gt;.close().</span><br><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(text(&#x27;&lt;query&gt;&#x27;), …)   # Replaces &#x27;:&lt;key&gt;&#x27;s with keyword arguments.</span><br><span class="line">with &lt;conn&gt;.begin(): ...                        # Exits the block with commit or rollback.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| Dialects   | pip3 install | import    | Dependencies                      |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| mysql      | mysqlclient  | MySQLdb   | www.pypi.org/project/mysqlclient  |</span><br><span class="line">| postgresql | psycopg2     | psycopg2  | www.psycopg.org/docs/install.html |</span><br><span class="line">| mssql      | pyodbc       | pyodbc    | apt install g++ unixodbc-dev      |</span><br><span class="line">| oracle     | cx_oracle    | cx_Oracle | Oracle Instant Client             |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="bytes"><a href="#bytes"></a>Bytes</h2>
<p><strong>Bytes object is an immutable sequence of single bytes.
Mutable version is called bytearray.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = b&#x27;&lt;str&gt;&#x27;                          # Only accepts ASCII characters and \x00-\xff.</span><br><span class="line">&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="encode-1"><a href="#encode-1"></a>Encode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;str&gt;, &#x27;utf-8&#x27;)             # Or: &lt;str&gt;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&lt;bytes&gt; = bytes.fromhex(&#x27;&lt;hex&gt;&#x27;)            # Hex pairs can be separated by whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="decode-1"><a href="#decode-1"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.</span><br><span class="line">&lt;str&gt;   = str(&lt;bytes&gt;, &#x27;utf-8&#x27;)             # Or: &lt;bytes&gt;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-bytes-from-file"><a href="#read-bytes-from-file"></a>Read
Bytes from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_bytes(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return file.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-bytes-to-file"><a href="#write-bytes-to-file"></a>Write
Bytes to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_bytes(filename, bytes_obj):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(bytes_obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="struct"><a href="#struct"></a>Struct</h2>
<ul>
<li><strong>Module that performs conversions between a sequence of
numbers and a bytes object.</strong></li>
<li><strong>System’s type sizes, byte order, and alignment rules are
used by default.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from struct import pack, unpack</span><br><span class="line">&lt;bytes&gt; = pack(&#x27;&lt;format&gt;&#x27;, &lt;el_1&gt; [, ...])  # Packages arguments into bytes object.</span><br><span class="line">&lt;tuple&gt; = unpack(&#x27;&lt;format&gt;&#x27;, &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pack(&#x27;&gt;hhl&#x27;, 1, 2, 3)</span><br><span class="line">b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;</span><br><span class="line">&gt;&gt;&gt; unpack(&#x27;&gt;hhl&#x27;, b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="format-2"><a href="#format-2"></a>Format</h3>
<h4
id="for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"><a
href="#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"></a>For
standard type sizes and manual alignment (padding) start format string
with:</h4>
<ul>
<li><strong><code>'='</code> - System's byte order (usually
little-endian).</strong></li>
<li><strong><code>'&lt;'</code> - Little-endian.</strong></li>
<li><strong><code>'&gt;'</code> - Big-endian (also
<code>'!'</code>).</strong></li>
</ul>
<h4
id="besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"><a
href="#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"></a>Besides
numbers, pack() and unpack() also support bytes objects as part of the
sequence:</h4>
<ul>
<li><strong><code>'c'</code> - A bytes object with a single element. For
pad byte use <code>'x'</code>.</strong></li>
<li><strong><code>'&lt;n&gt;s'</code> - A bytes object with n
elements.</strong></li>
</ul>
<h4
id="integer-types.-use-a-capital-letter-for-unsigned-type.-minimum-and-standard-sizes-are-in-brackets"><a
href="#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets"></a>Integer
types. Use a capital letter for unsigned type. Minimum and standard
sizes are in brackets:</h4>
<ul>
<li><strong><code>'b'</code> - char (1/1)</strong></li>
<li><strong><code>'h'</code> - short (2/2)</strong></li>
<li><strong><code>'i'</code> - int (2/4)</strong></li>
<li><strong><code>'l'</code> - long (4/4)</strong></li>
<li><strong><code>'q'</code> - long long (8/8)</strong></li>
</ul>
<h4 id="floating-point-types"><a
href="#floating-point-types"></a>Floating point types:</h4>
<ul>
<li><strong><code>'f'</code> - float (4/4)</strong></li>
<li><strong><code>'d'</code> - double (8/8)</strong></li>
</ul>
<h2 id="array"><a href="#array"></a>Array</h2>
<p><strong>List that can only hold numbers of a predefined type.
Available types and their minimum sizes in bytes are listed above. Sizes
and byte order are always determined by the system.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from array import array</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;collection&gt;)    # Array from collection of numbers.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;bytes&gt;)         # Array from bytes object.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;array&gt;)         # Treats array as a sequence of numbers.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()</span><br><span class="line">&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="memory-view"><a href="#memory-view"></a>Memory View</h2>
<ul>
<li><strong>A sequence object that points to the memory of another
object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive
bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with
slicing.</strong></li>
<li><strong>Casting only works between char and other types and uses
system's sizes.</strong></li>
<li><strong>Byte order is always determined by the system.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.</span><br><span class="line">&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;.cast(&#x27;&lt;typecode&gt;&#x27;)           # Casts memoryview to the new format.</span><br><span class="line">&lt;mview&gt;.release()                              # Releases the object&#x27;s memory buffer.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="decode-2"><a href="#decode-2"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;mview&gt;)         # Treats mview as a sequence of numbers.</span><br><span class="line">&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.</span><br><span class="line">&lt;str&gt;   = str(&lt;mview&gt;, &#x27;utf-8&#x27;)                # Treats mview as a bytes object.</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, …)           # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="deque"><a href="#deque"></a>Deque</h2>
<p><strong>A thread-safe list with efficient appends and pops from
either side. Pronounced "deck".</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line">&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.</span><br><span class="line">&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.</span><br><span class="line">&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.</span><br><span class="line">&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="threading"><a href="#threading"></a>Threading</h2>
<ul>
<li><strong>CPython interpreter can only run a single thread at a
time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster
execution, unless at least one of the threads contains an I/O
operation.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread, RLock, Semaphore, Event, Barrier</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="thread"><a href="#thread"></a>Thread</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.</span><br><span class="line">&lt;Thread&gt;.start()                               # Starts the thread.</span><br><span class="line">&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.</span><br><span class="line">&lt;Thread&gt;.join()                                # Waits for the thread to finish.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword
arguments to the function.</strong></li>
<li><strong>Use <code>'daemon=True'</code>, or the program will not be
able to exit while the thread is alive.</strong></li>
</ul>
<h3 id="lock"><a href="#lock"></a>Lock</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.</span><br><span class="line">&lt;lock&gt;.acquire()                               # Waits for the lock to be available.</span><br><span class="line">&lt;lock&gt;.release()                               # Makes the lock available again.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or-1"><a href="#or-1"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;lock&gt;:                                   # Enters the block by calling acquire(),</span><br><span class="line">    ...                                        # and exits it with release().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="semaphore-event-barrier"><a
href="#semaphore-event-barrier"></a>Semaphore, Event, Barrier</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by &#x27;value&#x27; threads.</span><br><span class="line">&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.</span><br><span class="line">&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it&#x27;s called n_times.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="thread-pool-executor"><a href="#thread-pool-executor"></a>Thread
Pool Executor</h3>
<ul>
<li><strong>Object that manages thread execution.</strong></li>
<li><strong>An object with the same interface called ProcessPoolExecutor
provides true parallelism by running a separate interpreter in each
process. All arguments must be <a
href="#pickle">pickable</a>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: …`</span><br><span class="line">&lt;Exec&gt;.shutdown(wait=True)                     # Blocks until all threads finish executing.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # A multithreaded and non-lazy map().</span><br><span class="line">&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Starts a thread and returns its Future object.</span><br><span class="line">&lt;bool&gt; = &lt;Futr&gt;.done()                         # Checks if the thread has finished executing.</span><br><span class="line">&lt;obj&gt;  = &lt;Futr&gt;.result()                       # Waits for thread to finish and returns result.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="queue"><a href="#queue"></a>Queue</h3>
<p><strong>A thread-safe FIFO queue. For LIFO queue use
LifoQueue.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from queue import Queue</span><br><span class="line">&lt;Queue&gt; = Queue(maxsize=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.</span><br><span class="line">&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="operator"><a href="#operator"></a>Operator</h2>
<p><strong>Module of functions that provide the functionality of
operators.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import operator as op</span><br><span class="line">&lt;el&gt;      = op.add/sub/mul/truediv/floordiv/mod(&lt;el&gt;, &lt;el&gt;)  # +, -, *, /, //, %</span><br><span class="line">&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)            # &amp;, |, ^</span><br><span class="line">&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)     # ==, !=, &lt;, &lt;=, &gt;, &gt;=</span><br><span class="line">&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt;)     # [index/key], .name, .name()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">elementwise_sum  = map(op.add, list_a, list_b)</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))</span><br><span class="line">product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)</span><br><span class="line">union_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)</span><br><span class="line">first_element    = op.methodcaller(&#x27;pop&#x27;, 0)(&lt;list&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Binary operators require objects to have and(), or(), xor()
and invert() special methods, unlike logical operators that work on all
types of objects.</strong></li>
<li><strong>Also:
<code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and
<code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</strong></li>
</ul>
<h2 id="introspection"><a href="#introspection"></a>Introspection</h2>
<p><strong>Inspecting code at runtime.</strong></p>
<h3 id="variables"><a href="#variables"></a>Variables</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir()                             # Names of local variables (incl. functions).</span><br><span class="line">&lt;dict&gt; = vars()                            # Dict of local variables. Also locals().</span><br><span class="line">&lt;dict&gt; = globals()                         # Dict of global variables.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="attributes-1"><a href="#attributes-1"></a>Attributes</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object&#x27;s attributes (incl. methods).</span><br><span class="line">&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.</span><br><span class="line">&lt;bool&gt; = hasattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Checks if getattr() raises an AttributeError.</span><br><span class="line">value  = getattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Raises AttributeError if attribute is missing.</span><br><span class="line">setattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;, value)    # Only works on objects with &#x27;__dict__&#x27; attribute.</span><br><span class="line">delattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="parameters-1"><a href="#parameters-1"></a>Parameters</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function&#x27;s Signature object.</span><br><span class="line">&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.</span><br><span class="line">&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.</span><br><span class="line">&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or &lt;Param&gt;.empty.</span><br><span class="line">&lt;type&gt; = &lt;Param&gt;.annotation                # Type or &lt;Param&gt;.empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="metaprogramming"><a
href="#metaprogramming"></a>Metaprogramming</h2>
<p><strong>Code that generates code.</strong></p>
<h3 id="type-1"><a href="#type-1"></a>Type</h3>
<p><strong>Type is the root class. If only passed an object it returns
its type (class). Otherwise it creates a new class.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class&gt; = type(&#x27;&lt;class_name&gt;&#x27;, &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Z = type(&#x27;Z&#x27;, (), &#123;&#x27;a&#x27;: &#x27;abcde&#x27;, &#x27;b&#x27;: 12345&#125;)</span><br><span class="line">&gt;&gt;&gt; z = Z()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="meta-class"><a href="#meta-class"></a>Meta Class</h3>
<p><strong>A class that creates classes.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def my_meta_class(name, parents, attrs):</span><br><span class="line">    attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">    return type(name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or-2"><a href="#or-2"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyMetaClass(type):</span><br><span class="line">    def __new__(cls, name, parents, attrs):</span><br><span class="line">        attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">        return type.__new__(cls, name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>New() is a class method that gets called before init(). If
it returns an instance of its class, then that instance gets passed to
init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the
first one that specifies the desired type of the returned instance
(MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually
from a new() method of a child class
(</strong><code>def __new__(cls): return super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that
my_meta_class() returns a class of type type, while MyMetaClass()
returns a class of type MyMetaClass.</strong></li>
</ul>
<h3 id="metaclass-attribute"><a
href="#metaclass-attribute"></a>Metaclass Attribute</h3>
<p><strong>Right before a class is created it checks if it has the
'metaclass' attribute defined. If not, it recursively checks if any of
his parents has it defined and eventually comes to type().</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass(metaclass=MyMetaClass):</span><br><span class="line">    b = 12345</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; MyClass.a, MyClass.b</span><br><span class="line">(&#x27;abcde&#x27;, 12345)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="type-diagram"><a href="#type-diagram"></a>Type Diagram</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">type(MyClass) == MyMetaClass         # MyClass is an instance of MyMetaClass.</span><br><span class="line">type(MyMetaClass) == type            # MyMetaClass is an instance of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass --&gt; MyMetaClass |</span><br><span class="line">|             |     v       |</span><br><span class="line">|    object -----&gt; type &lt;+  |</span><br><span class="line">|             |     ^ +--+  |</span><br><span class="line">|     str ----------+       |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inheritance-diagram"><a
href="#inheritance-diagram"></a>Inheritance Diagram</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">MyClass.__base__ == object           # MyClass is a subclass of object.</span><br><span class="line">MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass   | MyMetaClass |</span><br><span class="line">|      v      |     v       |</span><br><span class="line">|    object &lt;----- type     |</span><br><span class="line">|      ^      |             |</span><br><span class="line">|     str     |             |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="eval"><a href="#eval"></a>Eval</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from ast import literal_eval</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;[1, 2, 3]&#x27;)</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;1 + 2&#x27;)</span><br><span class="line">ValueError: malformed node or string</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="coroutines"><a href="#coroutines"></a>Coroutines</h2>
<ul>
<li><strong>Coroutines have a lot in common with threads, but unlike
threads, they only give up control when they call another coroutine and
they don’t use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code>'async'</code> and
its call with <code>'await'</code>.</strong></li>
<li><strong><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main
entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() start multiple
coroutines at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a
href="#queue">Queue</a>, <a href="#semaphore-event-barrier">Event</a>,
<a href="#lock">Lock</a> and <a
href="#semaphore-event-barrier">Semaphore</a> classes.</strong></li>
</ul>
<h4
id="runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"><a
href="#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"></a>Runs
a terminal game where you control an asterisk that must avoid
numbers:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import asyncio, collections, curses, curses.textpad, enum, random</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)         # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                  # Direction</span><br><span class="line">W, H = 15, 7                                   # Width, Height</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    curses.curs_set(0)                         # Makes cursor invisible.</span><br><span class="line">    screen.nodelay(True)                       # Makes getch() non-blocking.</span><br><span class="line">    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.</span><br><span class="line"></span><br><span class="line">async def main_coroutine(screen):</span><br><span class="line">    moves = asyncio.Queue()</span><br><span class="line">    state = &#123;&#x27;*&#x27;: P(0, 0), **&#123;id_: P(W//2, H//2) for id_ in range(10)&#125;&#125;</span><br><span class="line">    ai    = [random_controller(id_, moves) for id_ in range(10)]</span><br><span class="line">    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]</span><br><span class="line">    tasks = [asyncio.create_task(cor) for cor in ai + mvc]</span><br><span class="line">    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)</span><br><span class="line"></span><br><span class="line">async def random_controller(id_, moves):</span><br><span class="line">    while True:</span><br><span class="line">        d = random.choice(list(D))</span><br><span class="line">        moves.put_nowait((id_, d))</span><br><span class="line">        await asyncio.sleep(random.triangular(0.01, 0.65))</span><br><span class="line"></span><br><span class="line">async def human_controller(screen, moves):</span><br><span class="line">    while True:</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        key_mappings = &#123;258: D.s, 259: D.n, 260: D.w, 261: D.e&#125;</span><br><span class="line">        if ch in key_mappings:</span><br><span class="line">            moves.put_nowait((&#x27;*&#x27;, key_mappings[ch]))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">async def model(moves, state):</span><br><span class="line">    while state[&#x27;*&#x27;] not in (state[id_] for id_ in range(10)):</span><br><span class="line">        id_, d = await moves.get()</span><br><span class="line">        x, y   = state[id_]</span><br><span class="line">        deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)</span><br><span class="line"></span><br><span class="line">async def view(state, screen):</span><br><span class="line">    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)</span><br><span class="line">    while True:</span><br><span class="line">        screen.erase()</span><br><span class="line">        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)</span><br><span class="line">        for id_, p in state.items():</span><br><span class="line">            screen.addstr(offset.y + (p.y - state[&#x27;*&#x27;].y + H//2) % H,</span><br><span class="line">                          offset.x + (p.x - state[&#x27;*&#x27;].x + W//2) % W, str(id_))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h1 id="libraries"><a href="#libraries"></a>Libraries</h1>
<h2 id="progress-bar"><a href="#progress-bar"></a>Progress Bar</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tqdm</span><br><span class="line">&gt;&gt;&gt; from tqdm import tqdm</span><br><span class="line">&gt;&gt;&gt; from time import sleep</span><br><span class="line">&gt;&gt;&gt; for el in tqdm([1, 2, 3], desc=&#x27;Processing&#x27;):</span><br><span class="line">...     sleep(1)</span><br><span class="line">Processing: 100%|████████████████████| 3/3 [00:03&lt;00:00,  1.00s/it]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="plot"><a href="#plot"></a>Plot</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.plot(&lt;x_data&gt;, &lt;y_data&gt; [, label=&lt;str&gt;])   # Or: plt.plot(&lt;y_data&gt;)</span><br><span class="line">plt.legend()                                   # Adds a legend.</span><br><span class="line">plt.savefig(&lt;path&gt;)                            # Saves the figure.</span><br><span class="line">plt.show()                                     # Displays the figure.</span><br><span class="line">plt.clf()                                      # Clears the figure.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="table"><a href="#table"></a>Table</h2>
<h4 id="prints-a-csv-file-as-an-ascii-table"><a
href="#prints-a-csv-file-as-an-ascii-table"></a>Prints a CSV file as an
ASCII table:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tabulate</span><br><span class="line">import csv, tabulate</span><br><span class="line">with open(&#x27;test.csv&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">    rows   = csv.reader(file)</span><br><span class="line">    header = next(rows)</span><br><span class="line">    table  = tabulate.tabulate(rows, header)</span><br><span class="line">print(table)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="curses"><a href="#curses"></a>Curses</h2>
<h4 id="runs-a-basic-file-explorer-in-the-terminal"><a
href="#runs-a-basic-file-explorer-in-the-terminal"></a>Runs a basic file
explorer in the terminal:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import curses, curses.ascii, os</span><br><span class="line">from curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    ch, first, selected, paths = 0, 0, 0, os.listdir()</span><br><span class="line">    while ch != curses.ascii.ESC:</span><br><span class="line">        height, _ = screen.getmaxyx()</span><br><span class="line">        screen.erase()</span><br><span class="line">        for y, filename in enumerate(paths[first : first+height]):</span><br><span class="line">            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        selected += (ch == KEY_DOWN) - (ch == KEY_UP)</span><br><span class="line">        selected = max(0, min(len(paths)-1, selected))</span><br><span class="line">        first += (first &lt;= selected - height) - (first &gt; selected)</span><br><span class="line">        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:</span><br><span class="line">            new_dir = &#x27;..&#x27; if ch == KEY_LEFT else paths[selected]</span><br><span class="line">            if os.path.isdir(new_dir):</span><br><span class="line">                os.chdir(new_dir)</span><br><span class="line">                first, selected, paths = 0, 0, os.listdir()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="logging"><a href="#logging"></a>Logging</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install loguru</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">logger.add(&#x27;debug_&#123;time&#125;.log&#x27;, colorize=True)  # Connects a log file.</span><br><span class="line">logger.add(&#x27;error_&#123;time&#125;.log&#x27;, level=&#x27;ERROR&#x27;)  # Another file for errors or higher.</span><br><span class="line">logger.&lt;level&gt;(&#x27;A logging message.&#x27;)           # Logs to file/s and prints to stderr.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Levels: <code>'debug'</code>, <code>'info'</code>,
<code>'success'</code>, <code>'warning'</code>, <code>'error'</code>,
<code>'critical'</code>.</strong></li>
</ul>
<h3 id="exceptions-2"><a href="#exceptions-2"></a>Exceptions</h3>
<p><strong>Exception description, stack trace and values of variables
are appended automatically.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    ...</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    logger.exception(&#x27;An error happened.&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rotation"><a href="#rotation"></a>Rotation</h3>
<p><strong>Argument that sets a condition when a new log file is
created.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">rotation=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;datetime.time&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max file size in
bytes.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;time&gt;'</code> - Time of day.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Any of above as a string:
<code>'100 MB'</code>, <code>'1 month'</code>,
<code>'monday at 12:00'</code>, ...</strong></li>
</ul>
<h3 id="retention"><a href="#retention"></a>Retention</h3>
<p><strong>Sets a condition which old log files get
deleted.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">retention=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max number of
files.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Max age as a string:
<code>'1 week, 3 days'</code>, <code>'2 months'</code>,
...</strong></li>
</ul>
<h2 id="scraping"><a href="#scraping"></a>Scraping</h2>
<h4
id="scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"><a
href="#scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"></a>Scrapes
Python's URL, version number and logo from its Wikipedia page:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests beautifulsoup4</span><br><span class="line">import requests, bs4, os, sys</span><br><span class="line"></span><br><span class="line">WIKI_URL = &#x27;https://en.wikipedia.org/wiki/Python_(programming_language)&#x27;</span><br><span class="line">try:</span><br><span class="line">    html       = requests.get(WIKI_URL).text</span><br><span class="line">    document   = bs4.BeautifulSoup(html, &#x27;html.parser&#x27;)</span><br><span class="line">    table      = document.find(&#x27;table&#x27;, class_=&#x27;infobox vevent&#x27;)</span><br><span class="line">    python_url = table.find(&#x27;th&#x27;, text=&#x27;Website&#x27;).next_sibling.a[&#x27;href&#x27;]</span><br><span class="line">    version    = table.find(&#x27;th&#x27;, text=&#x27;Stable release&#x27;).next_sibling.strings.__next__()</span><br><span class="line">    logo_url   = table.find(&#x27;img&#x27;)[&#x27;src&#x27;]</span><br><span class="line">    logo       = requests.get(f&#x27;https:&#123;logo_url&#125;&#x27;).content</span><br><span class="line">    filename   = os.path.basename(logo_url)</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(logo)</span><br><span class="line">    print(f&#x27;&#123;python_url&#125;, &#123;version&#125;, file://&#123;os.path.abspath(filename)&#125;&#x27;)</span><br><span class="line">except requests.exceptions.ConnectionError:</span><br><span class="line">    print(&quot;You&#x27;ve got problems with connection.&quot;, file=sys.stderr)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="web"><a href="#web"></a>Web</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install bottle</span><br><span class="line">from bottle import run, route, static_file, template, post, request, response</span><br><span class="line">import json</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="run"><a href="#run"></a>Run</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">run(host=&#x27;localhost&#x27;, port=8080)        # Runs locally.</span><br><span class="line">run(host=&#x27;0.0.0.0&#x27;, port=80)            # Runs globally.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="static-request"><a href="#static-request"></a>Static
Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/img/&lt;filename&gt;&#x27;)</span><br><span class="line">def send_file(filename):</span><br><span class="line">    return static_file(filename, root=&#x27;img_dir/&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="dynamic-request"><a href="#dynamic-request"></a>Dynamic
Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/&lt;sport&gt;&#x27;)</span><br><span class="line">def send_html(sport):</span><br><span class="line">    return template(&#x27;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&#x27;, title=sport)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rest-request"><a href="#rest-request"></a>REST Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@post(&#x27;/&lt;sport&gt;/odds&#x27;)</span><br><span class="line">def send_json(sport):</span><br><span class="line">    team = request.forms.get(&#x27;team&#x27;)</span><br><span class="line">    response.headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27;</span><br><span class="line">    response.headers[&#x27;Cache-Control&#x27;] = &#x27;no-cache&#x27;</span><br><span class="line">    return json.dumps(&#123;&#x27;team&#x27;: team, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="test"><a href="#test"></a>Test:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests</span><br><span class="line">&gt;&gt;&gt; import threading, requests</span><br><span class="line">&gt;&gt;&gt; threading.Thread(target=run, daemon=True).start()</span><br><span class="line">&gt;&gt;&gt; url = &#x27;http://localhost:8080/football/odds&#x27;</span><br><span class="line">&gt;&gt;&gt; request_data = &#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; response = requests.post(url, data=request_data)</span><br><span class="line">&gt;&gt;&gt; response.json()</span><br><span class="line">&#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="profiling"><a href="#profiling"></a>Profiling</h2>
<h3 id="stopwatch"><a href="#stopwatch"></a>Stopwatch</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from time import perf_counter</span><br><span class="line">start_time = perf_counter()</span><br><span class="line">...</span><br><span class="line">duration_in_seconds = perf_counter() - start_time</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="timing-a-snippet"><a href="#timing-a-snippet"></a>Timing a
Snippet</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from timeit import timeit</span><br><span class="line">&gt;&gt;&gt; timeit(&quot;&#x27;&#x27;.join(str(i) for i in range(100))&quot;,</span><br><span class="line">...        number=10000, globals=globals(), setup=&#x27;pass&#x27;)</span><br><span class="line">0.34986</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="profiling-by-line"><a href="#profiling-by-line"></a>Profiling by
Line</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install line_profiler memory_profiler</span><br><span class="line">@profile</span><br><span class="line">def main():</span><br><span class="line">    a = [*range(10000)]</span><br><span class="line">    b = &#123;*range(10000)&#125;</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ kernprof -lv test.py</span><br><span class="line">Line #   Hits     Time  Per Hit   % Time  Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1                                    @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3      1    955.0    955.0     43.7      a = [*range(10000)]</span><br><span class="line">     4      1   1231.0   1231.0     56.3      b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m memory_profiler test.py</span><br><span class="line">Line #         Mem usage      Increment   Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1        37.668 MiB     37.668 MiB   @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3        38.012 MiB      0.344 MiB       a = [*range(10000)]</span><br><span class="line">     4        38.477 MiB      0.465 MiB       b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="call-graph"><a href="#call-graph"></a>Call Graph</h3>
<h4
id="generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"><a
href="#generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"></a>Generates
a PNG image of the call graph with highlighted bottlenecks:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pycallgraph2; apt/brew install graphviz</span><br><span class="line">import pycallgraph2 as cg, datetime</span><br><span class="line"></span><br><span class="line">filename = f&#x27;profile-&#123;datetime.datetime.now():%Y%m%d_%H%M%S&#125;.png&#x27;</span><br><span class="line">drawer = cg.output.GraphvizOutput(output_file=filename)</span><br><span class="line">with cg.PyCallGraph(drawer):</span><br><span class="line">    &lt;code_to_be_profiled&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="numpy"><a href="#numpy"></a>NumPy</h2>
<p><strong>Array manipulation mini-language. It can run up to one
hundred times faster than the equivalent Python code. An even faster
alternative that runs on a GPU is called CuPy.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install numpy</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                # Returns 1d/2d NumPy array.</span><br><span class="line">&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        # Also np.full(&lt;shape&gt;, &lt;el&gt;).</span><br><span class="line">&lt;array&gt; = np.arange(from_inc, to_exc, ±step)            # Also np.linspace(start, stop, num).</span><br><span class="line">&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.flatten()                             # Collapses array into one dimension.</span><br><span class="line">&lt;view&gt;  = &lt;array&gt;.squeeze()                             # Removes dimensions of length one.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = &lt;array&gt;.sum/min/mean/var/std(axis)            # Passed dimension gets aggregated.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.argmin(axis)                          # Returns indexes of smallest elements.</span><br><span class="line">&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has
shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of the dimension that gets aggregated.
Leftmost dimension has index 0. Summing the RGB image along axis 2 will
return a greyscale image with shape (50, 100).</strong></li>
<li><strong>Passing a tuple of axes will chain the operations like this:
<code>'&lt;array&gt;.&lt;method&gt;(axis_1, keepdims=True).&lt;method&gt;(axis_2).squeeze()'</code>.</strong></li>
</ul>
<h3 id="indexing"><a href="#indexing"></a>Indexing</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_is, row_is, column_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_is, row_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_is, :, column_is]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el&gt;                       # &lt;3d_array&gt; &gt;&lt;== &lt;1d_array&gt;</span><br><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;2d_bools&gt;]                     # &lt;3d_array&gt;[&lt;2d_bools&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>All examples also allow assignments.</strong></li>
</ul>
<h3 id="broadcasting"><a href="#broadcasting"></a>Broadcasting</h3>
<p><strong>Broadcasting is a set of rules by which NumPy functions
operate on arrays of different sizes and/or dimensions.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"><a
href="#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"></a>1.
If array shapes differ in length, left-pad the shorter shape with
ones:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"><a
href="#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"></a>2.
If any dimensions differ in size, expand the ones that have size 1 by
duplicating their elements:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.6,  0.6,  0.6],</span><br><span class="line">         [0.8,  0.8,  0.8]]</span><br><span class="line"></span><br><span class="line">right = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.1,  0.6,  0.8],</span><br><span class="line">         [0.1,  0.6,  0.8]]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="if-neither-non-matching-dimension-has-size-1-raise-an-error."><a
href="#3-if-neither-non-matching-dimension-has-size-1-raise-an-error"></a>3.
If neither non-matching dimension has size 1, raise an error.</h4>
<h3 id="example-1"><a href="#example-1"></a>Example</h3>
<h4
id="for-each-point-returns-index-of-its-nearest-point-0.1-0.6-0.8-1-2-1"><a
href="#for-each-point-returns-index-of-its-nearest-point-01-06-08--1-2-1"></a>For
each point returns index of its nearest point
(<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])</span><br><span class="line"> [ 0.1,  0.6,  0.8]</span><br><span class="line">&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)</span><br><span class="line">[[ 0.1],</span><br><span class="line"> [ 0.6],</span><br><span class="line"> [ 0.8]]</span><br><span class="line">&gt;&gt;&gt; distances = wrapped_points - points</span><br><span class="line">[[ 0. , -0.5, -0.7],</span><br><span class="line"> [ 0.5,  0. , -0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; distances = np.abs(distances)</span><br><span class="line">[[ 0. ,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  0. ,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; i = np.arange(3)</span><br><span class="line">[0, 1, 2]</span><br><span class="line">&gt;&gt;&gt; distances[i, i] = np.inf</span><br><span class="line">[[ inf,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  inf,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  inf]]</span><br><span class="line">&gt;&gt;&gt; distances.argmin(1)</span><br><span class="line">[1, 2, 1]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="image"><a href="#image"></a>Image</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pillow</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Image&gt; = Image.new(&#x27;&lt;mode&gt;&#x27;, (width, height))   # Also: `color=&lt;int/tuple/str&gt;`.</span><br><span class="line">&lt;Image&gt; = Image.open(&lt;path&gt;)                     # Identifies format based on file contents.</span><br><span class="line">&lt;Image&gt; = &lt;Image&gt;.convert(&#x27;&lt;mode&gt;&#x27;)              # Converts image to the new mode.</span><br><span class="line">&lt;Image&gt;.save(&lt;path&gt;)                             # Selects format based on the path extension.</span><br><span class="line">&lt;Image&gt;.show()                                   # Opens image in default preview app.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))           # Returns a pixel.</span><br><span class="line">&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)            # Writes a pixel to the image.</span><br><span class="line">&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()                # Returns a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)              # Writes a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                   # Writes passed image to the image.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_array&gt; = np.array(&lt;Image_L&gt;)                 # Creates NumPy array from greyscale image.</span><br><span class="line">&lt;3d_array&gt; = np.array(&lt;Image_RGB/A&gt;)             # Creates NumPy array from color image.</span><br><span class="line">&lt;Image&gt;    = Image.fromarray(np.uint8(&lt;array&gt;))  # Use &lt;array&gt;.clip(0, 255) to clip the values.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="modes-1"><a href="#modes-1"></a>Modes</h3>
<ul>
<li><strong><code>'1'</code> - 1-bit pixels, black and white, stored
with one pixel per byte.</strong></li>
<li><strong><code>'L'</code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code>'RGB'</code> - 3x8-bit pixels, true
color.</strong></li>
<li><strong><code>'RGBA'</code> - 4x8-bit pixels, true color with
transparency mask.</strong></li>
<li><strong><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value
color space.</strong></li>
</ul>
<h3 id="examples"><a href="#examples"></a>Examples</h3>
<h4 id="creates-a-png-image-of-a-rainbow-gradient"><a
href="#creates-a-png-image-of-a-rainbow-gradient"></a>Creates a PNG
image of a rainbow gradient:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">WIDTH, HEIGHT = 100, 100</span><br><span class="line">n_pixels = WIDTH * HEIGHT</span><br><span class="line">hues = (255 * i/n_pixels for i in range(n_pixels))</span><br><span class="line">img = Image.new(&#x27;HSV&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">img.putdata([(int(h), 255, 255) for h in hues])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="adds-noise-to-a-png-image"><a
href="#adds-noise-to-a-png-image"></a>Adds noise to a PNG image:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import randint</span><br><span class="line">add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))</span><br><span class="line">img = Image.open(&#x27;test.png&#x27;).convert(&#x27;HSV&#x27;)</span><br><span class="line">img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="image-draw"><a href="#image-draw"></a>Image Draw</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from PIL import ImageDraw</span><br><span class="line">&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ImageDraw&gt;.point((x, y))                        # Truncates floats into ints.</span><br><span class="line">&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))       # To get anti-aliasing use Image&#x27;s resize().</span><br><span class="line">&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)    # Always draws in clockwise direction.</span><br><span class="line">&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))          # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line">&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))       # Last point gets connected to the first.</span><br><span class="line">&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))            # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'fill=&lt;color&gt;'</code> to set the primary
color.</strong></li>
<li><strong>Use <code>'width=&lt;int&gt;'</code> to set the width of
lines or contours.</strong></li>
<li><strong>Use <code>'outline=&lt;color&gt;'</code> to set the color of
the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code>'#rrggbb[aa]'</code>
string or a color name.</strong></li>
</ul>
<h2 id="animation"><a href="#animation"></a>Animation</h2>
<h4 id="creates-a-gif-of-a-bouncing-ball"><a
href="#creates-a-gif-of-a-bouncing-ball"></a>Creates a GIF of a bouncing
ball:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install imageio</span><br><span class="line">from PIL import Image, ImageDraw</span><br><span class="line">import imageio</span><br><span class="line"></span><br><span class="line">WIDTH, HEIGHT, R = 126, 126, 10</span><br><span class="line">frames = []</span><br><span class="line">for velocity in range(1, 16):</span><br><span class="line">    y = sum(range(velocity))</span><br><span class="line">    frame = Image.new(&#x27;L&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">    draw  = ImageDraw.Draw(frame)</span><br><span class="line">    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill=&#x27;white&#x27;)</span><br><span class="line">    frames.append(frame)</span><br><span class="line">frames += reversed(frames[1:-1])</span><br><span class="line">imageio.mimsave(&#x27;test.gif&#x27;, frames, duration=0.03)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="audio"><a href="#audio"></a>Audio</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import wave</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_read&gt;  = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;rb&#x27;)        # Opens the WAV file.</span><br><span class="line">framerate    = &lt;Wave_read&gt;.getframerate()       # Number of frames per second.</span><br><span class="line">nchannels    = &lt;Wave_read&gt;.getnchannels()       # Number of samples per frame.</span><br><span class="line">sampwidth    = &lt;Wave_read&gt;.getsampwidth()       # Sample size in bytes.</span><br><span class="line">nframes      = &lt;Wave_read&gt;.getnframes()         # Number of frames.</span><br><span class="line">&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          # Immutable collection of above.</span><br><span class="line">&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  # Returns next &#x27;nframes&#x27; frames.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_write&gt; = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;wb&#x27;)        # Truncates existing file.</span><br><span class="line">&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                # 44100 for CD, 48000 for video.</span><br><span class="line">&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                # 1 for mono, 2 for stereo.</span><br><span class="line">&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                # 2 for CD quality sound.</span><br><span class="line">&lt;Wave_write&gt;.setparams(&lt;params&gt;)                # Sets all parameters.</span><br><span class="line">&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               # Appends frames to the file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting
of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to
the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when
converted to an integer, indicate the displacement of a speaker membrane
at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be
encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed
with little-endian byte order.</strong></li>
</ul>
<h3 id="sample-values"><a href="#sample-values"></a>Sample Values</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">| sampwidth |    min    | zero |    max    |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">|     1     |         0 |  128 |       255 |</span><br><span class="line">|     2     |    -32768 |    0 |     32767 |</span><br><span class="line">|     3     |  -8388608 |    0 |   8388607 |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-float-samples-from-wav-file"><a
href="#read-float-samples-from-wav-file"></a>Read Float Samples from WAV
File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_wav_file(filename):</span><br><span class="line">    def get_int(bytes_obj):</span><br><span class="line">        an_int = int.from_bytes(bytes_obj, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">        return an_int - 128 * (sampwidth == 1)</span><br><span class="line">    with wave.open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        sampwidth = file.getsampwidth()</span><br><span class="line">        frames = file.readframes(-1)</span><br><span class="line">    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))</span><br><span class="line">    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-float-samples-to-wav-file"><a
href="#write-float-samples-to-wav-file"></a>Write Float Samples to WAV
File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):</span><br><span class="line">    def get_bytes(a_float):</span><br><span class="line">        a_float = max(-1, min(1 - 2e-16, a_float))</span><br><span class="line">        a_float += sampwidth == 1</span><br><span class="line">        a_float *= pow(2, sampwidth * 8 - 1)</span><br><span class="line">        return int(a_float).to_bytes(sampwidth, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">    with wave.open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.setnchannels(nchannels)</span><br><span class="line">        file.setsampwidth(sampwidth)</span><br><span class="line">        file.setframerate(framerate)</span><br><span class="line">        file.writeframes(b&#x27;&#x27;.join(get_bytes(f) for f in float_samples))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="examples-1"><a href="#examples-1"></a>Examples</h3>
<h4 id="saves-a-440-hz-sine-wave-to-a-mono-wav-file"><a
href="#saves-a-440-hz-sine-wave-to-a-mono-wav-file"></a>Saves a 440 Hz
sine wave to a mono WAV file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from math import pi, sin</span><br><span class="line">samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="adds-noise-to-a-mono-wav-file"><a
href="#adds-noise-to-a-mono-wav-file"></a>Adds noise to a mono WAV
file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import random</span><br><span class="line">add_noise = lambda value: value + (random() - 0.5) * 0.03</span><br><span class="line">samples_f = (add_noise(f) for f in read_wav_file(&#x27;test.wav&#x27;))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="plays-a-wav-file"><a href="#plays-a-wav-file"></a>Plays a WAV
file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">from simpleaudio import play_buffer</span><br><span class="line">with wave.open(&#x27;test.wav&#x27;, &#x27;rb&#x27;) as file:</span><br><span class="line">    p = file.getparams()</span><br><span class="line">    frames = file.readframes(-1)</span><br><span class="line">    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="text-to-speech"><a href="#text-to-speech"></a>Text to
Speech</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pyttsx3</span><br><span class="line">import pyttsx3</span><br><span class="line">engine = pyttsx3.init()</span><br><span class="line">engine.say(&#x27;Sally sells seashells by the seashore.&#x27;)</span><br><span class="line">engine.runAndWait()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="synthesizer"><a href="#synthesizer"></a>Synthesizer</h2>
<h4 id="plays-popcorn-by-gershon-kingsley"><a
href="#plays-popcorn-by-gershon-kingsley"></a>Plays Popcorn by Gershon
Kingsley:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">import itertools as it, math, struct, simpleaudio</span><br><span class="line"></span><br><span class="line">F  = 44100</span><br><span class="line">P1 = &#x27;71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,&#x27;</span><br><span class="line">P2 = &#x27;71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,&#x27;</span><br><span class="line">get_pause   = lambda seconds: it.repeat(0, int(seconds * F))</span><br><span class="line">sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)</span><br><span class="line">get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))</span><br><span class="line">get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)</span><br><span class="line">parse_note  = lambda note: (get_hz(note[:2]), 1/4 if &#x27;♩&#x27; in note else 1/8)</span><br><span class="line">get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)</span><br><span class="line">samples_f   = it.chain.from_iterable(get_samples(n) for n in f&#x27;&#123;P1&#125;,&#123;P1&#125;,&#123;P2&#125;&#x27;.split(&#x27;,&#x27;))</span><br><span class="line">samples_b   = b&#x27;&#x27;.join(struct.pack(&#x27;&lt;h&#x27;, int(f * 30000)) for f in samples_f)</span><br><span class="line">simpleaudio.play_buffer(samples_b, 1, 2, F)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pygame"><a href="#pygame"></a>Pygame</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pygame</span><br><span class="line">import pygame as pg</span><br><span class="line"></span><br><span class="line">pg.init()</span><br><span class="line">screen = pg.display.set_mode((500, 500))</span><br><span class="line">rect = pg.Rect(240, 240, 20, 20)</span><br><span class="line">while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">    deltas = &#123;pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)&#125;</span><br><span class="line">    for ch, is_pressed in enumerate(pg.key.get_pressed()):</span><br><span class="line">        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect</span><br><span class="line">    screen.fill((0, 0, 0))</span><br><span class="line">    pg.draw.rect(screen, (255, 255, 255), rect)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rectangle"><a href="#rectangle"></a>Rectangle</h3>
<p><strong>Object for storing rectangular coordinates.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.</span><br><span class="line">&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/…                # Topright, bottomright, bottomleft. Same.</span><br><span class="line">&lt;Rect&gt; = &lt;Rect&gt;.move((x, y))                    # Use move_ip() to move in-place.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains a point.</span><br><span class="line">&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.</span><br><span class="line">&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="surface"><a href="#surface"></a>Surface</h3>
<p><strong>Object for representing images.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt; = pg.display.set_mode((width, height))   # Returns a display surface.</span><br><span class="line">&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span><br><span class="line">&lt;Surf&gt; = pg.image.load(&#x27;&lt;path&gt;&#x27;)                # Loads the image. Format depends on source.</span><br><span class="line">&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Returns a subsurface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt;.fill(color)                              # Tuple, Color(&#x27;#rrggbb[aa]&#x27;) or Color(&lt;name&gt;).</span><br><span class="line">&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel.</span><br><span class="line">&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.transform import scale, ...</span><br><span class="line">&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.</span><br><span class="line">&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.</span><br><span class="line">&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.draw import line, ...</span><br><span class="line">line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.</span><br><span class="line">arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also: ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)</span><br><span class="line">rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also: polygon(&lt;Surf&gt;, color, points, width=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="font"><a href="#font"></a>Font</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Font&gt; = pg.font.SysFont(&#x27;&lt;name&gt;&#x27;, size)        # Loads the system font or default if missing.</span><br><span class="line">&lt;Font&gt; = pg.font.Font(&#x27;&lt;path&gt;&#x27;, size)           # Loads the TTF file. Pass None for default.</span><br><span class="line">&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sound"><a href="#sound"></a>Sound</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sound&gt; = pg.mixer.Sound(&#x27;&lt;path&gt;&#x27;)              # Loads the WAV file.</span><br><span class="line">&lt;Sound&gt;.play()                                  # Starts playing the sound.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="basic-mario-brothers-example"><a
href="#basic-mario-brothers-example"></a>Basic Mario Brothers
Example</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)          # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                   # Direction</span><br><span class="line">W, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    def get_screen():</span><br><span class="line">        pg.init()</span><br><span class="line">        return pg.display.set_mode((W*16, H*16))</span><br><span class="line">    def get_images():</span><br><span class="line">        url = &#x27;https://gto76.github.io/python-cheatsheet/web/mario_bros.png&#x27;</span><br><span class="line">        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))</span><br><span class="line">        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]</span><br><span class="line">    def get_mario():</span><br><span class="line">        Mario = dataclasses.make_dataclass(&#x27;Mario&#x27;, &#x27;rect spd facing_left frame_cycle&#x27;.split())</span><br><span class="line">        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))</span><br><span class="line">    def get_tiles():</span><br><span class="line">        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]</span><br><span class="line">        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]</span><br><span class="line">        return [get_rect(x, y) for x, y in border + platforms]</span><br><span class="line">    def get_rect(x, y):</span><br><span class="line">        return pg.Rect(x*16, y*16, 16, 16)</span><br><span class="line">    run(get_screen(), get_images(), get_mario(), get_tiles())</span><br><span class="line"></span><br><span class="line">def run(screen, images, mario, tiles):</span><br><span class="line">    clock = pg.time.Clock()</span><br><span class="line">    while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">        keys = &#123;pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w&#125;</span><br><span class="line">        pressed = &#123;keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd&#125;</span><br><span class="line">        update_speed(mario, tiles, pressed)</span><br><span class="line">        update_position(mario, tiles)</span><br><span class="line">        draw(screen, images, mario, tiles, pressed)</span><br><span class="line">        clock.tick(28)</span><br><span class="line"></span><br><span class="line">def update_speed(mario, tiles, pressed):</span><br><span class="line">    x, y = mario.spd</span><br><span class="line">    x += 2 * ((D.e in pressed) - (D.w in pressed))</span><br><span class="line">    x -= (x &gt; 0) - (x &lt; 0)</span><br><span class="line">    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10</span><br><span class="line">    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))</span><br><span class="line"></span><br><span class="line">def update_position(mario, tiles):</span><br><span class="line">    x, y = mario.rect.topleft</span><br><span class="line">    n_steps = max(abs(s) for s in mario.spd)</span><br><span class="line">    for _ in range(n_steps):</span><br><span class="line">        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))</span><br><span class="line">        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps</span><br><span class="line">        mario.rect.topleft = x, y</span><br><span class="line"></span><br><span class="line">def get_boundaries(rect, tiles):</span><br><span class="line">    deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">    return &#123;d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1&#125;</span><br><span class="line"></span><br><span class="line">def stop_on_collision(spd, bounds):</span><br><span class="line">    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,</span><br><span class="line">             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)</span><br><span class="line"></span><br><span class="line">def draw(screen, images, mario, tiles, pressed):</span><br><span class="line">    def get_marios_image_index():</span><br><span class="line">        if D.s not in get_boundaries(mario.rect, tiles):</span><br><span class="line">            return 4</span><br><span class="line">        return next(mario.frame_cycle) if &#123;D.w, D.e&#125; &amp; pressed else 6</span><br><span class="line">    screen.fill((85, 168, 255))</span><br><span class="line">    mario.facing_left = (D.w in pressed) if &#123;D.w, D.e&#125; &amp; pressed else mario.facing_left</span><br><span class="line">    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)</span><br><span class="line">    for t in tiles:</span><br><span class="line">        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pandas"><a href="#pandas"></a>Pandas</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pandas matplotlib</span><br><span class="line">import pandas as pd</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="series"><a href="#series"></a>Series</h3>
<p><strong>Ordered dictionary with a name.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;], name=&#x27;a&#x27;)</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = Series(&lt;list&gt;)                          # Assigns RangeIndex starting at 0.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict&gt;)                          # Takes dictionary&#x27;s keys for index.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict/Series&gt;, index=&lt;list&gt;)     # Only keeps items with keys specified in index.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;key_range/range&gt;]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.i/loc[bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       # Returns a Series of bools.</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.append(&lt;Sr&gt;)                       # Or: pd.concat(&lt;coll_of_Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.</span><br><span class="line">&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="series-aggregate-transform-map"><a
href="#series--aggregate-transform-map"></a>Series — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sr = Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;s&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |      3      |    sum  3   |     s  3      |</span><br><span class="line">| sr.agg(…)       |             |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;r&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |             |      rank   |               |</span><br><span class="line">| sr.agg(…)       |     x  1    |   x     1   |    r  x  1    |</span><br><span class="line">| sr.transform(…) |     y  2    |   y     2   |       y  2    |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Last result has a hierarchical index. Use
<code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</strong></li>
</ul>
<h3 id="dataframe"><a href="#dataframe"></a>DataFrame</h3>
<p><strong>Table with labeled rows and columns.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = DataFrame(&lt;list_of_rows&gt;)            # Rows can be either lists, dicts or series.</span><br><span class="line">&lt;DF&gt;    = DataFrame(&lt;dict_of_columns&gt;)         # Columns can be either lists, dicts or series.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to False values.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 # Returns DF of bools. Sr is treated as a row.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from a column.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.reset_index()                   # Moves row keys to a column named index.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by the passed column/s.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="dataframe-merge-join-concat"><a
href="#dataframe--merge-join-concat"></a>DataFrame — Merge, Join,
Concat:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; l = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line">&gt;&gt;&gt; r = DataFrame([[4, 5], [6, 7]], index=[&#x27;b&#x27;, &#x27;c&#x27;], columns=[&#x27;y&#x27;, &#x27;z&#x27;])</span><br><span class="line">   y  z</span><br><span class="line">b  4  5</span><br><span class="line">c  6  7</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">|                        |    &#x27;outer&#x27;    |   &#x27;inner&#x27;  |   &#x27;left&#x27;   |       Description        |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.merge(r, on=&#x27;y&#x27;,     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |</span><br><span class="line">|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |</span><br><span class="line">|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |</span><br><span class="line">|                        | 2  .   6   7  |            |            | Uses &#x27;inner&#x27; by default. |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.join(r, lsuffix=&#x27;l&#x27;, |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|</span><br><span class="line">|           rsuffix=&#x27;r&#x27;, | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses &#x27;left&#x27; by default.  |</span><br><span class="line">|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |</span><br><span class="line">|           axis=0,      | a  1   2   .  |     2      |            | Uses &#x27;outer&#x27; by default. |</span><br><span class="line">|           join=…)      | b  3   4   .  |     4      |            | A Series is treated as a |</span><br><span class="line">|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |</span><br><span class="line">|                        | c  .   6   7  |     6      |            | to add a row instead.    |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |</span><br><span class="line">|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses &#x27;outer&#x27;  |</span><br><span class="line">|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |</span><br><span class="line">|                        | a  1   2   .  |            |            | columns. Also updates    |</span><br><span class="line">|                        | b  3   4   5  |            |            | items that contain NaN.  |</span><br><span class="line">|                        | c  .   6   7  |            |            | R must be a DataFrame.   |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="dataframe-aggregate-transform-map"><a
href="#dataframe--aggregate-transform-map"></a>DataFrame — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>All operations operate on columns by default. Pass
<code>'axis=1'</code> to process the rows instead.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;x&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |             |       x  y  |               |</span><br><span class="line">| df.agg(…)       |     x  4    |  sum  4  6  |     x  4      |</span><br><span class="line">|                 |     y  6    |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |      x  y   |      x    y |        x      |</span><br><span class="line">| df.agg(…)       |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">| df.transform(…) |   b  2  2   | a    1    1 |     b  2      |</span><br><span class="line">|                 |             | b    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code>
to get the fifth result's values.</strong></li>
</ul>
<h4 id="dataframe-plot-encode-decode"><a
href="#dataframe--plot-encode-decode"></a>DataFrame — Plot, Encode,
Decode:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;.plot.line/bar/hist/scatter/box()          # Also: `x=column_key, y=column_key/s`.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = pd.read_json/html(&#x27;&lt;str/path/url&gt;&#x27;)     # Run `$ pip3 install beautifulsoup4 lxml`.</span><br><span class="line">&lt;DF&gt; = pd.read_csv/pickle/excel(&#x27;&lt;path/url&gt;&#x27;)  # Use `sheet_name=None` to get all Excel sheets.</span><br><span class="line">&lt;DF&gt; = pd.read_sql(&#x27;&lt;table/query&gt;&#x27;, &lt;conn.&gt;)   # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line">&lt;DF&gt; = pd.read_clipboard()                     # Reads a copied table from the clipboard.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = &lt;DF&gt;.to_dict([&#x27;d/l/s/…&#x27;])             # Returns columns as dicts, lists or series.</span><br><span class="line">&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).</span><br><span class="line">&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install openpyxl` for xlsx files.</span><br><span class="line">&lt;DF&gt;.to_sql(&#x27;&lt;table_name&gt;&#x27;, &lt;connection&gt;)      # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="groupby"><a href="#groupby"></a>GroupBy</h3>
<p><strong>Object that groups together rows of a dataframe based on the
value of the passed column.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list(&#x27;abc&#x27;), columns=list(&#x27;xyz&#x27;))</span><br><span class="line">&gt;&gt;&gt; df.groupby(&#x27;z&#x27;).get_group(6)</span><br><span class="line">   x  y</span><br><span class="line">b  4  5</span><br><span class="line">c  7  8</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.</span><br><span class="line">&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="groupby-aggregate-transform-map"><a
href="#groupby--aggregate-transform-map"></a>GroupBy — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; gb = df.groupby(&#x27;z&#x27;)</span><br><span class="line">      x  y  z</span><br><span class="line">3: a  1  2  3</span><br><span class="line">6: b  4  5  6</span><br><span class="line">   c  7  8  6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.agg(…)       |      x   y  |      x  y   |      x    y |        x      |</span><br><span class="line">|                 |  z          |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">|                 |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |</span><br><span class="line">|                 |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |</span><br><span class="line">|                 |             |             | c    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.transform(…) |      x   y  |      x  y   |             |               |</span><br><span class="line">|                 |  a   1   2  |   a  1  1   |             |               |</span><br><span class="line">|                 |  b  11  13  |   b  1  1   |             |               |</span><br><span class="line">|                 |  c  11  13  |   c  2  2   |             |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rolling"><a href="#rolling"></a>Rolling</h3>
<p><strong>Object for rolling window calculations.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.</span><br><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key</span><br><span class="line">&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="plotly"><a href="#plotly"></a>Plotly</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install plotly kaleido</span><br><span class="line">from plotly.express import line</span><br><span class="line">&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: line(x=&lt;list&gt;, y=&lt;list&gt;)</span><br><span class="line">&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor=&#x27;rgba(0, 0, 0, 0)&#x27;</span><br><span class="line">&lt;Figure&gt;.write_html/json/image(&#x27;&lt;path&gt;&#x27;)                 # Also: &lt;Figure&gt;.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="covid-deaths-by-continent"><a
href="#covid-deaths-by-continent"></a>Covid deaths by continent:</h4>
<p><a
href="/gto76/python-cheatsheet/blob/main/web/covid_deaths.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_deaths.png" /></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">covid = pd.read_csv(&#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;,</span><br><span class="line">                    usecols=[&#x27;iso_code&#x27;, &#x27;date&#x27;, &#x27;total_deaths&#x27;, &#x27;population&#x27;])</span><br><span class="line">continents = pd.read_csv(&#x27;https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff&#x27;</span><br><span class="line">                         &#x27;846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv&#x27;,</span><br><span class="line">                         usecols=[&#x27;Three_Letter_Country_Code&#x27;, &#x27;Continent_Name&#x27;])</span><br><span class="line">df = pd.merge(covid, continents, left_on=&#x27;iso_code&#x27;, right_on=&#x27;Three_Letter_Country_Code&#x27;)</span><br><span class="line">df = df.groupby([&#x27;Continent_Name&#x27;, &#x27;date&#x27;]).sum().reset_index()</span><br><span class="line">df[&#x27;Total Deaths per Million&#x27;] = df.total_deaths * 1e6 / df.population</span><br><span class="line">df = df[df.date &gt; &#x27;2020-03-14&#x27;]</span><br><span class="line">df = df.rename(&#123;&#x27;date&#x27;: &#x27;Date&#x27;, &#x27;Continent_Name&#x27;: &#x27;Continent&#x27;&#125;, axis=&#x27;columns&#x27;)</span><br><span class="line">line(df, x=&#x27;Date&#x27;, y=&#x27;Total Deaths per Million&#x27;, color=&#x27;Continent&#x27;).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"><a
href="#confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"></a>Confirmed
covid cases, Dow Jones, Gold, and Bitcoin price:</h4>
<p><a href="/gto76/python-cheatsheet/blob/main/web/covid_cases.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_cases.png" /></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import plotly.graph_objects as go</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    display_data(wrangle_data(*scrape_data()))</span><br><span class="line"></span><br><span class="line">def scrape_data():</span><br><span class="line">    def scrape_covid():</span><br><span class="line">        url = &#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;location&#x27;, &#x27;date&#x27;, &#x27;total_cases&#x27;])</span><br><span class="line">        return df[df.location == &#x27;World&#x27;].set_index(&#x27;date&#x27;).total_cases</span><br><span class="line">    def scrape_yahoo(slug):</span><br><span class="line">        url = f&#x27;https://query1.finance.yahoo.com/v7/finance/download/&#123;slug&#125;&#x27; + \</span><br><span class="line">              &#x27;?period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;Date&#x27;, &#x27;Close&#x27;])</span><br><span class="line">        return df.set_index(&#x27;Date&#x27;).Close</span><br><span class="line">    out = scrape_covid(), scrape_yahoo(&#x27;BTC-USD&#x27;), scrape_yahoo(&#x27;GC=F&#x27;), scrape_yahoo(&#x27;^DJI&#x27;)</span><br><span class="line">    return map(pd.Series.rename, out, [&#x27;Total Cases&#x27;, &#x27;Bitcoin&#x27;, &#x27;Gold&#x27;, &#x27;Dow Jones&#x27;])</span><br><span class="line"></span><br><span class="line">def wrangle_data(covid, bitcoin, gold, dow):</span><br><span class="line">    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.</span><br><span class="line">    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.</span><br><span class="line">    df = df.loc[&#x27;2020-02-23&#x27;:]                    # Discards rows before &#x27;2020-02-23&#x27;.</span><br><span class="line">    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.</span><br><span class="line">    df = df.join(covid)                           # Adds column with covid cases.</span><br><span class="line">    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day&#x27;s value.</span><br><span class="line"></span><br><span class="line">def display_data(df):</span><br><span class="line">    figure = go.Figure()</span><br><span class="line">    for col_name in reversed(df.columns):</span><br><span class="line">        yaxis = &#x27;y1&#x27; if col_name == &#x27;Total Cases&#x27; else &#x27;y2&#x27;</span><br><span class="line">        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)</span><br><span class="line">        figure.add_trace(trace)</span><br><span class="line">    figure.update_layout(</span><br><span class="line">        yaxis1=dict(title=&#x27;Total Cases&#x27;, rangemode=&#x27;tozero&#x27;),</span><br><span class="line">        yaxis2=dict(title=&#x27;%&#x27;, rangemode=&#x27;tozero&#x27;, overlaying=&#x27;y&#x27;, side=&#x27;right&#x27;),</span><br><span class="line">        legend=dict(x=1.1),</span><br><span class="line">        height=450</span><br><span class="line">    ).show()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pysimplegui"><a href="#pysimplegui"></a>PySimpleGUI</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install PySimpleGUI</span><br><span class="line">import PySimpleGUI as sg</span><br><span class="line">layout = [[sg.Text(&quot;What&#x27;s your name?&quot;)], [sg.Input()], [sg.Button(&#x27;Ok&#x27;)]]</span><br><span class="line">window = sg.Window(&#x27;Window Title&#x27;, layout)</span><br><span class="line">event, values = window.read()</span><br><span class="line">print(f&#x27;Hello &#123;values[0]&#125;!&#x27; if event == &#x27;Ok&#x27; else &#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="appendix"><a href="#appendix"></a>Appendix</h2>
<h3 id="cython"><a href="#cython"></a>Cython</h3>
<p><strong>Library that compiles Python code into C.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install cython</span><br><span class="line">import pyximport; pyximport.install()</span><br><span class="line">import &lt;cython_script&gt;</span><br><span class="line">&lt;cython_script&gt;.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="definitions"><a href="#definitions"></a>Definitions:</h4>
<ul>
<li><strong>All <code>'cdef'</code> definitions are optional, but they
contribute to the speed-up.</strong></li>
<li><strong>Script needs to be saved with a <code>'pyx'</code>
extension.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;</span><br><span class="line">cdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el_1&gt;, &lt;el_2&gt;, ...]</span><br><span class="line">cdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef class &lt;class_name&gt;:</span><br><span class="line">    cdef public &lt;ctype&gt; &lt;attr_name&gt;</span><br><span class="line">    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):</span><br><span class="line">        self.&lt;attr_name&gt; = &lt;arg_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef enum &lt;enum_name&gt;: &lt;member_name_1&gt;, &lt;member_name_2&gt;, ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="pyinstaller"><a href="#pyinstaller"></a>PyInstaller</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ pip3 install pyinstaller</span><br><span class="line">$ pyinstaller script.py                        # Compiles into &#x27;./dist/script&#x27; directory.</span><br><span class="line">$ pyinstaller script.py --onefile              # Compiles into &#x27;./dist/script&#x27; console app.</span><br><span class="line">$ pyinstaller script.py --windowed             # Compiles into &#x27;./dist/script&#x27; windowed app.</span><br><span class="line">$ pyinstaller script.py --add-data &#x27;&lt;path&gt;:.&#x27;  # Adds file to the root of the executable.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File paths need to be updated to
<code>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</code>.</strong></li>
</ul>
<h3 id="basic-script-template"><a
href="#basic-script-template"></a>Basic Script Template</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">#</span><br><span class="line"># Usage: .py</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">from sys import argv, exit</span><br><span class="line">from collections import defaultdict, namedtuple</span><br><span class="line">from dataclasses import make_dataclass</span><br><span class="line">from enum import Enum</span><br><span class="line">import functools as ft, itertools as it, operator as op, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">###  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">##  UTIL</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="index"><a href="#index"></a>Index</h2>
<ul>
<li><strong>Only available in the <a
href="https://transactions.sendowl.com/products/78175486/4422834F/view">PDF</a>.</strong></li>
<li><strong>Ctrl+F / ⌘F is usually sufficient.</strong></li>
<li><strong>Searching <code>'#&lt;title&gt;'</code> on the <a
href="https://gto76.github.io/python-cheatsheet/">webpage</a> will limit
the search to the titles.</strong></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CSharp 中 enum 和 string int 互转</title>
    <url>/e3f1b0c8903a078fc6aada58622998f38fee328c/</url>
    <content><![CDATA[<p>示例 enum <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">enum</span> Colors  </span><br><span class="line">&#123;</span><br><span class="line">    Red,</span><br><span class="line">    Green,</span><br><span class="line">    Blue,</span><br><span class="line">    Yellow</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>
<h2 id="enum-转-string">1. Enum 转 String</h2>
<ul>
<li><mark style="background: #83d98fA6;">利用
Object.ToString()方法</mark></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line">Console.Write(Colors.Green.ToString()==<span class="string">&quot;Green&quot;</span>);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2026-10-15,868,250-->
<ul>
<li>利用 Enum 的静态方法 GetName 与 GetNames：</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Enum.GetName(<span class="keyword">typeof</span>(Colors),<span class="number">3</span>))</span><br><span class="line">== Enum.GetName(<span class="keyword">typeof</span>(Colors), Colors.Blue))</span><br><span class="line">== <span class="string">&quot;Blue&quot;</span>;</span><br><span class="line"></span><br><span class="line">Enum.GetNames(<span class="keyword">typeof</span>(Colors))</span><br><span class="line">== &#123; <span class="string">&quot;Red&quot;</span>,    <span class="string">&quot;Green&quot;</span>,    <span class="string">&quot;Blue&quot;</span>,     <span class="string">&quot;Yellow&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>
<h2 id="string-转-enum">2. String 转 Enum</h2>
<ul>
<li><mark style="background: #83d98fA6;">利用 Enum 的静态方法
Parse</mark></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line">Console.WriteLine( (Colors)Enum.Parse(<span class="keyword">typeof</span>(Colors),<span class="string">&quot;Red&quot;</span>) );</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-15,458,250-->
<h2 id="enum-转-int">3. Enum 转 Int</h2>
<ul>
<li>因为枚举的基类型是除 Char
外的整型，所以<mark style="background: #83d98fA6;">可以进行强制转换</mark>
。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line">Console.WriteLine((<span class="built_in">int</span>)Colors.Red == <span class="number">0</span>);</span><br><span class="line">Console.WriteLine((<span class="built_in">byte</span>)Colors.Green == <span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-12-27,466,250-->
<h2 id="int-转-enum">4. Int 转 Enum</h2>
<ul>
<li><mark style="background: #83d98fA6;">可以强制转换将整型转换成枚举类型</mark></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line">Colors color = (Colors)<span class="number">2</span> ;</span><br><span class="line">Console.WriteLine(color);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-09-28,408,250-->
<ul>
<li>利用 Enum 的静态方法 ToObject。</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">Colors color = (Colors)Enum.ToObject(<span class="keyword">typeof</span>(Colors), <span class="number">2</span>);</span><br><span class="line">color == Colors.Blue</span><br></pre></td></tr></table></figure>
<p><strong>判断某个整型是否定义在枚举中的方法：Enum.IsDefined</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="CS"><figure class="iseeu highlight /cs"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bool</span> isDefined = Enum.IsDefined(<span class="keyword">typeof</span>(Colors), <span class="number">3</span>);</span><br><span class="line">Console.WriteLine( isDefined );</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-01-31,492,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>csharp</tag>
      </tags>
  </entry>
  <entry>
    <title>Unity3d 的坐标</title>
    <url>/eb9132dd299a963a00655e0d826b2d76f66aabac/</url>
    <content><![CDATA[<h2 id="坐标系分类">坐标系分类</h2>
<h3 id="世界坐标">世界坐标</h3>
<p>我们在场景中添加的游戏物体（如：Cube），他们都是以世界坐标显示在场景中的。
transform.position可以获得该物体的世界坐标
<!--SR:!2024-09-14,17,230--></p>
<h3 id="屏幕坐标">屏幕坐标</h3>
<p><strong>屏幕坐标系</strong> (Screen Coordinates):
                      描述:
屏幕坐标系是基于屏幕像素的坐标系统，原点在屏幕的<strong>左下角 (0,
0)</strong>，右上角为 (Screen.width, Screen.height)。 用途:
通常用于从屏幕空间转换到世界空间或处理用户输入（如鼠标点击位置）。 API:
Input.mousePosition 返回的就是屏幕坐标。                      
<strong>视口坐标系</strong> (Viewport Coordinates):
                      描述: 视口坐标系的原点在视口的<strong>左下角 (0,
0)</strong>，<strong>右上角</strong>为 (1,
1)。它与屏幕分辨率无关，而是相对的坐标系。 用途:
常用于将坐标归一化，使其与屏幕尺寸无关，从而在不同分辨率和比例的设备上具有一致的表现。
API: Camera.main.ScreenToViewportPoint(Vector3 position)
将屏幕坐标转换为视口坐标。                       <strong>GUI
坐标系</strong> (GUI Coordinates):                       描述:
在使用老版的 Unity GUI 系统时（非 Unity UI），GUI
坐标系的原点位于屏幕<strong>左上角 (0, 0)</strong>，右下角为
(Screen.width, Screen.height)。 用途: 主要用于绘制图形界面元素。 API:
GUI.Label、GUI.Button 等。 <!--SR:!2024-09-21,27,250--></p>
<h3 id="gui坐标">Gui坐标</h3>
<p>这个坐标系与屏幕坐标系相似，不同的是该坐标系以屏幕的<mark style="background: #fefe00A6;">左上角</mark>
为（0，0）点，<mark style="background: #fefe00A6;">右下角为（Screen.width，Screen.height）</mark>
。 <!--SR:!2024-09-05,11,230--></p>
<h3 id="视角坐标">视角坐标</h3>
<p>视口坐标是标准的和相对于相机的。相机的<mark style="background: #fefe00A6;">左下角</mark>
为（0，0）点，<mark style="background: #fefe00A6;">右上角为（1，1）</mark>
点，Z的位置是以相机的世界单位来衡量的。（用的不多）
<!--SR:!2024-09-26,32,250--></p>
<h3 id="linerender坐标">LineRender坐标</h3>
<p>以屏幕<mark style="background: #fefe00A6;">中心</mark>
为原点，向上向右增加。 <!--SR:!2024-09-15,22,250--></p>
<h2 id="坐标系转换">坐标系转换</h2>
<h3 id="世界坐标屏幕坐标">世界坐标→屏幕坐标</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样可以将世界坐标转换为屏幕坐标。其中camera为场景中的camera对象。</span></span><br><span class="line">camera.WorldToScreenPoint(transform.position); </span><br></pre></td></tr></table></figure>
<!--SR:!2024-09-17,23,250-->
<h3 id="屏幕坐标视口坐标">屏幕坐标→视口坐标</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这样可以将屏幕坐标转换为视口坐标。其中camera为场景中的camera对象。</span></span><br><span class="line">camera.ScreenToViewportPoint(Input.GetTouch(<span class="number">0</span>).position); </span><br></pre></td></tr></table></figure>
<!--SR:!2024-09-15,21,250-->
<h3 id="视口坐标屏幕坐标">视口坐标→屏幕坐标</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">camera.ViewportToScreenPoint();</span><br></pre></td></tr></table></figure>
<h3 id="视口坐标世界坐标">视口坐标→世界坐标</h3>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">camera.ViewportToWorldPoint();</span><br></pre></td></tr></table></figure>
<h2 id="示例">示例</h2>
<ul>
<li>案例1——在鼠标点击的位置上绘制一张图片出来（关于绘制GUI界面坐标系与屏幕坐标系之间的关系）</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ScreenToGUI</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//图片</span></span><br><span class="line">    <span class="keyword">public</span> Texture img;</span><br><span class="line">    <span class="comment">//储存鼠标的位置坐标</span></span><br><span class="line">    <span class="keyword">private</span> Vector2 pos;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//鼠标左击，获取当前鼠标的位置</span></span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButton(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            pos = Input.mousePosition; <span class="comment">//屏幕坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//绘制图片，屏幕坐标和GUI界面坐标只在Y轴上方向相反，只要被Screen.height减就可以互相转换。</span></span><br><span class="line">        GUI.DrawTexture(<span class="keyword">new</span> Rect(pos.x, Screen.height - pos.y, <span class="number">100</span>, <span class="number">100</span>), img);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>角色头顶的名字（世界坐标转GUI界面坐标）先世界坐标转屏幕坐标，再屏幕坐标转GUI界面坐标</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Blood</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> ScaleWidht = <span class="number">0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> ScaleHeight = <span class="number">0f</span>;</span><br><span class="line">    <span class="keyword">private</span> Rect _drawRect = <span class="keyword">new</span> Rect();</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Width = <span class="number">0f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> Height = <span class="number">10f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">float</span> DesignStageWidth = <span class="number">800</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="built_in">float</span> DesignStageHeight = <span class="number">480</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Vector2 pos2;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> size_z;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span> ()</span></span><br><span class="line">    &#123;</span><br><span class="line">        ScaleWidht = Screen.width / DesignStageWidth;</span><br><span class="line">        ScaleHeight = Screen.height / DesignStageHeight;</span><br><span class="line">        Height = <span class="number">2f</span>;</span><br><span class="line"></span><br><span class="line">        size_z = transform.gameObject.collider.bounds.size.z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span> ()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//世界坐标转换到屏幕坐标</span></span><br><span class="line">        print(transform.forward);</span><br><span class="line">        pos2 = Camera.main.WorldToScreenPoint(transform.position + transform.forward * (size_z / <span class="number">2</span>));</span><br><span class="line">        <span class="comment">//计算角色头顶坐标</span></span><br><span class="line">        pos2 = <span class="keyword">new</span> Vector2(pos2.x, Screen.height  - pos2.y - Height);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Vector3 worldPosition = new Vector3(transform.position.x, transform.position.y + Height, transform.position.z);</span></span><br><span class="line">        <span class="comment">//worldPosition = Camera.mainCamera.WorldToScreenPoint(worldPosition);</span></span><br><span class="line">        <span class="comment">//_drawRect = new Rect((worldPosition.x - 100 * ScaleWidht) / ScaleWidht, (Screen.height - worldPosition.y - 50 * ScaleHeight) / ScaleHeight, 200, 50);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//GUILayout.BeginArea(_drawRect);</span></span><br><span class="line">        <span class="comment">//    GUILayout.Label(&quot;======哈哈======&quot;);</span></span><br><span class="line">        <span class="comment">//GUILayout.EndArea();</span></span><br><span class="line"></span><br><span class="line">        GUI.Label(<span class="keyword">new</span> Rect(pos2.x, pos2.y, <span class="number">100</span>, <span class="number">50</span>), <span class="string">&quot;=BETTER=&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>类似屏幕解锁功能的实现（屏幕坐标转换为世界坐标）</li>
</ul>
<p>首先是创建LineRenderer。GameObject -&gt; Create Empty
-&gt;更名为“LineRendererObj”，给LineRendererObj添加“Line
Renderer”组件，Component -&gt;Effects -&gt;Line Renderer;将它的Positions
的size 设置为0</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">touch</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Event e;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Texture2D Point;</span><br><span class="line">    <span class="keyword">public</span> Color c1 = Color.yellow;</span><br><span class="line">    <span class="keyword">public</span> Color c2 = Color.red;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> lengthOfLineRenderer;</span><br><span class="line">    <span class="keyword">public</span> GameObject LineRendererPrefab;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LineRenderer lineRenderer;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 保存创建的Line Renderer</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">private</span> List&lt;LineRenderer&gt; lineRendArray =<span class="keyword">new</span> List&lt;LineRenderer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector3 screenPoint;</span><br><span class="line">    <span class="keyword">private</span> Vector3 scanPos;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Color[] color;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 记录宫格所在GUI位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Rect&gt; AreaRect = <span class="keyword">new</span> List&lt;Rect&gt;();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 记录宫格中心点</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Vector2&gt; CenterPointList = <span class="keyword">new</span> List&lt;Vector2&gt;();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 宫格标签</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> RectFlag;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 记录正确的滑动顺序</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; KeyOrder = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 记录玩家滑动顺序</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; PlayerKeyOrder = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断开始鼠标位置是否可画</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CheckStartRect=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 判断结束鼠标位置是否可画</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> CheckEndRect = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 行数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Row = <span class="number">4</span>;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 列数</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Column = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = Event.current;</span><br><span class="line"></span><br><span class="line">        scanPos = LineRendererPrefab.transform.position;</span><br><span class="line">        lineRenderer = (LineRenderer)LineRendererPrefab.GetComponent(<span class="string">&quot;LineRenderer&quot;</span>);</span><br><span class="line">        lineRenderer.material = <span class="keyword">new</span> Material(Shader.Find(<span class="string">&quot;Particles/Additive&quot;</span>));</span><br><span class="line">        lengthOfLineRenderer = <span class="number">0</span>;</span><br><span class="line">        lineRenderer.SetColors(c1, c2);</span><br><span class="line">        lineRenderer.SetWidth(<span class="number">0.7F</span>, <span class="number">0.7F</span>);</span><br><span class="line">        lineRenderer.SetVertexCount(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        color = <span class="keyword">new</span> Color[<span class="number">8</span>];</span><br><span class="line">        color[<span class="number">0</span>] = Color.yellow;</span><br><span class="line">        color[<span class="number">1</span>] = Color.blue;</span><br><span class="line">        color[<span class="number">2</span>] = Color.cyan;</span><br><span class="line">        color[<span class="number">3</span>] = Color.gray;</span><br><span class="line">        color[<span class="number">4</span>] = Color.green;</span><br><span class="line">        color[<span class="number">5</span>] = Color.grey;</span><br><span class="line">        color[<span class="number">6</span>] = Color.magenta;</span><br><span class="line">        color[<span class="number">7</span>] = Color.red;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> RowCount = <span class="number">0</span>; RowCount &lt; Row; RowCount++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> columnCount = <span class="number">0</span>; columnCount &lt; Column; columnCount++)</span><br><span class="line">            &#123;</span><br><span class="line">                Rect IconRect = <span class="keyword">new</span> Rect(columnCount * Screen.width / Column + Screen.width / Column / <span class="number">2</span> - Point.width / <span class="number">2</span>, RowCount * Screen.height / Row + Screen.height / Row / <span class="number">2</span> - Point.height / <span class="number">2</span>, Point.width, Point.height);</span><br><span class="line">                AreaRect.Add(IconRect);</span><br><span class="line"></span><br><span class="line">                Vector2 CenterP = IconRect.center;<span class="comment">//得到每个的中心点</span></span><br><span class="line">                CenterPointList.Add(CenterP);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        e = Event.current;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> RowCount = <span class="number">0</span>; RowCount &lt; Row; RowCount++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> columnCount = <span class="number">0</span>; columnCount &lt; Column; columnCount++)</span><br><span class="line">            &#123;</span><br><span class="line">                Rect IconRect = <span class="keyword">new</span> Rect(columnCount * Screen.width / Column + Screen.width / Column / <span class="number">2</span> - Point.width / <span class="number">2</span>, RowCount * Screen.height / Row + Screen.height / Row / <span class="number">2</span> - Point.height / <span class="number">2</span>, Point.width, Point.height);</span><br><span class="line">                GUI.Label(IconRect, Point);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.type == EventType.MouseDown)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; AreaRect.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (AreaRect[i].Contains(<span class="keyword">new</span> Vector3(Input.mousePosition.x, Screen.height - Input.mousePosition.y, Input.mousePosition.z)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        CheckStartRect = <span class="literal">true</span>;</span><br><span class="line">                        print(<span class="string">&quot;Contains&quot;</span>);</span><br><span class="line">                        PlayerKeyOrder.Add(i);</span><br><span class="line">                        RectFlag = i;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        CheckStartRect = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (CheckStartRect)</span><br><span class="line">                &#123;</span><br><span class="line">                    print(<span class="string">&quot;MouseDown_____&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//Vector3 curPosition = mousePToLineRendererP();</span></span><br><span class="line">                    Vector3 curPosition = centerPToLineRendererP(RectFlag);</span><br><span class="line">                    GameObject newObj;</span><br><span class="line">                    newObj = (GameObject)Instantiate(LineRendererPrefab, LineRendererPrefab.transform.position, LineRendererPrefab.transform.rotation);</span><br><span class="line">                    lineRenderer = (LineRenderer)newObj.GetComponent(<span class="string">&quot;LineRenderer&quot;</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">int</span> n = Random.Range(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">                    c1 = color[n - <span class="number">1</span>];</span><br><span class="line">                    n = Random.Range(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">                    c2 = color[n - <span class="number">1</span>];</span><br><span class="line">                    lineRenderer.SetColors(c1, c2);</span><br><span class="line"></span><br><span class="line">                    lineRenderer.SetVertexCount(<span class="number">1</span>);</span><br><span class="line">                    lineRenderer.SetWidth(<span class="number">0.7F</span>, <span class="number">0.7F</span>);</span><br><span class="line">                    lineRenderer.SetPosition(<span class="number">0</span>, curPosition);</span><br><span class="line">                    lineRendArray.Add(lineRenderer);</span><br><span class="line">                    lengthOfLineRenderer++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.type == EventType.MouseDrag&amp;&amp;CheckStartRect)</span><br><span class="line">            &#123;</span><br><span class="line">                print(<span class="string">&quot;MouseDrag_____&quot;</span>);</span><br><span class="line">                Vector3 curPosition = mousePToLineRendererP();</span><br><span class="line">                DrawRenderLine(lineRendArray[lengthOfLineRenderer - <span class="number">1</span>], curPosition);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (e.type == EventType.MouseUp &amp;&amp; CheckStartRect)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; AreaRect.Count; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (AreaRect[i].Contains(<span class="keyword">new</span> Vector3(Input.mousePosition.x, Screen.height - Input.mousePosition.y, Input.mousePosition.z)))</span><br><span class="line">                    &#123;</span><br><span class="line">                        CheckEndRect = <span class="literal">true</span>;</span><br><span class="line">                        PlayerKeyOrder.Add(i);</span><br><span class="line">                        RectFlag = i;</span><br><span class="line">                        print(<span class="string">&quot;EndContains&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        CheckEndRect = <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (CheckEndRect)</span><br><span class="line">                &#123;</span><br><span class="line">                    Vector3 curPosition = centerPToLineRendererP(RectFlag);</span><br><span class="line">                    DrawRenderLine(lineRendArray[lengthOfLineRenderer - <span class="number">1</span>], curPosition);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    PlayerKeyOrder.RemoveAt(PlayerKeyOrder.Count - <span class="number">1</span>);</span><br><span class="line">                    Destroy(lineRendArray[lengthOfLineRenderer - <span class="number">1</span>].gameObject);</span><br><span class="line">                    <span class="comment">//lengthOfLineRenderer--;</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DrawRenderLine</span>(<span class="params">LineRenderer line, Vector3 vect3</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector3 newPos = vect3;</span><br><span class="line">        line.SetVertexCount(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        line.SetPosition(<span class="number">1</span>, newPos);</span><br><span class="line">        print(<span class="string">&quot;new point: &quot;</span> + newPos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//public Vector2 RectCenterPoint(Rect AreaRect)       //计算一个Rect的中心点</span></span><br><span class="line">    <span class="comment">//&#123;</span></span><br><span class="line">    <span class="comment">//    Vector2 CenterPoint=Vector2.zero;</span></span><br><span class="line">    <span class="comment">//    print(&quot;Rect:&quot;+AreaRect);</span></span><br><span class="line">    <span class="comment">//    CenterPoint.x=AreaRect.xMin+AreaRect.width/2;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    CenterPoint.y=AreaRect.yMin+AreaRect.height/2;</span></span><br><span class="line">    <span class="comment">//    print(&quot;CenterPoint:&quot;+CenterPoint);</span></span><br><span class="line">    <span class="comment">//    return CenterPoint;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 鼠标所在位置转换为LineRenderer的位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector3 <span class="title">mousePToLineRendererP</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        screenPoint = Camera.main.WorldToScreenPoint(scanPos);</span><br><span class="line">        Vector3 curScreenPoint = <span class="keyword">new</span> Vector3(Input.mousePosition.x, Input.mousePosition.y, screenPoint.z);</span><br><span class="line">        Vector3 curPosition = Camera.main.ScreenToWorldPoint(curScreenPoint);</span><br><span class="line">        print(<span class="string">&quot;curScreenPoint: &quot;</span> + curScreenPoint);</span><br><span class="line">        print(<span class="string">&quot;curPosition: &quot;</span> + curPosition);</span><br><span class="line">        <span class="keyword">return</span> curPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 鼠标所在区域的中心点转换为LineRenderer的位置</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Vector3 <span class="title">centerPToLineRendererP</span>(<span class="params"><span class="built_in">int</span> Flag</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        screenPoint = Camera.main.WorldToScreenPoint(scanPos);</span><br><span class="line">        Vector3 curScreenPoint = <span class="keyword">new</span> Vector3(CenterPointList[Flag].x,Screen.height-CenterPointList[Flag].y,screenPoint.z);</span><br><span class="line">        Vector3 curPosition = Camera.main.ScreenToWorldPoint(curScreenPoint);</span><br><span class="line">        print(<span class="string">&quot;curScreenPoint: &quot;</span> + curScreenPoint);</span><br><span class="line">        print(<span class="string">&quot;curPosition: &quot;</span> + curPosition);</span><br><span class="line">        <span class="keyword">return</span> curPosition;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>Unity3d</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>unity3d</tag>
      </tags>
  </entry>
  <entry>
    <title>代码编辑快捷键</title>
    <url>/ede2b0f326cdb7d2a878a721e773c0e144518b12/</url>
    <content><![CDATA[<p>自用代码编辑快捷键,所有编辑器通用</p>
<p><strong>代码浏览</strong></p>
<p>                      | hotkey | function | | | -------------- |
----------------------- | --- | | alt + r | FindUsages | | | alt + d |
GotoDeclaration | | | alt + g | GotoClass | | | alt + ; | GotoLine | | |
alt + t | GotoTest | | | alt + q | Back | | | alt + e | Forward | | |
alt + j | EditorMoveToPageBottom | | | alt + k | EditorMoveToPageTop | |
| alt + h | EditorLineStart | | | alt + l | EditorLineEnd | | | alt + 1
| CollapseAllRegions | | | alt + [2-5] | ExpandAllToLevel1 | | | alt + 6
| ExpandAllRegions | | | ctrl + alt + f | FileStructurePopup | | | ctrl
+ alt + h | CallHierarchy | | | alt + p | PinActiveTab | | | ctrl + w |
CloseAllUnpinnedEditors | | | gi | GotoImplementation | | | gu |
GotoSuperMethod | | <!--SR:!2025-01-30,274,250--></p>
<p><strong>代码编辑</strong></p>
<p>                     | hotkey | function | | | ---------------- |
--------------------- | --- | | alt + f | ReformatCode | | | ctrl + / |
CommentByLineComment | | | ctrl + f | Find | | | shift + shift |
SearchEverywhere | | | ctrl + shift + f | FindInPath | | | ctrl + h |
Replace | | | ctrl + shift + h | ReplaceInPath | | | alt + n | Generate
| | | ctrl + t | SaveAsTemplate | | | alt + ↓ | MoveLineDown | | | alt +
↑ | MoveLineUp | | | ctrl + ↓ | EditorCloneCaretBelow | | | ctrl + ↑ |
EditorCloneCaretAbove | | | alt + s | SelectAllOccurrences | | | ctrl +
d | EditorDuplicate | | <!--SR:!2024-08-12,175,250--></p>
<p><strong>工程</strong></p>
<p>                      | hotkey | function | | ------- |
-------------------------- | | alt + ~ | ActivateTerminalToolWindow | |
f2 | RenameElement | | f5 | Run | | f6 | Debug | | f7 |
ToggleLineBreakpoint | | f8 | BuildProject | | f9 | StepInto | | f10 |
StepOver | | f11 | Resume | | f12 | Stop |
<!--SR:!2025-02-06,509,250--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>config</tag>
        <tag>快捷键</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 参数传递的4种方式</title>
    <url>/edf333cdc04cd96e5513549222046cbae2567fcc/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="http://h3blog.com/article/flask-params/">h3blog.com</a></p>
</blockquote>
<h2 id="get-方式传参">get 方式传参</h2>
<p>代码： <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div> 测试 curl
http://127.0.0.1:5000/name?name=www.h3blog.com <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -i -X GET http://127.0.0.1:5000/name?name=www.h3blog.com</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2026-03-25,780,250--></p>
<h2 id="post-方式传参">post 方式传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/post_address_nft&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_address_nft</span>():  </span><br><span class="line">	addresses = flask.request.values.get(<span class="string">&#x27;address_list&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div> 测试 curl http://127.0.0.1:5000/name
<strong>-d</strong> 'name=www.h3blog.com' <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST http://127.0.0.1:5000/name -d <span class="string">&#x27;name=www.h3blog.com&#x27;</span> -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2026-05-19,812,250--></p>
<h2 id="url-路径传参">url 路径传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br></pre></td></tr></table></figure></div> 测试 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X GET http://127.0.0.1:5000/name/www.h3blog.com -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2025-12-05,719,250--></p>
<h2 id="json-body-传参">json body 传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure></div> 测试 curl <code>url</code> <strong>-H</strong>
<code>'Content-Type:application/json'</code> <strong>-d</strong>
<code>'json_string'</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> http://127.0.0.1:5000/json -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;www.h3blog.com&quot;&#125;&#x27;</span> -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;www.h3blog.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2024-04-02,354,250--></p>
<h2 id="flask-传参汇总">Flask 传参汇总</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = flask.request.get_json()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2024-03-12,335,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python import 导入其他脚本</title>
    <url>/eea6f6f9dc0e74e490943dd05c233acb06584080/</url>
    <content><![CDATA[<p>假设有如下目录结构：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #be9affA6;">dir0</mark> 文件夹下有
<mark style="background: #fefe00A6;">file1.py</mark>
、<mark style="background: #fefe00A6;">file2.py</mark> 两个文件 和
<mark style="background: #018bffA6;">dir3</mark>
、<mark style="background: #018bffA6;">dir4</mark>
两个子文件夹，<mark style="background: #018bffA6;">dir3</mark> 中有
<mark style="background: #fefe00A6;">file3.py</mark>
文件，<mark style="background: #018bffA6;">dir4</mark> 中有
<mark style="background: #fefe00A6;">file4.py</mark> 文件。</p>
<h2 id="导入同级模块">1. 导入同级模块</h2>
<p>python 导入同级模块（在同一个文件夹中的 py 文件）直接导入即可。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 file1.py 中想导入 file2.py，注意无需加后缀 ".py"：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> file2</span><br><span class="line"><span class="comment"># 使用file2中函数时需加上前缀&quot;file2.&quot;，即：</span></span><br><span class="line"><span class="comment"># file2.fuction_name()</span></span><br></pre></td></tr></table></figure></div>
<h2 id="导入下级模块">2. 导入下级模块</h2>
<p>导入下级目录模块也很容易，<mark style="background: #fbab4bA6;">需在下级目录中新建一个空白的__init__.py
文件再导入</mark> ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dirname <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 file1.py 中想导入 dir3 下的 file3.py，首先要在 dir3
中新建一个空白的_<em>init</em>___.py 文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　| __init__.py</span><br><span class="line">　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p>再使用如下语句：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan A</span></span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure></div>
<p>或是</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan B</span></span><br><span class="line"><span class="keyword">import</span> dir3.file3</span><br><span class="line"><span class="comment"># import dir3.file3 as df3</span></span><br></pre></td></tr></table></figure></div>
<p>但使用第二种方式则下文需要一直带着路径 dir3
书写，较为累赘，建议可以另起一个别名。</p>
<h2 id="导入上级模块">3. 导入上级模块</h2>
<p>要导入上级目录下模块，可以使用 sys.path： 　</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 <code>file4.py</code> 中想引入 import 上级目录下的 file1.py：
<strong>file4.py</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> file1</span><br></pre></td></tr></table></figure></div> <strong>python 中 sys.path
的作用?</strong></p>
<p>当使用 import
语句<mark style="background: #018bffA6;">导入模块</mark>
时，解释器会搜索<mark style="background: #fefe00A6;">当前模块所在目录</mark>
以及 <mark style="background: #fefe00A6;">sys.path 指定的路径</mark>
去找需要 import 的模块，所以这里是直接把上级目录加到了 sys.path 里。
<!--SR:!2026-08-28,875,250--></p>
<p><strong>“..” 的含义：</strong> 等同于 linux
里的‘..’，表示当前工作目录的上级目录。实际上 python 中的‘.’也和 linux
中一致，表示当前目录。</p>
<h2 id="导入隔壁文件夹下的模块">4. 导入隔壁文件夹下的模块</h2>
<p>如在 <code>file4.py</code> 中想引入 import 在 dir3 目录下的
file3.py。</p>
<p>这其实是前面两个操作的组合，其思路本质上是将上级目录加到 sys.path
里，再按照对下级目录模块的方式导入。</p>
<p>同样需要被引文件夹也就是 dir3 下有空的__init__.py 文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- <span class="built_in">dir</span></span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| __init__.py</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p>同时也要将上级目录加到 sys.path 里： <strong>file4.py</strong>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure></div></p>
<h2 id="常见错误及-import-原理">5. 常见错误及 import 原理：</h2>
<p>在使用直接从上级目录引入模块的操作时：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>经常会报错:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: attempted relative import beyond top-level package</span><br></pre></td></tr></table></figure></div>
<p>这是由于相对导入时，文件夹实质上充当的是
package，也就是包的角色（比如我们常用的 numpy、pandas 都是包）。如果
python 解释器没有认同该文件夹是
package，那么这就是一个普通的文件夹，无法实现相对导入。</p>
<p><strong>python 中文件夹作为 package 需要满足的条件?</strong></p>
<ol type="1">
<li>文件夹中<mark style="background: #fefe00A6;">必须</mark>
存在有<code>__init__.py</code> 文件，可以为空。</li>
<li>不能作为顶层模块来执行该文件夹中的 py 文件。
<!--SR:!2026-05-21,812,250--></li>
</ol>
<h2 id="导入最佳实践">6. 导入最佳实践</h2>
<ul>
<li>把项目根目录加入环境变量(手动或通过脚本)<br />
</li>
<li>import 导入路径以项目根目录下的源码目录 src 为起始, 如下:<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> src.core.logger_class <span class="keyword">import</span> Logger  </span><br><span class="line"><span class="keyword">from</span> src.core.config_class <span class="keyword">import</span> LoadConfig  </span><br><span class="line"><span class="keyword">from</span> src.core.db_class <span class="keyword">import</span> MySql, Mongo, Redis, Kafka  </span><br></pre></td></tr></table></figure></div> 参考:<a
href="../a3d6224e07f3c409b4249b2586771a47b6619562">Python Import module
from different directory</a></li>
</ul>
<h2 id="各种导入示例">各种导入示例</h2>
<p><img src="/images/Pasted%20image%2020220904222845.png" />
<!--SR:!2026-05-27,814,250--></p>
<p><strong>参考</strong></p>
<p><a
href="https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time">python
- Relative imports for the billionth time - Stack Overflow</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../a3d6224e07f3c409b4249b2586771a47b6619562">Python Import
module from different directory</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a href="../a3d6224e07f3c409b4249b2586771a47b6619562">Python Import
module from different directory</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 开发环境</title>
    <url>/f0c93a8d6739520c6b5a3775c8dc5ae7b56c89cd/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<ul>
<li>Win10</li>
</ul>
<p><a href="https://git-scm.com/downloads">Git 下载地址</a></p>
<ul>
<li>Deepin</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure></div>
<h2 id="配置">配置</h2>
<h3 id="windows-配置环境变量">Windows 配置环境变量</h3>
<p>Settings &gt; System &gt; AdvanceSystemSetting &gt; Environment
Variables &gt; Path &gt; Edit</p>
<h3 id="配置git-全局姓名和邮箱">配置Git 全局姓名和邮箱</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;qiaogaojian&quot;</span>  </span><br><span class="line">git config --global user.email <span class="string">&quot;qiaogaojian@vip.qq.com&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="生成并配置-ssh-密钥">生成并配置 ssh 密钥</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;qiaogaojian@vip.qq.com&quot;</span> </span><br></pre></td></tr></table></figure></div>
<ul>
<li>Win10</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> C:\Users\Administrator\.ssh\id_rsa.pub <span class="comment"># 显示公钥</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>Deepin</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ssh 公钥</span></span><br><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub <span class="comment"># 显示公钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># deepinvm</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsOwois8+V5yjMIorYN1FSPpArMF9plEdPt676iRPSlf3/oyrD5Uc7STiIIbGDph5IhbW2ZPsiZvxvrkXERFRMqZjmt6jE8ZITz1usxqQdZUKPK5qJQHNMyB66mckoqWgQ4o8NtdmAup/Uei+DAr/JaN7fA0TzZdqRnb7kLqL4U7koe1No23ml82CicEPBHgYEL8Dcs/yqIFQycepYoU0FsfGSfLDD/EbIJpdMjGm8OnkI3gUlcGMsdtuz65Z1h2EsUjTlGUIE8GvOdULpjm8ESFmMYt0PoEY1lHMLRscWvSNFJ6yxVpoUI6+PUsF/Sc4ZqKIxJDeq3t5wS4BZF7Yt qiaogaojian@vip.qq.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># ubuntuvm</span></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDhRPcvYHp5gXrRENiXVrQ67ItAx2JFRxHJcOPv62TZX7o0AgolopmQQpiHECUmeRvtyH/pxdSgaAo/jcJFYX5RsN73G1GHRn/WsjJ6Dm+G4pGxwTHeuJodY29gX/i3NIBLJFYOrBhwPjMfAs7Qq8TL8XU1JArjER8fwX6tvNENmYvbWrASNfIlt55qbny9s4kzL6GBBhseF5Xm5LZ09sQHFuI1YPHkHqb0Eb+eTv5rT/LW0/pa9bSiFRKh86bBKCTKt78w8ZeFmKQf5jTYNxlIlFWWYwfh+OAS1PyG1UHwTU863X20kqbH81wIihgcrU+B7vFtQS9NlWhq9bUuEZag5v5WV3aT73Dl5mnnzch/6NUpMXIdMwl8WMJHewbo2NGO27r5nWltW4tdgi7LJuY8FgacLcHARSlbUBOxLkvKeveuJdsJRQjGSComFwBNLY9VbxEM2HGIUikdhAbJvPBLeRb7J8rGwF/eQVhdByJ3b3TvpRHMoOACRDwkc9H+Qi0= qiaogaojian@vip.qq.com</span><br></pre></td></tr></table></figure></div>
<p>然后复制ssh公钥到Github或Gitlab等后台的ssh公钥管理里.</p>
<h3 id="ssh-连接测试">SSH 连接测试</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SHELL"><figure class="iseeu highlight /shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></div>
<!--SR:!2025-06-12,388,250-->
<h2 id="使用">使用</h2>
<ul>
<li><a href="../4985d963fb644c7b84c923e1fae816af6e13f061">Git
常用命令</a></li>
<li><a href="../c03df0ff2688939d6c5b13b71effd8499a69c17a">Git submodule
子模块的管理和使用</a></li>
<li><a href="../9a1c46af06c5cbd7a509f84813e7be975537d979">Smartgit
安装破解</a></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../8ed3626f24d1fafe372135071b6d2bc66a7b7436">开发环境</a></li>
<li><a href="../4985d963fb644c7b84c923e1fae816af6e13f061">Git
常用命令</a></li>
<li><a href="../c03df0ff2688939d6c5b13b71effd8499a69c17a">Git submodule
子模块的管理和使用</a></li>
<li><a href="../9a1c46af06c5cbd7a509f84813e7be975537d979">Smartgit
安装破解</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>开发环境</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>python 数据精度</title>
    <url>/fc36df4359027415906aab9a57b7d34ca5b192fd/</url>
    <content><![CDATA[<p>因为二进制表示浮点数的特殊性, 浮点数误差在计算机编程中普遍存在, 参考:
<a
href="../470a5dfca1767e244348ef8f44fe8d57791fbc8d">浮点数精度问题及解决方案</a>
下面是 Python 语言的浮点数精度问题和解决方案</p>
<h3 id="python-浮点小数精度问题">python 浮点小数精度问题</h3>
<ol type="1">
<li><strong>小数的精度问题</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种情况</span></span><br><span class="line">a = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">print</span>(a)             <span class="comment"># 默认精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.17f \n&quot;</span>%a)  <span class="comment"># 17位精度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种情况</span></span><br><span class="line">b = <span class="number">1.1</span> + <span class="number">2.2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>输出: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">0.1 </span><br><span class="line">0.10000000000000001 <span class="comment"># 超出16位后就会出现误差</span></span><br><span class="line"></span><br><span class="line">3.3000000000000003  <span class="comment"># 小数计算误差</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2025-01-11,498,250--></p>
<ol start="2" type="1">
<li><strong>round() 的进位规则问题</strong></li>
</ol>
<p>在Python 3里面， <code>round</code>对小数的精确度采用
<code>四舍六入五成双</code>的方式。比如 1.15—&gt;1.2, 1.25—&gt;1.2,
1.250—&gt;1.2, 1.25012—&gt;1.3</p>
<p><code>round</code>给出的结果如果与你设想的不一样，有两个原因：</p>
<ol type="1">
<li>你的这个小数在计算机中能不能被精确储存？如果不能，那么它可能并没有达到四舍五入的标准，例如 <code>1.115</code>，它的小数点后第三位实际上是 <code>4</code>，当然会被舍去。<br />
</li>
<li>如果你的这个小数在计算机中能被精确表示，那么， <code>round</code>采用的进位机制是 <code>奇进偶舍</code>，所以这取决于你要保留的那一位，它是奇数还是偶数，以及它的下一位后面还有没有数据。
<!--SR:!2025-01-12,499,250--></li>
</ol>
<h3 id="解决方法">解决方法</h3>
<ol type="1">
<li><strong>小数的精度问题</strong> 使用 Decimal 表示和计算数字
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">print</span>(a)             <span class="comment"># 默认精度</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;0.1&#x27;</span>))  <span class="comment"># 17位精度</span></span><br><span class="line"></span><br><span class="line">b = Decimal(<span class="string">&#x27;1.1&#x27;</span>) + Decimal(<span class="string">&#x27;2.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li><strong>round() 的进位规则问题</strong> 自定义round规则
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_round</span>(<span class="params">number: <span class="built_in">str</span>, precision: <span class="built_in">int</span> = <span class="number">0</span></span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    自定义浮点型四舍五入  </span></span><br><span class="line"><span class="string">    :param number: 输入数值  </span></span><br><span class="line"><span class="string">    :param precision: 浮点型的精度位数, 可能是负数  </span></span><br><span class="line"><span class="string">    :return:  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    number_decimal = Decimal(number)  </span><br><span class="line">    number_float = <span class="built_in">float</span>(number)  </span><br><span class="line">  </span><br><span class="line">    sign = <span class="number">1</span>  <span class="comment"># 正负号处理， 默认是正号  </span></span><br><span class="line">    <span class="keyword">if</span> number_decimal &lt; <span class="number">0</span>:  <span class="comment"># 符号变更 (Decimal 的 quantize 不支持负数, 需要先转为正数)  </span></span><br><span class="line">        sign = -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        number_float = number_float * -<span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> precision &lt;= <span class="number">0</span>:  </span><br><span class="line">        <span class="comment"># 整数或者负精度的数字的处理方式  </span></span><br><span class="line">        base = <span class="number">10</span> ** precision  </span><br><span class="line">        big = number_float * base + <span class="number">0.5</span>  <span class="comment"># 先变小&#x27;精度*10&#x27;倍, 然后 +0.5 进位  </span></span><br><span class="line">        restore = <span class="built_in">int</span>(big) / base  </span><br><span class="line">        <span class="keyword">return</span> sign * restore  </span><br><span class="line">  </span><br><span class="line">    precision = <span class="built_in">str</span>(<span class="number">1</span> / <span class="number">10</span> ** precision)  </span><br><span class="line">    <span class="keyword">return</span> number_decimal.quantize(Decimal(precision), rounding=ROUND_HALF_UP) * sign</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(<span class="number">3.14159265358979323846</span>, <span class="number">19</span>)&#125;</span> \tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;3.14159265358979323846&#x27;</span>, <span class="number">19</span>)&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(-<span class="number">6.25</span>, -<span class="number">1</span>)&#125;</span> \tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;-6.25&#x27;</span>, -<span class="number">1</span>)&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(<span class="number">6.25</span>, -<span class="number">2</span>)&#125;</span>\tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;6.25&#x27;</span>, -<span class="number">2</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>🔵
<ul>
<li><a
href="../470a5dfca1767e244348ef8f44fe8d57791fbc8d">浮点数精度问题及解决方案</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
