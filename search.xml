<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Obsidian+Hexo Markdown 测试</title>
    <url>/cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/</url>
    <content><![CDATA[<h1 id="双链测试">双链测试</h1>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<h1 id="markdown-示例">Markdown 示例</h1>
<p>Markdown简易入门教程<br />
使用方式：打开 Source Mode 就可以看到所有markdown格式，照着来用就行了  
 </p>
<h2 id="标题">标题</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># 标题一  </span><br><span class="line">  </span><br><span class="line">## 标题二  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">### 标题三  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">#### 标题四  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">##### 标题五  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">###### 标题六</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="文本">文本</h2>
<p><strong>粗体</strong></p>
<blockquote>
<p>引用</p>
</blockquote>
<p><del>中划线</del></p>
<p><u>下划线</u></p>
<hr />
<p><mark style="background: #fefe00A6;">三空格+换行＝换行</mark>  </p>
<p><em>斜体</em></p>
<p><strong><em>斜体加粗体</em></strong></p>
<p><strong>常用markdown标记?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">**粗体**   </span><br><span class="line"></span><br><span class="line">&gt; 引用   </span><br><span class="line"></span><br><span class="line">~~中划线~~   </span><br><span class="line"></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt; </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">三空格+换行＝换行   </span><br><span class="line"></span><br><span class="line">*斜体*   </span><br><span class="line"></span><br><span class="line">***斜体加粗体***   </span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-16,64,250-->
<h2 id="段落">段落</h2>
<h3 id="链接">链接</h3>
<p><a href="https://gitee.com/qiaogaojian">链接</a><br />
<a href="/download/ide-eval-resetter.zip">ide-eval-resetter.zip</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">[链接](链接地址)  </span><br><span class="line">[[obsidian双链]]</span><br></pre></td></tr></table></figure></div>
<h3 id="图片">图片</h3>
<p><img src="/images/Pasted%20image%2020221009213236.png" /> <img
src="/images/0-2.png" /> <img
src="https://upload-images.jianshu.io/upload_images/3947109-1c9256e2c1f95874.png"
alt="image.png" /> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">![](远程图片地址)</span><br><span class="line">![[obsidian 图片]]</span><br><span class="line">![](obsidian 本地图片名字)</span><br></pre></td></tr></table></figure></div></p>
<h3 id="代码">代码</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWord</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWord&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">    <span class="attr">&quot;site&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;github&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;google&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://google.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span>  </span><br><span class="line">      <span class="punctuation">&#123;</span>  </span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stackoverflow&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://stackoverflow.com/&quot;</span>  </span><br><span class="line">      <span class="punctuation">&#125;</span>  </span><br><span class="line">    <span class="punctuation">]</span>  </span><br><span class="line">  <span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sites&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;site&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;github&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://github.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;google&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://google.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;3&quot;</span><span class="punctuation">,</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;stackoverflow&quot;</span><span class="punctuation">,</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;https://stackoverflow.com/&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div>
<h3 id="表格">表格</h3>
<table>
<thead>
<tr class="header">
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>行 1 列 1</td>
<td>行 1 列 2</td>
</tr>
<tr class="even">
<td>行 2 列 1</td>
<td>行 2 列 2</td>
</tr>
</tbody>
</table>
<p><strong>markdown 表格标记</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">| 标题1     | 标题2     |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 行 1 列 1 | 行 1 列 2 |</span><br><span class="line">| 行 2 列 1 | 行 2 列 2 |</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-08-19,10,250-->
<h3 id="公式">公式</h3>
<p><strong>数学公式</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="LATEX"><figure class="iseeu highlight /latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>y = x<span class="built_in">^</span>2<span class="built_in">$</span></span><br></pre></td></tr></table></figure></div> <span class="math inline">\(y=x^2\)</span></p>
<blockquote>
<p>注: Latex语法参考<a
href="../3ce969880cd0098d1862a98866197846a8c24d92">常用 LaTeX
公式符号</a></p>
</blockquote>
<h2 id="列表">列表</h2>
<h3 id="无序">无序</h3>
<ul>
<li>普通序列
<ul>
<li>1
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul></li>
<li>2</li>
<li>3</li>
</ul></li>
<li>普通序列</li>
<li>普通序列</li>
<li>普通序列</li>
</ul>
<h3 id="有序">有序</h3>
<ol type="1">
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
</ol>
<h3 id="混合">混合</h3>
<ul>
<li>混合序列
<ul>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ul></li>
<li>混合序列</li>
<li>混合序列
<ol type="1">
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ol></li>
<li>混合序列</li>
</ul>
<h3 id="任务">任务</h3>
<p><strong>任务列表</strong></p>
<ul class="task-list">
<li><input type="checkbox" disabled="" />
未完成<br />
</li>
<li><input type="checkbox" disabled="" checked="" />
已完成<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] 未完成   </span><br><span class="line">- [x] 已完成   </span><br></pre></td></tr></table></figure></div> <!--SR:!2022-08-16,7,250--></li>
</ul>
<h2 id="图表">图表</h2>
<p><strong>mermaid 流程图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br><span class="line">B--&gt;c</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">graph LR
A-->B
B-->c</pre>
<!--SR:!2022-11-07,57,250-->
<p><strong>mermaid 顺序图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: How are you?</span><br><span class="line">B-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">sequenceDiagram
A->>B: How are you?
B->>A: Great!</pre>
<!--SR:!2022-11-15,64,250-->
<p><strong>mermaid 甘特图</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 3d</span><br><span class="line"></span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 6d</span><br><span class="line"></span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure></div>
<pre class="mermaid">gantt
dateFormat YYYY-MM-DD

section S1
T1: 2014-01-01, 3d

section S2
T2: 2014-01-11, 6d

section S3
T3: 2014-01-02, 9d</pre>
<!--SR:!2022-10-11,40,250-->
<h2 id="注脚">注脚</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="MD"><figure class="iseeu highlight /md"><table><tr><td class="code"><pre><span class="line">Here is a simple footnote[^1].</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">My reference.</span></span><br></pre></td></tr></table></figure></div>
<p>Here is a simple footnote<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>A footnote can also have multiple lines<a href="#fn2"
class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>.</p>
<p>You can also use words, to fit your writing style more closely<a
href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"><sup>3</sup></a>.</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Obsidian+Hexo Markdown 测试
<ul>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a href="../3ce969880cd0098d1862a98866197846a8c24d92">常用 LaTeX
公式符号</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>My reference.<a href="#fnref1"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Every new line should be prefixed
with 2 spaces.<br />
This allows you to have a footnote with multiple lines.<a href="#fnref2"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Named footnotes will still render
with numbers instead of the text but allow easier identification and
linking.<br />
This footnote also has been made with a different syntax using 4 spaces
for new lines.<a href="#fnref3" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
        <tag>obsidian</tag>
        <tag>hexo</tag>
        <tag>top</tag>
      </tags>
  </entry>
  <entry>
    <title>代码编辑快捷键</title>
    <url>/8473a3e456218af045c905a822ea19e7cda31bd8/</url>
    <content><![CDATA[<p>自用代码编辑快捷键,所有编辑器通用</p>
<p><strong>浏览</strong> | hotkey | function | |
---------------------------- | --------------------------- | | alt + d |
go to defination | | alt + r | go to usages | | ctrl + click | go to
declaration or usages | | alt + end/alt + click | go to implementations
| | alt + home/alt + right click | go to super method | | alt + g | go
to class | | alt + l | go to line | | alt + ; | go to line end | | alt +
q | go back | | alt + e | go ahead | | alt + s | file struct | | alt +
[1-6] | expand all to level | <strong>编辑</strong> | hotkey | function
| | ---------------------------- | --------------------------- | | alt +
f | format file | | ctrl + / | toggle comment | | ctrl + f | find | |
ctrl + shift + f | global find | | ctrl + h | replace | | ctrl + shift +
h | global replace | | F2 | rename | | alt + n | generate code | | alt +
t | insert live template | | ctrl + t | save as live template | | alt +
↓ | move line down | | alt + ↑ | move line up | <strong>工程</strong> |
hotkey | function | | ---------------------------- |
--------------------------- | | f5 | run | | f6 | debug | | f7 | build |
| f9 | toggle line breakpoint | | f10 | step over | | f11 | step into |
| f12 | resume program |</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>env</tag>
        <tag>config</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>开发环境搭建</title>
    <url>/bd87468c61dcf8225663c6dfb8f94d59a17e17b7/</url>
    <content><![CDATA[<h2 id="sdk">SDK</h2>
<ul>
<li>Go <a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
<li>Lua</li>
<li>Rust</li>
<li>Node <code>linux:</code>[[Node 开发环境搭建 Deepin
<code>win10:</code>Node 开发环境搭建 Win10]]</li>
<li>Python3</li>
<li>NetCore</li>
<li>SDKMan</li>
</ul>
<h2 id="系统">系统</h2>
<ul>
<li>Git</li>
<li>Rime</li>
<li>Fish</li>
<li>Vimx</li>
<li>Htop</li>
<li>ScreenFetch</li>
</ul>
<h2 id="服务">服务</h2>
<ul>
<li>Nginx</li>
<li>Docker</li>
</ul>
<h2 id="数据库">数据库</h2>
<ul>
<li>MySQL</li>
<li>MongoDB</li>
<li>Redis</li>
<li>Kafka</li>
</ul>
<h2 id="后端框架">后端框架</h2>
<ul>
<li>Egg</li>
<li>Flask</li>
<li>Django</li>
<li>Spring Cloud</li>
</ul>
<h2 id="前端框架">前端框架</h2>
<ul>
<li>Vue</li>
<li>React</li>
</ul>
<h2 id="区块链">区块链</h2>
<ul>
<li>geth</li>
<li>Truffle</li>
<li>Hardhat</li>
<li>Brownie</li>
<li>Ganache</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>VSCode</li>
<li>Chrome</li>
<li>SmartGit</li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>开发环境搭建
<ul>
<li><a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>2.工作</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>deepin</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>goup- Elegant Go installer</title>
    <url>/129a8c1065deb5cb0363a63edda332836eb88b46/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/owenthereal/goup">github.com</a></p>
</blockquote>
<blockquote>
<p>Elegant Go installer. Contribute to owenthereal/goup development by
creating an account on GitHub.</p>
</blockquote>
<p><code>goup</code> (pronounced Go Up) is an elegant Go version
manager.</p>
<p>It is notorious that an operating system's package manager takes time
to update Go to the latest version, particularly on Linux distros. At
the time of this writing in October 2020, Fedora 32's Go version from <a
href="https://fedoraproject.org/wiki/DNF">dnf</a> is 1.14.9, while the
latest Go version is 1.15.2.</p>
<p>There are a bunch of solutions to install Go or manage Go versions
outside of a package manager: <a
href="https://github.com/golang/dl">golang/dl</a>, <a
href="https://github.com/golang/tools/tree/master/cmd/getgo">getgo</a>,
<a href="https://github.com/moovweb/gvm">gvm</a>, <a
href="https://github.com/syndbg/goenv">goenv</a>, to name a few. All of
them either do not work well on all Linux distros (I ran into errors
with <code>gvm</code> and <code>goenv</code> on Fedora) or do not
provide the developer experience that I like (<code>golang/dl</code>
requires a Go compiler to pre-exist; <code>getgo</code> can only install
the latest Go)</p>
<p>I want a Go version manager that:</p>
<ul>
<li>Has a minimum prerequisite to install, e.g., does not need a Go
compiler to pre-exist.</li>
<li>Is installed with a one-liner.</li>
<li>Runs well on all operating systems (at least runs well on *uix as a
start).</li>
<li>Installs any version of Go (any version from <a
href="https://golang.org/dl">golang.org/dl</a> or tip) and switches to
it.</li>
<li>Does not inject magic into your shell.</li>
<li>Is written in Go.</li>
</ul>
<p><code>goup</code> is an attempt to fulfill the above features and is
heavily inspired by <a href="https://rustup.rs/">Rustup</a>, <a
href="https://github.com/golang/dl">golang/dl</a> and <a
href="https://github.com/golang/tools/tree/master/cmd/getgo">getgo</a>.</p>
<h2 id="installation">Installation</h2>
<h3 id="one-liner">One-liner</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSf https://raw.githubusercontent.com/owenthereal/goup/master/install.sh | sh</span><br></pre></td></tr></table></figure></div>
<p>Install by skipping the confirmation prompt, e.g., for
automation:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">curl -sSf https://raw.githubusercontent.com/owenthereal/goup/master/install.sh | sh -s -- &#x27;--skip-prompt&#x27;</span><br></pre></td></tr></table></figure></div>
<h3 id="manual">Manual</h3>
<p>If you want to install goup manually, there are the steps:</p>
<ul>
<li>Download the latest <code>goup</code> from <a
href="https://github.com/owenthereal/goup/releases">https://github.com/owenthereal/goup/releases</a></li>
<li>Drop the <code>goup</code> executable to your <code>PATH</code> and
make it executable:
<code>mv GOUP_BIN /usr/local/bin/goup &amp;&amp; chmod +x /usr/local/bin/goup</code>
(为了和nvm命名统一, windows平台可以改名为gvm.exe, 并加入环境变量)</li>
<li>Add the Go bin directory to your shell startup script:
<code>echo 'export PATH="$HOME/.go/current/bin:$PATH"' &gt;&gt; ~/.bashrc</code>
(windows平台需要把.go/current/bin路径加入环境变量)</li>
</ul>
<h2 id="goup-quick-start">goup Quick Start</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ goup install</span><br><span class="line">Downloaded   0.0% (    32768 / 121149509 bytes) ...</span><br><span class="line">Downloaded  12.4% ( 15007632 / 121149509 bytes) ...</span><br><span class="line">Downloaded  30.2% ( 36634352 / 121149509 bytes) ...</span><br><span class="line">Downloaded  47.6% ( 57703440 / 121149509 bytes) ...</span><br><span class="line">Downloaded  65.9% ( 79855008 / 121149509 bytes) ...</span><br><span class="line">Downloaded  84.2% (101972672 / 121149509 bytes) ...</span><br><span class="line">Downloaded 100.0% (121149509 / 121149509 bytes)</span><br><span class="line">INFO[0030] Unpacking /home/owen/.go/go1.15.2/go1.15.2.linux-amd64.tar.gz ...</span><br><span class="line">INFO[0043] Success: go1.15.2 downloaded <span class="keyword">in</span> /home/owen/.go/go1.15.2</span><br><span class="line">INFO[0043] Default Go is <span class="built_in">set</span> to <span class="string">&#x27;go1.15.2&#x27;</span></span><br><span class="line">$ goup <span class="built_in">ls</span></span><br><span class="line">go1.15.2</span><br><span class="line">$ go <span class="built_in">env</span> GOROOT</span><br><span class="line">/home/owen/.go/go1.15.2</span><br><span class="line">$ go version</span><br><span class="line">go version go1.15.2 linux/amd64</span><br><span class="line"></span><br><span class="line">$ goup install tip</span><br><span class="line">Cloning into <span class="string">&#x27;/home/owen/.go/gotip&#x27;</span>...</span><br><span class="line">remote: Counting objects: 10041, <span class="keyword">done</span></span><br><span class="line">remote: Finding sources: 100% (10041/10041)</span><br><span class="line">remote: Total 10041 (delta 1347), reused 6538 (delta 1347)</span><br><span class="line">Receiving objects: 100% (10041/10041), 23.83 MiB | 3.16 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (1347/1347), <span class="keyword">done</span>.</span><br><span class="line">Updating files: 100% (9212/9212), <span class="keyword">done</span>.</span><br><span class="line">INFO[0078] Updating the go development tree...</span><br><span class="line">From https://go.googlesource.com/go</span><br><span class="line"> * branch            master     -&gt; FETCH_HEAD</span><br><span class="line">HEAD is now at 5d13781 cmd/cgo: add more architectures to size maps</span><br><span class="line">Building Go cmd/dist using /home/owen/.go/go1.15.2. (go1.15.2 linux/amd64)</span><br><span class="line">Building Go toolchain1 using /home/owen/.go/go1.15.2.</span><br><span class="line">Building Go bootstrap cmd/go (go_bootstrap) using Go toolchain1.</span><br><span class="line">Building Go toolchain2 using go_bootstrap and Go toolchain1.</span><br><span class="line">Building Go toolchain3 using go_bootstrap and Go toolchain2.</span><br><span class="line">Building packages and commands <span class="keyword">for</span> linux/amd64.</span><br><span class="line">---</span><br><span class="line">Installed Go <span class="keyword">for</span> linux/amd64 <span class="keyword">in</span> /home/owen/.go/gotip</span><br><span class="line">Installed commands <span class="keyword">in</span> /home/owen/.go/gotip/bin</span><br><span class="line">INFO[0297] Default Go is <span class="built_in">set</span> to <span class="string">&#x27;gotip&#x27;</span></span><br><span class="line">$ goup <span class="built_in">ls</span></span><br><span class="line">gotip</span><br><span class="line">$ go <span class="built_in">env</span> GOROOT</span><br><span class="line">/home/owen/.go/gotip</span><br><span class="line">$ go version</span><br><span class="line">go version devel +5d13781 Thu Oct 8 00:28:09 2020 +0000 linux/amd64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ GOUP_GO_HOST=golang.google.cn goup install <span class="comment"># For Gophers in China, see https://github.com/owenthereal/goup/issues/2</span></span><br></pre></td></tr></table></figure></div>
<h2 id="how-it-works">How it works</h2>
<ul>
<li><code>install.sh</code> downloads the latest Goup release for your
platform and appends Goup's bin directory (<code>$HOME/.go/bin</code>)
&amp; Go's bin directory (<code>$HOME/.go/current/bin</code>) to your
PATH environment variable.</li>
<li><code>goup</code> switches to selected Go version.</li>
<li><code>goup set</code> switches to selected Go version.</li>
<li><code>goup install</code> downloads specified version of Go
to<code>$HOME/.go/VERSION</code> and symlinks it to
<code>$HOME/.go/current</code>.</li>
<li><code>goup ls</code> list all installed Go version located at
<code>$HOME/.go/current</code>.</li>
<li><code>goup remove</code> removes the specified Go version.</li>
<li><code>goup search</code> lists all available Go versions from <a
href="https://golang.org/dl">https://golang.org/dl</a>.</li>
<li><code>goup upgrade</code> upgrades goup.</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>goup- Elegant Go installer
<ul>
<li><a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>env</tag>
        <tag>tool</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>golang-standards-project-layout</title>
    <url>/8c8460d05a78e244d2b3a37c8a84c87d9a14fa43/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/golang-standards/project-layout/blob/master/README_zh.md">github.com</a></p>
</blockquote>
<h1 id="standard-go-project-layout">Standard Go Project Layout</h1>
<p>这是 Go 应用程序项目的基本布局。它不是核心 Go
开发团队定义的官方标准；然而，它是 Go
生态系统中一组常见的老项目和新项目的布局模式。其中一些模式比其他模式更受欢迎。它还具有许多小的增强，以及对任何足够大的实际应用程序通用的几个支持目录。</p>
<p>如果你尝试学习 Go，或者你正在为自己建立一个 PoC
或一个玩具项目，这个项目布局是没啥必要的。从一些非常简单的事情开始
(一个 <code>main.go</code> 文件绰绰有余)。随着项目的增长，请记住保持代码结构良好非常重要，否则你最终会得到一个凌乱的代码，这其中就包含大量隐藏的依赖项和全局状态。当有更多的人参与这个项目时，你将需要更多的结构。这时候，介绍一种管理包
/
库的通用方法是很重要的。当你有一个开源项目时，或者当你知道其他项目从你的项目存储库中导入代码时，这时候拥有私有
(又名 <code>internal</code>)
包和代码就很重要。克隆存储库，保留你需要的内容，删除其他所有的内容!
仅仅因为它在那里并不意味着你必须全部使用它。这些模式都没有在每个项目中使用。甚至 <code>vendor</code>
模式也不是通用的。</p>
<p>Go 1.14 <a
href="https://github.com/golang/go/wiki/Modules"><code>Go Modules</code></a>
终于可以投入生产了。除非你有特定的理由不使用它们，否则使用 <a
href="https://blog.golang.org/using-go-modules"><code>Go Modules</code></a>
。如果你使用，就无需担心 $GOPATH
以及项目放置的位置。存储库中的 <code>go.mod</code>
文件基本假定你的项目托管在 Github
上，但这不是要求。模块路径可以是任何地方，尽管第一个模块路径组件的名称中应该有一个点（当前版本的
Go 不再强制使用该模块，但如果使用稍旧的版本，如果没有 <code>mod</code>
文件构建失败的话 ，不要惊讶）。如果你想知道更多信息，请参阅 Issues <a
href="https://github.com/golang/go/issues/37554"><code>37554</code></a> 和 <a
href="https://github.com/golang/go/issues/32819"><code>32819</code></a>
。</p>
<p>此项目布局是通用的，并且不会尝试强加一个特定的 Go 包结构。</p>
<p>这是社区的努力。
如果看到新的模式，或者认为一个现有的模式需要更新，请提一个 issue。</p>
<p>如果需要命名、格式和样式方面的帮助，请运行 <a
href="https://golang.org/cmd/gofmt/"><code>gofmt</code></a> 和 <a
href="https://github.com/golang/lint"><code>golint</code></a>
。还要确保阅读这些 Go 代码风格的指导方针和建议:</p>
<ul>
<li><a
href="https://talks.golang.org/2014/names.slide">https://talks.golang.org/2014/names.slide</a></li>
<li><a
href="https://golang.org/doc/effective_go.html#names">https://golang.org/doc/effective_go.html#names</a></li>
<li><a
href="https://blog.golang.org/package-names">https://blog.golang.org/package-names</a></li>
<li><a
href="https://github.com/golang/go/wiki/CodeReviewComments">https://github.com/golang/go/wiki/CodeReviewComments</a></li>
<li><a href="https://rakyll.org/style-packages">Style guideline for Go
packages</a> (rakyll/JBD)</li>
</ul>
<p>参见 <a
href="https://medium.com/golang-learn/go-project-layout-e5213cdcfaa2"><code>Go Project Layout</code></a> 了解更多的背景信息。</p>
<p>更多关于包的命名和组织以及其他代码结构的建议:</p>
<ul>
<li><a href="https://www.youtube.com/watch?v=PTE4VJIdHPg">GopherCon EU
2018: Peter Bourgon - Best Practices for Industrial Programming</a></li>
<li><a href="https://www.youtube.com/watch?v=MzTcsI6tn-0">GopherCon
Russia 2018: Ashley McNamara + Brian Ketelsen - Go best
practices.</a></li>
<li><a href="https://www.youtube.com/watch?v=ltqV6pDKZD8">GopherCon
2017: Edward Muller - Go Anti-Patterns</a></li>
<li><a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon
2018: Kat Zien - How Do You Structure Your Go Apps</a></li>
</ul>
<h2 id="go-目录">Go 目录</h2>
<h3 id="cmd"><code>/cmd</code></h3>
<p>本项目的主干。</p>
<p>每个应用程序的目录名应该与你想要的可执行文件的名称相匹配
(例如，<code>/cmd/myapp</code>)。</p>
<p>不要在这个目录中放置太多代码。如果你认为代码可以导入并在其他项目中使用，那么它应该位于 <code>/pkg</code>
目录中。如果代码不是可重用的，或者你不希望其他人重用它，请将该代码放到 <code>/internal</code>
目录中。你会惊讶于别人会怎么做，所以要明确你的意图!</p>
<p>通常有一个小的 <code>main</code> 函数，从 <code>/internal</code>
和 <code>/pkg</code> 目录导入和调用代码，除此之外没有别的东西。</p>
<p>有关示例，请参阅 <a
href="/golang-standards/project-layout/blob/master/cmd/README.md"><code>/cmd</code></a>
目录。</p>
<h3 id="internal"><code>/internal</code></h3>
<p>私有应用程序和库代码。这是你不希望其他人在其应用程序或库中导入代码。请注意，这个布局模式是由
Go 编译器本身执行的。有关更多细节，请参阅 Go 1.4 <a
href="https://golang.org/doc/go1.4#internalpackages"><code>release notes</code></a> 。注意，你并不局限于顶级
<code>internal</code>
目录。在项目树的任何级别上都可以有多个内部目录。</p>
<p>你可以选择向 internal
包中添加一些额外的结构，以分隔共享和非共享的内部代码。这不是必需的
(特别是对于较小的项目)，但是最好有有可视化的线索来显示预期的包的用途。你的实际应用程序代码可以放在 <code>/internal/app</code>
目录下 (例如
<code>/internal/app/myapp</code>)，这些应用程序共享的代码可以放在
<code>/internal/pkg</code> 目录下 (例如
<code>/internal/pkg/myprivlib</code>)。</p>
<h3 id="pkg"><code>/pkg</code></h3>
<p>外部应用程序可以使用的库代码 (例如
<code>/pkg/mypubliclib</code>)。其他项目会导入这些库，希望它们能正常工作，所以在这里放东西之前要三思:-)
注意，<code>internal</code>
目录是确保私有包不可导入的更好方法，因为它是由 Go
强制执行的。<code>/pkg</code> 目录仍然是一种很好的方式，可以显式地表示该目录中的代码对于其他人来说是安全使用的好方法。由 Travis
Jeffery  撰写的 <a
href="https://travisjeffery.com/b/2019/11/i-ll-take-pkg-over-internal/"><code>I'll take pkg over internal</code></a>
博客文章提供了 <code>pkg</code> 和 <code>internal</code>
目录的一个很好的概述，以及什么时候使用它们是有意义的。</p>
<p>当根目录包含大量非 Go 组件和目录时，这也是一种将 Go
代码分组到一个位置的方法，这使得运行各种 Go
工具变得更加容易（正如在这些演讲中提到的那样: 来自 GopherCon EU 2018 的
<a
href="https://www.youtube.com/watch?v=PTE4VJIdHPg"><code>Best Practices for Industrial Programming</code></a>
, <a href="https://www.youtube.com/watch?v=oL6JBUk6tj0">GopherCon 2018:
Kat Zien - How Do You Structure Your Go Apps</a> 和 <a
href="https://www.youtube.com/watch?v=3gQa1LWwuzk">GoLab 2018 -
Massimiliano Pippi - Project layout patterns in Go</a> ）。</p>
<p>如果你想查看哪个流行的 Go 存储库使用此项目布局模式，请查看 <a
href="/golang-standards/project-layout/blob/master/pkg/README.md"><code>/pkg</code></a> 目录。这是一种常见的布局模式，但并不是所有人都接受它，一些
Go 社区的人也不推荐它。</p>
<p>如果你的应用程序项目真的很小，并且额外的嵌套并不能增加多少价值
(除非你真的想要:-)，那就不要使用它。当它变得足够大时，你的根目录会变得非常繁琐时
(尤其是当你有很多非 Go 应用组件时)，请考虑一下。</p>
<h3 id="vendor"><code>/vendor</code></h3>
<p>应用程序依赖项 (手动管理或使用你喜欢的依赖项管理工具，如新的内置 <a
href="https://github.com/golang/go/wiki/Modules"><code>Go Modules</code></a>
功能)。<code>go mod vendor</code> 命令将为你创建 <code>/vendor</code>
目录。请注意，如果未使用默认情况下处于启用状态的 Go 1.14，则可能需要在
<code>go build</code> 命令中添加 <code>-mod=vendor</code> 标志。</p>
<p>如果你正在构建一个库，那么不要提交你的应用程序依赖项。</p>
<p>注意，自从 <a
href="https://golang.org/doc/go1.13#modules"><code>1.13</code></a>
以后，Go 还启用了模块代理功能 (默认使用 <a
href="https://proxy.golang.org"><code>https://proxy.golang.org</code></a>
作为他们的模块代理服务器)。在 <a
href="https://blog.golang.org/module-mirror-launch"><code>here</code></a>
阅读更多关于它的信息，看看它是否符合你的所有需求和约束。如果需要，那么你根本不需要 <code>vendor</code>
目录。</p>
<p>国内模块代理功能默认是被墙的，七牛云有维护专门的的<a
href="https://github.com/goproxy/goproxy.cn/blob/master/README.zh-CN.md"><code>模块代理</code></a>
。</p>
<h2 id="服务应用程序目录">服务应用程序目录</h2>
<h3 id="api"><code>/api</code></h3>
<p>OpenAPI/Swagger 规范，JSON 模式文件，协议定义文件。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/api/README.md"><code>/api</code></a>
目录。</p>
<h2 id="web-应用程序目录">Web 应用程序目录</h2>
<h3 id="web"><code>/web</code></h3>
<p>特定于 Web 应用程序的组件: 静态 Web 资产、服务器端模板和 SPAs。</p>
<h2 id="通用应用目录">通用应用目录</h2>
<h3 id="configs"><code>/configs</code></h3>
<p>配置文件模板或默认配置。</p>
<p>将你的 <code>confd</code> 或 <code>consul-template</code>
模板文件放在这里。</p>
<h3 id="init"><code>/init</code></h3>
<p>System init（systemd，upstart，sysv）和 process
manager/supervisor（runit，supervisor）配置。</p>
<h3 id="scripts"><code>/scripts</code></h3>
<p>执行各种构建、安装、分析等操作的脚本。</p>
<p>这些脚本保持了根级别的 Makefile 变得小而简单 (例如， <a
href="https://github.com/hashicorp/terraform/blob/master/Makefile"><code>https://github.com/hashicorp/terraform/blob/master/Makefile</code></a>
)。</p>
<p>有关示例，请参见  <a
href="/golang-standards/project-layout/blob/master/scripts/README.md"><code>/scripts</code></a>
目录。</p>
<h3 id="build"><code>/build</code></h3>
<p>打包和持续集成。</p>
<p>将你的云 (AMI)、容器( Docker )、操作系统( deb、rpm、pkg )
包配置和脚本放在 <code>/build/package</code> 目录下。</p>
<p>将你的 CI (travis、circle、drone)
配置和脚本放在 <code>/build/ci</code> 目录中。请注意，有些 CI 工具 (例如
Travis CI) 对配置文件的位置非常挑剔。尝试将配置文件放在
<code>/build/ci</code> 目录中，将它们链接到 CI 工具期望它们的位置
(如果可能的话)。</p>
<h3 id="deployments"><code>/deployments</code></h3>
<p>IaaS、PaaS、系统和容器编排部署配置和模板
(docker-compose、kubernetes/helm、mesos、terraform、bosh)。注意，在一些存储库中
(特别是使用 kubernetes 部署的应用程序)，这个目录被称为
<code>/deploy</code>。</p>
<h3 id="test"><code>/test</code></h3>
<p>额外的外部测试应用程序和测试数据。你可以随时根据需求构造
<code>/test</code>
目录。对于较大的项目，有一个数据子目录是有意义的。例如，你可以使用
<code>/test/data</code> 或 <code>/test/testdata</code>
(如果你需要忽略目录中的内容)。请注意，Go 还会忽略以 “.”
或“_”开头的目录或文件，因此在如何命名测试数据目录方面有更大的灵活性。</p>
<p>有关示例，请参见  <a
href="/golang-standards/project-layout/blob/master/test/README.md"><code>/test</code></a>
目录。</p>
<h2 id="其他目录">其他目录</h2>
<h3 id="docs"><code>/docs</code></h3>
<p>设计和用户文档 (除了 godoc 生成的文档之外)。</p>
<p>有关示例，请参阅 <a
href="/golang-standards/project-layout/blob/master/docs/README.md"><code>/docs</code></a>
目录。</p>
<h3 id="tools"><code>/tools</code></h3>
<p>这个项目的支持工具。注意，这些工具可以从 <code>/pkg</code>
和 <code>/internal</code> 目录导入代码。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/tools/README.md"><code>/tools</code></a>
目录。</p>
<h3 id="examples"><code>/examples</code></h3>
<p>你的应用程序和 / 或公共库的示例。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/examples/README.md"><code>/examples</code></a>
目录。</p>
<h3 id="third_party"><code>/third_party</code></h3>
<p>外部辅助工具，分叉代码和其他第三方工具 (例如 Swagger UI)。</p>
<h3 id="githooks"><code>/githooks</code></h3>
<p>Git hooks。</p>
<h3 id="assets"><code>/assets</code></h3>
<p>与存储库一起使用的其他资产 (图像、徽标等)。</p>
<h3 id="website"><code>/website</code></h3>
<p>如果你不使用 Github 页面，则在这里放置项目的网站数据。</p>
<p>有关示例，请参见 <a
href="/golang-standards/project-layout/blob/master/website/README.md"><code>/website</code></a>
目录。</p>
<h2 id="你不应该拥有的目录">你不应该拥有的目录</h2>
<h3 id="src"><code>/src</code></h3>
<p>有些 Go 项目确实有一个 <code>src</code>
文件夹，但这通常发生在开发人员有 Java
背景，在那里它是一种常见的模式。如果可以的话，尽量不要采用这种 Java
模式。你真的不希望你的 Go 代码或 Go 项目看起来像 Java:-)</p>
<p>不要将项目级别 <code>src</code> 目录与 Go 用于其工作空间的
<code>src</code> 目录 (如 <a
href="https://golang.org/doc/code.html"><code>How to Write Go Code</code></a>
中所述) 混淆。<code>$GOPATH</code> 环境变量指向你的 (当前)
工作空间(默认情况下，它指向非 windows 系统上的
<code>$HOME/go</code>)。这个工作空间包括顶层 <code>/pkg</code>, <code>/bin</code> 和 <code>/src</code>
目录。你的实际项目最终是 <code>/src</code>
下的一个子目录，因此，如果你的项目中有 <code>/src</code>
目录，那么项目路径将是这样的:
<code>/some/path/to/workspace/src/your_project/src/your_code.go</code>。注意，在
Go 1.11 中，可以将项目放在 <code>GOPATH</code>
之外，但这并不意味着使用这种布局模式是一个好主意。</p>
<h2 id="badges">Badges</h2>
<ul>
<li><p><a href="https://goreportcard.com/">Go Report Card</a> - It will
scan your code with <code>gofmt</code>, <code>go vet</code>,
<code>gocyclo</code>, <code>golint</code>, <code>ineffassign</code>,
<code>license</code> and <code>misspell</code>. Replace
<code>github.com/golang-standards/project-layout</code> with your
project reference.</p></li>
<li><p><a href="http://godoc.org">GoDoc</a> - It will provide online
version of your GoDoc generated documentation. Change the link to point
to your project.</p></li>
<li><p>Release - It will show the latest release number for your
project. Change the github link to point to your project.</p></li>
</ul>
<h2 id="notes">Notes</h2>
<p>A more opinionated project template with sample/reusable configs,
scripts and code is a WIP.</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>golang-standards-project-layout
<ul>
<li><a href="../e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416">Go
开发环境搭建</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>env</tag>
        <tag>go</tag>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 开发环境搭建</title>
    <url>/e1c5a4b5d0acd15a59a3afc9a59c56bc9aeb1416/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://polarisxu.studygolang.com/posts/go/2022-dev-env/">polarisxu.studygolang.com</a></p>
</blockquote>
<p>实话说，这个时候还写这么基础的文章，感觉有点太
low？但几乎每天有人开始学习 Go，那自然绕不开搭建 Go
开发环境。很多人会通过搜索网上的教程来照着做，于是发现搞不定，原因是找到的教程大部分比较老旧，都是基于
GOPATH 的。隔段时间我就会看到有人问类似的问题，所以才决定写一篇 2022 版
Go 开发环境搭建。</p>
<blockquote>
<p>提醒一句，入门教程涉及到代码放入 src 目录下的，基本是基于 GOPATH
的教程，请忽略。</p>
</blockquote>
<h2 id="安装-go">1、安装 Go</h2>
<p>Go 语言支持多平台，因此需要根据你的平台来下载对应的 Go
安装包。本文以当前最新的版本（1.17.6）为例，以 Mac 系统为主讲解。</p>
<h3 id="goup安装">Goup安装</h3>
<p>具体可以参考：<a
href="../129a8c1065deb5cb0363a63edda332836eb88b46">goup- Elegant Go
installer</a></p>
<h3 id="常规安装">常规安装</h3>
<p>到 <a
href="https://studygolang.com/dl">https://studygolang.com/dl</a>
下载对应的安装包。</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install01.png" /></p>
<p>如果你是 M1 之后的 Mac，下载 go1.17.6.darwin-arm64.pkg，否则下载
go1.17.6.darwin-amd64.pkg。之后双击下载的安装包，按提示一步步操作即可。</p>
<blockquote>
<p>Windows 安装方式类似，一步步操作即可。</p>
<p>Linux 下，需要解压压缩包，然后将解压后的文件夹移动到 /usr/local/
目录下。</p>
</blockquote>
<p>默认情况下，经过以上操作，Go 安装在了 /usr/local/go
中，可以通过以下命令验证是否安装成功：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ /usr/local/go/bin/go version</span><br><span class="line">go version go1.17.6 darwin/amd64</span><br></pre></td></tr></table></figure></div>
<p>如果能正常输出版本信息，表示安装成功了。</p>
<h3 id="配置环境变量">配置环境变量</h3>
<p>打开 <code>~/.bash_profile</code>，在文末加上以下内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/go/bin</span><br></pre></td></tr></table></figure></div>
<p>然后执行：</p>
<p>这时在终端直接输入 go verison：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ source  ~/.bash_profile</span><br></pre></td></tr></table></figure></div>
<p>这就是 PATH 环境变量的作用。</p>
<blockquote>
<p>Linux 下配置和 Mac 类似。</p>
<p>Windows 下请查阅配置 PATH 环境变量的方法。</p>
</blockquote>
<h3 id="配置代理">配置代理</h3>
<p>不过，国内特殊的环境，我们还需要做一个<strong>重要的配置</strong>，那就是
GOPROXY：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ go <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,https://goproxy.io,direct</span><br></pre></td></tr></table></figure></div>
<p>这样可以方便的下载 golang.org/x 等包，所以，记得执行以上命令。</p>
<h3 id="项目结构">项目结构</h3>
<p>参考: <a
href="../8c8460d05a78e244d2b3a37c8a84c87d9a14fa43">golang-standards-project-layout</a></p>
<h2 id="使用-goland">2、使用 GoLand</h2>
<p>这是大名鼎鼎的 JB 专门为 Go 语言定制的
IDE，很强大，目前最新稳定版本是 2021.3。</p>
<p>到 <a
href="https://www.jetbrains.com/zh-cn/go/">https://www.jetbrains.com/zh-cn/go/</a>
下载 goland-2021.3.3（2022.1.28 日构建
213.6777.51），之后双击安装。打开后看到如下界面：（GoLand
是付费软件，不过可以试用 30 天）</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install02.png" /></p>
<p>可以看到，GoLand 支持远程开发了，在打开 /
创建项目之前，可以做一些基本的配置，包括学习
GoLand、安装插件等。如果你不喜欢英文界面，在 Plugins
中可以找到中文界面插件，安装即可（GoLand
现在已经支持本地化，在你打开一个项目时，右下角会有提示，要不要切换到本地语言环境，即不需要手动安装语言包）。（我比较建议直接使用英文版）</p>
<p>我们点击 New Project，创建一个新项目：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install03.png" /></p>
<p>一定要选择第一项，而不是 Go（GOPATH），Location
可以选择你喜欢的位置，GOROOT 就是你 Go 安装的位置，GoLand
会自动检测到。</p>
<p>创建后，会创建好项目，里面会有一个 go.mod 文件。这是 Go Module
的依赖管理文件。创建一个文件 main.go，输入以下内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>GoLand 默认会自动保存。然后点击运行按钮运行：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install04.png" /></p>
<p>还可以 Debug。</p>
<p>对于已经存在的项目，如果发现代码提示、依赖等有问题，打开 GoLand
的「Preferences」，确认有无勾选 Module：</p>
<p><img
src="https://polarisxu.studygolang.com/posts/go/imgs/go-install05.png" /></p>
<p>GoLand 是开箱即用的，几乎不需要任何配置就可以愉快的玩耍。</p>
<h2 id="总结">3、总结</h2>
<p>总结一下，如下几个关键步骤：</p>
<ul>
<li>下载安装 Go</li>
<li>配置 PATH 环境变量</li>
<li>配置 GOPROXY</li>
<li>选择 GoLand 或 VSCode 或其他你喜欢的开发工具</li>
</ul>
<p>Enjoy Coding with Go！</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../bd87468c61dcf8225663c6dfb8f94d59a17e17b7">开发环境搭建</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Go 开发环境搭建
<ul>
<li><a
href="../bd87468c61dcf8225663c6dfb8f94d59a17e17b7">开发环境搭建</a></li>
<li><a
href="../8c8460d05a78e244d2b3a37c8a84c87d9a14fa43">golang-standards-project-layout</a></li>
<li><a href="../129a8c1065deb5cb0363a63edda332836eb88b46">goup- Elegant
Go installer</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Go</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>env</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>Retrofit 的使用</title>
    <url>/8e4613d92a388a4fdc66e34eefe891691cdb51e8/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://segmentfault.com/a/1190000021628790">segmentfault.com</a></p>
</blockquote>
<h2 id="retrofit-简介">Retrofit 简介</h2>
<p>Retrofit 是一个在 Android 开发中非常流行的网络框架，底层依赖 OkHttp。
Retrofit 和 OkHttp 都出自 Square 的技术团队。</p>
<p>Retrofit 的 GitHub 地址</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/square/retrofit</span></span><br></pre></td></tr></table></figure></div>
<p>应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装
==Header、URL、请求参数==等信息，之后由 OkHttp
完成后续的请求操作，在服务端返回数据之后， OkHttp 将原始的结果交给
Retrofit, Retrofit 再根据用户的需求==对结果进行解析==的过程。</p>
<p>Retrofit 支持大多数的 Http 方法。
<!--SR:!2022-11-16,8,250!2022-11-18,10,250--></p>
<p><strong>Retrofit 的特点如下：</strong></p>
<ol type="1">
<li>Retrofit 是可插拔的，允许不同的执行机制及其库用于执行 http
调用。允许 API
请求，与应用程序其余部分中任何现有线程模型或任务框架无缝组合。</li>
</ol>
<p>Retrofit 为常见的框架提供了适配器 (Adapter):</p>
<ul>
<li>RxJaval.x Observable &amp; Single -
com.squareup.retrofit2:adapter-rxjava</li>
<li>RxJava2.x Observable, Flowable, Single, Completable &amp; Maybe -
com.squareup.retrofit2:adapter-rxjava2</li>
<li>Guava ListenableFuture - com.squareup.retrofit2:adapter-guava</li>
<li>Java 8 CompletableFuture - com.squareup.retrofit2:adapter-java8</li>
</ul>
<ol start="2" type="1">
<li>）允许不同的序列化格式及其库，用于将 Java 类型转换为其 http
表示形式，并将 http 实体解析为 Java 类型。</li>
</ol>
<p>Retrofit 为常见的序列化格式提供了转换器 (Converter):</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String):
com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>开源社区也己经为其他库和序列化格式创建了各种第三方转换器
(Converter):</p>
<ul>
<li>LoganSquare -
com.github.aurae.retrofit2:converter-logansquare:1.4.1</li>
<li>FastJson - org.ligboy.retrofit2:converter-fastjson:2.1.0 和
org.ligboy.retrofit2:converter-fastjson-android:2.1.0</li>
</ul>
<p>OkHttp 的特点如下：</p>
<ul>
<li>支持 HTTP2/SPDY 黑科技</li>
<li>socket 自动选择最优路线，并支持自动重连。</li>
<li>拥有自动维护的 socket 连接池，减少握手次数</li>
<li>拥有队列线程池，轻松写并发</li>
<li>拥有 Interceptors 轻松处理请求与响应（比如透明 GZIP 压缩、
LOGGING）</li>
<li>基于 Headers 的缓存策略。</li>
</ul>
<h2 id="retrofit-与-rxjava-的完美配合">Retrofit 与 RxJava
的完美配合</h2>
<p>Retrofit 是一个网络框架，如果想尝试响应式的编程方式，则可以结合
RxJava 一起使用。Retrofit 对 RxJava1 和 RxJava2 都提供了 Adapter。</p>
<p>案例：将苏州市南门地区的 PM2.5、PM10、SO2 的数据展示到 App 上。
pm25.in
是一个公益性的网站，免费提供空气质量数据。在调用这些接口之前，<br />
需要去该网站注册，并申请一个 AppKey</p>
<p>Retrofit 使用步骤如下：</p>
<h3 id="添加-retrofit-依赖">1. 添加 Retrofit 依赖</h3>
<p>在 App 的 build.gradle 中添加所需要的 Retrofit 库，以及 RxJava2 的
adapter 库。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:retrofit:2.7.1&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.squareup.retrofit2:adapter-rxjava2:2.7.1&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;org.ligboy.retrofit2:converter-fastjson-android:2.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&quot;com.squareup.okhttp3:logging-interceptor:4.3.1&quot;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="创建-retrofitmanager">2. 创建 RetrofitManager</h3>
<p>一般需要创建 Retrofit 管理类，在这里创建一个名为 RetrofitManager
类，方便在<br />
整个 App 中使用。</p>
<p>RetrofitManager 代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RetrofitManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Retrofit retrofit;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Retrofit <span class="title function_">retrofit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retrofit == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">HttpLoggingInterceptor</span> <span class="variable">loggingInterceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpLoggingInterceptor</span>()</span><br><span class="line">                    .setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line"></span><br><span class="line">            <span class="type">OkHttpClient</span> <span class="variable">okHttpClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>.Builder()</span><br><span class="line">                    .writeTimeout(<span class="number">30_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .readTimeout(<span class="number">20_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .connectTimeout(<span class="number">15_1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                    .addInterceptor(loggingInterceptor)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            retrofit = <span class="keyword">new</span> <span class="title class_">Retrofit</span>.Builder()</span><br><span class="line">                    .baseUrl(APIService.API_BASE_SERVER_URL)</span><br><span class="line">                    .addConverterFactory(FastJsonConverterFactory.create())</span><br><span class="line">                    .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class="line">                    .client(okHttpClient)</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retrofit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="创建-apiservice">3. 创建 APIService</h3>
<p>接下来，我们需要定义网络请求的接口。 pm25.in
提供了多个获取空气质量数据的接口，这里选取其中 3
个接口，分别是获取一个城市所有监测点的 PM2.5
数据、获取一个城市所有监测点的 PM10 数据、获取一个城市所有监测点的 SO2
数据接口。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">APIService</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">API_BASE_SERVER_URL</span> <span class="operator">=</span> <span class="string">&quot;http://www.pm25.in/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/pm2_5.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;PM25Model&gt;&gt; <span class="title function_">pm25</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/pm10.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;PM10Model&gt;&gt; <span class="title function_">pm10</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET(&quot;api/querys/so2.json&quot;)</span></span><br><span class="line">    Maybe&lt;List&lt;SO2Model&gt;&gt; <span class="title function_">so2</span><span class="params">(<span class="meta">@Query(&quot;city&quot;)</span> String city, <span class="meta">@Query(&quot;token&quot;)</span> String token)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 APIService 中，每个方法返回的类型都是 Maybe 类型，其实也可以返回
Observable、Flowable 等类型。</p>
<h3 id="retrofit-的使用">4. Retrofit 的使用</h3>
<p>下面的代码分别调用了 3 个接口，井过滤出了南门地区的相关数据。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">APIService</span> <span class="variable">apiService</span> <span class="operator">=</span> RetrofitManager.retrofit().create(APIService.class);</span><br><span class="line"></span><br><span class="line">apiService.pm25(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM25Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm25Models != <span class="literal">null</span> &amp;&amp; !pm25Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM25Model&gt;, MaybeSource&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM25Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM25Model pm25Model : pm25Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm25Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm25Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;PM25Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(PM25Model pm25Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM25.Success-&gt; &quot;</span> + pm25Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM25.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">apiService.pm10(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM10Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm10Models != <span class="literal">null</span> &amp;&amp; !pm10Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM10Model&gt;, MaybeSource&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM10Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM10Model pm10Model : pm10Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm10Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm10Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;PM10Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(PM10Model pm10Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM10.Success-&gt; &quot;</span> + pm10Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;PM10.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">apiService.so2(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;SO2Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> so2Models != <span class="literal">null</span> &amp;&amp; !so2Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;SO2Model&gt;, MaybeSource&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;SO2Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (SO2Model so2Model : so2Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(so2Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(so2Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;SO2Model&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(SO2Model so2Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;SO2.Error-&gt; &quot;</span> + so2Model);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;SO2.Error-&gt; &quot;</span> + throwable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>这里还使用了 maybeToMain() 方法，它的代码如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JvmStatic</span></span><br><span class="line">fun &lt;T&gt; maybeToMain(): MaybeTransformer&lt;T, T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> MaybeTransformer &#123; upstream -&gt;</span><br><span class="line">        upstream.subscribeOn(Schedulers.io())</span><br><span class="line">            .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>它用于切换线程，返回 MaybeTransformer 对象。因为 apiService
中每个返回的方法都是<br />
Maybe 类型，所以这里会用到 MaybeTransformer 。使用了 maybeToMain() 后
，除网络请求是在<br />
io() 线程中运行外，其余的操作都是在主线程中运行的.</p>
<p>也可以让 filter、 flatMap 操作也在 io()
线程中运行，展示数据时才切换回主线程。</p>
<h3 id="常见使用场景">5. 常见使用场景</h3>
<p>接下来列举一些 Retrofit 其余常见的使用场景。</p>
<ol type="1">
<li><strong>合并多个网络请求</strong></li>
</ol>
<p>如：需要在某一个信息流列表中插入多条广告，每一条广告都需要做一次网络请求。这时就可以考虑使用
zip
操作符，将请求信息流，以及请求的多个广告的请求合并起来，等所有请求完成之后，再用合并函数将广告插到信息流固定的位置上，最后以列表的形式呈现给用户。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">APIService</span> <span class="variable">apiService</span> <span class="operator">=</span> RetrofitManager.retrofit().create(APIService.class);</span><br><span class="line"></span><br><span class="line">Maybe&lt;PM25Model&gt; pm25ModelMaybe = apiService.pm25(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM25Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm25Models != <span class="literal">null</span> &amp;&amp; !pm25Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM25Model&gt;, MaybeSource&lt;PM25Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM25Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM25Model&gt; pm25Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM25Model pm25Model : pm25Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm25Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm25Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Maybe&lt;PM10Model&gt; pm10ModelMaybe = apiService.pm10(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;PM10Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> pm10Models != <span class="literal">null</span> &amp;&amp; !pm10Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;PM10Model&gt;, MaybeSource&lt;PM10Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;PM10Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;PM10Model&gt; pm10Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (PM10Model pm10Model : pm10Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(pm10Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(pm10Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">Maybe&lt;SO2Model&gt; so2ModelMaybe = apiService.so2(Constant.CITY, Constant.TOKEN)</span><br><span class="line">        .compose(RxJavaUtils.&lt;List&lt;SO2Model&gt;&gt;maybeToMain())</span><br><span class="line">        .filter(<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;List&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">return</span> so2Models != <span class="literal">null</span> &amp;&amp; !so2Models.isEmpty();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;List&lt;SO2Model&gt;, MaybeSource&lt;SO2Model&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> MaybeSource&lt;SO2Model&gt; <span class="title function_">apply</span><span class="params">(List&lt;SO2Model&gt; so2Models)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">for</span> (SO2Model so2Model : so2Models) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">&quot;南门&quot;</span>.equals(so2Model.position_name)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> Maybe.just(so2Model);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Maybe.zip(pm25ModelMaybe, pm10ModelMaybe, so2ModelMaybe, <span class="keyword">new</span> <span class="title class_">Function3</span>&lt;PM25Model, PM10Model, SO2Model, ZipObject&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ZipObject <span class="title function_">apply</span><span class="params">(PM25Model pm25Model, PM10Model pm10Model, SO2Model so2Model)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;zip-&gt; \r\n&quot;</span> + pm25Model + <span class="string">&quot;\r\n&quot;</span> + pm10Model + <span class="string">&quot;\r\n&quot;</span> + so2Model);</span><br><span class="line">        <span class="type">ZipObject</span> <span class="variable">zipObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZipObject</span>();</span><br><span class="line"></span><br><span class="line">        zipObject.pm2_5 = pm25Model.pm2_5;</span><br><span class="line">        zipObject.pm2_5_24h = pm25Model.pm2_5_24h;</span><br><span class="line">        zipObject.pm2_5_quality = pm25Model.quality;</span><br><span class="line"></span><br><span class="line">        zipObject.pm10 = pm10Model.pm10;</span><br><span class="line">        zipObject.pm10_24h = pm10Model.pm10_24h;</span><br><span class="line"></span><br><span class="line">        zipObject.so2 = so2Model.so2;</span><br><span class="line">        zipObject.so2_24h = so2Model.so2_24h;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> zipObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;ZipObject&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ZipObject zipObject)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Success-&gt; &quot;</span> + zipObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Throwable&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;Error-&gt; &quot;</span> + throwable);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li><strong>返回默认值</strong></li>
</ol>
<p>有时, 网络请求失败可以使用 onErrorReturn 操作符,
一个空的对象作为默认值。</p>
<ol start="3" type="1">
<li><strong>多个网络请求嵌套使用</strong></li>
</ol>
<p>若是 A 请求完成之后，才能去调用 B 请求，则可以考虑使用 flatMap
操作符。</p>
<ol start="4" type="1">
<li><strong>重试机制</strong></li>
</ol>
<p>对于一些重要的接口，需要采用重试机制。因为有些时候用户的网络环境比较差，第一次请求接口超时了，那么再一次请求可能就会成功。虽然有一定的延时，但至少返回了数据，保证了用户体验。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">apiService.loadContent(params)</span><br><span class="line">        .retryWhen(<span class="keyword">new</span> <span class="title class_">RetryWithDelay</span>(<span class="number">3</span>, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure></div>
<p>在这里 retryWhen 操作符与 RetryWithDelay 一起搭配使用，表示有 3
次重试机会，每次的延迟时间是 1000ms。 RetryWithDelay 是一个工具类，使用
kotlin 语言编写。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="KOTLIN"><figure class="iseeu highlight /kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RetryWithDelay</span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> maxRetries: <span class="built_in">Int</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> retryDelayMillis: <span class="built_in">Int</span></span><br><span class="line">) : Function&lt;Flowable&lt;<span class="keyword">out</span> Throwable&gt;, Publisher&lt;*&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> retryCount: <span class="built_in">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.retryCount = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">apply</span><span class="params">(attempts: <span class="type">Flowable</span>&lt;<span class="type">out</span> <span class="type">Throwable</span>&gt;)</span></span>: Publisher&lt;*&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> attempts.flatMap &#123; throwable -&gt;</span><br><span class="line">            <span class="keyword">if</span> (++retryCount &lt;= maxRetries) &#123;</span><br><span class="line">                Flowable.timer(retryDelayMillis.toLong(), TimeUnit.MILLISECONDS)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Flowable.error(throwable)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>retrofit</tag>
      </tags>
  </entry>
  <entry>
    <title>RxBinding 详解</title>
    <url>/99b7ea8e703292f9b0f7440fcd8408207a908133/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://segmentfault.com/a/1190000021623958">segmentfault.com</a></p>
</blockquote>
<h2 id="rxbinding-简介">1. RxBinding 简介</h2>
<h3 id="rxbinding-介绍">1.1 RxBinding 介绍</h3>
<p>RxBinding 是 Jake Wharton 大神写的框架，它的 API 能够把 Android
平台和兼容包内的 <mark style="background: #fefe00A6;">UI 控件变为
Observable 对象</mark> ，这样就可以把 UI 控件的事件当作 RxJava
中的数据流来使用了。</p>
<p>比如 View 的 onClick 事件，使用 RxView.clicks(view）即可获取一个
Observable 对象，每当用户单击这个 View 的时候，该 Observable
对象就会发射一个事件， Observable 的观察者就可以通过 onNext
回调知道用户单击了 View。 <!--SR:!2022-11-17,9,250--></p>
<p>RxBinding GitHub 地址：<a
href="https://link.segmentfault.com/?enc=8jIQjRlzvoEQxF%2F0ZvcMdg%3D%3D.HoEAkY9QS3mVt5PyTA8jbt8bg00NN0ZcX2bEUxtePYxCCgO%2B4SH8vQEUucQ9L33Z">https://github.com/JakeWharto...</a></p>
<p><strong>RxBinding 的优点：</strong></p>
<ul>
<li>它是对 Android View
事件的扩展，它使得开发者可以<mark style="background: #fefe00A6;">对 View
事件使用 RxJava 的各种操作</mark></li>
<li>提供了<mark style="background: #fefe00A6;">与 RxJava
一致的回调</mark>
，使得代码简洁明了，尤其是页面上充斥着大量的监昕件，以及各种各样的匿名内部类</li>
<li><mark style="background: #fefe00A6;">几乎支持所有的常用控件及事件</mark>
（ v4 、v7、 design、recyclerview 等〉，另外每个库还有对应的 Kotlin
支持库。 <!--SR:!2022-11-17,9,250--></li>
</ul>
<p><strong>RxBinding 的下载：</strong></p>
<p>Platform bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>AndroidX library bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-core:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-appcompat:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-drawerlayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-leanback:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-recyclerview:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-slidingpanelayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-swiperefreshlayout:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-viewpager:3.1.0&#x27;</span></span><br><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-viewpager2:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>Google 'material' library bindings:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.jakewharton.rxbinding3:rxbinding-material:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="响应式的-android-ui">1.2 响应式的 Android UI</h3>
<p>对 UI 事件（例如点击、滑动和文本输入）的响应几乎是 Android App
开发的基本部分，但是 Android SDK 对 UI 事件的处理有些复杂
，我们通常需要使用各种 listeners、handlers、<br />
TextWatchers 和其他组件等组合来响应 UI
事件。这些组件中的每一个都需要编写大量的样板代码，更为糟糕的是，实现这些不同组件的方式并不一致。例如，你可以通过实现
OnClickListener 来处理 OnClick 件。</p>
<p>这种一致性的缺乏可能会为代码增加很多复杂性。如果有些 UI
组件需要依赖于其他 UI 组件的输出，那么事情会变得更加复杂。</p>
<p>即使是一个简单的需求，例如要求用户将其名称输入到 EditText
，以便个性化地展示 TextView 的文本内容，而 TextView
需要嵌套回调，这是非常难以实现和维护的（有人将嵌套回调称为
“回调地狱”〉。</p>
<p>显然，处理 UI 事件的标准化方法有大大简化代码的空间，而 RxBinding
就是这样的库，它<br />
提供的绑定能够将任何 Android View 事件转换为 Observable。</p>
<p>一旦将 View 事件转换为 Observable ，它将发射数据流形式的 UI
事件，我们就可以订阅这个数据流，这与订阅其他 Observable
方式相同。接下来，看看如何实现 OnClick 事件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">Button</span> <span class="variable">button</span> <span class="operator">=</span> findViewById(R.id.button);</span><br><span class="line"></span><br><span class="line">RxView.clicks(button)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;RxBinding.click&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>这种方法不仅更简洁，而且是一种标准的实现方式，我们可以将其应用于整个
App 的所有 UI
事件。例如，<mark style="background: #fefe00A6;">捕获文本输入</mark>
与捕获点击事件的模式是一样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">EditText</span> <span class="variable">editText</span> <span class="operator">=</span> findViewById(R.id.edit_text);</span><br><span class="line">RxTextView.textChanges(editText)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;CharSequence&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(CharSequence charSequence)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;RxBinding.textChanges-&gt; &quot;</span> + charSequence);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-18,10,250-->
<h2 id="rxbinding-使用场景">2. RxBinding 使用场景</h2>
<p>RxBinding 可以应用于整个 App 的所有 UI 事件，下面列举一些 RxBinding
比较常见的使用场景。</p>
<h3 id="点击事件">2.1 点击事件</h3>
<p>按钮的点击事件是每 App 都会用到的场景，可以使用 RxView 的
clicks(<span class="citation" data-cites="NonNull">@NonNull</span> View
view）方法来绑定 UI 控件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(button1)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;演示点击事件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-16,8,250-->
<h3 id="长点击事件">2.2 长点击事件</h3>
<p>长点击事件也是一个比较常见的事件，可以使用 RxView 的 longClicks(<span
class="citation" data-cites="NonNull">@NonNull</span> View view)
方法来绑定 UI 控件</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.longClicks(button2)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Unit&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Unit unit)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;演示长点击事件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-17,9,250-->
<h3 id="防止重复点击">2.3 防止重复点击</h3>
<p>在弱网络环境下，经常会遇到点击某个按钮没有响应的情况，此时心急的用户可能会多次点击按钮，从而造成事件的多次触发，显然这是我们不愿意看到的情况。可以利用
throttleFirst 操作符获取某段时间内的第一次点击事件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(button3)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(RxBindingAct.<span class="built_in">this</span>))</span><br><span class="line">        .throttleFirst(<span class="number">1000</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;防止重复点击&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-17,9,250-->
<h3 id="表单的验证-textchanges">2.4 表单的验证 (textChanges)</h3>
<p>App
内常见的表单验证是用户登录页面，我们需要对用户名、密码做一些校验。对于校验，有些是服务端做的，例如，用户名是否存在、用户名的密码是否正确等。而有些校验则需要客户端来做，例如，用户名是否输入、输入的用户名是否规范、密码是否输入等。</p>
<p>例如，手机号码不足 11 位时，会出现一个提示</p>
<p>如果密码没有输入，就点击 “登录” 按钮，则会弹出一个提示</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">EditText</span> <span class="variable">phone</span> <span class="operator">=</span> findViewById(R.id.phone);</span><br><span class="line"><span class="type">EditText</span> <span class="variable">password</span> <span class="operator">=</span> findViewById(R.id.password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observable&lt;CharSequence&gt; observablePhone = RxTextView.textChanges(phone);</span><br><span class="line">Observable&lt;CharSequence&gt; observablePassword = RxTextView.textChanges(password);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Observable.combineLatest(observablePhone, observablePassword, <span class="keyword">new</span> <span class="title class_">BiFunction</span>&lt;CharSequence, CharSequence, ValidationResult&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ValidationResult <span class="title function_">apply</span><span class="params">(CharSequence charSequence1, CharSequence charSequence2)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ValidationResult</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ValidationResult</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (charSequence1.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;手机号码不能为空&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charSequence1.length() != <span class="number">11</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;手机号码需要11位&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (charSequence2.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            result.flag = <span class="literal">false</span>;</span><br><span class="line">            result.message = <span class="string">&quot;密码不能为空&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;ValidationResult&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ValidationResult validationResult)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        result = validationResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">Button</span> <span class="variable">login</span> <span class="operator">=</span> findViewById(R.id.login);</span><br><span class="line"></span><br><span class="line">RxView.clicks(login)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(RxBindingAct.<span class="built_in">this</span>))</span><br><span class="line">        .subscribeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (result == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (result.flag) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;result-&gt; 登陆成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;result-&gt; &quot;</span> + result.message);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>combineLatest 的作用是将多个 Observable
发射的数据组装起来然后再发射出来。这里两个输入框只要内容发生变化，就会发送
Observable ，此时我们即可在 BiFunction
中利用验证方法去判断输入框中最新的内容，最终返 ValidationResult 对象。
<!--SR:!2022-11-16,8,250--></p>
<h3 id="获取验证码倒计时">2.5 获取验证码倒计时</h3>
<p>用户注册账号时，一般需要获取验证码来验证手机号码</p>
<p>在等待验证码的过程中， App 界面上通常会有一个倒计时，提示我们剩余 xx
秒可以重新获取验证码。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_COUNT_TIME</span> <span class="operator">=</span> <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">RxView.clicks(button5)</span><br><span class="line">        .throttleFirst(MAX_COUNT_TIME, TimeUnit.SECONDS)</span><br><span class="line">        .flatMap(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Object, ObservableSource&lt;Long&gt;&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> ObservableSource&lt;Long&gt; <span class="title function_">apply</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">// 1. 更新发送按钮的状态，并初始化显现倒计时文字</span></span><br><span class="line">                Log.d(TAG, <span class="string">&quot;flatMap&quot;</span>);</span><br><span class="line">                <span class="comment">// 2. 返回 n 秒内的倒计时观察者对象</span></span><br><span class="line">                <span class="keyword">return</span> Observable.interval(<span class="number">1</span>, TimeUnit.SECONDS, Schedulers.io()).take(MAX_COUNT_TIME);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 将递增数字替换成递减的倒计时数字</span></span><br><span class="line">        .map(<span class="keyword">new</span> <span class="title class_">Function</span>&lt;Long, Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Long <span class="title function_">apply</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;map: &quot;</span> + aLong);</span><br><span class="line">                <span class="keyword">return</span> MAX_COUNT_TIME - (aLong - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 切换到 Android 的主线程</span></span><br><span class="line">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (aLong == <span class="number">0</span>) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;倒计时完成.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;倒计时剩余：&quot;</span> + aLong + <span class="string">&quot; 秒&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>Observable.interval(1, TimeUnit.SECONDS, Schedulers.io()) 表示每 1
秒发射一次数据。<br />
take(MAX_COUNT_TIME) 和后面的操作表示按钮在 60s
内不可再次被点击，并且在这段时间每隔一秒发射一次数据用于更新 UI。
<mark style="background: #83d98fA6;">在实际使用中，需要在 flatMap
里做获取短信验证码络请求。</mark> <!--SR:!2022-11-15,7,250--></p>
<h3 id="recyclerview-的支持">2.6 RecyclerView 的支持</h3>
<p>Rx.Bindin 提供了一个 rxbinding-recyclerview 的库，专门用于对
RecyclerView 支持。</p>
<p>其中， RxRecyclerView 提供了几个状态的观察：</p>
<ul>
<li><strong>scrollStateChanges</strong> 观察 RecyclerView
的滚动状态</li>
<li><strong>scrollEvents</strong> 观察 RecyclerView 的滚动事件</li>
<li><strong>childAttachStateChangeEvents</strong> 观察 child view 的
detached 状态， LayoutManager 或者 RecyclerView 认为不再需要一个 child
view 时，就会调用这个方法。 如果 child view
占用资源，则应当释放资源。</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxRecyclerView</span><br><span class="line">        .scrollStateChanges(recyclerView)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Integer scrollState)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                Log.d(TAG, <span class="string">&quot;scrollState: &quot;</span> + scrollState);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p>scrollState 表示 RecyclerView 中定义的滚动状态。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RecyclerView 当前没有滚动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_IDLE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RecyclerView 正在被拖动</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_DRAGGING</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手指已经离开屏幕，RecyclerView 正在做动画移动到最终位置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SCROLL_STATE_SETTLING</span> <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure></div>
<p>除可以对 RecyclerView 状态的进行监听外，还能对点击事件进行监听</p>
<p>在 Adapter 的 onBindViewHolder() 中，可以使用 clicks() 来绑定
itemView 的点击事件。 <!--SR:!2022-11-18,10,250--></p>
<h3 id="对-ui-控件进行多次监听">2.7 对 UI 控件进行多次监听</h3>
<p>可以利用 RxJava 的操作符，例如 publish、share、replay ，实现对 UI
控件的多次监听</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">Observable</span> <span class="variable">observable</span> <span class="operator">=</span> RxView.clicks(button5)</span><br><span class="line">        .compose(RxUtils.useRxViewTransformer(<span class="built_in">this</span>))</span><br><span class="line">        .share();</span><br><span class="line">        </span><br><span class="line">observable.subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;第一次监听&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">observable.subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Log.d(TAG, <span class="string">&quot;第二次监听&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行结果</span></span><br><span class="line"> 第一次监听</span><br><span class="line"> 第二次监听</span><br></pre></td></tr></table></figure></div>
<p>使用了 share 操作符，随后做了两次监监听，点击该控件打印两次
<!--SR:!2022-11-16,8,250--></p>
<h2 id="rxbinding-结合-rxpermissions-的使用">3. RxBinding 结合
RxPermissions 的使用</h2>
<h3 id="android-6.0-之后权限的改变">3.1 Android 6.0 之后权限的改变</h3>
<p><a
href="https://developer.android.google.cn/training/permissions/requesting">Request
app permissions  |  Android Developers</a> <a
href="https://developer.android.google.cn/guide/topics/permissions/overview#perm-groups">Permissions
on Android  |  Android Developers</a></p>
<p>Android 6.0
带来一个很大变化就是权限机制的改变，特别是运行时权限。</p>
<p>Android 6.0＋添加的运行时权限可分为两类：</p>
<ul>
<li>Normal Permissions:
这类权限不涉及个人隐私，不需要用户授权，比如手机震动、访问网络等。</li>
<li>Dangerous Permissions ：这类权限涉及个人隐私，需要用户授权，比如读取
SD 卡、访问通讯录等</li>
</ul>
<p>Dangerous Permissions 是有分组的。App 运行在 Android
6.0＋的手机之上，如果用户申请了某个 Dangerous Permissions
，而该用户己经授权了一个与他现在申请的是同一组的 Dangerous Permissions
，那么系统会自动授权，无须用户再次授权。<br />
<img src="https://segmentfault.com/img/remote/1460000021623961" /></p>
<p>对于 Android 6.0 以下的手机，用户在安装 App
的时候可以看到权限声明产生一个权限列表，用户只有在同意之后才能完成 App
的安装。如果用户想要使用某个
App，就需要忍受其一些不必要的权限（例如访问通讯录、短信的权限等）。从
Android 6.0 以后我们可以直接安装 App，当 App
需要我们授予不恰当的权限的时候，我们可以予以拒绝。当然作为用户也可以在手机的设置界面里对每个
App 的权限进行查看，井对单个权限进行授权或者解除授权。</p>
<p>App 的 targetSdkVersion 是 23 及以上，并且 App 运行在 Android 6.0
及以上的设备时，需同时满足这两个条件才需要动态地请求危险权限。</p>
<h3 id="rxpermissions-的介绍">3.2 RxPermissions 的介绍</h3>
<p>在处理运行时权限时，通常需要两步：</p>
<ul>
<li>申请权限</li>
<li>处理权限回调，根据授权的情况进行回调</li>
</ul>
<p>RxPermissions 的出现可以简化这些步骤，它是基于 RxJava 开发的 Android
框架，帮助 Android 6.0 之后处理运行时权限的检测。</p>
<p>RxPermissions GitHub 地址：<a
href="https://github.com/tbruyelle/RxPermissions">GitHub -
tbruyelle/RxPermissions: Android runtime permissions powered by
RxJava2</a></p>
<p>RxPermissions 的下载：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        maven &#123; url <span class="string">&#x27;https://jitpack.io&#x27;</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;com.github.tbruyelle:rxpermissions:0.10.2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="rxbinding-结合-rxpermissions">3.3 RxBinding 结合
RxPermissions</h3>
<p>在 RxPermissions 使用之前，需要先创建 RxPermissions 的实例。可以在
Activity 的 onCreate() 中进行创建，创建之后才能使用它。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">RxPermissions</span> <span class="variable">rxPermissions</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RxPermissions</span>(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></div>
<h4 id="在-rxbinding-中使用-rxpermissions">3.3.1 在 RxBinding 中使用
RxPermissions</h4>
<p>举一个拨打电话的例子，CALL_PHONE 在 Android 6.0 之后是一个 Dangerous
Permissions,
第一次使用时需要动态申请该权限，只有得到允许才能完成后面打电话的动作。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Object&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">                rxPermissions.request(Manifest.permission.CALL_PHONE)</span><br><span class="line">                        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">&quot;授权成功.&quot;</span>);</span><br><span class="line">                                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                    Log.d(TAG, <span class="string">&quot;授权失败&quot;</span>);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="rxbinding-结合-compose使用-rxpermissions">3.3.2 RxBinding 结合
compose，使用 RxPermissions</h4>
<p>RxBinding 可以结合 compose 操作符来使用 RxPermissions 。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .compose(rxPermissions.&lt;Unit&gt;ensure(Manifest.permission.CALL_PHONE))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;授权成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;授权失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h4 id="使用多个权限的用法">3.3.3 使用多个权限的用法</h4>
<p>RxPermissions 也支持申请多个权限，如同时申请 CAMERA 和
WRITE_EXTERNAL_STORAGE
的权限。单击按钮之后，需要授权两次，任何一次授权的失败都会导致
“打开相机失败”。只有两次申请权限都成功，才能 “打开相机成功”。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">RxView.clicks(findViewById(R.id.button))</span><br><span class="line">        .compose(rxPermissions.ensure(Manifest.permission.CALL_PHONE,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE))</span><br><span class="line">        .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Boolean&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Boolean granted)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (granted) &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;打开相机成功.&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">&quot;打开相机失败&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="rxbinding-使用的注意点">4. RxBinding 使用的注意点</h2>
<p>trello 的 RxLifecycle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/trello/RxLifecycle</span></span><br></pre></td></tr></table></figure></div>
<p>知乎的 RxLifecycle</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/zhihu/RxLifecycle</span></span><br></pre></td></tr></table></figure></div>
<p>其它的 RxLifecycle，这个与知乎的 RxLifecycle 的区别是，
LifecycleTransformer 实现了多个 Transformer 接口。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//github.com/fengzhizi715/SAF/tree/master/saf-rxlifecycle</span></span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>rxbinding</tag>
      </tags>
  </entry>
  <entry>
    <title>RxLifecycle 使用详解</title>
    <url>/b579eb5bbcfcdc8b475b7b2b8ccf27ca71adf335/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://blog.csdn.net/qq_36699930/article/details/89001357">blog.csdn.net</a></p>
</blockquote>
<p>Github: <a
href="https://github.com/trello/RxLifecycle">RxLifecycle</a></p>
<h2 id="rxlifecycle-依赖">RxLifecycle 依赖</h2>
<ul>
<li>注意：本文使用的版本是 4.0.2 版本</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// RxLifecycle  </span></span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle:4.0.2&#x27;</span>  </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components-preference:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android-lifecycle:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-kotlin:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android-lifecycle-kotlin:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;androidx.lifecycle:lifecycle-extensions:2.2.0&#x27;</span>  </span><br><span class="line">annotationProcessor <span class="string">&#x27;androidx.lifecycle:lifecycle-compiler:2.3.1&#x27;</span></span><br></pre></td></tr></table></figure></div>
<h2 id="rxlifecycle-介绍">RxLifecycle 介绍</h2>
<p><strong>RxLifecycle 目的</strong>：解决 RxJava
使用中的==内存泄漏==问题。</p>
<p><strong>RxLifecycle 核心思想</strong>：通过监听 Activity、Fragment
的生命周期，来自动==断开订阅==防止内存泄漏。</p>
<p>例如，当使用 RxJava 订阅并执行耗时任务后，当 Activity 被 finish
时，如果耗时任务还未完成，没有及时取消订阅，就会导致 Activity
无法被回收，从而引发内存泄漏。</p>
<p>为了解决这个问题，就产生了 RxLifecycle，让 RxJava
变得有生命周期感知，使得其能及时取消订阅，避免出现内存泄漏问题。</p>
<p>它可以让 Observable
发布的事件和当前的组件绑定，实现生命周期同步。<br />
从而实现当前组件生命周期结束时，自动取消对 Observable 订阅。
<!--SR:!2022-11-15,7,250!2022-11-18,10,250--></p>
<p><strong>目前网上对 RxJava 的内存泄漏有几种方案</strong></p>
<ol type="1">
<li>手动为 RxJava
的每一次订阅进行控制，指定在哪个生命周期方法调用时取消订阅；</li>
<li>当前组件生命周期结束时，自动取消对 Observable 订阅</li>
</ol>
<p>上述两种方式我都使用过，RxLifecycle
显然对于第一种方式，更简单直接，并且能够在 Activity/Fragment
容器的指定生命周期取消订阅，实在是好用。</p>
<p><strong>RxJava 的内存泄漏案例</strong></p>
<p>每隔 1 秒打印，无限循环：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// interval 默认在新线程，所以需要切换回主线程</span></span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>打印结果</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">09.004</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: onCreate: </span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">11.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">12.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">13.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">2</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">14.028</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">3</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">15.050</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: onDestroy: </span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">15.061</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">4</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">16.029</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">5</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">10</span>:<span class="number">17.028</span> <span class="number">15261</span>-<span class="number">15261</span>/com.xyh.rxlifecycle E/xyh: <span class="number">6</span></span><br></pre></td></tr></table></figure></div>
<p>我们发现执行 onDestroy()
方法后，还会继续执行，因为没有及时解除订阅，在退出 activity
的时候，异步线程还在执行，对 activity
还存在引用，此时就会产生内存泄漏。</p>
<h2 id="rxlifecycle-的使用-继承">RxLifecycle 的使用 (继承)</h2>
<p><strong>添加依赖</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//处理rxjava内存泄漏   </span></span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle:4.0.2&#x27;</span>  </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-android:4.0.2&#x27;</span> </span><br><span class="line">implementation <span class="string">&#x27;com.trello.rxlifecycle4:rxlifecycle-components:4.0.2&#x27;</span> </span><br></pre></td></tr></table></figure></div>
<p><strong>Activity/Fragment 需继承
RxAppCompatActivity/RxFragment，目前支持的有如下：</strong><br />
<img
src="https://img-blog.csdnimg.cn/20200311220545331.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2Njk5OTMw,size_16,color_FFFFFF,t_70" /></p>
<p><strong>1. 继承 RxAppCompatActivity ：</strong></p>
<p>Activity 需要继承 RxAppCompatActivity，Fragment 需要继承
RxFragment。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在项目中针对 base 类的容器中继承实现对应的 Rx 类即可</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>2. 使用 compose 操作符绑定容器生命周期</strong></p>
<p>有两种方式：</p>
<p><strong>方式 1：使用 bindToLifecycle()</strong></p>
<p>以 Activity 为例，在 Activity 中使用 bindToLifecycle() 方法，完成
Observable
发布的事件和当前的组件绑定，实现生命周期同步。从而实现当前组件生命周期结束时，自动取消对
Observable 订阅，代码如下：</p>
<p>在 onResume() 进行绑定订阅，则在 onPause()
进行解除订阅，生命周期是两两对应的。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在某个生命周期进行绑定，在对应的生命周期进行订阅解除,当执行onDestory()时, 自动解除订阅</span></span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(<span class="built_in">this</span>.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-15,7,250-->
<p><strong>方式 2：使用 bindUntilEvent()</strong></p>
<p>使用 ActivityEvent 类，其中的 CREATE、START、 RESUME、PAUSE、STOP、
DESTROY 分别对应生命周期内的方法。使用 bindUntilEvent
指定在哪个生命周期方法调用时取消订阅：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">RxAppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())         </span><br><span class="line">                <span class="comment">// 手动指定在生命周期onDestory()时，取消订阅。</span></span><br><span class="line">                .compose(<span class="built_in">this</span>.&lt;Long&gt;bindUntilEvent(ActivityEvent.DESTROY))</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-15,7,250-->
<p>打印结果：</p>
<p>我们发现执行，在退出 activity
的时候，解除了订阅，不再继续执行，解决类内存泄漏。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">38.296</span> <span class="number">29186</span>-<span class="number">29186</span>/? E/xyh: onCreate: </span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">41.311</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">43.310</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">45.311</span> <span class="number">29186</span>-<span class="number">29219</span>/com.xiaoyehai.rxlifecycle E/xyh: <span class="number">2</span></span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">46.723</span> <span class="number">29186</span>-<span class="number">29186</span>/com.xiaoyehai.rxlifecycle E/xyh: 解除了订阅</span><br><span class="line"><span class="number">04</span>-<span class="number">03</span> <span class="number">17</span>:<span class="number">10</span>:<span class="number">46.724</span> <span class="number">29186</span>-<span class="number">29186</span>/com.xiaoyehai.rxlifecycle E/xyh: onDestroy:</span><br></pre></td></tr></table></figure></div>
<p><strong>以 Activity 为例，主要有如下两种方法：</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">bindToLifecycle()  <span class="comment">//在某个生命周期进行绑定，在对应的生命周期进行订阅解除。</span></span><br><span class="line"><span class="comment">//在onResume()进行绑定订阅，则在onPause()进行解除订阅，生命周期是两两对应的。</span></span><br><span class="line"></span><br><span class="line">bindUntilEvent(<span class="meta">@NonNull</span> ActivityEvent event)  <span class="comment">//该方法指定在哪个生命周期方法调用时取消订阅。</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-17,9,250-->
<p>Fragment 也有同样的两种方法，只是方法名会有所不同。</p>
<p>其中 ActivityEvent 是一个枚举类，对应于 Activity 的生命周期：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ActivityEvent</span> &#123;</span><br><span class="line"></span><br><span class="line">    CREATE,</span><br><span class="line">    START,</span><br><span class="line">    RESUME,</span><br><span class="line">    PAUSE,</span><br><span class="line">    STOP,</span><br><span class="line">    DESTROY</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="lifecycleprovider-的使用-非继承">LifecycleProvider 的使用
(非继承)</h2>
<p>上面的方式需要继承 RxAppCompatActivity，如果我们自己有
BaseActivity，所以不能继承
RxActvivty，RxAppCompatActivity、RxFragment，NaviActivity。</p>
<p>为了保持代码的灵活性，我们只需要添加下面的依赖即可:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用Android生命周期作为提供者</span></span><br><span class="line"> implementation <span class="string">&#x27;com.trello.rxlifecycle3:rxlifecycle-android-lifecycle:3.1.0&#x27;</span></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onCreate: &quot;</span>);</span><br><span class="line"></span><br><span class="line">        LifecycleProvider&lt;Lifecycle.Event&gt; provider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line">        Observable.interval(<span class="number">3</span>, <span class="number">2</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(provider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">29.329</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: <span class="number">0</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">31.327</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: <span class="number">1</span></span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">33.108</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: 解除了订阅</span><br><span class="line"><span class="number">2020</span>-<span class="number">03</span>-<span class="number">11</span> <span class="number">22</span>:<span class="number">19</span>:<span class="number">33.111</span> <span class="number">16751</span>-<span class="number">16751</span>/com.xyh.rxlifecycle E/xyh: onDestroy:</span><br></pre></td></tr></table></figure></div>
<p><strong>把 LifecycleProvider 抽取到 BaseActivity 中</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> LifecycleProvider&lt;Lifecycle.Event&gt; mLifecycleProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(getLayoutId());</span><br><span class="line"></span><br><span class="line">        mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(mLifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里我们要用到 LifecycleProvide 这个接口。值得一提的是这个接口已经在
RxAppCompatActivity 中实现了，所以为什么可以继承
RxAppCompatActivity，赋予接口引用就可以使用它了。</p>
<h2 id="mvp-中使用-rxlifecycle">MVP 中使用 RxLifecycle</h2>
<p>这只是一个很简单的 mvp 案例，主要是演示 RxLifecycle 在 mvp
中的使用，在项目实际开发中可以进行封装。</p>
<p><strong>不需要继承 RxAppCompatActivity/RxFragment 方式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> <span class="keyword">implements</span> <span class="title class_">MainView</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.activity_main;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        <span class="type">MainPresenter</span> <span class="variable">mainPresenter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainPresenter</span>(mLifecycleProvider, <span class="built_in">this</span>);</span><br><span class="line">        mainPresenter.loadData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onSuccess: &quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;onDestroy: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainModel</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Observable&lt;Long&gt; <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Observable&lt;Long&gt; observable =</span><br><span class="line">                Observable</span><br><span class="line">                        .interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                        .subscribeOn(Schedulers.io())</span><br><span class="line">                        .observeOn(AndroidSchedulers.mainThread());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> observable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainPresenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LifecycleProvider&lt;Lifecycle.Event&gt; lifecycleProvider;</span><br><span class="line">    <span class="keyword">public</span> MainView mainView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainModel mMainModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainPresenter</span><span class="params">(LifecycleProvider&lt;Lifecycle.Event&gt; lifecycleProvider, MainView mainView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lifecycleProvider = lifecycleProvider;</span><br><span class="line">        <span class="built_in">this</span>.mainView = mainView;</span><br><span class="line">        mMainModel = <span class="keyword">new</span> <span class="title class_">MainModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        mMainModel.loadData()</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .compose(lifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Long aLong)</span> &#123;</span><br><span class="line">                        mainView.onSuccess(aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>使用继承 RxAppCompatActivity/RxFragment 方式</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="type">MainPresenter</span> <span class="variable">mainPresenter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MainPresenter</span>(bindToLifecycle(), <span class="built_in">this</span>);</span><br><span class="line">mainPresenter.loadData();</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainPresenter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LifecycleTransformer lifecycleTransformer;</span><br><span class="line">    <span class="keyword">public</span> MainView mainView;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MainModel mMainModel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MainPresenter</span><span class="params">(LifecycleTransformer lifecycleTransformer, MainView mainView)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.lifecycleTransformer = lifecycleTransformer;</span><br><span class="line">        <span class="built_in">this</span>.mainView = mainView;</span><br><span class="line">        mMainModel = <span class="keyword">new</span> <span class="title class_">MainModel</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadData</span><span class="params">()</span> &#123;</span><br><span class="line">        mMainModel.loadData()</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .compose(lifecycleTransformer)</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Observer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSubscribe</span><span class="params">(Disposable d)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onNext</span><span class="params">(Long aLong)</span> &#123;</span><br><span class="line">                        mainView.onSuccess(aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(Throwable e)</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onComplete</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="fragment-中使用-rxlifecycle">Fragment 中使用 RxLifecycle</h2>
<p>Fragment 中使用和在 Activity 中的使用基本一致。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseFragment</span> <span class="keyword">extends</span> <span class="title class_">Fragment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> LifecycleProvider&lt;Lifecycle.Event&gt; mLifecycleProvider;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> View <span class="title function_">onCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container, <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        View view=inflater.inflate(getLayoutId(),container,<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(<span class="built_in">this</span>);</span><br><span class="line">		 <span class="comment">//要用this,he fragment的生命周期绑定在一起如果使用getActivity()的话就是和Activity的生命周期绑定在一起</span></span><br><span class="line">        <span class="comment">//mLifecycleProvider = AndroidLifecycle.createLifecycleProvider(getActivity());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        init();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomeFrgament</span> <span class="keyword">extends</span> <span class="title class_">BaseFragment</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">getLayoutId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.layout.fragment_home;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;init: &quot;</span>);</span><br><span class="line">        Observable.interval(<span class="number">2</span>, <span class="number">1</span>, TimeUnit.SECONDS)</span><br><span class="line">                .doOnDispose(<span class="keyword">new</span> <span class="title class_">Action</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;解除了订阅&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .compose(mLifecycleProvider.&lt;Long&gt;bindToLifecycle())</span><br><span class="line">                .subscribe(<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;Long&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="comment">//在onCreate()中启动，一直运行到onDestory()</span></span><br><span class="line">                        Log.e(<span class="string">&quot;xyh&quot;</span>, +aLong + <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroyView</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroyView();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;HomeFrgament==onDestroyView: &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDestroy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onDestroy();</span><br><span class="line">        Log.e(<span class="string">&quot;xyh&quot;</span>, <span class="string">&quot;HomeFrgament==onDestroy: &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>rxlifecycle</tag>
      </tags>
  </entry>
  <entry>
    <title>Multi-line text search in VSCode</title>
    <url>/71afea226c1b964fc885aaf16be2f0559f792c3d/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.waldo.be/2022/01/31/multi-line-text-search-in-vscode-with-regex/">www.waldo.be</a></p>
</blockquote>
<p>just because I needed it recently – and it made me think of this
little gem that I still had to share: what if you have to <strong>search
over multiple lines in multiple files</strong> in VSCode .. something
that actually might happen more than you want to admit.</p>
<p>I actually never knew how to do this decently, until I came across
this tweet: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Well… after some digging I found it (literally few moments after my post).</span><br><span class="line"></span><br><span class="line">One must use [\s\S\n]+? (at least for CRLF UTF-8 files).  </span><br><span class="line">In my case I was searching for all trans-unit occurence with specific source:  </span><br><span class="line">&lt;trans-unit id=&quot;Enum[\s\S\n]+?&lt;/source&gt; </span><br></pre></td></tr></table></figure></div> — phenno (<span class="citation"
data-cites="phenno1">@phenno1</span>) <a
href="https://twitter.com/phenno1/status/1448612532189532160?ref_src=twsrc%5Etfw">October
14, 2021</a></p>
<p>The core of the “solution” is this RegEx: <code>[\s\S\n]+?</code>
或者 <code>[\s\S\n]*?</code></p>
<p>To explain you simply:</p>
<ul>
<li><code>\s</code>: matches any whitespace character (space, table,
line breaks)</li>
<li><code>\S</code>: matches any character that is not a whitespace
character</li>
<li><code>\n</code>: matches a line feed character (code 10)</li>
<li><code>[]</code>: matches any character in this set</li>
<li><code>+</code>: matches one or more of the preceding token – in this
case, the set of any character including the line feed</li>
<li><code>?</code>: causing the preceding quantifier to match as few as
possible. So – take all, but as few as you can.
<!--SR:!2022-11-20,10,250--></li>
</ul>
<h4 id="here-are-a-few-examples">Here are a few examples:</h4>
<p>Find all translation-info spread over multiple lines..</p>
<p><code>&lt;trans-unit id="Enum[\s\S\n]+?&lt;\/source&gt;</code></p>
<p><img
src="https://www.waldo.be/wp-content/uploads/2022/01/image.png" /></p>
<p>Or find “CLEAN19” code snippets with</p>
<p><code>if not CLEAN19[\s\S\n]+?#endif</code> <img
src="https://i0.wp.com/www.waldo.be/wp-content/uploads/2022/01/image-1.png?fit=847%2C589&amp;ssl=1" /></p>
<p>And don’t forget to put your search in VSCode in “RegEx” mode
(ALT+R)!</p>
<p><img
src="https://www.waldo.be/wp-content/uploads/2022/01/image-2.png" /></p>
<p>Thank you, <a href="https://twitter.com/phenno1">phenno</a>, for
sharing! It might not work for all cases, it might need some finetuning
– but for the searches I needed, it always did its job ;-).</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化基础</title>
    <url>/31328d4069eb994074352d0845812ad4dc9e3672/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904026027327501">juejin.cn</a></p>
</blockquote>
<p>当 App
项目复杂一定的程度，将项目组件化是必不可少的，组件化可以更好的进行功能的划分，提到组件化有人可能会想到模块化，其实组件化和模块化的本质是一样的，都是为了代码重用的业务解耦，模块化主要按照业务划分，而组件化主要按照功能划分，从<strong>组件化最基础的几个方面</strong>打开组件化的大门。</p>
<ol type="1">
<li>组件之间的跳转</li>
<li>动态创建</li>
<li>资源冲突</li>
<li>静态常量 <!--SR:!2022-11-15,7,250--></li>
</ol>
<h2 id="组件之间的跳转">组件之间的跳转</h2>
<p>组件化中两个功能模块时不直接依赖的，其依赖规则是通过 Base module
间接依赖，当组件之间的 Activity
进行界面跳转时，由于没有相互依赖的关系，往往会无法引用另一个 module 中的
Activity。</p>
<h3 id="隐式跳转">隐式跳转</h3>
<p>隐式跳转是通过 Android 原生 Intent 匹配机制来实现相应跳转，就是使用
Action 来跳转到对应的 Activity，这样使用隐式跳转的方式就可以跨 module
实现 Activity 之间的跳转了，注意一点，如果移出 Activity 所在的 module
而不移出相应的跳转，如果继续跳转会出现异常，使用隐式 Intent
跳转需要验证是否会接收该 Intent，需要对该 Intent 对象调用
resolveActivity() 方法来判断至少有一个应用能够处理该
Intent，通过隐式跳转的方式还可以设置 exported 为 false 来确保只有自己的
App 才能够启动对应的组件。</p>
<h3 id="arouter-跳转">ARouter 跳转</h3>
<p>在 Android 开发中可将 module 看成不同的网络，而对应的 Router
就是连接各个 module
的中转站，这个中转站可以对页面跳转的参数等进行统一处理，ARouter
是阿里开源出来的一个页面跳转路由，使用 ARouter
可以替代隐式跳转来完成不同
module、不同组件之间的跳转以及跳转过程的监听、参数的传递等，ARouter
支持路径跳转和 URL 跳转两种方式，使用也非常灵活，ARouter
的具体使用这里不做介绍，其具体使用会在单独一篇文章中详解，</p>
<p><strong>ARouter 与 Android 传统跳转方式的对比如下</strong>：</p>
<ol type="1">
<li>显式跳转需要依赖于类，而<mark style="background: #83d98fA6;">路由跳转通过指定的路径跳转</mark>
；</li>
<li>隐式跳转通过 AndroidManifest 集中管理，导致协作开发困难；原生使用
AndroidManifest
来注册，而<mark style="background: #83d98fA6;">路由使用注解注册</mark></li>
<li>原生 startActivity 之后跳转过程交由 Android
系统控制，而<mark style="background: #83d98fA6;">路由跳转采用的是 AOP
切面编程可对跳转过程进行拦截和过滤</mark> 。
<!--SR:!2022-11-18,10,250--></li>
</ol>
<h2 id="动态创建">动态创建</h2>
<p>组件化开发中最重要的一点就是各个模块、各个组件之间要尽可能解耦，这样很容易就会想到使用
Java
中的反射机制，使用反射可在运行状态下获取某个类的所有信息，然后就可以动态操作这个类的属性和方法了。如果
Fragment 单独作为一个组件来使用时，当这个 Fragment
组件不需要被移出后，如果是常规的 Fragment 则会因为索引不到该 Fragment
而使得 App
崩溃，想一下如果<mark style="background: #83d98fA6;">使用反射创建
Fragment </mark> 的方式则至少不会引起 App
崩溃，这里可以捕捉异常完成相关逻辑，这样是不是降低了耦合呢。可见，虽然反射有一定的性能问题，但使用反射确实能在一定程度上降低耦合，学习组件化
Java 反射机制应该是必须的一部分。</p>
<p>组件化开发中要求每个组件都能独立运行，一般情况下每个组件都有一定的初始化步骤，最好的一种情况是项目需要的几个组件的初始化基本相同，那就可将初始化放在
BaseModule
中进行统一初始化，但是这种情况毕竟比较理想，一般情况是每个组件的初始化都不一样，可能你会想到在各自的
Application 初始化，如果在各自的 Application 中初始化，当在最终编译由于
Application
的合并难免会出一些问题，这种方式也不可取，到这里又想到了反射，在各组件中创建初始化文件，然后<mark style="background: #83d98fA6;">在最终的
Application 中通过反射完成各个组件的初始化操作</mark> ，这里通过 Java
的反射机制完成了组件化开发中 Application 的动态配置。
<!--SR:!2022-11-18,10,250--></p>
<h2 id="资源冲突">资源冲突</h2>
<p>组件化开发过程中，如果 ModuleA 的 AmdroidManifest 文件中使用
android:name 属性指定了相应的 Application，而主 App Module 的
AndroidManifest 文件中也使用 android:name 属性指定了相对应的
Application，此时就必须在 <strong>主 App Module</strong> 的
AndroidManifest 文件中<mark style="background: #83d98fA6;">使用
tools:replace="android:name" 来解决冲突</mark> ，使用 replace
属性表示该属性也就是在 标签下的 android:name
属性可在编译过程中被替换，这样根据 AndroidManifest
文件替换规则最终指定的 Application 应该是 App Module 中的指定的
Application。</p>
<p>举一个例子，我在项目中的某个功能 Module 中使用 SMSSDK
来完成短信验证的功能，因为其他地方不用，所以只引入到了要使用的功能
Module 中，如果其他 Module 会使用应该将 SMSSDK 引入到 BaseModule
中，使用 SMSSDK 如果不指定该 Module 的 Application，MobSDK 会将
com.mob.MobApplication 指定为该 Module 的
Application，此时在整体编译打包时就会出现 AndroidManifest 文件的
android:name 属性冲突，当然了解决方法就是使用 replace 属性了。
AndroidManifest 文件合并后的主要冲突也就是这个问题了，当然
下的其他属性有冲突，也是使用 replace
属性。在实际的开发中多验证会更有收获喔。</p>
<p>组件化开发中另外需要注意的一点是防止资源名称一样导致最终合并的时候，因为冲突造成资源引用错误或者某些资源丢失等，如字符串、颜色值等资源等合并的时候会被后面加载的相同名称的资源所替换，解决的思路是在资源命名上要有一定的规则，<mark style="background: #83d98fA6;">可以在
build.gradle 文件中配置 "resourcePrefix" 组件名称
""的方式强制约束开发者确保资源名称唯一</mark>
，建议<mark style="background: #83d98fA6;"> Module
中资源的命名格式为"Module 名称_功能_其他 "</mark> 。
<!--SR:!2022-11-16,8,250--></p>
<h2 id="静态常量">静态常量</h2>
<p><strong>组件化开发中，最终合并时每个组件都是以 Lib Module
的形式存在</strong>，而 Lib Module 中 R.java
文件中定义的静态变量没有声明为 final，这就意味着不能在组件 Module
中使用相对应的常量了，如在时候 switch
语句就不能使用了，这就要求<mark style="background: #83d98fA6;">在组件中要使用
if 语句来替代 switch 语句</mark>
，当然在组件独立运行的时候是没有这个问题的。</p>
<p>开发中经常会使用到 Butterknife，Butterknife 可非常方便的对 View 及
View
的事件等进行注解操作，它采用的是编译时注解机制，注解中只能使用常量，所以在
Butterknife 在组件化开发中应该使用 R2 代替 R，R2 实际上是 R 的拷贝， R2
对应声明的变量是 final，所以在组件化开发中如果使用 Butterknife
在相应的注解中要使用 R2 替代 R。 <!--SR:!2022-11-18,10,250--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../902da3bed6c03a9ce6fa8ea854abf1f3a6c73d9a">Android
组件化之 Application</a></li>
<li><a href="../8dc50973dc5ce0ffd2d6b51296243e2cfef87063">Android
组件化之 ARouter</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Android 组件化基础
<ul>
<li><a href="../902da3bed6c03a9ce6fa8ea854abf1f3a6c73d9a">Android
组件化之 Application</a></li>
<li><a href="../8dc50973dc5ce0ffd2d6b51296243e2cfef87063">Android
组件化之 ARouter</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化之 ARouter</title>
    <url>/8dc50973dc5ce0ffd2d6b51296243e2cfef87063/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904035003138062">juejin.cn</a></p>
</blockquote>
<p>前面两篇文章分别介绍了 Android 组件化基础知识以及 Android 组件化过程
Application 的相关知识，在阅读本文之前可以先阅读下面两篇文章：</p>
<ul>
<li><a href="../31328d4069eb994074352d0845812ad4dc9e3672">Android
组件化基础</a></li>
<li><a href="../902da3bed6c03a9ce6fa8ea854abf1f3a6c73d9a">Android
组件化之 Application</a></li>
</ul>
<p>Android 组件化过程中涉及到不同 module
之间界面的跳转也是分厂重要的，如果要对自己经手的项目进行组件化改造，ARouter
是一个非常容易上手的路由框架，由大厂开发团队维护，相信质量是没有问题的。</p>
<p>ARouter 是 albaba 团队开源的一个 Android App
组件化改造的一个框架，支持模块之间的路由、通信、拦截功能，相比原生跳转来说更能适应组件化开发，本文主要通过实例总结一下
Arouter 的常用功能，具体如下：</p>
<ol type="1">
<li>ARouter 的配置</li>
<li>应用内跳转</li>
<li>应用内携带参数跳转</li>
<li>Activity 返回结果处理</li>
<li>通过 Uri 跳转及参数解析</li>
<li>Module 之间的跳转</li>
<li>服务调用</li>
<li>显示效果</li>
</ol>
<h3 id="arouter-的配置">ARouter 的配置</h3>
<p>在对应的 build.gradle 文件中配置 ARouter 的相关依赖如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GRADLE"><figure class="iseeu highlight /gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        javaCompileOptions &#123;</span><br><span class="line">            annotationProcessorOptions &#123;</span><br><span class="line">                arguments = [AROUTER_MODULE_NAME: <span class="keyword">project</span>.getName()]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">//api与compiler匹配使用，使用最新版可以保证兼容</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">&#x27;com.alibaba:arouter-api:1.5.2&#x27;</span></span><br><span class="line">    annotationProcessor <span class="string">&#x27;com.alibaba:arouter-compiler:1.5.2&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以选择配置路由表自动加载，在项目下面的 build.gradle
文件中进行配置，配置方式如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 路由表自动加载插件</span></span><br><span class="line">apply plugin: <span class="string">&#x27;com.alibaba.arouter&#x27;</span></span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&#x27;com.android.tools.build:gradle:3.0.1&#x27;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//ARouter</span></span><br><span class="line">        classpath <span class="string">&quot;com.alibaba:arouter-register:1.0.2&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>此外，还需在 Application 中初始化 ARouter，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>.onCreate();</span><br><span class="line">    <span class="comment">// 必须在初始化ARouter之前配置</span></span><br><span class="line">    <span class="keyword">if</span> (BuildConfig.DEBUG)&#123;</span><br><span class="line">        <span class="comment">// 日志开启</span></span><br><span class="line">        ARouter.openLog();</span><br><span class="line">        <span class="comment">// 调试模式开启，如果在install run模式下运行，则必须开启调试模式</span></span><br><span class="line">        ARouter.openDebug();</span><br><span class="line">    &#125;</span><br><span class="line">    ARouter.init(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="arouter应用内跳转">ARouter应用内跳转</h3>
<p>使用 ARouter 进行应用内跳转非常简单，只需要在要跳转的 Activity 上添加
<a href="https://link.juejin.cn?target="><span class="citation"
data-cites="Route">@Route</span></a> 注解即可，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置的path至少需要两级，如/xx/xxx</span></span><br><span class="line"><span class="meta">@Route(path = FirstActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/firstActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后使用 ARouter
提供的跳转方式来进行应用内部之间的跳转，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用内跳转</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(FirstActivity.PATH)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-15,7,250-->
<h3 id="应用内携带参数跳转">应用内携带参数跳转</h3>
<p>ARouter 通过 withString 等一系列 with
开头的方法设置与之对应的参数来进行参数传递，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 应用内携带参数跳转</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(SecondActivity.PATH)</span><br><span class="line">        .withString(SecondActivity.PARAM, <span class="string">&quot;这是跳转携带的参数&quot;</span>)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<p>然后使用 Intent 在跳转到的 Activity 中使用 Intent
获取传递过来的参数，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = SecondActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/secondActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARAM</span> <span class="operator">=</span> <span class="string">&quot;param&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_second);</span><br><span class="line"></span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="keyword">if</span> (intent!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> intent.getStringExtra(PARAM);</span><br><span class="line">            Toast.makeText(<span class="built_in">this</span>, param, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-16,8,250-->
<h3 id="activity-返回结果处理">Activity 返回结果处理</h3>
<p>Activity 返回结果处理和原生几乎一致，即在跳转时携带
requestCode，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Activity返回结果处理</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(ThreeActivity.PATH)</span><br><span class="line">        .navigation(<span class="built_in">this</span>, <span class="number">100</span>);</span><br></pre></td></tr></table></figure></div>
<p>然后，在 Activity 返回的时候使用 Intent 携带参数 setResult
即可，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = ThreeActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreeActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/threeActivity&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PARAM_RESULT</span> <span class="operator">=</span> <span class="string">&quot;param_result&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_three);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="comment">//setResult</span></span><br><span class="line">        intent.putExtra(PARAM_RESULT,<span class="string">&quot;这是返回携带的参数&quot;</span>);</span><br><span class="line">        setResult(RESULT_OK,intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="通过-uri-跳转及参数解析">通过 Uri 跳转及参数解析</h3>
<p>ARouter 还支持通过 Uri 进行跳转，首先创建一个无界面的 Activity
用于监听 Scheme 事件，由该 Activity 进行统一转发 Uri，所有的 Uri
都要通过这里然后进行分发跳转，可以很好的进行 Uri
的控制，一定程度上提高了使用 Uri 跳转的安全性，实行一个无界面的 Activiry
如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchemeFilterActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> getIntent().getData();</span><br><span class="line">        <span class="comment">// 统一外部跳转的Uri，实现路由器统一分发，减少只依靠Intent属性匹配带来的安全风险</span></span><br><span class="line">        ARouter.getInstance().build(uri).navigation(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">NavCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onArrival</span><span class="params">(Postcard postcard)</span> &#123;</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在 AndroidManifest 文件中配置 host、scheme 以及
Action，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">&lt;activity android:&gt;</span><br><span class="line">    &lt;intent-filter&gt;</span><br><span class="line">        &lt;data</span><br><span class="line">            android:host=<span class="string">&quot;test.manu.com&quot;</span></span><br><span class="line">            android:scheme=<span class="string">&quot;arouter&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;action android: /&gt;</span><br><span class="line">        &lt;action android: /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;category android: /&gt;</span><br><span class="line">        &lt;category android: /&gt;</span><br><span class="line">    &lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure></div>
<p>然后，在 assets 文件夹中创建一个 html 文件，通过点击跳转链接完成 Uri
的跳转，html 内容如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;跳转测试&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;自定义Scheme&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;!--不带参数--&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;arouter://test.manu.com/test/fiveActivity&quot;</span>&gt;arouter:<span class="comment">//test111.manu.com/test/fiveActivity&lt;/a&gt;</span></span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &lt;p&gt;</span><br><span class="line">            &lt;!--携带参数--&gt;</span><br><span class="line">            &lt;a href=<span class="string">&quot;arouter://test.manu.com/test/sixActivity?&gt;arouter://test111.manu.com/test/sixActivity?name=alex&amp;age=18&amp;score=&#123;&quot;</span>score<span class="string">&quot;:&quot;</span><span class="number">90</span><span class="string">&quot;,&quot;</span>rank<span class="string">&quot;:&quot;</span><span class="number">2</span><span class="string">&quot;&#125;&lt;/a&gt;</span></span><br><span class="line"><span class="string">        &lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-17,9,250-->
<p>具体效果查看运行效果图。</p>
<p>然后，使用 WebView 加载该 Html，就可以跳转到对应的 Activity
了，也就是链接中的 fiveActivity 和 SixActivity，两个 Activity
分别如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FiveActivity</span></span><br><span class="line"><span class="meta">@Route(path = FiveActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FiveActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/fiveActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_five);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SixActivity</span></span><br><span class="line"><span class="meta">@Route(path = SixActivity.PATH)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SixActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/test/sixActivity&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果要在Uri中传递自定义对象，在参数中要使用json字符串(encodeURI转码)传递，</span></span><br><span class="line">    <span class="comment">// 创建一个实现了SerializationService接口的类完成json的解析</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> ScoreBean score;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@BindView(R.id.tvData)</span></span><br><span class="line">    TextView tvData;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_six);</span><br><span class="line">        ButterKnife.bind(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 参数自动依赖注入</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot; + score;</span></span><br><span class="line"><span class="string">        tvData.setText(info);</span></span><br><span class="line"><span class="string">        Log.i(&quot;</span>SixActivity<span class="string">&quot;, info);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="module-之间的跳转">Module 之间的跳转</h3>
<p>主 module 和子 module 和子 module 之间的跳转也非常容易，如主 module
跳转子 module，当然主 module 和子 module 都在配置 ARouter
才可以进行进行跳转，可在主 module 中创建一个接口管理要跳转的子 module
的路径，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 管理跳转路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Module</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MODULE_ONE</span> <span class="operator">=</span> <span class="string">&quot;/module1/module-one&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">MODULE_TWO</span> <span class="operator">=</span> <span class="string">&quot;/module2/module-two&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后，直接进行跳转，具体如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跳转Module-one</span></span><br><span class="line">ARouter.getInstance()</span><br><span class="line">        .build(Module.MODULE_ONE)</span><br><span class="line">        .navigation();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-18,10,250-->
<h3 id="服务调用">服务调用</h3>
<p>ARouter 里面的服务调用不能和 Android 里面的 Service
相混淆，<mark style="background: #83d98fA6;">ARouter
的里面的服务调用实际上是对某个业务的封装</mark> ，通过 ARouter
这一层的统一封装，使得调用起来更方便，只需知道路径和名称就可以随意调用，实现
IProvider 创建一个 Service 如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Route(path = &quot;/service/singleService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleService</span> <span class="keyword">implements</span> <span class="title class_">IProvider</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH</span> <span class="operator">=</span> <span class="string">&quot;/service/singleService&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        Toast.makeText(mContext, <span class="string">&quot;这是对外提供的服务&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mContext = context;</span><br><span class="line">        Log.i(<span class="string">&quot;SingleService&quot;</span>, <span class="string">&quot;SingleService has init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后就可以调用了，调用方式如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过服务类class调用</span></span><br><span class="line">ARouter.getInstance().navigation(SingleService.class).showMessage();</span><br><span class="line"><span class="comment">// 通过服务类Path调用</span></span><br><span class="line">((SingleService) ARouter.getInstance()</span><br><span class="line">        .build(SingleService.PATH)</span><br><span class="line">        .navigation())</span><br><span class="line">        .showMessage();</span><br></pre></td></tr></table></figure></div>
<p>此外，还可以使用依赖注入的方式完成服务的调用，这种方式便于多个服务进行管理，创建一个服务管理类如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 服务管理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceManage</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SingleService singleService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceManage</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//通过依赖注入的方式获取服务</span></span><br><span class="line">        ARouter.getInstance().inject(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getService</span><span class="params">()</span>&#123;</span><br><span class="line">        singleService.showMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>然后通过服务管理类调用具体的服务如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务管理，通过依赖注入的方式获取服务</span></span><br><span class="line"><span class="type">ServiceManage</span> <span class="variable">manage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServiceManage</span>();</span><br><span class="line">manage.getService();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-16,8,250-->
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Android 组件化之 ARouter
<ul>
<li><a href="../31328d4069eb994074352d0845812ad4dc9e3672">Android
组件化基础</a></li>
<li><a href="../902da3bed6c03a9ce6fa8ea854abf1f3a6c73d9a">Android
组件化之 Application</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 组件化之 Application</title>
    <url>/902da3bed6c03a9ce6fa8ea854abf1f3a6c73d9a/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://juejin.cn/post/6844904031668666376">juejin.cn</a></p>
</blockquote>
<p><a href="../31328d4069eb994074352d0845812ad4dc9e3672">Android
组件化基础</a>中笼统的总结了一下组件化开发的一些基础性问题，本篇文章继续组件化的学习，主要分如下三个方面介绍组件化中的
Application 如下：</p>
<ol type="1">
<li>Application 的作用</li>
<li>合并 Application</li>
<li>动态配置 Application</li>
</ol>
<h2 id="application-的作用">Application 的作用</h2>
<p>Androuid 应用的启动的时候最先启动的就是 Application，每个 App
运行时仅创建唯一一个 Application，其生命周期就是 App
的生命周期，Application 中常用的回调方法如下：</p>
<ul>
<li><strong>onCreate</strong>：创建应用程序时回调，回调时机早于任何
Activity。</li>
<li>onTerminate：终止应用程序时调用，不能保证一定会被调用。</li>
<li><strong>onLowmemory</strong>：当后台应用程序终止，但前台用用程序内存还不够时调用该方法，可在该方法中释放一些不必要的资源来应对这种情况。</li>
<li><strong>onConfigurationChanged</strong>：配置发生变化时回调该方法，如手机屏幕旋转等</li>
<li><strong>onTrimMemory</strong>：通知应用的不同内存情况，下面内存级别说明来自</li>
</ul>
<p>其中附上一张来自 <strong>Carson_Ho</strong> 总结的 onTrimMemory
相关内存级别的说明如下：</p>
<p><img
src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ca6608854f0460db834516d90f20b00~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.image" />
<!--SR:!2022-11-16,8,250--></p>
<p>Application 作为整个 App 的一个单例对象，其作用如下：</p>
<ol type="1">
<li>作为 App
的入口，可用来<mark style="background: #fefe00A6;">初始化</mark>
基本配置，如第三方 SDK 的初始化。</li>
<li>可以在 Application
中定义供<mark style="background: #fefe00A6;">全局使用的变量</mark>
，不过当应用被强杀之后有可能出现空指针的问题，导致再次打开应用的时候崩溃，如果确定要这样使用，一定要处理好这种情况。</li>
<li>可以借助 Application <mark style="background: #fefe00A6;">管理
Activity 的生命周期</mark>
状态以及判断应用处于前台还是后台等，可根据内存优先级<mark style="background: #fefe00A6;">降低自身应用所占内存</mark>
，减小自身应用被系统强杀的可能性。 <!--SR:!2022-11-16,8,250--></li>
</ol>
<h2 id="合并-application">合并 Application</h2>
<p>AndroidManifest 是每个 Module 的声明配置文件，对应的在生成一个 App
的时候也应该对应一份 AndroidManifest 文件，那么在多个 Module
彼此依赖的情况下就需要合并子 Module 的 AndroidManifest 文件内容到主
Module 的 AndroidManifest 文件中，最终会在 build 目录下 生成最终的
AndroidManifest 文件，编译生成的 AndroidManifest
文件的具体路径参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">app\build\intermediates\manifests\full\debug\AndroidManifest.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在合并子 Modulen 的 AndroidManifest 文件时，编译器会补全 use-sdk
的信息以及一些未设置的属性，在合并后如 Activity 等组件中的 name
属性都以包名 + 文件名来指定。</p>
<p>其中在合并 AndroidManifest 文件要对 Application 进行合并，
Application 合并规则如下：</p>
<ol type="1">
<li>如果子 Module 中有自定义的 Application，主 Module 中没有自定义
Application，则会将子 Module 中的 Application 合并到最终的
AndroidManifest 文件中。</li>
<li>如果主 Module 有自定义 Application，子 Module 没有自定义的
Application，则会在最终合并的 AndroidManifest 文件中使用主 Module 中的
Application。</li>
<li>如果多个子 Module 中都自定义了
Application，在解决冲突后则会在最终合并的 AndroidManifest
文件中使用最后编译的 Module 中的 Application。</li>
<li>如果主 Module 中有自定义的 Application，子 Module 中也有自定义的
Application，此时会提示要在主 Module 的 AndroidManifest 文件中添加
tools:replace 属性，编译完成之后，合并后的 AndroidManifest
文件使用的是主 Module 中自定义的 Application。</li>
</ol>
<p>在合并过程中如果不添加 tools:replace 属性，则会提示添加 tools:android
属性，提示的错误信息如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">Manifest merger failed : Attribute application<span class="meta">@name</span> value=(com.manu.module_one.OneApplication) from [:moduel_one] AndroidManifest.xml:<span class="number">13</span>:<span class="number">9</span>-<span class="number">58</span></span><br><span class="line">	is also present at [:module_two] AndroidManifest.xml:<span class="number">13</span>:<span class="number">9</span>-<span class="number">58</span> value=(com.manu.module_two.TwoApplication).</span><br><span class="line">	Suggestion: add <span class="string">&#x27;tools:replace=&quot;android:name&quot;&#x27;</span> to &lt;application&gt; element at AndroidManifest.xml:<span class="number">6</span>:<span class="number">5</span>-<span class="number">21</span>:<span class="number">19</span> to override.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>比如这里就要在==子 Module 中==的 AndroidManifest 文件的 application
标签下添加 tools:replace 属性：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">tools:replace=<span class="string">&quot;android:name&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-18,10,250-->
<h2 id="动态配置-application">动态配置 Application</h2>
<p>除了 Application 需要合并之外，在组件化过程中各个 Module
的初始化也非常重要，可以使用反射完成各个 Module 的初始化，就是在主
Module 中反射获取子 Module
的初始化对象，然后调用其初始化方法，为了方便定义一个类管理子 Module
的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">moduleOneInit</span> <span class="operator">=</span> <span class="string">&quot;com.manu.module_one.ModuleOneAppInit&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">moduleTwoInit</span> <span class="operator">=</span> <span class="string">&quot;com.manu.module_two.ModuleTwoAppInit&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String[] moduleInits = &#123;</span><br><span class="line">            moduleOneInit,</span><br><span class="line">            moduleTwoInit</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>创建一个初始化的基类接口如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 高优先级被初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onInitHighPriority</span><span class="params">(Application application)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 低优先级被初始化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">onInitLowPriority</span><span class="params">(Application application)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>为了使得每个子 Module 都能方便使用该初始化基类，应将其放在基类 Module
中，因为基类被所有的 Module 所依赖，然后在每个字 Module 中继承
BaseAppInit 实现自己 Module 的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleOneAppInit</span> <span class="keyword">implements</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> ModuleOneAppInit.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInitHighPriority</span><span class="params">(Application application)</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleOneAppInit---onInitHighPriority&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onInitLowPriority</span><span class="params">(Application application)</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleOneAppInit---onInitLowPriority&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后在主 Module 的自定义的 Application 中通过反射创建各个子 Module
的初始化类对象，并调用其初始化方法，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高优先级初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initModuleHighPriority</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String init: ModuleConfig.moduleInits)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(init);</span><br><span class="line">            <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> (BaseAppInit) clazz.newInstance();</span><br><span class="line">            appInit.onInitHighPriority(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低优先级初始化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initModuleLowPriority</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (String init: ModuleConfig.moduleInits)&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = Class.forName(init);</span><br><span class="line">            <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> (BaseAppInit) clazz.newInstance();</span><br><span class="line">            appInit.onInitLowPriority(<span class="built_in">this</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | IllegalAccessException | InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>运行日志如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">ModuleOneAppInit---onInitHighPriority </span><br><span class="line">ModuleTwoAppInit---onInitHighPriority</span><br><span class="line">ModuleOneAppInit---onInitLowPriority</span><br><span class="line">ModuleTwoAppInit---onInitLowPriority</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>此外，还可以在基类 Module 中创建初始化基类和 BaseApplication，然后在
BaseApplication
中反射调用调用具体的初始化方法，归根结底还是使用反射，只是另一种实现方式，首先在基类
moddule 中创建 BaseAppInit 如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Application mApplication;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseAppInit</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplication</span><span class="params">(<span class="meta">@NonNull</span> Application application)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mApplication = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">OnTerminate</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLowMemory</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurationChanged</span><span class="params">(Configuration configuration)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>在基类 Module 中创建 BaseApplication 如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span>&gt;&gt; classInitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;BaseAppInit&gt; appInitList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">        appInit();</span><br><span class="line">        initCreate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">appInit</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">registerApplicationInit</span><span class="params">(Class&lt;? extends BaseAppInit&gt; classInit)</span> &#123;</span><br><span class="line">        classInitList.add(classInit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;? <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span>&gt; classInit : classInitList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">BaseAppInit</span> <span class="variable">appInit</span> <span class="operator">=</span> classInit.newInstance();</span><br><span class="line">                appInitList.add(appInit);</span><br><span class="line">                appInit.onCreate();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InstantiationException | IllegalAccessException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onTerminate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onTerminate();</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.OnTerminate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onLowMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onLowMemory();</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.onLowMemory();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        <span class="keyword">for</span> (BaseAppInit appInit : appInitList) &#123;</span><br><span class="line">            appInit.configurationChanged(newConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>然后在子 Module 中实现具体的初始化类，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModuleThreeAppInit</span> <span class="keyword">extends</span> <span class="title class_">BaseAppInit</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> ModuleThreeAppInit.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        Log.i(TAG, <span class="string">&quot;ModuleThreeAppInit---onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>最后，在主 Module 中继承 BaseApplication 实现自定义的
Application，并注册每个字 Module 的初始化文件，参考如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MApplication</span> <span class="keyword">extends</span> <span class="title class_">BaseApplication</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">appInit</span><span class="params">()</span> &#123;</span><br><span class="line">        registerApplicationInit(ModuleThreeAppInit.class);</span><br><span class="line">        registerApplicationInit(ModuleForeAppInit.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>运行日志如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="code"><pre><span class="line">ModuleThreeAppInit---onCreate</span><br><span class="line">ModuleForeAppInit---onCreate</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>如上两种方式都是使用了反射，反射在解耦的同时，也在一定程度上降低了应用的性能，当然组件化的目的就是要让各个组件或各个
Module
之间尽可能的解耦，如果牺牲一点儿性能，能够获取解耦的最大化也是可以接受的。</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../8dc50973dc5ce0ffd2d6b51296243e2cfef87063">Android
组件化之 ARouter</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Android 组件化之 Application
<ul>
<li><a href="../31328d4069eb994074352d0845812ad4dc9e3672">Android
组件化基础</a></li>
<li><a href="../8dc50973dc5ce0ffd2d6b51296243e2cfef87063">Android
组件化之 ARouter</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>组件化</tag>
      </tags>
  </entry>
  <entry>
    <title>RxJava 和 RxAndroid</title>
    <url>/ec1769b199ea3fb10617d378d760d3559215bffd/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.jianshu.com/p/1cad42c4bc04">www.jianshu.com</a></p>
</blockquote>
<h2 id="rxjava-介绍">RxJava 介绍</h2>
<p>首先要说明的一点，RxAndroid 和 RxJava 是差不多的东西，只不过
RxAndroid 针对 Android 平台做了一点调整。</p>
<p>那么 RxJava 是什么？在其 github 上是这样讲的：一个在 Java VM
上使用可观测的序列来组成异步的、基于事件的程序的库。这么讲可能还有点绕口，简单的讲实际上最重要的就是异步两字，<mark style="background: #83d98fA6;">RxJava
可以简单的实现异步操作，并且不管逻辑多么复杂，它始终能够保持简洁性。</mark></p>
<p>通常在 Android 中，非 UI 线程是不能更新 UI
界面的，而一些耗时的操作我们又不能放在 UI
线程，否则会导致界面卡顿。这种情况下，我们就需要切换线程来实现，即
Handler 和 AsyncTask
来实现，但是这两种都有个缺陷，代码非常多，非常杂，可读性非常差。所以，RxJava
出现了，它能够两行代码就实现线程切换，非常的简单，使用起来就会让人感觉很爽，再也不用为异步操作写如此繁重的代码了。
<!--SR:!2022-11-16,8,250--></p>
<h2 id="rxjava-基本用法">RxJava 基本用法</h2>
<p>RxJava 最核心的两个东西是 -
<strong>Observables</strong>（<mark style="background: #fefe00A6;">被观察者</mark>
，事件源） -
<strong>Observer/Subscriber</strong>（<mark style="background: #fefe00A6;">观察者</mark>
） - 还有将他们联系在一起的操作
<strong>subscribe</strong>（<mark style="background: #fefe00A6;">订阅</mark>
）
当被观察者发生变化时观察者能即使做出相应，就好像我们的按钮事件一样：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">button.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #fefe00A6;">在这里 button
就是被观察者，OnClickListener 就是观察者，setOnClickListener
这个方法就相当于订阅操作</mark> ，当 button 被按下时，OnClickListener
监听到变化，调用 OnClick 做出反应，RxJava
实现的就是类似这样的一个过程。</p>
<p>注意这里的观察者有两种
Observer，Subscriber，这两个其实是差不多的，Subscriber 是对 Observer
的一种扩展，内部==增加了 OnStart
方法==，在事件未发送之前订阅，用于做一些准备工作，并且还有
==unsubscribe() 用于取消订阅==。<br />
让我们来看一下 ObServer 的内部实现：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">public interface Observer&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    void onCompleted();</span><br><span class="line"></span><br><span class="line">    void onError(Throwable e);</span><br><span class="line"></span><br><span class="line">    void onNext(T t);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>可以看到 ObServer 本身是一个接口，内部有 onNext(T t)
方法：观测到所检测的被观察者有变化时做出相应反应。onCompleted()
方法：RxJava 规定，当不会再有新的 onNext() 发出时，需要触发
onCompleted()
方法作为标志。onCompleted()：事件队列发生异常，要调用的方法。我们在定义一个观察者的时候，需要实现这些方法，来完成事件队列。<br />
<!--SR:!2022-11-17,9,250!2022-11-18,10,250--></p>
<p>观察者有了，那么被观察者 Observables 怎么创建呢，RxJava
提供了一系列操作符供我们调用，其中就有很多创建型操作符，举个例子,
创建一个 Observables，发出 hello world 字符串给观察者：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.create(  </span><br><span class="line">    new Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void call(Subscriber&lt;? super String&gt; sub) &#123;  </span><br><span class="line">            sub.onNext(&quot;Hello, world!&quot;);  </span><br><span class="line">            sub.onCompleted();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-17,9,250-->
<p>既然有了 Observables，那我们就可以根据这个 Observables
创建一个观察者了，如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observer&lt;String&gt; TestObserver=new Observer&lt;String&gt;() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void onCompleted() &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onError(Throwable e) &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public void onNext(String s) &#123;</span><br><span class="line">                Log.i(TAG,s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>这样我们就可以愉快的订阅了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">myObservable.subscribe(TestObserver);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-18,10,250-->
<p>这样，一个简单的 RxJava
订阅流程就完成了。这里可能很多人就有疑问了，关键的异步呢，体现在哪了？其实这个例子可能不是很明显，因为被观察者并不是一个耗时线程，不能很直观的体现异步。如果
myObservable
这是一个异步任务，比如网络请求，那么我们订阅之后，TestObserver
会一直监听 myObservable
是否有返回，如果有，那么就做出响应，本质是一样的。</p>
<h2 id="rxjava-的操作符">RxJava 的操作符</h2>
<p>RxJava
一个强大的地方在于它的异步，另外一个强大的地方就在于它提供了强大的操作符支持。这里说明一下几个常用的操作符：</p>
<h3 id="ceate-操作符">ceate 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.create(  </span><br><span class="line">    new Observable.OnSubscribe&lt;String&gt;() &#123;  </span><br><span class="line">        @Override  </span><br><span class="line">        public void call(Subscriber&lt;? super String&gt; sub) &#123;  </span><br><span class="line">            sub.onNext(&quot;Hello, world!&quot;);  </span><br><span class="line">            sub.onCompleted();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>ceate 操作符创建一个被观察者，在 call 方法里持有一个观察者 Subscriber
参数，当这个 Observable 被订阅时，执行观察者相应的方法。
<!--SR:!2022-11-17,9,250--></p>
<h3 id="just-操作符">just 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.just(&quot;Hello, world!&quot;);</span><br></pre></td></tr></table></figure></div>
<p>ceate 操作符的代码可以用just操作符代替，just
操作符的功能就是将一个对象转化为 Observable。
<!--SR:!2022-11-17,9,250--></p>
<h3 id="from-操作符">from 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Observable&lt;String&gt; myObservable = Observable.from(&quot;Hello&quot;,&quot; world!&quot;);</span><br></pre></td></tr></table></figure></div>
<p>既然有了将单一对象转化为 Observable
的操作符，那么必须要有将多个对象转化为 Observable 的操作符，那就是
from，from 接收一个对象数组，然后逐一发射给观察者。
<!--SR:!2022-11-15,7,250--></p>
<h3 id="flatmap-操作符">flatMap 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .subscribe(student -&gt;Log.i(TAG,student.getName());</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>上面的例子用 flatMap 操作符，就可以变得很简洁，flatMap
操作符的功能是接收一个接收一个 Observable
的输出作为输入，同时输出另外一个 Observable，通常是接收一个
list，然后逐一发送 list 的元素。比如这边的 Student 数组，变成了逐一发送
student 的 Observable。 <!--SR:!2022-11-18,10,250--></p>
<h3 id="map-操作符">Map 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>现在我们只想输出每个学生的成绩，我们就需要 Map
操作符，它的功能是接收一种类型的 Observable，转化为另外一种
Observable，比如这边的 Student 类型转化为了 Int 型的 Observable。
<!--SR:!2022-11-15,7,250--></p>
<h3 id="filter-操作符">filter 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>顾名思义 filter
操作符就是过滤用的，相当于加个判断条件，比如这边的就是加上分数大于 80
的条件. <!--SR:!2022-11-15,7,250--></p>
<h3 id="take-操作符">take 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>take 操作符的功能是限定个数，比如这边的功能就是限定我最多需要 5
个成绩。 <!--SR:!2022-11-18,10,250--></p>
<h3 id="doonnext-操作符">doOnNext 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .doOnNext(grade-&gt;save(grade))</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>doOnNext()
允许我们在每次输出一个元素之前做一些额外的事情，比如这里的我们用来保存成绩。
<!--SR:!2022-11-17,9,250--></p>
<h3 id="subscribeonobserveon-操作符">subscribeOn/observeOn 操作符</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">query(&quot;王&quot;).flatMap(list -&gt; Observable.from(list)) </span><br><span class="line">           .Map(student-&gt;return student.getGrade())</span><br><span class="line">           .filter(grade-&gt;grade&gt;80)</span><br><span class="line">           .take(5)</span><br><span class="line">           .doOnNext(grade-&gt;save(grade))</span><br><span class="line">           .subscribeOn(Schedulers.io())</span><br><span class="line">           .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">           .subscribe(grade-&gt;Log.i(TAG,grade+&quot;&quot;);</span><br><span class="line">);</span><br></pre></td></tr></table></figure></div>
<p>这两个操作符一般都是成对出现的，他们的功能就是切换线程。<mark style="background: #fefe00A6;">subscribeOn
是指定被观察者的线程，observeOn 是指定观察者的线程。</mark>
比如这个例子中前面的订阅的工作在 IO 线程做，后面的打印功能在主线程做。
<!--SR:!2022-11-16,8,250--></p>
<p><strong>小结</strong></p>
<p>怎么样，看起来我好像做了很多事情，又有判断数据，又有保存数据，又有选取数据，关键还有线程切换，然而，我实际上就写了那么一点代码，看起来是不是酷！这就是
RxJava 的魅力所在。</p>
<h2 id="rxandroid">RxAndroid</h2>
<p>一开始说了，RxAndroid 其实跟 RxJava
是差不多的，但是总归还是有一点变化的。比如 Android
上会有生命周期的问题，可能会导致内存泄漏：Observable 持有 Context
导致的内存泄露。在这个问题上，我们的解决方法是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">private Subscription mTestSubscription= Subscriptions.empty();</span><br><span class="line"></span><br><span class="line">public void test()&#123;</span><br><span class="line">mTestSubscription=myObservable.subscribe(TestObserver);</span><br><span class="line">&#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroy() &#123;</span><br><span class="line">        super.onDestroy();</span><br><span class="line">        if (mTestSubscription != null &amp;&amp; !mTestSubscription.isUnsubscribed())        &#123;</span><br><span class="line">            mTestSubscription.unsubscribe();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>
<p>就是在订阅的时候，用一个 Subscription
来保存它，然后在<mark style="background: #fefe00A6;">退出这个 Activity
的时候取消订阅</mark> 。<br />
另外还有一些专门为 Android 设计的 RxView, 比如以下防抖动的 View：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">RxView.clicks(btn_click)</span><br><span class="line">        .throttleFirst(3, TimeUnit.SECONDS)</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-15,7,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>android</tag>
        <tag>rxjava</tag>
        <tag>rxandroid</tag>
      </tags>
  </entry>
  <entry>
    <title>01  程序员如何用技术变现（上）</title>
    <url>/09fdce2a2019316a40dc5753bd06cb77d2e85c04/</url>
    <content><![CDATA[<h1 id="程序员如何用技术变现上">01 | 程序员如何用技术变现（上）</h1>
<p>程序员用自己的技术变现，其实是一件天经地义的事儿。写程序是一门“手艺活儿”，那么作为手艺人，程序员当然可以做到靠自己的手艺和技能养活自己。</p>
<p>然而，现在很多手艺人程序员却说自己是“码农”，编码的农民工，在工作上被各种使唤，各种加班，累得像个牲口。在职业发展上各种迷茫和彷徨，完全看不到未来的希望，更别说可以成为一个手艺人用自己的技能变现了。</p>
<p>从大学时代帮人打字挣点零花钱，到逐渐通过自己的技能帮助别人，由此获得相对丰厚的收入，我在很早就意识到，从事编程这个事可以做到，完全靠自己的手艺、不依赖任何人或公司去生活的。</p>
<p>这对于程序员来说，本就应该是件天经地义的事，只是好像并不是所有的程序员都能意识到自己的价值。这里，我想结合我的一些经历来跟你聊聊。当然，我的经历有限，也不一定全对，只希望能给你一个参考。</p>
<h1 id="学生时代">学生时代</h1>
<p>我是 1994 年上的大学，计算机科学软件专业。在 1996
年上大二的时候，因为五笔学得好打字很快，我应征到教务处帮忙，把一些文档录入到电脑里。打了三个月的字，学校按照每千字
10 元，给了我 1000 元钱。</p>
<p>由于我的五笔越打越快，还会用 CCED 和 WPS
排版，于是引起了别人的注意，叫我帮忙去他的打字工作室，一个月收入 400
元。我的大学是在昆明上的，这相当于那会当地收入的中上水平了。</p>
<p>后来，1997 年的时候，我帮一个开公司的老师写一些 MIS 软件，用 Delphi
和 PowerBuilder 写一些办公自动化和酒店管理的软件。一年后，老师给了我
2000 元钱。</p>
<p>因为动手能力比较强，当时系上的老师要干个什么事都让我帮忙。而且，因为当时的计算机人才太少太少了，所以一些社会上的人需要开发软件或是解决技术问题也都会到大学来。基本上老师们也都推荐给我。</p>
<p>还记得 1997 年老师推荐一个人来找我，问我会不会做网页？5
个静态页，10000
元钱。当时学校没教怎样做网页，我去书店找书看，结果发现书店里一本讲 HTML
的书都没有，只好回绝说“不会做”。一年后，我才发现原来这事简单得要命。</p>
<h1 id="初入职场">初入职场</h1>
<p>到了 1998
年，我毕业参加工作，在工商银行网络科。由于可以拨号上网，于是我做了一个个人主页，那时超级流行个人主页或个人网站。我一边收集网上的一些知识，一边学着做些花哨的东西，比如网页上的菜单什么的。</p>
<p>在 2000
年时，机缘巧合我的网站被《电脑报》的编辑看到了，他写来邮件约我投稿。我就写了一些如何在网页上做菜单之类的小技术文章，每个月写个两三篇，这样每个月就有
300 元左右的稿费，当时我的月工资是 600 元。</p>
<p>现在通过文章标题还能找到一两篇，比如《抽屉式菜单的设计》，已经是乱码一堆了。</p>
<p>大学时代被人请去做事的经历对我影响很大，甚至在潜意识里完全影响了我如何规划自己的人生。虽然当时我还说不清楚，只是一种强烈的感觉——我完全可以靠自己的手艺、不依赖任何人或公司去生活。</p>
<p>我想这种感觉，我现在可以说清楚了，这种潜意识就是——<strong>我完全没有必要通过打工听人安排而活着，而是反过来通过在公司工作提高自己的技能，让自己可以更为独立和自由地生活</strong>。</p>
<p>因而，在工作当中，对于那些没什么技术含量的工作，我基本上就像是在学生时代那样交作业就好了。我想尽一切方法提高交作业的效率，比如，提高代码的重用度，能自动化的就自动化，和需求人员谈需求，简化掉需求，这样我就可以少干一些活了……</p>
<p>这样一来，<strong>我就可以有更多的时间，去研究公司里外那些更为核心更有技术含量的技术了</strong>。</p>
<p>在工作中，我总是能被别人和领导注意到，总是有比别人更多的时间去读书，去玩一些高技术含量的技术。当然，这种被“注意”，也不全然是一种好事。</p>
<p>2002
年，我被外包到银行里做业务开发时，因为我完成项目的速度太快，所以，没事干，整天在用户那边看书，写别的代码练手，而被用户投诉“不务正业”。我当然对这样的投诉置之不理，还是我行我素，因为我的作业已交了，所以用户也就是说说罢了。</p>
<p>同年，我到了一家新的很有技术含量的公司，他们在用 C
语言写一个可以把一堆 PC
机组成一个超级计算机，进行并行计算的公司项目。</p>
<p>当我做完第一个项目时，有个公司里的牛人和我说，你用 Purify
测试一下你的代码有没有内存问题。Purify 是以前一个叫 Rational
的公司（后来被 IBM 收购）做的一个神器，有点像 Linux 开源的
Valgrind。</p>
<p>用完以后，我觉得 Purify
太厉害了，于是把它的英文技术文档通读了一遍。经理看我很喜欢这个东西，就让我给公司里的人做个分享。我认真地准备了个
PPT，结果只来了一个 QA。</p>
<p>我在一个大会议室就对着她一个人讲了一个半小时。这个 QA
对我说，“你的分享做得真好，条理性很强，也很清楚，我学到了很多东西”。</p>
<p>有了这个正向反馈，我就把关于 Purify 的文章分享到了我的 CSDN
博客上，标题为《C/C++
内存问题检查利器—Purify》。可能因为这个软件是收费的，用的人不多，这篇文章的读者反响并不大。</p>
<p>但是，2003
年的一天我很意外地接到了一个电话，是一个公司请我帮忙去给客户培训 Purify
这个软件。IBM
的培训太贵了，所以代理这个软件的公司为了成本问题，想找一个便宜的讲师。</p>
<p>他们搜遍整个中国的互联网，只看到我的这篇文章，便通过 CSDN
找到我的联系方式，给我打了电话。最终，两天的培训价格税后一共 10000
元，而我当时的月薪只有 6000 元，还是税前。</p>
<p>这件事儿让我在入行的时候就明白了一些道理。</p>
<p>要去经历大多数人经历不到的，要把学习时间花在那些比较难的地方。</p>
<p>要写文章就要写没有人写过的，或是别人写过，但我能写得更好的。</p>
<p>更重要的是，技术和知识完全是可以变现的。</p>
<p>现在回想一下，技术和知识变现这件事儿，在 15
年前我就明白了，哈哈。</p>
<p>随后，我在 CSDN 博客上发表了很多文章，有谈 C
语言编程修养的文章，也有一些 makefile/gdb
手册性的文章，还有在工作中遇到的各种坑。</p>
<p>因为我分享的东西比较系统，也是独一份，所以，搜索引擎自然是最优化的（最好的
SEO 就是独一份）。我的文章经常因为访问量大被推到 CSDN
首页。因此，引来了各种培训公司和出版社，还有一些别的公司主动发来的招聘，以及其他一些程序员想伙同创业的各种信息。</p>
<p>紧接着我了解到，出书作者收入太低（作者的收入有两种：一种是稿费，一页
30 元；一种是版税，也就 5%
左右），而培训公司的投入产出比明显高很多后，于是我开始接一些培训的事（频率不高），一年有个七八次。当时需求比较强的培训主要是在这几个技术方面，C/C++/Java、Unix
系统编程、多层软件架构、软件测试、软件工程等。</p>
<p>我喜欢做企业内训，还有一个主要原因是，可以走到内部去了解各个企业在做的事和他们遇到的技术痛点，以及身在其中的工程师的想法。这极大地增加了我对社会的了解和认识。而同时，让我这个原本不善表达的技术人员，在语言组织和表达方面有了极大的提升。</p>
<p>其间也有一些软件开发的私活儿，但我基本全部拒绝了。最主要的原因是，这些软件开发基本上都是功能性的开发，我从中无法得到成长。而且后期会有很多维护工作，虽然一个小项目可以挣十几万，但为此花费的时间都是我人生中最宝贵的时光，得不偿失。</p>
<p><strong>25~35 岁是每个人最宝贵的时光，应该用在刀刃上</strong>。</p>
<h1 id="职业上升期">职业上升期</h1>
<p>因为有了这些经历，我感受到了一个人知识和技能的价值。我开始把我的时间投在一些主流、高级和比较有挑战性的技术上，这可以让我保持两件事儿：一个是技术和技能的领先，二是对技术本质和趋势的敏感度。</p>
<p>因此，我有强烈的意愿去前沿的公司经历和学习这些东西。比如，我在汤森路透学到了人员团队管理上的各种知识和技巧，而亚马逊是让我提升最快的公司。虽说，亚马逊也有很多不好的东西，但是它的一些理念，的确让我的思维方式和思考问题的角度有了质的飞跃。</p>
<p>所以后来，我开始对外输出的不仅仅是技术了，还有一些技术价值观上的东西。</p>
<p>而从亚马逊到阿里巴巴是我在互联网行业的工作经历，这两段经历让我对这两家看似类似但内部完全不同的成功大公司，有了更为全面的了解和看法。</p>
<p>这两种完全不一样甚至有些矛盾的玩法让我时常在思考着，大脑里就像两个小人在扳手腕一样，这可能是我从小被灌输的“标准答案”的思维方式所致。其实，这个世界本来就没什么标准答案，或是说，一个题目本来就可以有若干个正确答案，而且这些“正确答案”还很矛盾。</p>
<p>于是，在我把一些价值观和思考记录下来的同时，我自然又被很多人关注到了，还吸引很多不同的思路在其中交织讨论。而从另外一方面来说，这对我来说是一个很好地补充，无论别人骂我也好，教育我也罢，他们都对我有帮助，大大地丰富了我思考问题的角度。</p>
<p>这些经历从质上改善了我的思考方式，让我思考技术问题的角度都随之有了一个比较大的转变。而这个转变让我有了更高的思维高度和更为开阔的视野。</p>
<p>可能是因为我有一些“独特”的想法，而且经历比较丰富，基础也比较扎实，使得我对技术人的认识和理解会更为透彻和深入。所以，也有了一些小名气。来找我做咨询和帮助解决问题的人越来越多，而我也开始收费收得越来越贵了。这里需要注意的是，我完全是被动收费高的。</p>
<p>因为父亲的身体原因，我没有办法全职，所以成了一个自由人。而也正因如此，我才得以有机会可以为更多公司解决技术问题。2015
年，有家公司的后端系统一推广就挂，性能有问题，请我去看。</p>
<p>我花了两天时间跟他们的工程师一起简单处理了一下，直接在生产线上重构，性能翻了
10 倍。虽然这么做有点
low，但当时完全是为了救急。公司老板很高兴，觉得他投的几百万推广费用有救了，一下给了我
10 万元。我说不用这么多的，1
万元就好了，结果他说就是这么多。<strong>我欣然接受了，当时心里有一种技术被尊重的感动</strong>。</p>
<p>2016 年，某个公司需要做一个高并发方案，大概需要 2000 万
QPS，但是他们只能实现到 1200 万 QPS 左右。</p>
<p>我花了两天时间做调研，分析性能原因，然后一天写了 700
多行代码。因为不想进入业务，所以我主要是优化了网络数据传输，让数据包尽量小，确保一个请求的响应在一个
MTU 内就传完。</p>
<p>测试的时候，达到了 2500 万 QPS。于是老板给了我 20 万。</p>
<p>这样的例子还有很多。上面的例子，我连钱都没谈就去做了，本来想着，也就最多
1 万元左右，没想到给我的酬劳大大超出了我的期望。</p>
<p>这里，我想说的是，==并不是社会不尊重程序员，只要你能帮上大忙，就一定会赢得别人的尊重==。
<!--SR:!2022-11-15,10,250--></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>左耳听风</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>money</tag>
        <tag>程序员</tag>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>03  Equifax信息泄露始末</title>
    <url>/c48402db71b0032d9df1f8384d0a7ba60d725844/</url>
    <content><![CDATA[<h1 id="equifax信息泄露始末">03 | Equifax信息泄露始末</h1>
<p>相信你一定有所耳闻，9 月份美国知名征信公司 Equifax
出现了大规模数据泄露事件，致使 1.43
亿美国用户及大量的英国和加拿大用户受到影响。今天，我就来跟你聊聊 Equifax
信息泄露始末，并对造成本次事件的原因进行简单的分析。</p>
<h1 id="equifax-信息泄露始末">Equifax 信息泄露始末</h1>
<p>Equifax 日前确认，黑客利用了其系统中未修复的 Apache Struts
漏洞（CVE-2017-5638，2017 年 3 月 6
日曝光）来发起攻击，导致了最近这次影响恶劣的大规模数据泄露事件。</p>
<p>作为美国三大信用报告公司中历史最悠久的一家，Equifax
的主营业务是为客户提供美国、加拿大和其他多个国家的公民信用信息。保险公司就是其服务的主要客户之一，涉及生命、汽车、火灾、医疗保险等多个方面。</p>
<p>此外，Equifax
还提供入职背景调查、保险理赔调查，以及针对企业的信用调查等服务。由于
Equifax
掌握了多个国家公民的信用档案，包括公民的学前、学校经历、婚姻、工作、健康、政治参与等大量隐私信息，所以这次的信息泄露，影响面积很大，而且性质特别恶劣。</p>
<p>受这次信息泄露影响的美国消费者有 1.43 亿左右，另估计约有 4400
万的英国客户和大量加拿大客户受到影响。事件导致 Equifax 市值瞬间蒸发掉逾
30 亿美元。</p>
<p>根据《华尔街日报》（The Wall Street Journal）的观察，自 Equifax 在 9
月 8
日披露黑客进入该公司部分系统以来，全美联邦法院接到的诉讼已经超过百起。针对此次事件，Equifax
首席执行官理查德·史密斯（Richard
Smith）表示，公司正在对整体安全操作进行全面彻底的审查。</p>
<p>事件发生之初，Equifax 在声明中指出，黑客是利用了某个“U.S. website
application”中的漏洞获取文件。后经调查，黑客是利用了 Apache Struts 的
CVE-2017-5638 漏洞。</p>
<p>戏剧性的是，该漏洞于今年 3 月份就已被披露，其危险系数定为最高分 10
分，Apache 随后发布的 Struts 2.3.32 和 2.5.10.1
版本特针对此漏洞进行了修复。而 Equifax 在漏洞公布后的两个月内都没有升级
Struts 版本，导致 5 月份黑客利用这个漏洞进行攻击，泄露其敏感数据。</p>
<p>事实上，除了 Apache 的漏洞，黑客还使用了一些其他手段绕过 WAF（Web
应用程序防火墙）。有些管理面板居然位于 Shodan
搜索引擎上。更让人大跌眼镜的是，据研究人员分析，Equifax
所谓的“管理面板”都没有采取任何安保措施。安全专家布莱恩·克雷布斯（Brian
Krebs）在其博客中爆料，Equifax
的一个管理面板使用的用户名和密码都是“admin”。</p>
<p>由于管理面板能被随意访问，获取数据库密码就轻而易举了——虽然管理面板会加密数据库密码之类的东西，但是密钥却和管理面板保存在了一起。虽然是如此重要的征信机构，但
Equifax 的安全意识之弱可见一斑。</p>
<p>据悉，Equifax 某阿根廷员工门户也泄露了 14000
条记录，包括员工凭证和消费者投诉。本次事件发生后，好事者列举了 Equifax
系统中的一系列漏洞，包括一年以前向公司报告的未修补的跨站脚本（XSS）漏洞，更将
Equifax 推向了风口浪尖。</p>
<h1 id="apache-struts-漏洞相关">Apache Struts 漏洞相关</h1>
<p>Apache Struts 是世界上最流行的 Java Web 服务器框架之一，它最初是
Jakarta 项目中的一个子项目，并在 2004 年 3 月成为 Apache
基金会的顶级项目。</p>
<p>Struts 通过采用 Java Servlet/JSP 技术，实现了基于 Java EE Web 应用的
MVC 设计模式的应用框架，也是当时第一个采用 MVC 模式的 Web
项目开发框架。随着技术的发展和认知的提升，Struts 的设计者意识到 Struts
的一些缺陷，于是有了重新设计的想法。</p>
<p>2006 年，另外一个 MVC 框架 WebWork 的设计者与 Struts
团队一起开发了新一代的 Struts 框架，它整合了 WebWork 与 Struts
的优点，同时命名为“Struts 2”，原来的 Struts 框架改名为 Struts 1。</p>
<p>因为两个框架都有强大的用户基础，所以 Struts 2
一发布就迅速流行开来。在 2013 年 4 月，Apache Struts
项目团队发布正式通知，宣告 Struts 1.x
开发框架结束其使命，并表示接下来官方将不会继续提供支持。自此 Apache
Struts 1 框架正式退出历史舞台。</p>
<p>同期，Struts 社区表示他们将专注于推动 Struts 2
框架的发展。从这几年的版本发布情况来看，Struts 2
的迭代速度确实不慢，仅仅在 2017 年就发布了 9
个版本，平均一个月一个。</p>
<p>但从安全角度来看，Struts 2
可谓是漏洞百出，因为框架的功能基本已经健全，所以这些年 Struts 2
的更新和迭代基本也是围绕漏洞和 Bug
进行修复。仅从官方披露的安全公告中就可以看到，这些年就有 53
个漏洞预警，包括大家熟知的远程代码执行高危漏洞。</p>
<p>根据网络上一份未被确认的数据显示，中国的 Struts
应用分布在全球范围内排名第一，第二是美国，然后是日本，而中国没有打补丁的
Struts
的数量几乎是其他国家的总和。特别是在浙江、北京、广东、山东、四川等地，涉及教育、金融、互联网、通信等行业。</p>
<p>所以在今年 7 月，国家信息安全漏洞共享平台还发布过关于做好 Apache
Struts 2
高危漏洞管理和应急工作的安全公告，大致意思是希望企业能够加强学习，提高安全认识，同时完善相关流程，协同自律。</p>
<p>而这次 Equifax 中招的漏洞编号是
CVE-2017-5638，官方披露的信息见下图。简单来说，这是一个 RCE
的远程代码执行漏洞，最初是被安恒信息的 Nike Zheng 发现的，并于 3 月 7
日上报。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/00/cc/009ecfbac5741ea7ffd7fa3079a8c8cc.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>从介绍中可以看出，此次漏洞的原因是 Apache Struts 2 的 Jakarta
Multipart parser
插件存在远程代码执行漏洞，攻击者可以在使用该插件上传文件时，修改 HTTP
请求头中的 Content-Type 值来触发漏洞，最后远程执行代码。</p>
<p>说白了，就是在 Content-Type 注入 OGNL
语言，进而执行命令。代码如下（一行 Python 命令就可以执行服务器上的 shell
命令）：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">requests.get(<span class="string">&quot;https://target&quot;</span>, headers=&#123;<span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0&quot;</span>, <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;%&#123;(#_=&#x27;multipart/form-data&#x27;).(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context[&#x27;com.opensymphony.xwork2.ActionContext.container&#x27;]).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd=&#x27;dir&#x27;).(#iswin=(@java.lang.System@getProperty(&#x27;os.name&#x27;).toLowerCase().contains(&#x27;win&#x27;))).(#cmds=(#iswin?&#123;&#x27;cmd.exe&#x27;,&#x27;/c&#x27;,#cmd&#125;:&#123;&#x27;/bin/bash&#x27;,&#x27;-c&#x27;,#cmd&#125;)).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())&#125;&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></div>
<p>在 GitHub
上有相关的代码，链接为：https://github.com/mazen160/struts-pwn 或
https://github.com/xsscx/cve-2017-5638</p>
<p>注入点是在 JakartaMultiPartRequest.java 的 buildErrorMessage
函数中，这个函数里的 localizedTextUtil.findText 会执行 OGNL
表达式，从而导致命令执行（注：可以参看 Struts 两个版本的补丁“2.5.10.1
版补丁”“2.3.32 版补丁”），使客户受到影响。</p>
<p>因为默认情况下 Jakarta
是启用的，所以该漏洞的影响范围甚广。当时官方给出的解决方案是尽快升级到不受影响的版本，看来
Equifax 的同学并没有注意到，或者也没有认识到它的严重性。</p>
<p>另外，在 9 月 5 日和 7 日，Struts
官方又接连发布了几个严重级别的安全漏洞公告，分别是
CVE-2017-9804、CVE-2017-9805、CVE-2017-9793 和 CVE-2017-12611。</p>
<p>这里面最容易被利用的当属 CVE-2017-9805，它是由国外安全研究组织
lgtm.com 的安全研究人员发现的又一个远程代码执行漏洞。漏洞原因是 Struts 2
REST 插件使用带有 XStream 程序的 XStream Handler
进行未经任何代码过滤的反序列化操作，所以在反序列化 XML payloads
时就可能导致远程代码执行。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/f8/02/f8a10b42faf789018e0a5dfadbbd0c02.png"
alt="img" />
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>不过在 Apache
软件基金会的项目管理委员会的回应文章中，官方也对事故原因进行了分析和讨论。首先，依然不能确定泄露的源头是
Struts 的漏洞导致的。其次，如果确实是源于 Struts 的漏洞，那么原因“或是
Equifax
服务器未打补丁，使得一些更早期公布的漏洞被攻击者利用，或者是攻击者利用了一个目前尚未被发现的漏洞”。</p>
<p>根据推测，该声明提出黑客所使用的软件漏洞可能就是 CVE-2017-9805
漏洞，该漏洞虽然是在 9 月 4 日才由官方正式公布，但早在 7
月时就有人公布在网络上了，并且这个漏洞的存在已有 9 年。</p>
<p>相信通过今天的分享，你一定对 Equifax
的数据泄露始末及造成原因有了清楚的了解。欢迎您把你的收获和想法，分享给我。下篇文章中，我们将回顾一下互联网时代的其他大规模数据泄露事件，并结合这些事件给出应对方案和技术手段。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>左耳听风</category>
      </categories>
      <tags>
        <tag>secure</tag>
      </tags>
  </entry>
  <entry>
    <title>02  程序员如何用技术变现（下）</title>
    <url>/f9e1458d2fa011b17574f2aa6da9a545a411b89f/</url>
    <content><![CDATA[<h1 id="程序员如何用技术变现下">02 | 程序员如何用技术变现（下）</h1>
<p>我不算是聪明的人，经历也不算特别成功，但一步一步走来，我认为，我能做到的，你一定也能做到，而且应该还能做得比我更好。</p>
<h1 id="如何让自己的技能变现">如何让自己的技能变现</h1>
<p>还是那句话，本质上来说，程序员是个手艺人，有手艺的人就能做出别人做不出来的东西，而付费也是一件很自然的事了。那么，这个问题就变成如何让自己的“手艺”更为值钱的问题了。</p>
<p>第一，<strong>千里之行，积于跬步</strong>。任何一件成功的大事，都是通过一个一个的小成功达到的。所以，你得确保你有一个一个的小成功。</p>
<p>具体说来，首先，你得让自己身边的人有求于你，或是向别人推荐你。这就需要你能够掌握大多数人不能掌握的技能或技术，需要你更多地学习，并要有更多的别人没有的经验和经历。</p>
<p>一旦你身边的人开始有求于你，或是向别人推荐你，你就会被外部的人注意到，于是其他人就会付费来获取你的帮助。而一旦你的帮忙对别人来说有效果，那就会产生效益，无论是经济效益还是社会效益，都会为你开拓更大的空间。</p>
<p>你也会因为这样的正向反馈而鼓励自己去学习和钻研更多的东西，从而得到一个正向的循环。而且这个正向循环，一旦开始就停不下来了。</p>
<p>第二，<strong>关注有价值的东西</strong>。什么是有价值的东西？价值其实是受供需关系影响的，供大于求，就没什么价值，供不应求，就有价值。这意味着你不仅要看到市场，还要看到技术的趋势，能够分辨出什么是主流技术，什么是过渡式的技术。当你比别人有更好的嗅觉时，你就能启动得更快，也就比别人有先发优势。</p>
<p><strong>关于市场需求</strong>。你要看清市场，就需要看看各个公司都在做什么，他们的难题是什么。简单来说，现在的每家公司无论大小都缺人。但是真的缺人吗？中国是人口大国，从不缺少写代码搬砖的人，真正缺的其实是有能力能够解决技术难题的人，能够提高团队人效的人。所以，从这些方面思考，你会知道哪些技能才是真正的“供不应求”，这样可以让你更有价值。</p>
<p><strong>关于技术趋势</strong>。要看清技术趋势，你需要了解历史，就像一个球运动一样，你要知道这个球未来运动的地方，是需要观察球的已经完成运动的轨迹才知道的。因此，了解技术发展轨迹是一件很重要的事。要看一个新的技术是否顺应技术发展趋势，你需要将一些老技术的本质吃得很透。</p>
<p>因此，在学习技术的过程一定要多问自己两个问题：“一，这个技术解决什么问题？为什么别的同类技术做不到？二，为什么是这样解决的？有没有更好的方式？”另外，还有一个简单的判断方法，如果一个新的技术顺应技术发展趋势，那么在这个新的技术出现时，后面一定会有大型的商业公司支持，这类公司支持得越多，就说明你越需要关注。</p>
<p>第三，<strong>找到能体现价值的地方</strong>。<strong>在一家高速发展的公司中，技术人员的价值可以达到最大化</strong>。</p>
<p>试想，在一家大公司中，技术架构和业务已经定型，基本上没有什么太多的事可以做的。而且对于已经发展起来的大公司来说，往往稳定的重要性超过了创新。此外，大公司的高级技术人员很多，多你一个不多，少你一个不少，所以你的价值很难被体现出来。</p>
<p>而刚起步的公司，业务还没有跑顺，公司的主要精力会放在业务拓展上，这个时候也不太需要高精尖的技术，所以，技术人员的价值也体现不出来。</p>
<p>只有那些在高速发展的公司，技术人员的价值才能被最大化地体现出来。比较好的成长路径是，先进入大公司学习大公司的技术和成功的经验方法，然后再找到高速成长的公司，这样你就可以实现自己更多的价值。当然，这里并不排除在大公司中找到高速发展的业务。</p>
<p>第四，<strong>动手能力很重要</strong>。成为一个手艺人，动手能力是很重要的，因为在解决任何一个具体问题的时候，有没有动手能力就成为了关键。这也是我一直在写代码的原因，代码里全是细节，细节是魔鬼，只有了解了细节，你才能提出更好或是更靠谱、可以落地的解决方案。而不是一些笼统和模糊的东西。这太重要了。</p>
<p>第五，<strong>关注技术付费点</strong>。技术付费点基本体现在两个地方，<strong>一个是，能帮别人“挣钱”的地方；另一个是，能帮别人“省钱”的地方</strong>。也就是说，能够帮助别人更流畅地挣钱，或是能够帮助别人提高效率，能节省更多的成本，越直接越好。而且这个技术或解决方案最好还是大多数人做不到的。</p>
<p>第六，<strong>提升自己的能力和经历</strong>。付费的前提是信任，只有你提升自己的能力和经历后，别人才会对你有一定的信任，才会觉得你靠谱，才会给你机会。而这个信任需要用你的能力和经历来填补。比如，你是一个很知名的开源软件的核心开发人员，或是你是某知名公司核心项目的核心开发人员，等等。</p>
<p>第七，<strong>找到有价值的信息源</strong>。信息社会，如果你比别人有更好的信息源，那么你就可以比别人成长得更快。对于技术人员来说，我们知道，几乎所有的技术都源自西方世界，所以，你应该走到信息的源头去。</p>
<p>如果你的信息来自朋友圈、微博、知乎、百度或是今日头条，那么我觉得你完蛋了。因为这些渠道有价值的信息不多，有营养的可能只有
1%，而为了这 1%，你需要读完 99% 的信息，太不划算了。</p>
<p>那么如何找到这些信息源呢？用好 Google 就是一个关键，比如你在 Google
搜索引擎里输入“XXX Best Practice”，或是“Best programming
resource”……你就会找到很多。而用好这个更好的信息源需要你的英文能力，因此不断提升英文能力很关键。</p>
<p>第八，<strong>输出观点和价值观</strong>。真正伟大的公司或是产品都是要输出价值观的。只有输出了更先进的价值观，才会获得真正的影响力。但是，你要能输出观点和价值观，并不是一件容易的事，这需要你的积累和经历，而不是一朝之功。因此，如果想要让你的技能变现，这本质上是一个厚积薄发的过程。</p>
<p>第九，<strong>朋友圈很重要</strong>。一个人的朋友圈很重要，你在什么样的朋友圈，就会被什么样的朋友圈所影响。如果你的朋友圈比较优质，那么给你介绍过来的事儿和活儿也会好一些。</p>
<p>优质的朋友圈基本上都有这样的特性。</p>
<p>这些人都比较有想法、有观点，经验也比较丰富；</p>
<p>这些人涉猎的面比较广；</p>
<p>这些人都有或多或少的成功；</p>
<p>这些人都是喜欢折腾喜欢搞事的人；</p>
<p>这些人都对现状有些不满，并想做一些改变；</p>
<p>这些人都有一定的影响力。</p>
<p>最后有个关键的问题是，物以类聚，人以群分。如果你不做到这些，你怎么能进入到这样的朋友圈呢？</p>
<p>总之，就一句话，<strong>会挣钱的人一定是会投资的人</strong>。我一直认为，<strong>最宝贵的财富并不是钱，而是你的时间，时间比钱更宝贵，因为钱你不用还在那里，而时间你不用就浪费掉了。你把你的时间投资在哪些地方，就意味着你未来会走什么样的路。所以，利用好你的时间，投到一些有意义的地方吧</strong>。</p>
<p><strong>如何让自己的技能变现总结</strong></p>
<ol type="1">
<li><strong>千里之行，积于跬步</strong>。任何一件成功的大事，都是通过一个一个的小成功达到的。所以，你得确保你有一个一个的小成功。</li>
<li><strong>关注有价值的东西</strong>。<strong>关于市场需求</strong>。你要看清市场，就需要看看各个公司都在做什么，他们的难题是什么。简单来说，现在的每家公司无论大小都缺人。但是真的缺人吗？中国是人口大国，从不缺少写代码搬砖的人，真正缺的其实是有能力能够解决技术难题的人，能够提高团队人效的人。所以，从这些方面思考，你会知道哪些技能才是真正的“供不应求”，这样可以让你更有价值。<strong>关于技术趋势</strong>。要看清技术趋势，你需要了解历史，就像一个球运动一样，你要知道这个球未来运动的地方，是需要观察球的已经完成运动的轨迹才知道的。因此，了解技术发展轨迹是一件很重要的事。要看一个新的技术是否顺应技术发展趋势，你需要将一些老技术的本质吃得很透。</li>
<li><strong>找到能体现价值的地方</strong>。<strong>在一家高速发展的公司中，技术人员的价值可以达到最大化</strong>。</li>
<li><strong>动手能力很重要</strong>。</li>
<li><strong>关注技术付费点</strong>。技术付费点基本体现在两个地方，<strong>一个是，能帮别人“挣钱”的地方；另一个是，能帮别人“省钱”的地方</strong>。</li>
<li><strong>提升自己的能力和经历</strong>。付费的前提是信任，只有你提升自己的能力和经历后，别人才会对你有一定的信任，才会觉得你靠谱，才会给你机会。而这个信任需要用你的能力和经历来填补。</li>
<li><strong>找到有价值的信息源</strong>。信息社会，如果你比别人有更好的信息源，那么你就可以比别人成长得更快。对于技术人员来说，我们知道，几乎所有的技术都源自西方世界，所以，你应该走到信息的源头去。</li>
<li><strong>输出观点和价值观</strong>。真正伟大的公司或是产品都是要输出价值观的。只有输出了更先进的价值观，才会获得真正的影响力。</li>
<li><strong>朋友圈很重要</strong>。一个人的朋友圈很重要，你在什么样的朋友圈，就会被什么样的朋友圈所影响。如果你的朋友圈比较优质，那么给你介绍过来的事儿和活儿也会好一些。
<!--SR:!2022-11-15,10,250--></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>左耳听风</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>money</tag>
        <tag>程序员</tag>
        <tag>职业规划</tag>
      </tags>
  </entry>
  <entry>
    <title>04-用科学原理告诉你如何在考场上超常发挥</title>
    <url>/06c8bf1cc447fdd1707f5703200305136112aa7f/</url>
    <content><![CDATA[<h1
id="用科学原理告诉你如何在考场上超常发挥">04｜用科学原理告诉你如何在考场上超常发挥</h1>
<p>学习是有方法的，按照正确的方法练习，每个人都可以成为学霸。</p>
<p>大家好，我是冷冷。</p>
<p>今天要跟大家分享的是，考试以及做其它任何事情，如何才能超常发挥。</p>
<h3 id="section">01</h3>
<p>我读高三的时候，隔壁复习班有个女孩子，每次月考都稳坐第一考场的前几名。可这是她第三次读高三了，前两次也都是平时成绩名列前茅，高考发挥失利。我们会摇摇头，然后不痛不痒地丢出一句“心态不好”。</p>
<p>每个人在考场上，都会有得失心，得失心又衍生出对失败的恐惧，进而影响发挥，只是程度不同罢了。不仅仅是考场，我们平时做事情，一旦需要围绕一个目标前进，需要对自己所做的事情进行检测，就失去了那种松弛、自得的态度，整个人都紧绷起来。</p>
<p>如果你看书时，不为任何功利性的目的，只是纯粹地享受阅读体验，那么一切都自然而美好。你读得顺畅，轻轻松松啃下一本大部头。</p>
<p>突然有一天，你想着，我要从书中得到并且留下一些什么。你思考怎样做笔记、怎样提高阅读速度，你一边读书，一边留出一部分注意力，反思、质疑自己的方法是否正确。很难受，事情无法流畅地进行下去了。你进入了跟自己的博弈，在自我对话和对抗中，你没法专注地投入于事情本身。</p>
<p><strong>一旦你有了得失心，并且畏惧自己做得不好，担忧会浪费时间、带来失败的结果，你就迷失了。</strong></p>
<p>墨菲定律怎么说的来着？你越是担心某件事会发生，它就越可能发生。这其实也适用于我们对“考不好”的在意和担忧。</p>
<h3 id="section-1">02</h3>
<p>话说，其实这可以用科学原理进行解释。</p>
<p>我们在解决问题的时候，有一个用于暂时存放信息和加工信息的记忆系统，叫做“
<strong>工作记忆</strong>”。它相当于一个中间站，容量有限，而且不可扩充。我们把所需的信息，从长期记忆中提取出来，在工作记忆中进行存储、加工，处理完毕后，得到当下问题的答案。</p>
<p><strong>工作记忆能够存储和处理的信息容量越多，意味着你解决问题的能力就越强。</strong>
但如果我们在考试时，过于担忧考试的结果，并且不时地审视自己做得怎么样，纠结自己是不是做错了，那么，会有相当一部分“工作记忆”的容量，被这些焦虑占用。如此一来，我们能用于答题的记忆容量，就很有限了。</p>
<p>现在就好理解多了，既然工作记忆的容量有限，那么当你把一部分容量分配给自我监测时，势必会影响你的表现。</p>
<p>但如果你能做到不去审查和评价自己的表现，会怎样呢？关于这一点，我自己有切身体会。</p>
<p>我高三前两次月考，总分在550分左右。第三次月考之前，我挥霍时日，浑浑噩噩，所以，临考前很是恐惧，觉得自己会考特别差，会被班主任骂。万念俱灰之下，我不再给自己设置任何期望了。考试的时候做一题是一题，虽然每道题我都觉得自己做错了，但是抱着“反正就这样了”的念头，做完这一题，再做下一题，做下一题时，忘记上一题。</p>
<p>我不管了，我不去想我是不是做错了、是不是会考得特别差。然后分数出来，650多分。那是我高中生活的分水岭，在那之后，我是优等生了。（注：我高中之前成绩特别好，进了重点高中的重点班，高一高二不好好学习，成绩不好。高三成绩突然暴涨，基础好是部分原因，但肯定不是最关键的原因。）</p>
<p>说来也挺好笑的，我在那次考试之前，每次考场上都慌里慌张，看到隔壁桌的同学翻页了，我还没做完呢，也要赶紧翻。考场上遇到不那么熟悉的题目，先给自己判死刑——“我又完了”，完全无法投入于解决问题本身。</p>
<p>“工作记忆的分配”这个理论，能很好地解释我这次“莫名其妙”的好运。当我把所有注意力都放在做题上面的时候，我反而取得了很好的成绩。</p>
<h3 id="section-2">03</h3>
<p>那么现在，我们可以回答这个问题了，考试的时候，如何才能超常发挥？</p>
<p>你要做的，是
<strong>把所有的得失心和前因后果都暂时忘掉</strong>。不去预先给自己设置标准，而是能做到怎样就做到怎样，不在过程中因为容易而掉以轻心，或者因为困难而焦虑。</p>
<p>在考场上，在你需要解决问题的一切时刻，最重要的就是，忘掉你刚刚做过的题，忘掉你之后要做的题，忘掉你考试是为了什么，忘掉你考试之后会面对什么。尽管去做吧，别总一步三回头地审视自己的行为。</p>
<p>当你有了对自己给予评判和纠正的心，你就无法正常发挥了，连本应有的水平，都不能达到了。
<strong>做事情的时候，不要想；做完了，再去想。珍惜你的工作记忆，把它们全部用于做题本身。</strong></p>
<p>其实讲到这里，关于“超常发挥”的原理，以及在考场上该保持怎样的心态，已经讲完了，但我还有一个具体的、切实可行的方法，能在很大程度上帮助你忘记恐惧、忘记得失心，叫做“默念”，会在《教你全面提升专注力，学习时不再走神》这节课中做详细介绍，对“超常发挥”特别有用。你会在之后的课程内容中，学到这个方法。</p>
<h3 id="section-3">04</h3>
<p>接下来我要讲一讲，我们在平时学习中遇到的另一个重要的问题，和考试中的“发挥失常”是相似的。</p>
<p>我们在看书、做题、学习、工作的时候，常常喜欢存着犹豫不决的心：这种方法真的对么？这么做真的没问题么？这条路不是白费功夫么？刚才做得好烂啊……</p>
<p>真正做事的时间，没有监测自己的时间多。考研期间，这种完美主义思维，耗费了我的大量时间，对方法的思考和辩驳，一条条罗列在文档中，字数都快赶上笔记了。</p>
<p>后面我是如何自救的呢？分享一下我的思路。</p>
<p>你有没有想过？你不可能在一开始，就找到正确的学习方法。毕竟，你需要从零开始了解一本书，你无法预测学习的内容，以及过程中会遇到的问题。必须接受这个事实：一开始的学习效率，必然不高。</p>
<p>虽然现在的方法不够好，但它是必须经历的启动阶段。
<strong>对于某一固定的学科或者领域，学习基本上是个匀加速或者变加速的过程，你的方法会逐渐完善，效率会逐步提高。</strong></p>
<p>那么，如何在不影响专心学习的前提下，逐步改善方法呢？</p>
<p>你可以先用目前的这个方法学一小时，注意，是专注地学一个小时。大家有没有意识到，专注才是最重要的，与专注相比，其它的东西不值一提。哪怕是觉得不够完美的方法，也要专注地使用一小时。</p>
<p>如果过程中觉得怎样学可能更好，或者发现了之前没注意到的漏洞，可以先记下来，一小时结束后，再思考怎么改。即使这个方法有缺陷，最多也只差5%（非准确数字，意会即可）的效率，所完成的学习任务，并不会差多少。何况，即使真的浪费了时间，也只是一小时而已。</p>
<p>而且，你需要真正地实践一小时，才知道这个方法到底好不好，以及有哪些可以改进的地方。一小时后，可以花两分钟总结经验，对感觉不够好的方面，进行改善。当然，这个总结和改善的周期，也可以是一天，甚至一周。刚才为了方便讲述，我以一小时为例，大家可以根据自己的喜好，做出灵活的变通。</p>
<p>这个解决问题的思路，和我前文说的，如何在考试中超常发挥的原理是一致的，都是减少监测自己的时间，将工作记忆运用到实际的努力之中。</p>
<h3 id="总结">总结</h3>
<p>这节课我们学了啥？语文课代表冷冷的例行总结来了：</p>
<p>1、我们在解决问题的时候，有一个用于暂时存放信息和加工信息的记忆系统，叫做“工作记忆”，它的容量是有限的。工作记忆能够存储和处理的信息容量越多，意味着你解决问题的能力就越强。</p>
<p>2、考试中发挥失常，是因为你过于担忧考试结果，纠结自己是不是做错了，以至于，相当一部分工作记忆的容量被焦虑占用。而真正用于答题的记忆容量，非常有限。</p>
<p>3、要想超常发挥，重要的是，考试时不去预先给自己设置标准，不去评价和思考自己做得怎么样。做完这一题，再做下一题；做下一题时，忘记上一题。</p>
<p>4、在平时的学习中，我们常常怀疑自己的方法是否正确，占用了很多的工作记忆，影响学习效率。有效的解决方法是：给自己一个小时的限定时间，先用眼下的方法，尽量专注学习。如果过程中对学习方法有更好的想法，就先记下来，一小时结束后，花两分钟对学习方法进行调整。</p>
<p>对于某一固定的学科或者领域，学习基本上是个匀加速或者变加速的过程，你的方法会逐渐完善，效率会逐步提高。</p>
<p>好了，今天的内容就到这里。我是冷冷，祝你今天吃饱，我们下节课再见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>如何成为学习高手</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>01-如何减少对学习的排斥和厌恶心理，使其变得相对愉悦？</title>
    <url>/433bb1c1116ef3f08598877ffe8acce6196be595/</url>
    <content><![CDATA[<h1
id="如何减少对学习的排斥和厌恶心理使其变得相对愉悦">01｜如何减少对学习的排斥和厌恶心理，使其变得相对愉悦？</h1>
<p>学习是有方法的，按照正确的方法练习，每个人都可以成为学霸。</p>
<p>大家好，我是冷冷。</p>
<p>今天要跟大家分享的是，如何减少对学习的排斥和厌恶心理，让学习变得相对愉悦。我会详细介绍几个实用的思路。</p>
<h3 id="避免负向峰值的出现">01 避免负向峰值的出现</h3>
<p>在讲第一个思路之前，我希望你先记住两个概念：
<strong>峰值和终值</strong>。</p>
<p>心理学家丹尼尔·卡尼曼是2002年的诺贝尔奖得主，他提出了峰终定律（Peak-End
Rule）：人们对一切人、事、物的感受，由峰值和终值两个因素决定。峰值是指这段体验中的最高峰，包括正向和负向；终值是指这段体验结束时给你的感觉。</p>
<p>大家知道的，学习是一件不那么令人愉悦的事情，大多数知识都是枯燥的，理解和记忆的过程常常是艰难的。我们总是觉得不想学、学不会。</p>
<p>说实话，要想在学习的时候，体验到正向的峰值和终值，是比较困难的事情。但我们依然可以利用这个基本原理，使学习变得相对愉悦。怎么做到呢？</p>
<p>虽然学习在总体上是枯燥的，但总有某个科目，是你比较喜欢的；或者，总有某种任务，是你相对较为擅长的，比如，可能你会觉得背单词蛮轻松的。那么，你
<strong>在学习的过程中，可以穿插安排喜欢且擅长的环节，而不是一直死磕艰难的任务。</strong></p>
<p>打颗栗子，我写文章需要做的两件主要的事情，是输入和输出。我非常喜欢输入，看书、看文章、跟人探讨、学习一些付费课程等等，无论内容多枯燥多抽象，我都觉得很有意思。</p>
<p>但是，输出比输入难多了，写得不顺畅，我会觉得烦躁；写的时间久一点，我会感到疲倦，没有思路。所以，我规定自己每次只写25分钟，时间一到，即使还没完成，也立刻收手，去做我喜欢的输入。</p>
<p>两种任务来回切换，整个过程基本不会出现负向的峰值，而且输入和输出都能及时高效地完成。但是，如果让我花连续3小时，死磕一篇文章，我很难坚持到完成的那一刻。</p>
<p>这里需要提醒大家的是，25分钟只是我个人在写作方法论相关的文章时，所选择的适用于自己的时间标准。你完全可以根据自己的实际情况，做出灵活的变通。</p>
<p>总之，
<strong>艰难和轻松的任务穿插着去完成，避免负向峰值的出现，是让自己在学习和工作中，保持愉悦和高效的重要方法。</strong></p>
<h3 id="避免负向终值的出现">02 避免负向终值的出现</h3>
<p>另外，我们每天结束学习的时候，一般都是较为糟糕的状态，比如没完成当天的计划，比如觉得自己什么都没学到。也就是说，我们的终值体验，常常是负向的。</p>
<p><strong>避免负向终值的出现，也是让学习变得相对愉悦的重要一环。</strong></p>
<p>该怎么做呢？</p>
<p>主要有两点。首先，制定计划的时候，量力而行，不要制定完不成的计划；参考:<a
href="../2ae798d5c36c7ad61ebb30a4b6b3e5991bb386ec">SMART 原则</a>
其次，详细记录自己当天具体的时间使用情况，一天结束的时候，可以一目了然，清楚自己完成了哪些学习任务。</p>
<p>大脑是善于遗忘的，你要写下来，把成果具像化，让自己看到清晰明确的正反馈，从当天的学习中，获得成就感。这会给我们一个正向的终值体验，有助于养成我们对学习的积极态度。</p>
<p>另外，大家应该都曾有过这样的疑问：自己明明有远大的目标和理想，可每天学习的时候，总是动力不足，这是为什么呢？</p>
<p>这是因为，远大理想的实现，是很久之后才能得到的奖赏，而人的大脑，==只喜欢看眼前利益==。这和我们大脑中存在的奖励系统有关，它更愿意选择立刻就能得到的好处，而非延迟满足。</p>
<p>所以，
<strong>让自己每天都能从学习上得到正面的反馈，拥有足够的收获感</strong>，不仅仅是为了终值体验，也是为了遵循我们的本性，以便更好地把努力学习这件事，坚持下去。
<!--SR:!2022-11-16,9,250--></p>
<h3 id="每天只做3件事">03 每天只做3件事</h3>
<p>假设你在图书馆认真学习了一上午，吃完午饭并且午休之后，不是很能重新进入状态，你可以换一个地方学习，比如教学楼的自习室。你会发现，疲累之后，新的环境能让你重新恢复活力。作为一个自由职业者，我常常在家里办公小半天之后，转战书店，就是为了更久地保持高效的状态。</p>
<p>这是因为，我们的大脑中，存在场所神经元，环境的改变，可以激发它的活性。大家可以参考我的做法，在感到疲倦时，试试换个位置或者换个场所。</p>
<p>还有一个很有用的建议，那就是
<strong>每天别给自己安排太多类型的任务</strong>。比如，你平时可能会这样要求自己：今天我要背单词、读书、做数学题、练习英语口语、学习插画课等等等等。</p>
<p>但是，同样是学习10小时，安排3件事，和安排10件事，所带来的心理压力，是完全不同的。大家可以根据自己的实际情况，灵活决定每天的任务总数量。总之，要尽可能少安排，而不是多安排。</p>
<h3 id="专注于做事本身">04 专注于做事本身</h3>
<p>如果你对自己吃饭的速度、效率、营养等，进行打分，吃饭会变成一件痛苦的事情；如果你很纠结自己的睡眠，想着，我一定要在10分钟之内睡着，我一定要以仰卧的姿势入睡。那完了，你很可能睡不着了，你会发现睡觉成了一件压力很大的事情。</p>
<p>大家想想看，是不是这么回事儿？</p>
<p>正是因为我们吃饭和睡觉的时候，不需要刻意满足某种标准，或者得到某种结果，所以，它们才会是自发自由自觉的事情。那么，据此，我们可以进一步思考，如何让学习变得相对自发自由且自觉呢？</p>
<p>一个很关键的思路是，
<strong>学着不用某种标准框住自己，也别总对自己的表现评头论足，更不必急着追求某种结果，而是踏踏实实走好每一步，专注于做事本身。</strong></p>
<h3 id="给自己足够的容错空间">05 给自己足够的容错空间</h3>
<p>当然，需要指出的是，说到底，学习和吃饭、睡觉是不一样的，它不可能成为一件纯粹的快乐的事情。但注重做事的过程，把努力当成习惯，的确能在一定程度上，使学习变得相对愉悦。</p>
<p>其实，心理学界对注重过程和注重结果的差异，也有相应的研究和理论。20世纪80年代，心理学家尼科尔斯、德韦克等人，提出了“成就目标”这个概念。“成就目标”包括“掌握目标”和“成绩目标”两种类型，前者是指“掌握知识和提高能力”，后者是指“好名次和好成绩”。</p>
<p>一个定位于过程中的成长，一个定位于结果的优异。</p>
<p>如果一个人把“掌握目标”作为努力的重心，TA会明白，遇到问题和遭受失败，是很正常的，它们是成长过程的一部分。
<strong>任何事情、任何能力的发展，都是螺旋式上升的过程，对自己，对事情，你要有足够的容错空间。</strong></p>
<p>以“掌握目标”为导向，才能真正达成“成绩目标”。也就是说，专注于耕耘，会让你在心理上更愉悦，也会有更好的收获。</p>
<h3 id="总结">总结</h3>
<p>这节课我们学了啥？语文课代表冷冷的例行总结来了：</p>
<p><strong>要想减少对学习的排斥和厌恶心理，使其变得相对愉悦，主要有以下几个思路。</strong></p>
<ol type="1">
<li>人们对一切人、事、物的感受，由峰值和终值两个因素决定。峰值是指这段体验中的最高峰，包括正向和负向；终值是指这段体验结束时给你的感觉。</li>
</ol>
<p>为了避免出现负向的峰值，可以在学习的过程中，穿插安排喜欢且擅长的环节，而不是一直死磕艰难的任务。</p>
<p>为了避免出现负向的终值，一是，在制定计划的时候，量力而行，不要制定完不成的计划；二是，详细记录当天具体的时间使用情况，把自己的学习成果具像化，借以获得正反馈和成就感。</p>
<ol start="2" type="1">
<li><p>我们的大脑中，存在场所神经元，环境的改变，可以激发它的活性。在感到疲倦时，可以试试换个位置或者换个场所。</p></li>
<li><p>每天别给自己安排太多类型的任务。</p></li>
<li><p>学习的时候，不用某种标准框住自己，也别总对自己的表现评头论足，更不必急着追求某种结果，而是注重做事的过程，把努力当成一种习惯。</p></li>
<li><p>允许自己犯错, 给自己足够的容错空间。
<!--SR:!2022-11-17,10,250--></p></li>
</ol>
<p>好了，今天的内容就到这里。我是冷冷，祝你今天吃饱，我们下节课再见。</p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>01-如何减少对学习的排斥和厌恶心理，使其变得相对愉悦？
<ul>
<li><a href="../2ae798d5c36c7ad61ebb30a4b6b3e5991bb386ec">SMART
原则</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>如何成为学习高手</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>02-学会这4点，你也可以告别伪勤奋</title>
    <url>/17bb0e5f33541a8cd7ff4e899ee35e9b68dfd189/</url>
    <content><![CDATA[<h1 id="学会这-4-点你也可以告别伪勤奋">02｜学会这 4
点，你也可以告别伪勤奋</h1>
<p>学习是有方法的，按照正确的方法练习，每个人都可以成为学霸。</p>
<p>大家好，我是冷冷。</p>
<p>今天要跟大家分享的是，在学习和工作中，有哪些做法是“伪勤奋”，以及怎样解决？</p>
<h3 id="花大量时间做容易的环节">01 花大量时间做容易的环节</h3>
<p>你羡慕那些学识渊博、博古通今的人，于是决定读很多书。但是你沉迷于集邮式地读书，一本接着一本，手不释卷。谁说看书不勤奋呢？没有人敢这么说。</p>
<p>但是，要想成为学识渊博、博古通今的人，看书其实是最简单的一步，记忆、应用、输出，才是更为重要的环节。</p>
<p>如果你每天的运动量，没有让肌肉得到有效的锻炼，那么它不会真正地成长。停留于舒适区的健身，是低效的，做事也是同样的。如果你的任务让你觉得轻松，很好，那说明你没有进入提升区。</p>
<p>什么是真勤奋呢?</p>
<p>在完成目标的过程中，你只愿意做自己得心应手的那一步，这就是“伪勤奋”；
<strong>只有去完成那些让你感到需要思考、需要克服困难的任务，才称得上“真勤奋”。</strong></p>
<p>要注意的是，不要矫枉过正，不要给自己设置过于高的目标，或者让自己去解决过于困难的问题。真正有效的勤奋，是在你“<mark style="background: #83d98fA6;">踮一踮脚能够够得到</mark>
”的层面去学习、去做事。 <!--SR:!2022-11-16,9,250--></p>
<h3 id="从来不去检测自己获得了什么">02从来不去检测自己获得了什么</h3>
<p>你从早忙到晚，却觉得自己什么都没学到，因为你只是在购买食材、收藏食谱而已，只有把饭菜做出来，你才能切实地感受到，自己是做了一些事情的。也就是说，
==<strong>学的东西，要立刻检测，检测自己有没有记住，检测自己是不是会做题。</strong>==</p>
<p>记住这几句话：</p>
<blockquote>
<p>对于真正的勤奋来说，</p>
<p>再功利主义也不为过。</p>
<p>你要看到反馈，</p>
<p>你要立刻看到反馈。</p>
<p>一切不以检测和输出为目的的努力，</p>
<p>都是耍流氓。 <!--SR:!2022-11-17,10,250--></p>
</blockquote>
<h3 id="只是埋头苦学从来不总结规律">03只是埋头苦学，从来不总结规律</h3>
<p>很多人对自己的学习方法和模式，缺少清晰的认知。做对了也好，做错了也罢，他们都并不清楚自己是如何做到的。</p>
<p>但还有一些人，会观察、分析、总结自己是如何学习的，对方法进行针对性的调整和完善，并且有意识地指导自己接下来的努力方向。</p>
<p>打颗栗子，你需要背单词，抱着单词书按部就班地逐个学习，过了一个月，你发现：诶？怎么背过的单词，在做题的时候还是不认识呢？是哪个环节出了错？是因为记忆得不牢靠，还是复习得不及时？又或者，是因为没有结合具体语境去记忆？</p>
<p>然后你开始思考该如何才能解决这个问题，你发现：对于阅读理解来说，我好像只有在具体的某篇文章中见到这个单词，查出它是什么意思，并且结合前后文进行理解，印象才会深刻，才能真正掌握这个单词，并且把题目做对；对于写作来说，我没法通过背单词的方式，来提分，我只有直接去学漂亮的表达，并且做出自己的创造性改动，这个单词、这个句子，才能真正为我所用。</p>
<p>这就是我所说的“总结规律”。</p>
<p>因为，学习这件事，不仅包括对知识的学习，还包括对学习方法的学习。而学习方法，并不是只需要通过学习他人的经验来获得，自己的实践和复盘，是同等重要的。
<strong>你需要试错、分析、反思、调整，以及应用，你要有进行“元认知”的意识，也就是说，不但要做到，还要清楚自己是如何做到的。</strong></p>
<h3
id="道德许可效应让你原地徘徊沉迷于已经努力的幻觉之中">04道德许可效应让你原地徘徊沉迷于已经努力的幻觉之中</h3>
<p>道德许可（moral
licensing）是指，当你对某事有一个明确的道德标准之后，在做出相关的行为和判断时，反而更倾向于违背这个标准。通俗来说就是，当我们做了一些好的、上进的事情之后，就倾向于做一些坏的、堕落的事情，来破坏自己之前的努力。</p>
<p>打两颗栗子：</p>
<p>你想减肥，跑完5公里之后会想，哎呀我太辛苦了，我好棒，已经跑了5公里了，吃点巧克力吧；白天吃了健康低脂的食物，晚餐放纵自己吃蛋糕吧。</p>
<p>你做了一个长期计划，要进入每天学习12小时的学霸模式，你感到无比兴奋，心中暗暗为自己欢呼，于是今天先大吃一顿或者大玩一通。</p>
<p>你看，当你为某个目标，付出了一些努力，甚至只是预想了宏伟的计划，就往往把自己感动坏了，觉得已经在变好了，然后用放纵的方式，对自己进行奖励。这就是==道德许可效应==。</p>
<p>再比如，学习英语之前，你会先下载一堆英语资料；想要健身，先关注一些博主。单单是这些收集资料、收藏文章的行为，已经给了你一种“我做了努力”的感觉。你有了变好的可能性，就在眼前，触手可及，这已经足够安慰你。即使未曾付出多少真正的努力，也不那么自责了。这也是道德许可效应。</p>
<p>那么我们该怎么做，才能避免陷入这种伪勤奋呢？
<strong>根本原则是，==将你想做的事情最简化==，去掉所有花里胡哨的，不搞形式主义，直接开始。</strong></p>
<p>比如，想跑步？不必花大量时间去看科普，也不必研究最佳跑步时间，不必百般比较哪条跑步路线最合适，更不必货比三家，买到体验最好的那双跑鞋。只要做好最基础的准备，你就可以直接开始跑了。然后，在实践的过程和间隙之中，继续完善自己的准备工作。</p>
<p>做其它事情，也都是同样的道理，<mark style="background: #83d98fA6;">直接去做最本质的核心部分的工作</mark>
，道德许可效应就大概率不会发生。
<!--SR:!2022-11-17,10,250!2022-11-17,10,250--></p>
<h3 id="总结">总结</h3>
<p>这节课我们学了啥？语文课代表冷冷的例行总结来了：</p>
<p><strong>在学习和工作中，存在一些伪勤奋的做法。</strong></p>
<ol type="1">
<li>花大量时间做容易的环节。</li>
</ol>
<p>解决思路是：在你“踮一踮脚能够够得到”的层面去学习、去做事，只有去完成那些让你感到需要思考、需要克服困难的任务，才称得上“真勤奋”。</p>
<ol start="2" type="1">
<li>从来不去检测自己获得了什么。</li>
</ol>
<p>解决思路是：学的东西，要立刻检测，检测自己有没有记住，检测自己是不是会做题。</p>
<p>对于真正的勤奋来说，再功利主义也不为过。你要看到反馈，你要立刻看到反馈。一切不以检测和输出为目的的努力，都是耍流氓。</p>
<ol start="3" type="1">
<li>只是埋头苦学，从来不总结规律。</li>
</ol>
<p>解决思路是：学习这件事，不仅包括对知识的学习，还包括对学习方法的学习。你要学会观察、分析、总结自己是如何学习的，对方法进行针对性的调整和完善，并且有意识地指导自己接下来的努力方向。</p>
<ol start="4" type="1">
<li>道德许可效应让你原地徘徊，沉迷于已经努力的幻觉之中。</li>
</ol>
<p>解决思路是：<mark style="background: #83d98fA6;">将你想做的事情最简化</mark>
，去掉所有花里胡哨的，不搞形式主义，直接开始。
<!--SR:!2022-11-16,9,250--></p>
<p>好了，今天的内容就到这里。我是冷冷，祝你今天吃饱，我们下节课再见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>如何成为学习高手</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>06｜构建模式：Go是怎么解决包依赖管理问题的？</title>
    <url>/874526fcb1e65bcea0b46d6294468e478a7a55c0/</url>
    <content><![CDATA[<h1
id="构建模式go是怎么解决包依赖管理问题的">06｜构建模式：Go是怎么解决包依赖管理问题的？</h1>
<p>你好，我是Tony Bai。</p>
<p>通过前面的讲解，我们已经初步了解了Go程序的结构，以及Go项目的典型布局了。那么，接下来，<strong>我们是时候来系统学习一下Go应用的构建了</strong>，它们都是我们继续Go语言学习的前提。</p>
<p>所以在这一节课，我们就来了解Go构建模式演化的前世今生。理解了这个发展史后，我们会重点来探讨现在被广泛采用的构建模式，Go
Module的基本概念和应用构建方式。 接着，知道了怎么做后，我们会再深一层，继续分析Go
Module的工作原理。这样层层深入地分析完后，你就能彻底、透彻地掌握Go
Module构建模式了。</p>
<p>好了，我们直接开始吧。我们先来了解一下Go构建模式的演化过程，弄清楚Go核心开发团队为什么要引入Go
module构建模式。</p>
<h2 id="go构建模式是怎么演化的">Go构建模式是怎么演化的？</h2>
<p>Go程序由Go包组合而成的，<strong>Go程序的构建过程就是确定包版本、编译包以及将编译后得到的目标文件链接在一起的过程</strong>。</p>
<p>Go语言的构建模式历经了三个迭代和演化过程，分别是最初期的GOPATH、1.5版本的Vendor机制，以及现在的Go
Module。这里我们就先来介绍一下前面这两个。</p>
<p><strong>首先我们来看GOPATH。</strong></p>
<p>Go语言在首次开源时，就内置了一种名为<strong>GOPATH</strong>的构建模式。在这种构建模式下，Go编译器可以在本地GOPATH环境变量配置的路径下，搜寻Go程序依赖的第三方包。如果存在，就使用这个本地包进行编译；如果不存在，就会报编译错误。</p>
<!-- [[[read_end]]] -->
<p>我这里给出了一段在GOPATH构建模式下编写的代码，你先来感受一下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    logrus.Println(<span class="string">&quot;hello, gopath mode&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>你可以看到，这段代码依赖了第三方包logrus（logrus是Go社区使用最为广泛的第三方log包）。</p>
<p>接下来，这个构建过程演示了Go编译器（这里使用Go
1.10.8）在GOPATH环境变量所配置的目录下（这里为/Users/tonybai/Go），无法找到程序依赖的logrus包而报错的情况：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> build main.go</span><br><span class="line">main.go:3:8: cannot find package <span class="string">&quot;github.com/sirupsen/logrus&quot;</span> <span class="keyword">in</span> any of:</span><br><span class="line">	/Users/tonybai/.bin/go1.10.8/src/github.com/sirupsen/logrus (from <span class="variable">$GOROOT</span>)</span><br><span class="line">	/Users/tonybai/Go/src/github.com/sirupsen/logrus (from <span class="variable">$GOPATH</span>)</span><br></pre></td></tr></table></figure></div>
<p><strong>那么Go编译器在GOPATH构建模式下，究竟怎么在GOPATH配置的路径下搜寻第三方依赖包呢？</strong></p>
<p>为了给你说清楚搜寻规则，我们先假定Go程序导入了github.com/user/repo这个包，我们也同时假定当前GOPATH环境变量配置的值为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=/usr/local/goprojects:/home/tonybai/go</span><br></pre></td></tr></table></figure></div>
<p>那么在GOPATH构建模式下，Go编译器在编译Go程序时，就会在下面两个路径下搜索第三方依赖包是否存在：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">/usr/local/goprojects/src/github.com/user/repo</span><br><span class="line">/home/tonybai/go/src/github.com/user/repo</span><br></pre></td></tr></table></figure></div>
<p>这里注意一下，如果你没有显式设置GOPATH环境变量，Go会将GOPATH设置为默认值，不同操作系统下默认值的路径不同，在macOS或Linux上，它的默认值是$HOME/go。</p>
<p>那么，当遇到像上面例子一样，没有在本地找到程序的第三方依赖包的情况，我们该如何解决这个问题呢？</p>
<p><strong>这个时候就要让go get登场了</strong>！</p>
<p>我们可以通过go get命令将本地缺失的第三方依赖包下载到本地，比如：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> get github.com/sirupsen/logrus</span><br></pre></td></tr></table></figure></div>
<p>这里的go
get命令，不仅能将logrus包下载到GOPATH环境变量配置的目录下，它还会检查logrus的依赖包在本地是否存在，如果不存在，go
get也会一并将它们下载到本地。</p>
<p>不过，go
get下载的包只是那个时刻各个依赖包的最新主线版本，这样会给后续Go程序的构建带来一些问题。比如，依赖包持续演进，可能会导致不同开发者在不同时间获取和编译同一个Go包时，得到不同的结果，也就是不能保证可重现的构建（Reproduceable
Build）。又比如，如果依赖包引入了不兼容代码，程序将无法通过编译。</p>
<p>最后还有一点，如果依赖包因引入新代码而无法正常通过编译，并且该依赖包的作者又没用及时修复这个问题，这种错误也会传导到你的程序，导致你的程序无法通过编译。</p>
<p>也就是说，<strong>在GOPATH构建模式下，Go编译器实质上并没有关注Go项目所依赖的第三方包的版本。</strong>
但Go开发者希望自己的Go项目所依赖的第三方包版本能受到自己的控制，而不是随意变化。于是Go核心开发团队引入了Vendor机制试图解决上面的问题。</p>
<p><strong>现在我们就来看看vendor机制是怎么解决这个问题的。</strong></p>
<p>Go在1.5版本中引入<strong>vendor机制</strong>。vendor机制本质上就是在Go项目的某个特定目录下，将项目的所有依赖包缓存起来，这个特定目录名就是vendor。</p>
<p>Go编译器会优先感知和使用vendor目录下缓存的第三方包版本，而不是GOPATH环境变量所配置的路径下的第三方包版本。这样，无论第三方依赖包自己如何变化，无论GOPATH环境变量所配置的路径下的第三方包是否存在、版本是什么，都不会影响到Go程序的构建。</p>
<p>如果你将vendor目录和项目源码一样提交到代码仓库，那么其他开发者下载你的项目后，就可以实现可重现的构建。因此，<mark style="background: #83d98fA6;">如果使用vendor机制管理第三方依赖包，最佳实践就是将vendor一并提交到代码仓库中。</mark></p>
<p>下面这个目录结构就是为上面的代码示例添加vendor目录后的结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── main.go</span><br><span class="line">└── vendor/</span><br><span class="line">    ├── github.com/</span><br><span class="line">    │&amp;nbsp;&amp;nbsp; └── sirupsen/</span><br><span class="line">    │&amp;nbsp;&amp;nbsp;     └── logrus/</span><br><span class="line">    └── golang.org/</span><br><span class="line">        └── x/</span><br><span class="line">            └── sys/</span><br><span class="line">                └── unix/</span><br></pre></td></tr></table></figure></div>
<p>在添加完vendor后，我们重新编译main.go，这个时候Go编译器就会在vendor目录下搜索程序依赖的logrus包以及后者依赖的golang.org/x/sys/unix包了。</p>
<p>这里你还要注意一点，要想开启vendor机制，你的Go项目必须==位于GOPATH环境变量配置的某个路径的src目录下面==。如果不满足这一路径要求，那么Go编译器是不会理会Go项目目录下的vendor目录的。</p>
<p>不过vendor机制虽然一定程度解决了Go程序可重现构建的问题，但对开发者来说，它的体验却不那么好。<strong>一方面</strong>，Go项目必须放在GOPATH环境变量配置的路径下，庞大的vendor目录需要提交到代码仓库，不仅占用代码仓库空间，减慢仓库下载和更新的速度，而且还会干扰代码评审，对实施代码统计等开发者效能工具也有比较大影响。</p>
<p><strong>另外</strong>，你还需要手工管理vendor下面的Go依赖包，包括项目依赖包的分析、版本的记录、依赖包获取和存放，等等，<strong>最让开发者头疼的就是这一点。</strong></p>
<p>为了解决这个问题，Go核心团队与社区<strong>将Go构建的重点转移到如何解决包依赖管理上</strong>。Go社区先后开发了诸如gb、glide、dep等工具，来帮助Go开发者对vendor下的第三方包进行自动依赖分析和管理，但这些工具也都有自身的问题。</p>
<p>就在Go社区为包依赖管理焦虑并抱怨没有官方工具的时候，Go核心团队基于社区实践的经验和教训，推出了Go官方的解决方案：<strong>Go
Module</strong>。</p>
<h2 id="创建你的第一个go-module">创建你的第一个Go Module</h2>
<p>从Go 1.11版本开始，除了GOPATH构建模式外，Go又增加了一种Go
Module构建模式。</p>
<p>在<a
href="../9a8b79c6523de0b004dc327f9851a93754e80436">04｜初窥门径：一个Go程序的结构是怎样的？</a>中，我们曾基于Go
Module构建模式编写过一个“hello,
world”程序，当时是为了讲解Go程序结构，这里我再带你回顾一下Go
Module的基础概念。</p>
<p>一个Go
Module是一个Go包的集合。module是有版本的，所以module下的包也就有了版本属性。这个module与这些包会组成一个独立的版本单元，它们一起打版本、发布和分发。</p>
<p>在Go Module模式下，通常一个代码仓库对应一个Go Module。一个Go
Module的顶层目录下会放置一个go.mod文件，每个go.mod文件会定义唯一一个module，也就是说Go
Module与go.mod是一一对应的。</p>
<p>go.mod文件所在的顶层目录也被称为module的根目录，module根目录以及它子目录下的所有Go包均归属于这个Go
Module，这个module也被称为main module。</p>
<p>你可能也意识到了，Go
Module的原理和使用方法其实有点复杂，但“千里之行始于足下”，下面我们先从如何创建一个Go
Module说起。我们先来将上面的例子改造成为一个基于Go
Module构建模式的Go项目。</p>
<h3 id="创建一个go-module"><strong>创建一个Go Module</strong></h3>
<p>将基于当前项目创建一个Go Module，通常有如下几个步骤：</p>
<p>第一步，通过go mod init创建go.mod文件，将当前项目变为一个Go
Module；</p>
<p>第二步，通过go mod tidy命令自动更新当前module的依赖信息；</p>
<p>第三步，执行go build，执行新module的构建。</p>
<p>我们一步一步来详细看一下。</p>
<p>我们先建立一个新项目module-mode用来演示Go
Module的创建，注意我们可以在任意路径下创建这个项目，不必非要在GOPATH环境变量的配置路径下。</p>
<p>这个项目的main.go修改自上面的例子，修改后的main.go的代码是这样的，我们依旧依赖外部包logrus：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line"></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">	logrus.Println(<span class="string">&quot;hello, go module mode&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>你可以看到，这个项目目录下只有main.go一个源文件，现在我们就来为这个项目添加Go
Module支持。我们通过go mod init命令为这个项目创建一个Go
Module（这里我们使用的是Go版本为1.16.5，Go 1.16版本默认采用Go
Module构建模式）：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> mod init github.com/bigwhite/module-mode</span><br><span class="line">go: creating new go.mod: module github.com/bigwhite/module-mode</span><br><span class="line">go: to add module requirements and sums:</span><br><span class="line">	go mod tidy</span><br></pre></td></tr></table></figure></div>
<p>现在，go mod
init在当前项目目录下创建了一个go.mod文件，这个go.mod文件将当前项目变为了一个Go
Module，项目根目录变成了module根目录。go.mod的内容是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">module github.com/bigwhite/module-mode</span><br><span class="line"></span><br><span class="line">go 1.16</span><br></pre></td></tr></table></figure></div>
<p>这个go.mod文件现在处于初始状态，它的第一行内容用于声明module路径(module
path)，最后一行是一个Go版本指示符，用于表示这个module是在某个特定的Go版本的module语义的基础上编写的。</p>
<p>go mod init命令还输出了两行日志，提示我们可以使用go mod
tidy命令，添加module依赖以及校验和。go mod
tidy命令会扫描Go源码，并自动找出项目依赖的外部Go
Module以及版本，下载这些依赖并更新本地的go.mod文件。我们按照这个提示执行一下go
mod tidy命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> mod tidy</span><br><span class="line">go: finding module <span class="keyword">for</span> package github.com/sirupsen/logrus</span><br><span class="line">go: downloading github.com/sirupsen/logrus v1.8.1</span><br><span class="line">go: found github.com/sirupsen/logrus <span class="keyword">in</span> github.com/sirupsen/logrus v1.8.1</span><br><span class="line">go: downloading golang.org/x/sys v0.0.0-20191026070338-33540a1f6037</span><br><span class="line">go: downloading github.com/stretchr/testify v1.2.2</span><br></pre></td></tr></table></figure></div>
<p>我们看到，对于一个处于初始状态的module而言，go mod tidy分析了当前main
module的所有源文件，找出了当前main
module的所有第三方依赖，确定第三方依赖的版本，还下载了当前main
module的直接依赖包（比如logrus），以及相关间接依赖包（直接依赖包的依赖，比如上面的golang.org/x/sys等）。</p>
<p>Go Module还支持通过Go Module代理服务加速第三方依赖的下载。在<a
href="https://time.geekbang.org/column/article/427489">03讲</a>我们讲解Go环境安装时，就提到过GOPROXY环境变量，这个环境变量的默认值为“<strong>https:
//
proxy.golang.org,direct</strong>”，不过我们可以配置更适合于中国大陆地区的Go
Module代理服务。</p>
<p>由go mod
tidy下载的依赖module会被放置在本地的module缓存路径下，默认值为$GOPATH[0]/pkg/mod，Go
1.15及以后版本可以通过GOMODCACHE环境变量，自定义本地module的缓存路径。</p>
<p>执行go mod tidy后，我们示例go.mod的内容更新如下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">module github.com/bigwhite/module-mode</span><br><span class="line"></span><br><span class="line">go 1.16</span><br><span class="line"></span><br><span class="line">require github.com/sirupsen/logrus v1.8.1</span><br></pre></td></tr></table></figure></div>
<p>你可以看到，当前module的直接依赖logrus，还有它的版本信息都被写到了go.mod文件的require段中。</p>
<p>而且，执行完go mod
tidy后，当前项目除了go.mod文件外，还多了一个新文件go.sum，内容是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">github.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=</span><br><span class="line">github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=</span><br><span class="line">github.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=</span><br><span class="line">github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=</span><br><span class="line">github.com/sirupsen/logrus v1.8.1 h1:dJKuHgqk1NNQlqoA6BTlM1Wf9DOH3NBjQyu0h9+AZZE=</span><br><span class="line">github.com/sirupsen/logrus v1.8.1/go.mod h1:yWOB1SBYBC5VeMP7gHvWumXLIWorT60ONWic61uBYv0=</span><br><span class="line">github.com/stretchr/testify v1.2.2 h1:bSDNvY7ZPG5RlJ8otE/7V6gMiyenm9RtJ7IUVIAoJ1w=</span><br><span class="line">github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=</span><br><span class="line">golang.org/x/sys v0.0.0-20191026070338-33540a1f6037 h1:YyJpGZS1sBuBCzLAR1VEpK193GlqGZbnPFnPV/5Rsb4=</span><br><span class="line">golang.org/x/sys v0.0.0-20191026070338-33540a1f6037/go.mod h1:h1NjWce9XRLGQEsW7wpKNCjG9DtNlClVuFLEZdDNbEs=</span><br></pre></td></tr></table></figure></div>
<p>这同样是由go
mod相关命令维护的一个文件，它存放了特定版本module内容的哈希值。</p>
<p>这是Go
Module的一个安全措施。当将来这里的某个module的特定版本被再次下载的时候，go命令会使用go.sum文件中对应的哈希值，和新下载的内容的哈希值进行比对，只有哈希值比对一致才是合法的，这样可以确保你的项目所依赖的module内容，不会被恶意或意外篡改。因此，我推荐你把go.mod和go.sum两个文件与源码，一并提交到代码版本控制服务器上。</p>
<p>现在，go mod init和go mod tidy已经为我们当前Go
Module的构建铺平了道路，接下来，<strong>我们只需在当前module的根路径下，执行go
build就可以完成module的构建了</strong>！</p>
<p>go
build命令会读取go.mod中的依赖及版本信息，并在本地module缓存路径下找到对应版本的依赖module，执行编译和链接。如果顺利的话，我们会在当前目录下看到一个新生成的可执行文件module-mode，执行这个文件我们就能得到正确结果了。</p>
<p>整个过程的执行步骤是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> build</span><br><span class="line">$<span class="variable">$ls</span></span><br><span class="line">go.mod		go.sum		main.go		module-mode*</span><br><span class="line">$./module-mode </span><br><span class="line">INFO[0000] hello, go module mode</span><br></pre></td></tr></table></figure></div>
<p>好了，到这里，我们已经完成了一个有着多个第三方依赖的项目的构建了。但关于Go
Module的操作还远不止这些。随着Go项目的演进，我们会在代码中导入新的第三方包，删除一些旧的依赖包，更新一些依赖包的版本等。关于这些内容，我会在下一节课再给你详细讲解。</p>
<p>那么，在看到我们的Go
Module机制会自动分析项目的依赖包，并选出最适合的版本后，不知道你会不会有这样的疑惑：<strong>项目所依赖的包有很多版本，Go
Module是如何选出最适合的那个版本的呢？</strong>要想回答这个问题，我们就需要深入到Go
Module构建模式的工作原理中去。</p>
<h2 id="深入go-module构建模式">深入Go Module构建模式</h2>
<p>Go语言设计者在设计Go
Module构建模式，来解决“包依赖管理”的问题时，进行了几项创新，这其中就包括<strong>语义导入版本(Semantic
Import
Versioning)</strong>，以及和其他主流语言不同的<strong>最小版本选择(Minimal
Version
Selection)</strong>等机制。只要你深入理解了这些机制，你就能真正掌握Go
Module构建模式。</p>
<p><strong>首先我们看一下Go Module的语义导入版本机制。</strong></p>
<p>在上面的例子中，我们看到go.mod的require段中依赖的版本号，都符合<strong>vX.Y.Z</strong>的格式。在Go
Module构建模式下，一个符合Go Module要求的版本号，由前缀v和一个满足<a
href="https://semver.org">语义版本</a>规范的版本号组成。</p>
<p>你可以看看下面这张图，语义版本号分成3部分：主版本号(major)、次版本号(minor)和补丁版本号(patch)。例如上面的logrus
module的版本号是v1.8.1，这就表示它的主版本号为1，次版本号为8，补丁版本号为1。</p>
<p><img
src="https://static001.geekbang.org/resource/image/46/a2/468323b3294cce2ea7f4c1da3699c5a2.png?wh=1242x670" /></p>
<p>Go命令和go.mod文件都使用上面这种符合语义版本规范的版本号，作为描述Go
Module版本的标准形式。借助于语义版本规范，Go命令可以确定同一module的两个版本发布的先后次序，而且可以确定它们是否兼容。</p>
<p>按照语义版本规范，主版本号不同的两个版本是相互不兼容的。而且，在主版本号相同的情况下，次版本号大都是向后兼容次版本号小的版本。补丁版本号也不影响兼容性。</p>
<p>而且，Go
Module规定：<strong>如果同一个包的新旧版本是兼容的，那么它们的包导入路径应该是相同的</strong>。怎么理解呢？我们来举个简单示例。我们就以logrus为例，它有很多发布版本，我们从中选出两个版本v1.7.0和v1.8.1.。按照上面的语义版本规则，这两个版本的主版本号相同，新版本v1.8.1是兼容老版本v1.7.0的。那么，我们就可以知道，如果一个项目依赖logrus，无论它使用的是v1.7.0版本还是v1.8.1版本，它都可以使用下面的包导入语句导入logrus包：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">import <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>那么问题又来了，假如在未来的某一天，logrus的作者发布了logrus
v2.0.0版本。那么根据语义版本规则，该版本的主版本号为2，已经与v1.7.0、v1.8.1的主版本号不同了，那么v2.0.0与v1.7.0、v1.8.1就是不兼容的包版本。然后我们再按照Go
Module的规定，如果一个项目依赖logrus
v2.0.0版本，那么它的包导入路径就不能再与上面的导入方式相同了。那我们应该使用什么方式导入logrus
v2.0.0版本呢？</p>
<p>Go
Module创新性地给出了一个方法：将包主版本号引入到包导入路径中，我们可以像下面这样导入logrus
v2.0.0版本依赖包：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">import <span class="string">&quot;github.com/sirupsen/logrus/v2&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这就是Go的“语义导入版本”机制，也就是说通过在包导入路径中引入主版本号的方式，来区别同一个包的不兼容版本，这样一来我们甚至可以同时依赖一个包的两个不兼容版本：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">import (</span><br><span class="line">    <span class="string">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class="line">    logv2 <span class="string">&quot;github.com/sirupsen/logrus/v2&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>不过到这里，你可能会问，v0.y.z版本应该使用哪种导入路径呢？</p>
<p>按照语义版本规范的说法，v0.y.z这样的版本号是用于项目初始开发阶段的版本号。在这个阶段任何事情都有可能发生，其API也不应该被认为是稳定的。Go
Module将这样的版本(v0)与主版本号v1做同等对待，也就是采用不带主版本号的包导入路径，这样一定程度降低了Go开发人员使用这样版本号包时的心智负担。</p>
<p>Go语义导入版本机制是Go Module机制的基础规则，同样它也是Go
Module其他规则的基础。</p>
<p><strong>接下来，我们再来看一下Go
Module的最小版本选择原则。</strong></p>
<p>在前面的例子中，Go命令都是在项目初始状态分析项目的依赖，并且项目中两个依赖包之间没有共同的依赖，这样的包依赖关系解决起来还是比较容易的。但依赖关系一旦复杂起来，比如像下图中展示的这样，Go又是如何确定使用依赖包C的哪个版本的呢？<br></p>
<p><img
src="https://static001.geekbang.org/resource/image/49/1b/49eb7aa0458d8ec6131d9e5661155f1b.jpeg?wh=1920x1080" /><br></p>
<p>在这张图中，myproject有两个直接依赖A和B，A和B有一个共同的依赖包C，但A依赖C的v1.1.0版本，而B依赖的是C的v1.3.0版本，并且此时C包的最新发布版为C
v1.7.0。这个时候，Go命令是如何为myproject选出间接依赖包C的版本呢？选出的究竟是v1.7.0、v1.1.0还是v1.3.0呢？你可以暂停一两分钟思考一下。</p>
<p>其实，当前存在的主流编程语言，以及Go
Module出现之前的很多Go包依赖管理工具都会<strong>选择依赖项的“最新最大(Latest
Greatest)版本”</strong>，对应到图中的例子，这个版本就是v1.7.0。</p>
<p>当然了，理想状态下，如果语义版本控制被正确应用，并且这种“社会契约”也得到了很好的遵守，那么这种选择算法是有道理的，而且也可以正常工作。在这样的情况下，依赖项的“最新最大版本”应该是最稳定和安全的版本，并且应该有向后兼容性。至少在相同的主版本(Major
Verion)依赖树中是这样的。</p>
<p>但我们这个问题的答案并不是这样的。Go设计者另辟蹊径，在诸多兼容性版本间，他们不光要考虑最新最大的稳定与安全，还要尊重各个module的述求：A明明说只要求C
v1.1.0，B明明说只要求C
v1.3.0。<strong>所以Go会在该项目依赖项的所有版本中，选出符合项目整体要求的“最小版本”。</strong></p>
<p>这个例子中，C
v1.3.0是符合项目整体要求的版本集合中的版本最小的那个，于是Go命令选择了C
v1.3.0，而不是最新最大的C
v1.7.0。并且，Go团队认为“最小版本选择”为Go程序实现持久的和可重现的构建提供了最佳的方案。</p>
<p>了解了语义导入版本与最小版本选择两种机制后，你就可以说你已经掌握了Go
Module的精髓。</p>
<p>但很多Go开发人员的起点，并非是默认开启Go Module构建模式的Go
1.16版本，多数Go开发人使用的环境中都存在着多套Go版本，有用于体验最新功能特性的Go版本，也有某些遗留项目所使用的老版本Go编译器。</p>
<p>它们工作时采用的构建模式是不一样的，并且即便是引入Go Module的Go
1.11版本，它的Go Module机制，和后续进化后的Go版本的Go
Module构建机制在表现行为上也有所不同。因此Go开发人员可能需要经常在各个Go版本间切换。而明确具体版本下Go
Module的实际表现行为对Go开发人员是十分必要的。</p>
<h2 id="go各版本构建模式机制和切换">Go各版本构建模式机制和切换</h2>
<p>我们前面说了，在Go 1.11版本中，Go开发团队引入Go
Modules构建模式。这个时候，GOPATH构建模式与Go
Modules构建模式各自独立工作，我们可以通过设置环境变量GO111MODULE的值在两种构建模式间切换。</p>
<p>然后，随着Go语言的逐步演进，从Go 1.11到Go
1.16版本，不同的Go版本在GO111MODULE为不同值的情况下，开启的构建模式几经变化，直到Go
1.16版本，Go Module构建模式成为了默认模式。</p>
<p>所以，要分析Go各版本的具体构建模式的机制和切换，我们只需要找到这几个代表性的版本就好了。</p>
<p>我这里将Go 1.13版本之前、Go 1.13版本以及Go
1.16版本，在GO111MODULE为不同值的情况下的行为做了一下对比，这样我们可以更好地理解不同版本下、不同构建模式下的行为特性，下面我们就来用表格形式做一下比对：</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/45/d3/45bdecc5fa873e06893d6658e447a8d3.jpeg?wh=1920x1080"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>了解了这些，你就能在工作中游刃有余的在各个Go版本间切换了，不用再担心切换后模式变化，导致构建失败了。</p>
<h3 id="小结">小结</h3>
<p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p>
<p>在这一讲中，我们初步了解了Go语言构建模式的演化历史。</p>
<p>Go语言最初发布时内置的构建模式为GOPATH构建模式。在这种构建模式下，所有构建都离不开GOPATH环境变量。在这个模式下，Go编译器并没有关注依赖包的版本，开发者也无法控制第三方依赖的版本，导致开发者无法实现可重现的构建。</p>
<p>那么，为了支持可重现构建，Go
1.5版本引入了vendor机制，开发者可以在项目目录下缓存项目的所有依赖，实现可重现构建。但vendor机制依旧不够完善，开发者还需要手工管理vendor下的依赖包，这就给开发者带来了不小的心智负担。</p>
<p>后来，Go 1.11版本中，Go核心团队推出了新一代构建模式：Go
Module以及一系列创新机制，包括语义导入版本机制、最小版本选择机制等。语义导入版本机制是Go
Moudle其他机制的基础，它是通过在包导入路径中引入主版本号的方式，来区别同一个包的不兼容版本。而且，Go命令使用<strong>最小版本选择</strong>机制进行包依赖版本选择，这和当前主流编程语言，以及Go社区之前的包依赖管理工具使用的算法都有点不同。</p>
<p>此外，Go命令还可以通过GO111MODULE环境变量进行Go构建模式的切换。但你要注意，从Go
1.11到Go
1.16，不同的Go版本在GO111MODULE为不同值的情况下，开启的构建模式以及具体表现行为也几经变化，这里你重点看一下前面总结的表格。</p>
<p>现在，Go核心团队已经考虑在后续版本中彻底移除GOPATH构建模式，Go
Module构建模式将成为Go语言唯一的标准构建模式。所以，<strong>学完这一课之后，我建议你从现在开始就彻底抛弃GOPATH构建模式，全面使用Go
Module构建模式</strong>。</p>
<h3 id="思考题">思考题</h3>
<p>今天我们的思考题是：如何将基于GOPATH构建模式的现有项目迁移为使用Go
Module构建模式？欢迎在留言区和我分享你的答案。</p>
<p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go构建模式感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>06｜构建模式：Go是怎么解决包依赖管理问题的？
<ul>
<li><a
href="../9a8b79c6523de0b004dc327f9851a93754e80436">04｜初窥门径：一个Go程序的结构是怎样的？</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>04｜初窥门径：一个Go程序的结构是怎样的？</title>
    <url>/9a8b79c6523de0b004dc327f9851a93754e80436/</url>
    <content><![CDATA[<h1
id="初窥门径一个go程序的结构是怎样的">04｜初窥门径：一个Go程序的结构是怎样的？</h1>
<p>你好，我是Tony Bai。</p>
<p>经过上一讲的学习，我想现在你已经成功安装好至少一个Go开发环境了，是时候撸起袖子开始写Go代码了！</p>
<p>程序员这个历史并不算悠久的行当，却有着一个历史悠久的传统，那就是每种编程语言都将一个名为“hello,
world”的示例作为这门语言学习的第一个例子，这个传统始于20世纪70年代那本大名鼎鼎的由布莱恩·科尼根（Brian
W. Kernighan）与C语言之父丹尼斯·里奇（Dennis M.
Ritchie）合著的《C程序设计语言》。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/43/8a/43173ef6d422682c70a5c09b6c9f728a.png?wh=379x500"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>在这一讲中，我们也将遵从传统，从编写一个可以打印出“hello,
world”的Go示例程序开始我们正式的Go编码之旅。我希望通过这个示例程序你能够对Go程序结构有一个直观且清晰的认识。</p>
<p>在正式开始之前，我要说明一下，我们这节课对你开发Go程序时所使用的编辑器工具没有任何具体的要求。</p>
<p>如果你喜欢使用某个集成开发环境（Integrated Development
Environment，IDE），那么就用你喜欢的IDE好了。如果你希望我给你推荐一些好用的IDE，我建议你试试<a
href="https://www.jetbrains.com/go/">GoLand</a>或<a
href="https://code.visualstudio.com">Visual Studio Code</a>（简称VS
Code）。GoLand是知名IDE出品公司JetBrains针对Go语言推出的IDE产品，也是目前市面上最好用的Go
IDE；VS
Code则是微软开源的跨语言源码编辑器，通过集成语言插件（Go开发者可以使用Go官方维护的<a
href="https://github.com/golang/vscode-go">vscode-go插件</a>），可以让它变成类IDE的工具。</p>
<!-- [[[read_end]]] -->
<p>如果你有黑客情怀，喜欢像黑客一样优雅高效地使用命令行，那么像Vim、Emacs这样的基于终端的编辑器同样可以用于编写Go源码。以Vim为例，结合<a
href="https://github.com/fatih/vim-go">vim-go</a>、<a
href="https://github.com/neoclide/coc.nvim">coc.nvim</a>（代码补全）以及Go官方维护的<a
href="https://github.com/golang/tools/tree/master/gopls">gopls</a>语言服务器，你在编写Go代码时同样可以体会到“飞一般”的感觉。但在我们这门课中，我们将尽量使用与编辑器或IDE无关的说明。</p>
<p>好，我们正式开始吧。</p>
<h2 id="创建helloworld示例程序">创建“hello，world”示例程序</h2>
<p>在Go语言中编写一个可以打印出“hello，world”的示例程序，我们只需要简单两步，一是创建文件夹，二是开始编写和运行。首先，我们来创建一个文件夹存储编写的Go代码。</p>
<h4 id="创建helloworld文件夹">创建“hello，world”文件夹</h4>
<p>通常来说，Go不会限制我们存储代码的位置（Go
1.11之前的版本另当别论）。但是针对我们这门课里的各种练习和项目，我还是建议你创建一个可以集合所有项目的根文件夹（比如：~/goprojects），然后将我们这门课中所有的项目都放在里面。</p>
<p>现在，你可以打开终端并输入相应命令，来创建我们用于储存“hello，world”示例的文件夹helloworld了。对于Linux系统、macOS系统，以及Windows系统的PowerShell终端来说，用下面这个命令就可以建立helloworld文件夹了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> ~/goprojects // 创建一个可以集合所有专栏项目的根文件夹</span><br><span class="line"><span class="variable">$cd</span> ~/goprojects</span><br><span class="line"><span class="variable">$mkdir</span> helloworld // 创建存储helloworld示例的文件夹</span><br><span class="line"><span class="variable">$cd</span> helloworld</span><br></pre></td></tr></table></figure></div>
<p>建好文件夹后，我们就要开始编写我们第一个Go程序了。</p>
<h4 id="编写并运行第一个go程序">编写并运行第一个Go程序</h4>
<p>首先，我们需要创建一个名为main.go的源文件。</p>
<p>这里，我需要跟你啰嗦一下Go的命名规则。</p>
<p>Go源<strong>文件</strong>总是用<strong>全小写字母</strong>形式的短小单词命名，并且以.go扩展名结尾。</p>
<p>如果要在源文件的名字中使用多个单词，我们通常直接是将<strong>多个单词连接起来作为源文件名</strong>，而不是使用其他分隔符，比如下划线。也就是说，我们通常使用helloworld.go作为文件名而不是hello_world.go。</p>
<p>这是因为下划线这种分隔符，在Go源文件命名中有特殊作用，这个我们会在以后的讲解中详细说明。总的来说，<mark style="background: #83d98fA6;">我们尽量不要用两个以上的单词组合作为文件名</mark>
，否则就很难分辨了。 <!--SR:!2022-11-13,3,250--></p>
<p>现在，你可以打开刚刚创建的main.go文件，键入下面这些代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>写完后，我们保存文件并回到终端窗口，然后在Linux或macOS系统中，你就可以通过输入下面这个命令来编译和运行这个文件了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">$./main</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></div>
<p>如果是在Windows系统中呢，你需要把上面命令中的./main替换为..exe。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">&gt;<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">&gt;.\main.exe</span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></div>
<p>不过，无论你使用哪种操作系统，到这里你都应该能看到终端输出的“hello,
world”字符串了。如果你没有看到这个输出结果，要么是Go安装过程的问题，要么是源文件编辑出现了问题，需要你再次认真地确认。如果一切顺利，那么恭喜你！你已经完成了第一个Go程序，并正式成为了Go开发者！欢迎来到Go语言的世界！</p>
<h2 id="helloworld示例程序的结构">“hello，world”示例程序的结构</h2>
<p>现在，让我们回过头来仔细看看“hello，world”示例程序中到底发生了什么。第一个值得注意的部分是这个：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br></pre></td></tr></table></figure></div>
<p>这一行代码定义了Go中的一个包package。包是Go语言的基本组成单元，通常使用单个的小写单词命名，一个Go程序本质上就是一组包的集合。所有Go代码都有自己隶属的包，在这里我们的“hello，world”示例的所有代码都在一个名为<strong>main</strong>的包中。main包在Go中是一个特殊的包，==整个Go程序中仅允许存在一个名为main的包==。</p>
<p>main包中的主要代码是一个名为main的函数：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p><strong>这里的main函数会比较特殊：当你运行一个可执行的Go程序的时候，所有的代码都会从这个入口函数开始运行。</strong>
这段代码的第一行声明了一个名为main的、没有任何参数和返回值的函数。如果某天你需要给函数声明参数的话，那么就必须把它们放置在圆括号()中。
<!--SR:!2022-11-13,3,250--></p>
<p>另外，那对花括号{}被用来标记函数体，Go要求所有的函数体都要被花括号包裹起来。按照惯例，我们推荐把左花括号与函数声明置于同一行并以空格分隔。Go语言内置了一套Go社区约定俗称的代码风格，并随安装包提供了一个名为Gofmt的工具，这个工具可以帮助你将代码自动格式化为约定的风格。</p>
<p>Gofmt是Go语言在解决规模化（scale）问题上的一个最佳实践，并成为了Go语言吸引其他语言开发者的一大卖点。很多其他主流语言也在效仿Go语言推出自己的format工具，比如：Java
formatter、Clang
formatter、Dartfmt等。<strong>因此，作为Go开发人员，请在提交你的代码前使用Gofmt格式化你的Go源码。</strong></p>
<p>好，回到正题，我们再来看一看main函数体中的代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">fmt.Println(<span class="string">&quot;hello, world&quot;</span>)</span><br></pre></td></tr></table></figure></div>
<p>这一行代码已经完成了整个示例程序的所有工作了：将字符串输出到终端的标准输出（stdout）上。不过这里还有几个需要你注意的细节。</p>
<p><strong>注意点1：标准Go代码风格使用Tab而不是空格来实现缩进的</strong>，当然这个代码风格的格式化工作也可以交由gofmt完成。</p>
<p><strong>注意点2：</strong>我们调用了一个名为Println的函数，这个函数位于Go标准库的fmt包中。为了在我们的示例程序中使用fmt包定义的Println函数，我们其实做了两步操作。</p>
<p>第一步是在源文件的开始处通过import声明导入fmt包的包路径：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>第二步则是在main函数体中，通过fmt这个限定标识符（Qualified
Identifier）调用Println函数。虽然两处都使用了“fmt”这个字面值，但在这两处“fmt”字面值所代表的含义却是不一样的：</p>
<ul>
<li>import “fmt”
一行中“fmt”代表的是包的导入路径（Import），它表示的是标准库下的fmt目录，整个import声明语句的含义是导入标准库fmt目录下的包；</li>
<li>fmt.Println函数调用一行中的“fmt”代表的则是包名。</li>
</ul>
<!-- -->
<p><mark style="background: #fefe00A6;">通常导入路径的最后一个分段名与包名是相同的</mark>
，这也很容易让人误解import声明语句中的“fmt”指的是包名，其实并不是这样的。</p>
<p>main函数体中之所以可以调用fmt包的Println函数，还有最后一个原因，那就是Println函数名的首字母是大写的。在Go语言中，只有==首字母为大写的标识符才是导出的==（Exported），才能对包外的代码可见；如果首字母是小写的，那么就说明这个标识符仅限于在声明它的包内可见。</p>
<p>另外，在Go语言中，<mark style="background: #fefe00A6;">main包是不可以像标准库fmt包那样被导入</mark>
（Import）的，如果导入main包，在代码编译阶段你会收到一个Go编译器错误：import
“xx/main” is a program, not an importable package。
<!--SR:!2022-11-13,3,250--></p>
<p><strong>注意点3：</strong>
我们还是回到main函数体实现上，把关注点放在传入到Println函数的字符串“hello,
world”上面。你会发现，<strong>我们传入的字符串也就是我们执行程序后在终端的标准输出上看到的字符串</strong>。</p>
<p>这种“所见即所得”得益于Go源码文件本身采用的是Unicode字符集，而且用的是UTF-8标准的字符编码方式，这与编译后的程序所运行的环境所使用的字符集和字符编码方式是一致的。</p>
<p>这里，即便我们将代码中的"hello,
world"换成中文字符串“你好，世界”，像下面这样：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;你好，世界&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们依旧可以在终端的标准输出上看到正确的输出。</p>
<p><strong>最后，不知道你有没有发现，我们整个示例程序源码中，都没有使用过分号来标识语句的结束，这与C、C++、Java那些传统编译型语言好像不太一样呀？</strong></p>
<p>不过，其实Go语言的正式语法规范是使用分号“;”来做结尾标识符的。那为什么我们很少在Go代码中使用和看到分号呢？这是因为，大多数分号都是可选的，常常被省略，不过在源码编译时，Go编译器会自动插入这些被省略的分号。</p>
<p>我们给上面的“hello，world”示例程序加上分号也是完全合法的，是可以直接通过Go编译器编译并正常运行的。不过，gofmt在按约定格式化代码时，会自动删除这些被我们手工加入的分号的。</p>
<p>在分析完这段代码结构后，我们来讲一下Go语言的编译。虽然刚刚你应该已经运行过“hello,
world”这个示例程序了，在这过程中，有一个重要的步骤——<strong>编译</strong>，现在我就带你来看看Go语言中程序是怎么进行编译的。</p>
<h2 id="go语言中程序是怎么编译的">Go语言中程序是怎么编译的？</h2>
<p>你应该也注意到了，刚刚我在运行"hello, world"程序之前，输入了go
build命令，还有它附带的源文件名参数来编译它：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></div>
<p>假如你曾经有过C/C++语言的开发背景，那么你就会发现这个步骤与gcc或clang编译十分相似。一旦编译成功，我们就会获得一个二进制的可执行文件。在Linux系统、macOS系统，以及Windows系统的PowerShell中，我们可以通过输入下面这个ls命令看到刚刚生成的可执行文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ls</span></span><br><span class="line">main*		main.go</span><br></pre></td></tr></table></figure></div>
<p>上面显示的文件里面有我们刚刚创建的、以.go为后缀的源代码文件，还有刚生成的可执行文件（<mark style="background: #fbab4bA6;">Windows系统下为main.exe，其余系统下为main</mark>
）。 <!--SR:!2022-11-13,3,250--></p>
<p>如果你之前更熟悉某种类似于Ruby、Python或JavaScript之类的动态语言，你可能还不太习惯在运行之前需要先进行编译的情况。<strong>Go是一种编译型语言，这意味着只有你编译完Go程序之后，才可以将生成的可执行文件交付于其他人，并运行在没有安装Go的环境中。</strong></p>
<p>而如果你交付给其他人的是一份.rb、.py或.js的动态语言的源文件，那么他们的目标环境中就必须要拥有对应的Ruby、Python或JavaScript实现才能解释执行这些源文件。</p>
<p>当然，Go也借鉴了动态语言的一些对开发者体验较好的特性，比如基于源码文件的直接执行，Go提供了run命令可以直接运行Go源码文件，比如我们也可以使用下面命令直接基于main.go运行：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> run main.<span class="keyword">go</span></span><br><span class="line">hello, world</span><br></pre></td></tr></table></figure></div>
<p>当然像go
run这类命令更多用于开发调试阶段，真正的交付成果还是需要使用go
build命令构建的。 <!--SR:!2022-11-13,3,250--></p>
<p>但是在我们的生产环境里，Go程序的编译往往不会像我们前面，基于单个Go源文件构建类似“hello，world”这样的示例程序那么简单。越贴近真实的生产环境，也就意味着项目规模越大、协同人员越多，项目的依赖和依赖的版本都会变得复杂。</p>
<p><strong>那在我们更复杂的生产环境中，go
build命令也能圆满完成我们的编译任务吗？</strong>
我们现在就来探讨一下。</p>
<h2
id="复杂项目下go程序的编译是怎样的">复杂项目下Go程序的编译是怎样的</h2>
<p>我们还是直接上项目吧，给go build
一个机会，看看它的复杂依赖管理到底怎么样。</p>
<p>现在我们创建一个新项目“hellomodule”，在新项目中我们将使用两个第三方库，zap和fasthttp，给go
build的构建过程增加一些难度。和“hello，world”示例一样，我们通过下面命令创建“hellomodule”项目：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$cd ~/goprojects</span><br><span class="line">$mkdir hellomodule</span><br><span class="line">$cd hellomodule</span><br></pre></td></tr></table></figure></div>
<p>接着，我们在“hellomodule“下创建并编辑我们的示例源码文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/valyala/fasthttp&quot;</span></span><br><span class="line">	<span class="string">&quot;go.uber.org/zap&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger *zap.Logger</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	logger, _ = zap.NewProduction()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fastHTTPHandler</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</span><br><span class="line">	logger.Info(<span class="string">&quot;hello, go module&quot;</span>, zap.ByteString(<span class="string">&quot;uri&quot;</span>, ctx.RequestURI()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fasthttp.ListenAndServe(<span class="string">&quot;:8081&quot;</span>, fastHTTPHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这个示例创建了一个在8081端口监听的http服务，当我们向它发起请求后，这个服务会在终端标准输出上输出一段访问日志。</p>
<p>你会看到，和“hello，world“相比，这个示例显然要复杂许多。但不用担心，你现在大可不必知道每行代码的功用，你只需要我们在这个稍微有点复杂的示例中引入了两个第三方依赖库，zap和fasthttp就可以了。</p>
<p>我们尝试一下使用编译“hello，world”的方法来编译“hellomodule”中的main.go源文件，go编译器的输出结果是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">main.<span class="keyword">go</span>:<span class="number">4</span>:<span class="number">2</span>: no required module provides <span class="keyword">package</span> github.com/valyala/fasthttp: <span class="keyword">go</span>.mod file not found in current directory or any parent directory; see <span class="string">&#x27;go help modules&#x27;</span></span><br><span class="line">main.<span class="keyword">go</span>:<span class="number">5</span>:<span class="number">2</span>: no required module provides <span class="keyword">package</span> <span class="keyword">go</span>.uber.org/zap: <span class="keyword">go</span>.mod file not found in current directory or any parent directory; see <span class="string">&#x27;go help modules&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>看这结果，这回我们运气似乎不佳，main.go的编译失败了！</p>
<p>从编译器的输出来看，go
build似乎在找一个名为go.mod的文件，来解决程序对第三方包的依赖决策问题。</p>
<p><strong>好了，我们也不打哑谜了，是时候让Go
module登场了！</strong></p>
<p>Go module构建模式是在Go
1.11版本正式引入的，为的是彻底解决Go项目复杂版本依赖的问题，在Go
1.16版本中，Go
module已经成为了Go默认的包依赖管理机制和Go源码构建机制。</p>
<p>Go
Module的核心是一个名为go.mod的文件，在这个文件中存储了这个module对第三方依赖的全部信息。接下来，我们就通过下面命令为“hello，module”这个示例程序添加go.mod文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> mod init github.com/bigwhite/hellomodule</span><br><span class="line"><span class="keyword">go</span>: creating <span class="built_in">new</span> <span class="keyword">go</span>.mod: module github.com/bigwhite/hellomodule</span><br><span class="line"><span class="keyword">go</span>: to add module requirements and sums:</span><br><span class="line">	<span class="keyword">go</span> mod tidy</span><br></pre></td></tr></table></figure></div>
<p>你会看到，go mod
init命令的执行结果是在当前目录下生成了一个go.mod文件：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$cat <span class="keyword">go</span>.mod</span><br><span class="line">module github.com/bigwhite/hellomodule</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br></pre></td></tr></table></figure></div>
<p>其实，一个module就是一个包的集合，这些包和module一起打版本、发布和分发。go.mod所在的目录被我们称为它声明的module的根目录。</p>
<p>不过呢，这个时候的go.mod文件内容还比较简单，第一行内容是用于声明module路径（module
path）的。而且，module隐含了一个命名空间的概念，module下每个包的导入路径都是由module
path和包所在子目录的名字结合在一起构成。</p>
<p>比如，如果hellomodule下有子目录pkg/pkg1，那么pkg1下面的包的导入路径就是由module
path（github.com/bigwhite/hellomodule）和包所在子目录的名字（pkg/pkg1）结合而成，也就是github.com/bigwhite/hellomodule/pkg/pkg1。</p>
<p>另外，go.mod的最后一行是一个Go版本指示符，用于表示这个module是在某个特定的Go版本的module语义的基础上编写的。</p>
<p><strong>有了go.mod后，是不是我们就可以构建hellomodule示例了呢？</strong></p>
<p>来试试看！我们执行一下构建，Go编译器输出结果是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">main.<span class="keyword">go</span>:<span class="number">4</span>:<span class="number">2</span>: no required module provides <span class="keyword">package</span> github.com/valyala/fasthttp; to add it:</span><br><span class="line">	<span class="keyword">go</span> get github.com/valyala/fasthttp</span><br><span class="line">main.<span class="keyword">go</span>:<span class="number">5</span>:<span class="number">2</span>: no required module provides <span class="keyword">package</span> <span class="keyword">go</span>.uber.org/zap; to add it:</span><br><span class="line">	<span class="keyword">go</span> get <span class="keyword">go</span>.uber.org/zap</span><br></pre></td></tr></table></figure></div>
<p>你会看到，Go编译器提示源码依赖fasthttp和zap两个第三方包，但是go.mod中没有这两个包的版本信息，我们需要按提示手工添加信息到go.mod中。</p>
<p>这个时候，除了按提示手动添加外，我们也可以使用go mod
tidy命令，让Go工具自动添加：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> mod tidy       </span><br><span class="line"><span class="keyword">go</span>: downloading <span class="keyword">go</span>.uber.org/zap v1<span class="number">.18</span><span class="number">.1</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/valyala/fasthttp v1<span class="number">.28</span><span class="number">.0</span></span><br><span class="line"><span class="keyword">go</span>: downloading github.com/andybalholm/brotli v1<span class="number">.0</span><span class="number">.2</span></span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></div>
<p>从输出结果中，我们看到Go工具不仅下载并添加了hellomodule直接依赖的zap和fasthttp包的信息，还下载了这两个包的相关依赖包。go
mod tidy执行后，我们go.mod的最新内容变成了这个样子：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">module github.com/bigwhite/hellomodule</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.16</span></span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	github.com/valyala/fasthttp v1<span class="number">.28</span><span class="number">.0</span></span><br><span class="line">	<span class="keyword">go</span>.uber.org/zap v1<span class="number">.18</span><span class="number">.1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>这个时候，<code>go.mod</code>已经记录了hellomodule直接依赖的包的信息。不仅如此，hellomodule目录下还多了一个名为<code>go.sum</code>的文件，这个文件记录了hellomodule的直接依赖和间接依赖包的相关版本的hash值，用来<mark style="background: #fefe00A6;">校验本地包的真实性</mark>
。在构建的时候，如果本地依赖包的hash值与go.sum文件中记录的不一致，就会被拒绝构建。
<!--SR:!2022-11-13,3,250--></p>
<p>有了go.mod以及hellomodule依赖的包版本信息后，我们再来执行构建：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$<span class="keyword">go</span> build main.<span class="keyword">go</span></span><br><span class="line">$ls</span><br><span class="line"><span class="keyword">go</span>.mod		<span class="keyword">go</span>.sum		main*		main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure></div>
<p>这次我们成功构建出了可执行文件main，运行这个文件，新开一个终端窗口，在新窗口中使用curl命令访问该http服务：curl
localhost:8081/foo/bar，我们就会看到服务端输出如下日志：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">$./main</span><br><span class="line">&#123;<span class="string">&quot;level&quot;</span>:<span class="string">&quot;info&quot;</span>,<span class="string">&quot;ts&quot;</span>:<span class="number">1626614126.9899719</span>,<span class="string">&quot;caller&quot;</span>:<span class="string">&quot;hellomodule/main.go:15&quot;</span>,<span class="string">&quot;msg&quot;</span>:<span class="string">&quot;hello, go module&quot;</span>,<span class="string">&quot;uri&quot;</span>:<span class="string">&quot;/foo/bar&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<p>这下，我们的“ hellomodule”程序可算创建成功了。我们也看到使用Go
Module的构建模式，go
build完全可以承担其构建规模较大、依赖复杂的Go项目的重任。还有更多关于Go
Module的内容，我会在第7节课再详细跟你讲解。</p>
<h2 id="小结">小结</h2>
<p>到这里，我们终于亲手编写完成了Go语言的第一个程序“hello,
world”，我们终于知道一个Go程序长成啥样子了，这让我们在自己的Go旅程上迈出了坚实的一步！</p>
<p>在这一节课里，我们通过helloworld示例程序，了解了一个Go程序的源码结构与代码风格自动格式化的约定。</p>
<p>我希望你记住这几个要点：</p>
<ul>
<li>Go包是Go语言的基本组成单元。一个Go程序就是一组包的集合，<mark style="background: #fefe00A6;">所有Go代码都位于包中</mark>
；</li>
<li><mark style="background: #fefe00A6;">Go源码可以导入其他Go包</mark>
，并使用其中的导出语法元素，包括类型、变量、函数、方法等，而且，main函数是整个Go应用的入口函数；</li>
<li>Go源码需要先编译，再分发和运行。如果是单Go源文件的情况，我们可以直接使用go
build命令+Go源文件名的方式编译。不过，<mark style="background: #83d98fA6;">对于复杂的Go项目，我们需要在Go
Module的帮助下完成项目的构建</mark> 。</li>
</ul>
<p>最后，我们结合hellomodule示例初步学习了一个基于Go
Module构建模式编写和构建更大规模Go程序的步骤并介绍了Go
Module涉及到的各种概念。而且，Go Module机制日渐成熟，我希望你学会基于Go
Module构建Go应用。关于Go
Module构建模式，我们还会在后面的讲解中详细介绍。
<!--SR:!2022-11-13,3,250--></p>
<h2 id="思考题">思考题</h2>
<p>今天我给你留了一道思考题，经过今天这节课，你喜欢Go统一的代码风格吗？你觉得Go这么做的利弊都有哪些呢？欢迎在留言区和我探讨。</p>
<p>欢迎你把这节课分享给更多对Go语言学习感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../874526fcb1e65bcea0b46d6294468e478a7a55c0">06｜构建模式：Go是怎么解决包依赖管理问题的？</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>04｜初窥门径：一个Go程序的结构是怎样的？
<ul>
<li><a
href="../874526fcb1e65bcea0b46d6294468e478a7a55c0">06｜构建模式：Go是怎么解决包依赖管理问题的？</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>03-掌握考试思维：成为一个特别会考试的人</title>
    <url>/a8c96a547920bb5f0a08814d40b18801dd92c9f8/</url>
    <content><![CDATA[<h1
id="掌握考试思维成为一个特别会考试的人">03｜掌握考试思维：成为一个特别会考试的人</h1>
<p>学习是有方法的，按照正确的方法练习，每个人都可以成为学霸。</p>
<p>大家好，我是冷冷。</p>
<p>今天要跟大家分享的是，如何掌握考试思维，做到“特别会考试”。</p>
<h3 id="要学会用考试的思维去学习">01 要学会用考试的思维去学习</h3>
<p>大家应该见过这样的同学，甚至自己也有类似的经历，就是平时学习感觉基本上都会，书都看懂了、知识点也记住了，但是一做题、一考试，就没法真正地发挥出来。</p>
<p>问题究竟出在哪里呢？</p>
<p>是这样的，一直以来，我们的学习模式，是先埋头苦读，然后再去考试。我们的习惯思维是，只要掌握得滚瓜烂熟，那么考场上自然什么题都会做。我们常把大量的高密度的“输入”，也就是接收信息、学习知识，放在首位，觉得“输入”之后自然会有“输出”，也就是把知识点用在考试之中。</p>
<p>但实际上，这是非常低效的学习方式。因为，学习和考试，是不同的事情。它们用的，是相反的路径。学习的时候，我们的目标是记住所有的知识点。但考试，最重要的是“输出”，需要我们主动回想知识点，把它们从脑袋里调取出来，针对问题给出答案。</p>
<p>我们最终的目的，是在考试中取得好成绩，所以，
<strong>要学会用考试的思维去学习</strong>。</p>
<p>那么，具体该怎么做呢？</p>
<h3 id="一切围绕着问题">02 一切围绕着问题</h3>
<p>首先， <strong>你要明确地知道，自己需要回答什么问题。</strong></p>
<p>你可以找到课后习题，以及历年的考试真题，事先对这些题目，大致做一点了解，这样你可以对接下来要学的内容，做到心中有数，并且在看书的时候，清楚哪些是需要重点关注的知识点。</p>
<p>你会知道，看书的时候该如何看、看什么，以及如何思考、思考哪些。而且，因为预先有了问题意识，所以你在学习的时候，会更加专注，理解得更为深刻。</p>
<p>你可以把每一个章节，作为一个学习的板块，在第一遍通读并且做笔记之后，就重新回归这部分的相关题目，试着去做题。如果你刚学会的知识点，能够立刻应用，你会掌握得非常牢固。这叫做“即学即用”。</p>
<p>而且，不单单是要做题，
<strong>你要去研究这些题目</strong>。具体来说包括以下这些：</p>
<p>1&gt;考哪些？——也就是出题范围。</p>
<p>2&gt;是怎么考的？——也就是出题的方式，要求你对知识点掌握到什么程度，以及怎样运用知识点。</p>
<p>3&gt;思考自己怎样才能答出来？——也就是，以“答出来”为目的，倒推出学习、理解和记忆的正确方式。</p>
<p>4&gt;需要有意识地培养哪些思维和能力？——比如把不同知识点联系起来的能力，把时间线上的发展脉络理清楚的能力。</p>
<p>总而言之， <strong>你要试着从出题者的角度，揣测TA的用意。</strong>
先弄清楚怎么考，才能知道怎么学。另外，最好能找到答案，你要知道高分的答案具有哪些元素，需要满足怎样的标准。</p>
<p>我考研后半程，不但研究了历年的专业课真题，还模仿真题的出题思路，整理出了我自己的一套题库，几乎覆盖了所有重要的知识板块，然后去思考如何回答每一个问题。在这个过程中，之前被遮蔽的盲点，都暴露出来了：</p>
<p>如我之前所说，掌握了知识点，和会答题，是不一样的。</p>
<h3 id="即用即学">03 即用即学</h3>
<p>从做题和应用的层面，倒推学习时候该怎么学，我把这个方法叫做“
<strong>即用即学</strong>”。它和“即学即用”，同样重要。</p>
<p>所谓“即用即学”，是一个根据问题寻找答案的过程。就像是记忆英语单词，一个有效的方法是结合文章学习，在阅读理解中学习，在具体的场景中学习，这就是“即用即学”的标准案例。</p>
<p>在学习的过程中，做到即用即学和即学即用，才能对知识点有透彻的理解和记忆，并且在考试中，做到更为高效准确地调取，以及运用。</p>
<p>“用”和“输出”是一个意思，柳比歇夫甚至认为“输出要更多一些”：要让知识和经验产生链接，也就是学以致用，最好保持输入和输出的平衡，但不是绝对的相等，输出要更多一些。（《奇特的一生》）</p>
<p>为什么“输出”如此重要呢？因为它切中了有效学习的底层原理，叫做“检索式练习”。
<strong>“检索式练习”，是指通过提问和主动回想的方式，去巩固知识点。通俗来讲，就是进行测试。</strong></p>
<p>在复习的过程中，切忌一遍又一遍地重复阅读，这是低效的方法。《认知天性》一书指出，我们在重复阅读时所获得的“熟练感”，只是自以为掌握而已。</p>
<p>那么，遇到想不起来的知识点时，该如何做呢？好的方法是，稍微给自己一些时间，去认真回想，如果实在想不起来，再去看书或者笔记。</p>
<p>S.H.Kang等人的研究表明，如果你肯花时间，进行艰苦地回想，这个跟知识点耗上了的过程，更==有助于理解记忆==。也就是说，<mark style="background: #83d98fA6;">正是感到学习更吃力时，记忆才更为长久和牢固</mark>
。这是熟练地掌握知识点，必须经历的过程。</p>
<p>如果一个问题你不会，先不要去看答案，也别去请教别人。先试试自己去思考，哪怕最后你得出了错误的答案，甚至根本就没有做出来，但这个过程，会帮助你更好地理解这一题，掌握这一块的知识点。</p>
<p>当你想方设法寻找答案，从记忆中检索相关知识的时候，在得到答案、填补知识空白之前，你会先强化大脑中到这部分空白的检索路径；当努力填补完这部分空白后，你便在头脑中建立起了到新知识的联系。</p>
<p><mark style="background: #83d98fA6;">越是让你摆脱对既有提示和答案的依赖，需要依靠自己去解决的问题形式，对你的帮助越大</mark>
。比如说，填空题，比选择题的效果好；论述题，比填空题的效果好。</p>
<p>总之，你在所输出的答案上，需要付出的主动努力越多，学习和记忆的效果越好。而且，这种练习方式，和考试的逻辑是一致的，也有助于你在考场上取得更好的成绩。
<!--SR:!2022-11-16,9,250--></p>
<h3 id="总结">总结</h3>
<p>这节课我们学了啥？语文课代表冷冷的例行总结来了：</p>
<p><strong>如何掌握考试思维</strong>?</p>
<ol type="1">
<li>一直以来，我们的学习模式，是先埋头苦读，然后再去考试。我们的习惯思维是，只要掌握得滚瓜烂熟，那么考场上自然什么题都会做。</li>
</ol>
<p>但事实却不是这样。因为，学习和考试，是不同的事情。它们用的，是相反的路径。学习的时候，我们的目标是记住所有的知识点。但<strong>考试，最重要的是“输出”</strong>，需要主动回想知识点，把它们从脑袋里调取出来，针对问题给出答案。你要学会用考试的思维去学习。</p>
<ol start="2" type="1">
<li>你要去<strong>研究考试题</strong>，包括它的出题范围和出题思路，去分析考试时，题目要求你怎样回忆知识点、怎样运用知识点。然后，据此决定学习的时候，如何学，以及学什么。</li>
</ol>
<p>另外，最好能找到答案，你要知道高分的答案具有哪些元素，需要满足怎样的标准。</p>
<p>3、在学习的过程中，<strong>做到即用即学和即学即用</strong>，才能对知识点有透彻的理解和记忆，并且在考试中，做到更为高效准确地调取，以及运用。</p>
<p>4、“<strong>检索式练习</strong>”是最为有效的学习方式，它是指通过提问和主动回想的方式，去巩固知识点。<mark style="background: #83d98fA6;">你在回想知识点的时候，所付出的认知努力越大，学习和记忆的效果就越好。</mark>
<!--SR:!2022-11-17,10,250--></p>
<p>好了，今天的内容就到这里。我是冷冷，祝你今天吃饱，我们下节课再见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>如何成为学习高手</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>05｜标准先行：Go项目的布局标准是什么？</title>
    <url>/bc92b1095a5d4d8901c6a74e5409bcbba00c01fa/</url>
    <content><![CDATA[<h1
id="标准先行go项目的布局标准是什么">05｜标准先行：Go项目的布局标准是什么？</h1>
<p>你好，我是Tony Bai。</p>
<p>在前面的讲解中，我们编写的Go程序都是简单程序，一般由一个或几个Go源码文件组成，而且所有源码文件都在同一个目录中。但是生产环境中运行的实用程序可不会这么简单，通常它们都有着复杂的项目结构布局。弄清楚一个实用Go项目的项目布局标准是Go开发者走向编写复杂Go程序的第一步，也是必经的一步。</p>
<p>但Go官方到目前为止也没有给出一个关于Go项目布局标准的正式定义。那在这样的情况下，Go社区是否有我们可以遵循的参考布局，或者事实标准呢？我可以肯定的告诉你：有的。在这一节课里，我就来告诉你Go社区广泛采用的Go项目布局是什么样子的。</p>
<p>要想了解Go项目的结构布局以及演化历史，全世界第一个Go语言项目是一个最好的切入点。所以，我们就先来看一下Go语言“创世项目”的结构布局是什么样的。</p>
<h3 id="go语言创世项目结构是怎样的">Go语言“创世项目”结构是怎样的？</h3>
<p>什么是“<strong>Go语言的创世项目</strong>”呢？其实就是Go语言项目自身，它是全世界第一个Go语言项目。但这么说也不够精确，因为Go语言项目从项目伊始就混杂着多种语言，而且以C和Go代码为主，Go语言的早期版本C代码的比例还不小。</p>
<p>我们先用<a
href="https://gitlab.com/esr/loccount">loccount工具</a>对Go语言发布的第一个<a
href="https://github.com/golang/go/releases/tag/go1">Go
1.0版本</a>分析看看：</p>
<!-- [[[read_end]]] -->
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$loccount</span> .</span><br><span class="line">all          SLOC=460992  (100.00%)	LLOC=193045  <span class="keyword">in</span> 2746 files</span><br><span class="line">Go           SLOC=256321  (55.60%)	LLOC=109763  <span class="keyword">in</span> 1983 files</span><br><span class="line">C            SLOC=148001  (32.10%)	LLOC=73458   <span class="keyword">in</span> 368 files</span><br><span class="line">HTML         SLOC=25080   (5.44%)	LLOC=0       <span class="keyword">in</span> 57 files</span><br><span class="line">asm          SLOC=10109   (2.19%)	LLOC=0       <span class="keyword">in</span> 133 files</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></div>
<p>你会发现，在1.0版本中，Go代码行数占据一半以上比例，但是C语言代码行数也占据了32.10%的份额。而且在后续Go版本演进过程中，Go语言代码行数占比还在逐步提升，直到Go
1.5版本实现自举后，Go语言代码行数占比将近90%，C语言比例下降为不到1%，这一比例一直延续至今。</p>
<p>虽然C代码比例下降，Go代码比例上升，但Go语言项目的布局结构却整体保留了下来，十多年间虽然也有一些小范围变动，但整体没有本质变化。作为Go语言的“创世项目”，它的结构布局对后续Go社区的项目具有重要的参考价值，尤其是Go项目早期src目录下面的结构。</p>
<p>为了方便查看，我们首先下载Go语言创世项目源码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$git</span> <span class="built_in">clone</span> https://github.com/golang/go.git</span><br></pre></td></tr></table></figure></div>
<p>进入Go语言项目根目录后，我们使用tree命令来查看一下Go语言项目自身的最初源码结构布局，以Go
1.3版本为例，结果是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$cd</span> go // 进入Go语言项目根目录</span><br><span class="line"><span class="variable">$git</span> checkout go1.3 // 切换到go 1.3版本</span><br><span class="line"><span class="variable">$tree</span> -LF 1 ./src // 查看src目录下的结构布局</span><br><span class="line">./src</span><br><span class="line">├── all.bash*</span><br><span class="line">├── clean.bash*</span><br><span class="line">├── cmd/</span><br><span class="line">├── make.bash*</span><br><span class="line">├── Make.dist</span><br><span class="line">├── pkg/</span><br><span class="line">├── race.bash*</span><br><span class="line">├── run.bash*</span><br><span class="line">... ...</span><br><span class="line">└── sudo.bash*</span><br></pre></td></tr></table></figure></div>
<p>从上面的结果来看，src目录下面的结构有这三个特点。</p>
<p>首先，你可以看到，以all.bash为代表的代码构建的脚本源文件放在了src下面的顶层目录下。</p>
<p>第二，src下的二级目录cmd下面存放着Go相关可执行文件的相关目录，我们可以深入查看一下cmd目录下的结构：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ tree -LF 1 ./cmd</span><br><span class="line">./cmd</span><br><span class="line">... ...</span><br><span class="line">├── 6a/</span><br><span class="line">├── 6c/</span><br><span class="line">├── 6g/</span><br><span class="line">... ...</span><br><span class="line">├── cc/</span><br><span class="line">├── cgo/</span><br><span class="line">├── dist/</span><br><span class="line">├── fix/</span><br><span class="line">├── gc/</span><br><span class="line">├── go/</span><br><span class="line">├── gofmt/</span><br><span class="line">├── ld/</span><br><span class="line">├── nm/</span><br><span class="line">├── objdump/</span><br><span class="line">├── pack/</span><br><span class="line">└── yacc/</span><br></pre></td></tr></table></figure></div>
<p>我们可以看到，这里的每个子目录都是一个Go工具链命令或子命令对应的可执行文件。其中，6a、6c、6g等是早期Go版本针对特定平台的汇编器、编译器等的特殊命名方式。</p>
<p>第三个特点，你会看到src下的二级目录pkg下面存放着运行时实现、标准库包实现，这些包既可以被上面cmd下各程序所导入，也可以被Go语言项目之外的Go程序依赖并导入。下面是我们通过tree命令查看pkg下面结构的输出结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tree -LF 1 ./pkg</span></span><br><span class="line">./pkg</span><br><span class="line">... ...</span><br><span class="line">├── flag/</span><br><span class="line">├── <span class="built_in">fmt</span>/</span><br><span class="line">├── go/</span><br><span class="line">├── <span class="built_in">hash</span>/</span><br><span class="line">├── html/</span><br><span class="line">├── image/</span><br><span class="line">├── index/</span><br><span class="line">├── io/</span><br><span class="line">... ...</span><br><span class="line">├── net/</span><br><span class="line">├── os/</span><br><span class="line">├── path/</span><br><span class="line">├── reflect/</span><br><span class="line">├── regexp/</span><br><span class="line">├── runtime/</span><br><span class="line">├── <span class="built_in">sort</span>/</span><br><span class="line">├── strconv/</span><br><span class="line">├── strings/</span><br><span class="line">├── <span class="built_in">sync</span>/</span><br><span class="line">├── syscall/</span><br><span class="line">├── testing/</span><br><span class="line">├── text/</span><br><span class="line">├── time/</span><br><span class="line">├── unicode/</span><br><span class="line">└── unsafe/</span><br></pre></td></tr></table></figure></div>
<p>虽然Go语言的创世项目的src目录下的布局结构，离现在已经比较久远了，但是这样的布局特点依然对后续很多Go项目的布局产生了比较大的影响，尤其是那些Go语言早期采纳者建立的Go项目。比如，Go调试器项目Delve、开启云原生时代的Go项目Docker，以及云原生时代的“操作系统”项目Kubernetes等，它们的项目布局，至今都还保持着与Go创世项目早期相同的风格。</p>
<p>当然了，这些早期的布局结构一直在不断地演化，简单来说可以归纳为下面三个比较重要的演进。</p>
<p><strong>演进一：Go
1.4版本删除pkg这一中间层目录并引入internal目录</strong></p>
<p>出于简化源码树层次的原因，Go语言项目的Go
1.4版本对它原来的src目录下的布局做了两处调整。第一处是删除了Go源码树中“src/pkg/xxx”中pkg这一层级目录而直接使用src/xxx。这样一来，Go语言项目的源码树深度减少一层，更便于Go开发者阅读和探索Go项目源码。</p>
<p>另外一处就是Go
1.4引入internal包机制，增加了internal目录。这个internal机制其实是所有Go项目都可以用的，Go语言项目自身也是自Go
1.4版本起，就使用internal机制了。根据internal机制的定义，一个Go项目里的internal目录下的Go包，只可以被本项目内部的包导入。项目外部是无法导入这个internal目录下面的包的。可以说，internal目录的引入，让一个Go项目中Go包的分类与用途变得更加清晰。</p>
<p><strong>演进二：Go1.6版本增加vendor目录</strong></p>
<p>第二次的演进，其实是为了解决Go包依赖版本管理的问题，Go核心团队在Go
1.5版本中做了第一次改进。增加了vendor构建机制，也就是Go源码的编译可以不在GOPATH环境变量下面搜索依赖包的路径，而在vendor目录下查找对应的依赖包。</p>
<p>Go语言项目自身也在Go
1.6版本中增加了vendor目录以支持vendor构建，但vendor目录并没有实质性缓存任何第三方包。直到Go
1.7版本，Go才真正在vendor下缓存了其依赖的外部包。这些依赖包主要是golang.org/x下面的包，这些包同样是由Go核心团队维护的，并且其更新速度不受Go版本发布周期的影响。</p>
<p>vendor机制与目录的引入，让Go项目第一次具有了可重现构建（Reproducible
Build）的能力。</p>
<p><strong>演进三：Go 1.13版本引入go.mod和go.sum</strong></p>
<p>第三次演进，还是为了解决Go包依赖版本管理的问题。在Go
1.11版本中，Go核心团队做出了第二次改进尝试：引入了Go
Module构建机制，也就是在项目引入go.mod以及在go.mod中明确项目所依赖的第三方包和版本，项目的构建就将摆脱GOPATH的束缚，实现精准的可重现构建。</p>
<p>Go语言项目自身在Go 1.13版本引入go.mod和go.sum以支持Go
Module构建机制，下面是Go 1.13版本的go.mod文件内容：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">module std</span><br><span class="line"></span><br><span class="line">go 1.13</span><br><span class="line"></span><br><span class="line">require (</span><br><span class="line">	golang.org/x/crypto v0.0.0-20190611184440-5c40567a22f8</span><br><span class="line">	golang.org/x/net v0.0.0-20190813141303-74dc4d7220e7</span><br><span class="line">	golang.org/x/sys v0.0.0-20190529130038-5219a1e1c5f8 // indirect</span><br><span class="line">	golang.org/x/text v0.3.2 // indirect</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>我们看到，Go语言项目自身所依赖的包在go.mod中都有对应的信息，而原本这些依赖包是缓存在vendor目录下的。</p>
<p>总的来说，这三次演进主要体现在简化结构布局，以及优化包依赖管理方面，起到了改善Go开发体验的作用。可以说，Go创世项目的源码布局以及演化对Go社区项目的布局具有重要的启发意义，以至于在多年的Go社区实践后，Go社区逐渐形成了公认的Go项目的典型结构布局。</p>
<h3
id="现在的go项目的典型结构布局是怎样的">现在的Go项目的典型结构布局是怎样的？</h3>
<p>一个Go项目通常分为可执行程序项目和库项目，现在我们就来分析一下这两类Go项目的典型结构布局分别是怎样的。</p>
<p><strong>首先我们先来看Go可执行程序项目的典型结构布局。</strong></p>
<p>可执行程序项目是以构建可执行程序为目的的项目，Go社区针对这类Go项目所形成的典型结构布局是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> -F exe-layout </span><br><span class="line">exe-layout</span><br><span class="line">├── cmd/</span><br><span class="line">│   ├── app1/</span><br><span class="line">│   │   └── main.go</span><br><span class="line">│   └── app2/</span><br><span class="line">│       └── main.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── internal/</span><br><span class="line">│   ├── pkga/</span><br><span class="line">│   │   └── pkg_a.go</span><br><span class="line">│   └── pkgb/</span><br><span class="line">│       └── pkg_b.go</span><br><span class="line">├── pkg1/</span><br><span class="line">│   └── pkg1.go</span><br><span class="line">├── pkg2/</span><br><span class="line">│   └── pkg2.go</span><br><span class="line">└── vendor/</span><br></pre></td></tr></table></figure></div>
<p>这样的一个Go项目典型布局就是“脱胎”于Go创世项目的最新结构布局，我现在跟你解释一下这里面的几个要点。</p>
<p>我们从上往下按顺序来，先来看<strong>cmd目录</strong>。cmd目录就是存放项目==要编译构建的可执行文件对应的main包的源文件==。如果你的项目中有多个可执行文件需要构建，每个可执行文件的main包单独放在一个子目录中，比如图中的app1、app2，cmd目录下的各app的main包将整个项目的依赖连接在一起。</p>
<p>而且通常来说，main包应该很简洁。我们在main包中会做一些命令行参数解析、资源初始化、日志设施初始化、数据库连接初始化等工作，之后就会将程序的执行权限交给更高级的执行控制对象。另外，也有一些Go项目将cmd这个名字改为app或其他名字，但它的功能其实并没有变。</p>
<p>接着我们来看<strong>pkgN目录</strong>，这是一个存放==项目自身要使用、同样也是可执行文件对应main包所要依赖的库文件==，同时这些目录下的包还可以被外部项目引用。</p>
<p>然后是<strong>go.mod</strong>和<strong>go.sum</strong>，它们是Go语言包==依赖管理使用的配置文件==。我们前面说过，Go
1.11版本引入了Go Module构建机制，这里我建议你所有新项目都基于Go
Module来进行包依赖管理，因为这是目前Go官方推荐的标准构建模式。</p>
<p>对于还没有使用Go
Module进行包依赖管理的遗留项目，比如之前采用dep、glide等作为包依赖管理工具的，建议尽快迁移到Go
Module模式。Go命令支持直接将dep的Gopkg.toml/Gopkg.lock或glide的glide.yaml/glide.lock转换为go.mod。</p>
<p>最后我们再来看看<strong>vendor目录</strong>。vendor是Go
1.5版本引入的用于==在项目本地缓存特定版本依赖包的机制==，在Go
Modules机制引入前，基于vendor可以实现可重现构建，保证基于同一源码构建出的可执行程序是等价的。</p>
<p>不过呢，我们这里将vendor目录视为一个可选目录。原因在于，Go
Module本身就支持可再现构建，而无需使用vendor。 当然Go
Module机制也保留了vendor目录（通过go mod
vendor可以生成vendor下的依赖包，通过go build
-mod=vendor可以实现基于vendor的构建）。一般我们仅保留项目根目录下的vendor目录，否则会造成不必要的依赖选择的复杂性。</p>
<p>当然了，有些开发者喜欢借助一些第三方的构建工具辅助构建，比如：make、bazel等。你可以将这类外部辅助构建工具涉及的诸多脚本文件（比如Makefile）放置在项目的顶层目录下，就像Go创世项目中的all.bash那样。</p>
<p>另外，这里只要说明一下的是，Go
1.11引入的module是一组同属于一个版本管理单元的包的集合。并且Go支持在一个项目/仓库中存在多个module，但这种管理方式可能要比一定比例的代码重复引入更多的复杂性。
因此，如果项目结构中存在版本管理的“分歧”，比如：app1和app2的发布版本并不总是同步的，那么我建议你将项目拆分为多个项目（仓库），每个项目单独作为一个module进行单独的版本管理和演进。</p>
<p>当然如果你非要在一个代码仓库中存放多个module，那么新版Go命令也提供了很好的支持。比如下面代码仓库multi-modules下面有三个module：mainmodule、module1和module2：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> multi-modules</span><br><span class="line">multi-modules</span><br><span class="line">├── go.mod // mainmodule</span><br><span class="line">├── module1</span><br><span class="line">│   └── go.mod // module1</span><br><span class="line">└── module2</span><br><span class="line">    └── go.mod // module2</span><br></pre></td></tr></table></figure></div>
<p>我们可以通过git
tag名字来区分不同module的版本。其中vX.Y.Z形式的tag名字用于代码仓库下的mainmodule；而module1/vX.Y.Z形式的tag名字用于指示module1的版本；同理，module2/vX.Y.Z形式的tag名字用于指示module2版本。</p>
<p>如果Go可执行程序项目有一个且只有一个可执行程序要构建，那就比较好办了，我们可以将上面项目布局进行简化：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> -F -L 1 single-exe-layout</span><br><span class="line">single-exe-layout</span><br><span class="line">├── go.mod</span><br><span class="line">├── internal/</span><br><span class="line">├── main.go</span><br><span class="line">├── pkg1/</span><br><span class="line">├── pkg2/</span><br><span class="line">└── vendor/</span><br></pre></td></tr></table></figure></div>
<p>你可以看到，我们删除了cmd目录，将唯一的可执行程序的main包就放置在项目根目录下，而其他布局元素的功用不变。</p>
<p><strong>好了到这里，我们已经了解了Go可执行程序项目的典型布局，现在我们再来看看Go库项目的典型结构布局是怎样的。</strong></p>
<p>Go库项目仅对外暴露Go包，这类项目的典型布局形式是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> -F lib-layout </span><br><span class="line">lib-layout</span><br><span class="line">├── go.mod</span><br><span class="line">├── internal/</span><br><span class="line">│   ├── pkga/</span><br><span class="line">│   │   └── pkg_a.go</span><br><span class="line">│   └── pkgb/</span><br><span class="line">│       └── pkg_b.go</span><br><span class="line">├── pkg1/</span><br><span class="line">│   └── pkg1.go</span><br><span class="line">└── pkg2/</span><br><span class="line">    └── pkg2.go</span><br></pre></td></tr></table></figure></div>
<p>我们看到，库类型项目相比于Go可执行程序项目的布局要简单一些。因为这类项目不需要构建可执行程序，所以去除了cmd目录。</p>
<p>而且，在这里，vendor也不再是可选目录了。对于库类型项目而言，我们并不推荐在项目中放置vendor目录去缓存库自身的第三方依赖，库项目仅通过go.mod文件明确表述出该项目依赖的module或包以及版本要求就可以了。</p>
<p>Go库项目的初衷是为了对外部（开源或组织内部公开）暴露API，对于仅限项目内部使用而不想暴露到外部的包，可以放在项目顶层的internal目录下面。当然internal也可以有多个并存在于项目结构中的任一目录层级中，关键是项目结构设计人员要明确各级internal包的应用层次和范围。</p>
<p>对于有一个且仅有一个包的Go库项目来说，我们也可以将上面的布局做进一步简化，简化的布局如下所示：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> -L 1 -F single-pkg-lib-layout</span><br><span class="line">single-pkg-lib-layout</span><br><span class="line">├── feature1.go</span><br><span class="line">├── feature2.go</span><br><span class="line">├── go.mod</span><br><span class="line">└── internal/</span><br></pre></td></tr></table></figure></div>
<p>简化后，我们将这唯一包的所有源文件放置在项目的顶层目录下（比如上面的feature1.go和feature2.go），其他布局元素位置和功用不变。</p>
<p>好了，现在我们已经了解完目前Go项目的典型结构布局了。不过呢，除了这些之外，还要注意一下早期Go可执行程序项目的经典布局，这个又有所不同。</p>
<h3
id="注意早期go可执行程序项目的典型布局">注意早期Go可执行程序项目的典型布局</h3>
<p>很多早期接纳Go语言的开发者所建立的Go可执行程序项目，深受Go创世项目1.4版本之前的布局影响，这些项目将所有可暴露到外面的Go包聚合在pkg目录下，就像前面Go
1.3版本中的布局那样，它们的典型布局结构是这样的：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tree</span> -L 3 -F early-project-layout</span><br><span class="line">early-project-layout</span><br><span class="line">└── exe-layout/</span><br><span class="line">    ├── cmd/</span><br><span class="line">    │   ├── app1/</span><br><span class="line">    │   └── app2/</span><br><span class="line">    ├── go.mod</span><br><span class="line">    ├── internal/</span><br><span class="line">    │   ├── pkga/</span><br><span class="line">    │   └── pkgb/</span><br><span class="line">    ├── pkg/</span><br><span class="line">    │   ├── pkg1/</span><br><span class="line">    │   └── pkg2/</span><br><span class="line">    └── vendor/</span><br></pre></td></tr></table></figure></div>
<p>我们看到，原本放在项目顶层目录下的pkg1和pkg2公共包被统一聚合到pkg目录下了。而且，这种早期Go可执行程序项目的典型布局在Go社区内部也不乏受众，很多新建的Go项目依然采用这样的项目布局。</p>
<p>所以，当你看到这样的布局也不要奇怪，并且在我的讲解后，你应该就明确在这样的布局下pkg目录所起到的“聚类”的作用了。不过，在这里还是建议你在创建新的Go项目时，优先采用前面的标准项目布局。</p>
<h3 id="小结">小结</h3>
<p>到这里，我们今天这门课就结束了。在这一节课里，我们学习了Go创世项目，也就是Go语言项目自身的项目源码布局，以及演进情况。在Go创世项目的启发下，Go社区在多年实践中形成了典型的Go项目结构布局形式。</p>
<p>我们将Go项目分为<strong>可执行程序项目</strong>和Go<strong>库项目</strong>两类进行了详细的项目典型布局讲解，这里简单回顾一下。</p>
<p>第一，对于以生产可执行程序为目的的Go项目，它的典型项目结构分为五部分：</p>
<ul>
<li>放在项目顶层的<mark style="background: #fefe00A6;">Go
Module相关文件</mark> ，包括go.mod和go.sum；</li>
<li><mark style="background: #fefe00A6;">cmd目录</mark>
：存放项目要编译构建的可执行文件所对应的main包的源码文件；</li>
<li>项目<mark style="background: #fefe00A6;">包目录</mark>
：每个项目下的非main包都“平铺”在项目的根目录下，每个目录对应一个Go包；</li>
<li><mark style="background: #fefe00A6;">internal目录</mark>
：存放仅项目内部引用的Go包，这些包无法被项目之外引用；</li>
<li><mark style="background: #fefe00A6;">vendor目录</mark>
：这是一个可选目录，为了兼容Go
1.5引入的vendor构建模式而存在的。这个目录下的内容均由Go命令自动维护，不需要开发者手工干预。</li>
</ul>
<p>第二，对于以生产可复用库为目的的Go项目，它的典型结构则要简单许多，我们可以直接理解为<mark style="background: #83d98fA6;">在Go可执行程序项目的基础上去掉cmd目录和vendor目录。</mark></p>
<p>最后，早期接纳Go语言的开发者所建立的项目的布局深受Go创世项目1.4版本之前布局的影响，将可导出的公共包放入单独的pkg目录下，我们了解这种情况即可。对于新建Go项目，我依旧建议你采用前面介绍的标准布局形式。</p>
<p>现在，如果你要再面对一个要用于生产环境的Go应用项目的布局问题，是不是胸有成竹了呢？</p>
<h3 id="思考题">思考题</h3>
<p>如果非要你考虑Go项目结构的最小标准布局，那么你觉得这个布局中都应该包含哪些东西呢？欢迎在留言区留下你的答案。</p>
<p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go项目布局感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>03｜配好环境：选择一种最适合你的Go安装方法</title>
    <url>/c0490d55555fe9bbbf5e5d34a157428233452cdf/</url>
    <content><![CDATA[<h1
id="配好环境选择一种最适合你的go安装方法">03｜配好环境：选择一种最适合你的Go安装方法</h1>
<p>你好，我是Tony Bai。</p>
<p>经过上一节的对Go设计哲学的探讨后，如果你依然决定继续Go语言编程学习之旅，那么欢迎你和我一起正式走进Go语言学习和实践的课堂。</p>
<p>编程不是“纸上谈兵”，它是一门实践的艺术。编程语言的学习离不开动手实践，因此学习任何一门编程语言的第一步都是要拥有一个这门编程语言的开发环境，这样我们才可以动手编码，理论与实践结合，不仅加速学习效率，还能取得更好的学习效果。</p>
<p>在这一讲中我们就先来学习下如何安装和配置Go语言开发环境。如果你的机器上还没有Go，那么就请跟我一起选择一种适合你的Go安装方法吧。第一步，先来挑一个合适的Go版本。</p>
<h3 id="选择go版本">选择Go版本</h3>
<p>挑版本之前，我们先来看看Go语言的<strong>版本发布策略</strong>。</p>
<p>如今，Go团队已经将版本发布节奏稳定在每年发布两次大版本上，一般是在二月份和八月份发布。Go团队承诺对最新的两个Go稳定大版本提供支持，比如目前最新的大版本是Go
1.17，那么Go团队就会为Go 1.17和Go 1.16版本提供支持。如果Go
1.18版本发布，那支持的版本将变成Go 1.18和Go
1.17。支持的范围主要包括修复版本中存在的重大问题、文档变更以及安全问题更新等。</p>
<p>基于这样的版本发布策略，在你选择版本时可以参考这几种思路：</p>
<!-- [[[read_end]]] -->
<p>一般情况下，我建议你采用最新版本。因为Go团队发布的Go语言稳定版本的平均质量一直是很高的，少有影响使用的重大bug。你也不用太担心新版本的支持问题，Google的自有产品，比如Google
App
Engine（以下简称为GAE）支持都会很快，一般在Go新版本发布不久后，GAE便会宣布支持最新版本的Go。</p>
<p>你还可以根据不同实际项目需要或开源社区的情况使用不同的版本。</p>
<p>有的开源项目采纳了Go团队的建议，在Go最新版本发布不久就将当前项目的Go编译器版本升级到最新版，比如Kubernetes项目；而有的开源项目（比如：docker项目）则比较谨慎，在Go团队发布Go
1.17版本之后，这些项目可能还在使用两个发布周期之前的版本，比如Go
1.15。</p>
<p>但多数项目处于两者之间，也就是使用<strong>次新版</strong>，即最新版本之前的那个版本。比如，当前最新版本为Go
1.17，那么这些项目会使用Go 1.16版本的最新补丁版本（Go
1.16.x），直到发布Go 1.18后，这些项目才会切换到Go 1.17的最新补丁版本（Go
1.17.x）。如果你不是那么“激进”，也可以采用这种版本选择策略。</p>
<p><strong>因为我们这门课是Go语言学习的课，所以我这里建议你直接使用Go最新发布版</strong>，这样我们可以体验到Go的最新语言特性，应用到标准库的最新API以及Go工具链的最新功能。在这一节课里我们以<strong>Go
1.16.5版本</strong>为例讲述一下其安装、配置和使用方法。</p>
<p>选定Go版本后，接下来我们就来看看几种常见的Go安装方法。</p>
<h3 id="安装go">安装Go</h3>
<p>Go从2009年开源并演化到今天，它的安装方法其实都已经很成熟了，接下来呢，我们就逐一介绍在Linux、macOS、Windows这三大主流操作系统上安装Go的方法，我们假设这些操作系统都安装在X86-64的平台上，首先我们来看Linux。</p>
<h4 id="在linux上安装go">在Linux上安装Go</h4>
<p>Go几乎支持Linux所有的主流发行版操作系统，常见的包括Ubuntu、CentOS（Redhat企业版Linux的社区开源版）、Fedora、SUSE等等，Go在这些主流的Linux发行版操作系统上的安装方法都是一样的（当然某个发行版也可能会利用其软件安装管理器提供仅属于其自己的安装方法）。你可以参考下面这样的安装步骤。</p>
<p>首先，我们需要下载并解压Go Linux安装包：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> -c https://golang.google.cn/dl/go1.16.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>这里有个小提醒：虽然Go官方下载站点是golang.org/dl，但我们可以用针对中国大陆的镜像站点golang.google.cn/dl来下载，在中国大陆地区使用大陆镜像站点可以大幅缩短下载时间。</p>
<p>第二步，将下载完毕的Go安装包解压到安装目录中：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$tar</span> -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>执行完上面解压缩命令后，我们将在/usr/local下面看到名为go的目录，这个目录就是Go的安装目录，也是Go官方推荐的Go安装目录。我们执行下面命令可以查看该安装目录下的组成：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ls</span> -F /usr/local/go</span><br><span class="line">AUTHORS          CONTRIBUTORS  PATENTS    SECURITY.md  api/  doc/         lib/   pkg/        src/</span><br><span class="line">CONTRIBUTING.md  LICENSE       README.md  VERSION      bin/  favicon.ico  misc/  robots.txt  <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure></div>
<p>不过呢，为了可以在任意路径下使用go命令，我们需要将Go二进制文件所在路径加入到用户环境变量PATH中（以用户使用bash为例），具体操作是将下面这行<mark style="background: #fefe00A6;">环境变量设置语句</mark>
添加到$HOME/.profile文件的末尾：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-13,3,250-->
<p>然后执行下面命令使上述<mark style="background: #fefe00A6;">环境变量的设置立即生效</mark>
：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$source</span> ~/.profile</span><br></pre></td></tr></table></figure></div>
<p>最后，我们可以通过下面命令验证此次安装是否成功：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> version</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-13,3,250-->
<p><strong>如果这个命令输出了“go version go1.16.5
linux/amd64”，那么说明我们这次的Go安装是成功的。</strong></p>
<h4 id="在mac上安装go">在Mac上安装Go</h4>
<p>在Mac上我们可以在图形界面的引导下进行Go的安装。不过，我们先要下载适用于Mac的Go安装包：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> -c https://golang.google.cn/dl/go1.16.5.darwin-amd64.pkg</span><br></pre></td></tr></table></figure></div>
<p>安装包下载完毕后，我们可以双击安装包，打开标准的Mac软件安装界面，如下图所示：</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/6e/08/6e76e2cafd0cbf679854e26eef4bb308.png?wh=1230x868"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>按软件安装向导提示，一路点击“继续”，我们便可以完成Go在Mac上的安装。</p>
<p>和Linux一样，Mac上的Go安装包默认也会将Go安装到/usr/local/go路径下面。因此，如果要在任意路径下使用Go，我们也需将这个路径加入到用户的环境变量PATH中。具体操作方法与上面Linux中的步骤一样，也是将下面环境变量设置语句加入到$HOME/.profile中，然后执行source命令让它生效就可以了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br></pre></td></tr></table></figure></div>
<p>最后，我们同样可以通过go version命令验证一下这次安装是否成功。</p>
<p>当然了，在Mac上，我们也可以采用像Linux那样的通过命令行安装Go的方法，如果采用这种方法，我们就要下载下面的Mac
Go安装包：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$wget</span> -c https://golang.google.cn/dl/go1.16.5.darwin-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>后续的步骤与Linux上安装Go几乎没有差别，你直接参考我上面讲的就好了。</p>
<h4 id="在windows上安装go">在Windows上安装Go</h4>
<p>在Windows上，我们最好的安装方式就是采用图形界面引导下的Go安装方法。</p>
<p>我们打开<a
href="https://golang.google.cn/dl">Go包的下载页面</a>，在页面上找到Go
1.16.5版本的Windows
msi安装包（AMD64架构下的）：go1.16.5.windows-amd64.msi，通过浏览器自带的下载工具它下载到本地任意目录下。</p>
<p>双击打开已下载的go1.16.5.windows-amd64.msi文件，我们就能看到下面这个安装引导界面：</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/68/2a/686e669aefbbe3ae35e37b0929b9722a.png?wh=618x483"
alt="图片" />
<figcaption aria-hidden="true">图片</figcaption>
</figure>
<p>和所有使用图形界面方式安装的Windows应用程序一样，我们只需一路点击“继续（next）”就可完成Go程序的安装了，安装程序默认会把Go安装在**C:Files*下面，当然你也可以自己定制你的安装目录。</p>
<p>除了会将Go安装到你的系统中之外，Go安装程序还会自动为你设置好Go使用所需的环境变量，包括在用户环境变量中增加GOPATH，它的值默认为C:\Users[用户名]\go，在系统变量中也会为Path变量增加一个值：C:\Program
Files\Go\bin，这样我们就可以在任意路径下使用Go了。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">安装完成后，我们可以打开Windows的“命令提示符”窗口（也就是CMD命令）来验证一下Go有没有安装成功。在命令行中输入go version，如果看到下面这个输出结果，那证明你这次安装就成功了：</span><br><span class="line"></span><br><span class="line">C:\Users\tonybai&gt;go version</span><br><span class="line">go version go1.16.5 windows/amd64</span><br></pre></td></tr></table></figure></div>
<p>到这里，我们已经把Go语言在主流操作系统上的安装讲完了，但这里其实我讲的都是安装一个版本的Go的方法，有些时候我们会有安装多个Go版本的需求，这点我们接着往下看。</p>
<h3 id="安装多个go版本">安装多个Go版本</h3>
<p>一般来说，Go初学者安装一个最新的Go版本就足够了，但随着Go编程的深入，我们通常会有使用多个Go版本的需求，比如一个版本用于学习或本地开发，另外一个版本用于生产构建等等。</p>
<p>安装多个Go版本其实也很简单，这里我给你介绍三种方法。</p>
<h4 id="方法一重新设置path环境变量">方法一：重新设置PATH环境变量</h4>
<p>你只需要将不同版本的Go安装在不同路径下，然后将它们的Go二进制文件的所在路径加入到PATH环境变量中就可以了。</p>
<p>我们以Linux环境为例，在前面介绍Go标准安装方法的时候，我们已经将Go
1.16.5版本安装到了/usr/local/go下面，也将/usr/local/go/bin这个路径加入到了PATH路径下了，当前状态我们在任意路径下敲入go，执行的都是Go
1.16.5版本对应的Go二进制文件。</p>
<p>那这个时候，如果我们想再安装一个Go 1.15.13版本要怎么办呢？</p>
<p>首先，你需要按照标准步骤将Go
1.15.13安装到事先建好的/usr/local/go1.15.13路径下：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$mkdir</span> /usr/local/go1.15.13</span><br><span class="line"><span class="variable">$wget</span> -c https://golang.google.cn/dl/go1.15.13.linux-amd64.tar.gz</span><br><span class="line"><span class="variable">$tar</span> -C /usr/local/go1.15.13 -xzf go1.15.13.linux-amd64.tar.gz</span><br></pre></td></tr></table></figure></div>
<p>接下来，我们来设置PATH环境变量，将原先$HOME/.profile中的PATH变量的值由：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin</span><br></pre></td></tr></table></figure></div>
<p>改为：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go1.15.13/go/bin</span><br></pre></td></tr></table></figure></div>
<p>这样通过执行source命令重新使PATH环境变量生效后，我们再执行go
version命令，会得到下面这样的结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> version</span><br><span class="line">go version go1.15.13 linux/amd64</span><br></pre></td></tr></table></figure></div>
<p>这样，我们已经安装好两个Go版本了。这之后，我们如果要在Go 1.16.5和Go
1.15.13两个版本之间切换，只需要重新设置PATH环境变量并生效即可。</p>
<p>不过，你可能依然会觉得通过重新设置PATH环境变量的方法有些麻烦。没关系，Go官方也提供了一种在系统中安装多个Go版本的方法，下面我们就来看一下第二种方法。</p>
<h4 id="方法二go-get命令">方法二：go get命令</h4>
<p><strong>这种方法有一个前提，那就是当前系统中已经通过标准方法安装过某个版本的Go了。</strong></p>
<p>我们还以Linux环境为例，假设目前环境中已经存在了采用标准方法安装的Go
1.16.5版本，我们接下来想再安装一个Go
1.15.13版本。按照Go官方方法，我们可以这样来做：</p>
<p>首先，将 $
HOME/go/bin加入到PATH环境变量中并生效，即便这个目录当前不存在也没关系：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/go/bin:~/go/bin</span><br></pre></td></tr></table></figure></div>
<p>然后，我们要执行下面这个命令安装Go 1.15.13版本的下载器：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> get golang.org/dl/go1.15.13</span><br></pre></td></tr></table></figure></div>
<p>这个命令会将名为Go
1.15.13的可执行文件安装到$HOME/go/bin这个目录下，它是Go
1.15.13版本的专用下载器，下面我们再来执行Go 1.15.13的下载安装命令：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go1</span>.15.13 download</span><br><span class="line"></span><br><span class="line">Downloaded   0.0% (    16384 / 121120420 bytes) ...</span><br><span class="line">Downloaded   1.8% (  2129904 / 121120420 bytes) ...</span><br><span class="line">Downloaded  84.9% (102792432 / 121120420 bytes) ...</span><br><span class="line">Downloaded 100.0% (121120420 / 121120420 bytes)</span><br><span class="line">Unpacking /root/sdk/go1.15.13/go1.15.13.linux-amd64.tar.gz ...</span><br><span class="line">Success. You may now run <span class="string">&#x27;go1.15.13&#x27;</span></span><br></pre></td></tr></table></figure></div>
<p>现在，我们看到这个命令下载了go1.15.13.linux-amd64.tar.gz安装包，也将它安装到$HOME/sdk/go1.15.13下面了。下载安装结束后，我们就可以利用<strong>带有版本号的go命令</strong>来使用特定版本的Go了：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go1</span>.15.13 version</span><br><span class="line">go version go1.15.13 linux/amd64</span><br></pre></td></tr></table></figure></div>
<p>同样的，我们也可以通过下面这个命令查看特定Go版本的安装位置：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go1</span>.15.13 <span class="built_in">env</span> GOROOT</span><br><span class="line">/root/sdk/go1.15.13</span><br></pre></td></tr></table></figure></div>
<h4 id="方法三go-get命令安装非稳定版本">方法三：go
get命令安装非稳定版本</h4>
<p>其实，除了Go团队正式发布的稳定版本(stable version)，像前面安装的Go
1.16.5或Go 1.15.13，我们还可以通过<strong>go
get</strong>的方法安装Go团队正在开发的非稳定版本(Unstable
Version)，包括每个稳定版发布前的beta版本或当前最新的tip版本，这些非稳定版本可以让Go开发人员提前体验到即将加入到稳定版本中的新特性。</p>
<p>但是，通过go
get安装不同Go版本的方法在中国大陆地区会因网络问题而失败。如果你已经克服了网络问题，那安装非稳定版本的步骤其实和上面的步骤一样。现在，我们以Go
1.17beta1和Go Tip版本为例，带你体验一下它们的安装步骤和验证方法。</p>
<p>首先我们来看Go 1.17beta1：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> get golang.org/dl/go1.17beta1</span><br><span class="line"><span class="variable">$go1</span>.17beta1 download</span><br><span class="line">Downloaded   0.0% (     3272 / 134470397 bytes) ...</span><br><span class="line">Downloaded  21.4% ( 28819248 / 134470397 bytes) ...</span><br><span class="line">Downloaded  58.1% ( 78069168 / 134470397 bytes) ...</span><br><span class="line">Downloaded 100.0% (134470397 / 134470397 bytes)</span><br><span class="line">Unpacking /root/sdk/go1.17beta1/go1.17beta1.linux-amd64.tar.gz ...</span><br><span class="line">Success. You may now run <span class="string">&#x27;go1.17beta1&#x27;</span></span><br><span class="line"><span class="variable">$go1</span>.17beta1 version</span><br><span class="line">go version go1.17beta1 linux/amd64</span><br></pre></td></tr></table></figure></div>
<p>接着来看Go Tip版本：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> get golang.org/dl/gotip</span><br><span class="line"><span class="variable">$gotip</span> download</span><br></pre></td></tr></table></figure></div>
<p>go
get为我们安装tip版本提供了极大方便，要知道在以前，如果我们要安装tip版本，需要手工下载Go源码并自行编译。但你要注意的是：<strong>不是每次gotip安装都会成功</strong>，因为这毕竟是正在积极开发的版本，一次代码的提交就可能会导致gotip版本构建失败！</p>
<p>安装好Go之后，我们就该讲讲怎么配置了。</p>
<h3 id="配置go">配置Go</h3>
<p>其实Go在安装后是开箱即用的，这也意味着我们在使用Go之前无需做任何配置。但为了更好地了解和学习Go，我们还是要认识一些Go自带的常用配置项。Go的配置项是以环境变量的形式存在的，我们可以通过下面这个命令查看Go的这些配置项：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$go</span> <span class="built_in">env</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置源</span></span><br><span class="line"><span class="variable">$go</span> <span class="built_in">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure></div>
<p>这里我也给你总结了一些常用配置项： <img
src="https://static001.geekbang.org/resource/image/ba/96/ba6990798fb17fc18386749f9cce2c96.jpg?wh=1080x1192"
alt="图片" /> <!--SR:!2022-11-13,3,250--></p>
<p>如果你还要了解更多关于Go配置项的说明，你可以通过go help
environment命令查看。</p>
<h3 id="小结">小结</h3>
<p>好了，到这里我们的Go安装配置方法就讲解完毕了，选好你要使用的Go安装方法了吗？</p>
<p>在这一节课中我们首先讲解了三种Go版本的选择策略：</p>
<ul>
<li>第一种，也是我们推荐的一种，那就是使用Go最新的版本，这样你可以体验到Go的最新语言特性，应用到标准库的最新API以及Go工具链的最新功能，并且很多老版本中的bug在最新版本中都会得到及时修复；</li>
<li>如果你还是对最新版本的稳定性有一丝担忧，你也可以选择使用次新版；</li>
<li>最后，如果你要考虑现存生产项目或开源项目，那你按照需要选择，与项目策略保持一致就好了。</li>
</ul>
<!-- -->
<p>确定完Go版本后，我们就可以来安装这个Go版本了。这一节课我们也详细介绍了在三个主流操作系统上安装Go稳定版本的方法。</p>
<p>对于使用Windows或macOS操作系统的开发者，使用基于图形界面的安装方式显然是最方便、最简洁的；对于使用Linux操作系统的开发者，使用自解压的安装包，或者是通过操作系统自带安装工具来进行Go安装比较普遍。</p>
<p>如果你是要在本地开发环境安装多个Go版本，或者是要抢先体验新版Go，我们还讲解了两种在本地安装多个Go版本的方法。这里再强调一下，通过go
get方式安装最新的Go tip版本存在失败的可能性哦！</p>
<p>最后，我们讲解了Go的一些常用配置项的功用，对于中国地区的Go开发者而言，你在真正使用Go构建应用之前，唯一要做的就是配置GOPROXY这个Go环境变量。</p>
<p>有了Go开发环境，我们就有了编写和构建Go代码的基础，在下一讲中我们就将开始学习如何编写Go代码。</p>
<h3 id="思考题">思考题</h3>
<p>今天的课后思考题，我想请你在安装好的Go开发环境中，使用go
help命令查看和总结一下Go命令的使用方法。</p>
<p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go语言学习感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>02｜拒绝“Hello and Bye”：Go语言的设计哲学是怎么一回事？</title>
    <url>/d48092004fa4bcf68b4bdf719370a27b150698b7/</url>
    <content><![CDATA[<h1 id="拒绝hello-and-byego语言的设计哲学是怎么一回事">02｜拒绝“Hello
and Bye”：Go语言的设计哲学是怎么一回事？</h1>
<p>你好，我是Tony Bai。</p>
<p>上一讲，我们探讨了 <strong>“Go从哪里来，并可能要往哪里去”</strong>
的问题。根据“绝大多数主流编程语言将在其15至20年间大步前进”这个依据，我们给出了一个结论：<strong>Go语言即将进入自己的黄金5~10年</strong>。</p>
<p>那么此时此刻，想必你已经跃跃欲试，想要尽快开启Go编程之旅。但在正式学习Go语法之前，我还是要再来给你<strong>泼泼冷水</strong>，因为这将决定你后续的学习结果，是“从入门到继续”还是“从入门到放弃”。</p>
<p>很多编程语言的初学者在学习初期，可能都会遇到这样的问题：最初兴致勃勃地开始学习一门编程语言，学着学着就发现了很多“别扭”的地方，比如想要的语言特性缺失、语法风格冷僻与主流语言差异较大、语言的不同版本间无法兼容、语言的语法特性过多导致学习曲线陡峭、语言的工具链支持较差，等等。</p>
<p>其实以上的这些问题，本质上都与语言设计者的设计哲学有关。所谓编程语言的设计哲学，就是指决定这门语言演化进程的高级原则和依据。</p>
<p><strong>设计哲学之于编程语言，就好比一个人的价值观之于这个人的行为。</strong></p>
<p>因为如果你不认同一个人的价值观，那你其实很难与之持续交往下去，即所谓道不同不相为谋。类似的，如果你不认同一门编程语言的设计哲学，那么大概率你在后续的语言学习中，就会遇到上面提到的这些问题，而且可能会让你失去继续学习的精神动力。</p>
<!-- [[[read_end]]] -->
<p>因此，在真正开始学习Go语法和编码之前，我们还需要先来了解一下Go语言的设计哲学，等学完这一讲之后，你就能更深刻地认识到自己学习Go语言的原因了。</p>
<p>我将Go语言的设计哲学总结为五点：==简单==、==显式==、==组合==、==并发==和==面向工程==。下面，我们就先从Go语言的第一设计哲学“<strong>简单</strong>”开始了解吧。
<!--SR:!2022-11-12,3,250!2022-11-12,3,250!2022-11-12,3,250!2022-11-12,3,250!2022-11-12,3,250--></p>
<h3 id="简单">简单</h3>
<p>知名Go开发者戴维·切尼（Dave
Cheney）曾说过：“大多数编程语言创建伊始都致力于成为一门简单的语言，但最终都只是满足于做一个强大的编程语言”。</p>
<p><strong>而Go语言是一个例外。Go语言的设计者们在语言设计之初，就拒绝了走语言特性融合的道路，选择了“做减法”并致力于打造一门简单的编程语言。</strong></p>
<p>选择了“简单”，就意味着Go不会像C++、Java那样将其他编程语言的新特性兼蓄并收，所以你在Go语言中看不到传统的面向对象的类、构造函数与继承，看不到结构化的异常处理，也看不到本属于函数编程范式的语法元素。</p>
<p>其实，Go语言也没它看起来那么简单，自身实现起来并不容易，但这些复杂性被Go语言的设计者们“隐藏”了，所以Go语法层面上呈现了这样的状态：</p>
<ul>
<li>仅有<strong>25个关键字</strong>，主流编程语言最少；</li>
<li>内置<strong>垃圾收集</strong>，降低开发人员内存管理的心智负担；</li>
<li><strong>首字母大小写决定可见性</strong>，无需通过额外关键字修饰；</li>
<li><strong>变量初始为类型零值</strong>，避免以随机值作为初值的问题；</li>
<li><strong>内置数组边界检查</strong>，极大减少越界访问带来的安全隐患；</li>
<li><strong>内置并发支持</strong>，简化并发程序设计；</li>
<li><strong>内置接口类型</strong>，为组合的设计哲学奠定基础；</li>
<li>原生提供完善的工具链，开箱即用；</li>
<li>… … <!--SR:!2022-11-12,3,250--></li>
</ul>
<!-- -->
<p>看，我说的没错吧，确实挺简单的。当然了，任何的设计都存在着权衡与折中。我们看到Go设计者选择的“简单”，其实是站在巨人肩膀上，去除或优化了以往语言中，已经被开发者证明为体验不好或难以驾驭的语法元素和语言机制，并提出了自己的一些创新性的设计。比如，首字母大小写决定可见性、变量初始为类型零值、内置以go关键字实现的并发支持等。</p>
<p>Go这种有些“逆潮流”的“简单哲学”并不是一开始就能得到程序员的理解的，但在真正使用Go之后，我们才能真正体会到这种简单所带来的收益：简单意味着可以使用更少的代码实现相同的功能；简单意味着代码具有更好的可读性，而可读性好的代码通常意味着更好的可维护性以及可靠性。</p>
<p>总之，在软件工程化的今天，这些都意味着对生产效率提升的极大促进，我们可以认为<strong>简单的设计哲学是Go生产力的源泉</strong>。</p>
<h3 id="显式">显式</h3>
<p>好，接下来我们继续来了解学习下Go语言的第二大设计哲学：<strong>显式</strong>。</p>
<p>首先，我想先带你来看一段C程序，我们一起来看看“隐式”代码的行为特征。</p>
<p>在C语言中，下面这段代码可以正常编译并输出正确结果：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">		<span class="type">short</span> <span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">		<span class="type">int</span> b = <span class="number">8</span>;</span><br><span class="line">		<span class="type">long</span> c = <span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		c = a + b;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>我们看到在上面这段代码中，变量a、b和c的类型均不相同，C语言编译器在编译<code>c = a + b</code>这一行时，会自动将短整型变量a和整型变量b，先转换为long类型然后相加，并将所得结果存储在long类型变量c中。那如果换成Go来实现这个计算会怎么样呢？我们先把上面的C程序转化成等价的Go代码：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a <span class="type">int16</span> = <span class="number">5</span></span><br><span class="line">    <span class="keyword">var</span> b <span class="type">int</span> = <span class="number">8</span></span><br><span class="line">    <span class="keyword">var</span> c <span class="type">int64</span></span><br><span class="line"></span><br><span class="line">    c = a + b</span><br><span class="line">    fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>如果我们编译这段程序，将得到类似这样的编译器错误：“invalid operation:
a + b (mismatched types int16 and
int)”。我们能看到Go与C语言的隐式自动类型转换不同，Go不允许==不同类型的整型变量进行混合计算==，它同样也不会==对其进行隐式的自动转换==。</p>
<p>因此，如果要使这段代码通过编译，我们就需要对变量a和b进行<strong>显式转型</strong>，就像下面代码段中这样：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line">c = <span class="type">int64</span>(a) + <span class="type">int64</span>(b)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d\n&quot;</span>, c)</span><br></pre></td></tr></table></figure></div>
<p>而这其实就是Go语言<strong>显式设计哲学</strong>的一个体现。</p>
<p>在Go语言中，不同类型变量是不能在一起进行混合计算的，这是因为<strong>Go希望开发人员明确知道自己在做什么</strong>，这与C语言的“信任程序员”原则完全不同，因此你需要以显式的方式通过转型统一参与计算各个变量的类型。</p>
<p>除此之外，Go设计者所崇尚的显式哲学还直接决定了Go语言错误处理的形态：Go语言采用了<strong>显式的基于值比较的错误处理方案</strong>，函数/方法中的错误都会通过return语句显式地返回，并且通常调用者不能忽略对返回的错误的处理。</p>
<p>这种有悖于“主流语言潮流”的错误处理机制还一度让开发者诟病，社区也提出了多个新错误处理方案，但或多或少都包含隐式的成分，都被Go开发团队一一否决了，这也与显式的设计哲学不无关系。
<!--SR:!2022-11-13,3,250!2022-11-13,3,250--></p>
<h3 id="组合">组合</h3>
<p>接着，我们来看第三个设计哲学：<strong>组合</strong>。</p>
<p>这个设计哲学和我们各个程序之间的耦合有关，Go语言不像C++、Java等主流面向对象语言，我们在Go中是找不到经典的面向对象语法元素、类型体系和继承机制的，Go推崇的是组合的设计哲学。</p>
<p>在诠释组合之前，我们需要先来了解一下Go在语法元素设计时，是如何为“组合”哲学的应用奠定基础的。</p>
<p>在Go语言设计层面，Go设计者为开发者们提供了正交的语法元素，以供后续组合使用，包括：</p>
<ul>
<li>Go语言无类型层次体系，各类型之间是相互独立的，没有子类型的概念；</li>
<li>每个类型都可以有自己的方法集合，类型定义与方法实现是正交独立的；</li>
<li>实现某个接口时，无需像Java那样采用特定关键字修饰；</li>
<li>包之间是相对独立的，没有子包的概念。</li>
</ul>
<p>我们可以看到，无论是包、接口还是一个个具体的类型定义，Go语言其实是为我们呈现了这样的一幅图景：一座座没有关联的“孤岛”，但每个岛内又都很精彩。那么现在摆在面前的工作，就是在这些孤岛之间以最适当的方式建立关联，并形成一个整体。而<strong>Go选择采用的组合方式，也是最主要的方式</strong>。
<!--SR:!2022-11-13,3,250--></p>
<p>Go语言为支撑组合的设计提供了<strong>类型嵌入</strong>（Type
Embedding）。通过类型嵌入，我们可以将已经实现的功能嵌入到新类型中，以快速满足新类型的功能需求，这种方式有些类似经典面向对象语言中的“继承”机制，但在原理上却与面向对象中的继承完全不同，这是一种Go设计者们精心设计的“语法糖”。</p>
<p>被嵌入的类型和新类型两者之间没有任何关系，甚至相互完全不知道对方的存在，更没有经典面向对象语言中的那种父类、子类的关系，以及向上、向下转型（Type
Casting）。<mark style="background: #83d98fA6;">通过新类型实例调用方法时，方法的匹配主要取决于方法名字，而不是类型。</mark>
这种组合方式，我称之为<strong>垂直组合</strong>，即通过类型嵌入，快速让一个新类型“复用”其他类型已经实现的能力，实现功能的垂直扩展。</p>
<p>你可以看看下面这个Go标准库中的一段使用类型嵌入的组合方式的代码段：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/sync/pool.go</span></span><br><span class="line"><span class="keyword">type</span> poolLocal <span class="keyword">struct</span> &#123;</span><br><span class="line">    private <span class="keyword">interface</span>&#123;&#125;   </span><br><span class="line">    shared  []<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">    Mutex               </span><br><span class="line">    pad     [<span class="number">128</span>]<span class="type">byte</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>在代码段中，我们在poolLocal这个结构体类型中嵌入了类型Mutex，这就使得poolLocal这个类型具有了互斥同步的能力，我们可以通过poolLocal类型的变量，直接调用Mutex类型的方法Lock或Unlock。</p>
<p>另外，我们在标准库中还会经常看到类似如下定义接口类型的代码段：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/io/io.go</span></span><br><span class="line"><span class="keyword">type</span> ReadWriter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Reader</span><br><span class="line">    Writer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>这里，标准库通过嵌入接口类型的方式来实现接口行为的聚合，组成大接口，这种方式在标准库中尤为常用，并且已经成为了Go语言的一种惯用法。
<!--SR:!2022-11-13,3,250--></p>
<p>垂直组合本质上是一种“能力继承”，采用嵌入方式定义的新类型继承了嵌入类型的能力。Go还有一种常见的组合方式，叫<strong>水平组合</strong>。和垂直组合的能力继承不同，<mark style="background: #83d98fA6;">水平组合是一种能力委托（Delegate）</mark>
，我们通常使用接口类型来实现水平组合。</p>
<p>Go语言中的接口是一个创新设计，它只是方法集合，并且它与实现者之间的关系无需通过显式关键字修饰，它让程序内部各部分之间的耦合降至最低，同时它也是连接程序各个部分之间“纽带”。</p>
<p>水平组合的模式有很多，比如一种常见方法就是，通过接受接口类型参数的普通函数进行组合，如以下代码段所示：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="GO"><figure class="iseeu highlight /go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// $GOROOT/src/io/ioutil/ioutil.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadAll</span><span class="params">(r io.Reader)</span></span>([]<span class="type">byte</span>, <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $GOROOT/src/io/io.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Copy</span><span class="params">(dst Writer, src Reader)</span></span>(written <span class="type">int64</span>, err <span class="type">error</span>)</span><br></pre></td></tr></table></figure></div>
<p>也就是说，函数ReadAll通过io.Reader这个接口，将io.Reader的实现与ReadAll所在的包低耦合地水平组合在一起了，从而达到从任意实现io.Reader的数据源读取所有数据的目的。类似的水平组合“模式”还有点缀器、中间件等，这里我就不展开了，在后面讲到接口类型时再详细叙述。
<!--SR:!2022-11-13,3,250--></p>
<p>此外，我们还可以将Go语言内置的并发能力进行灵活组合以实现，比如，通过goroutine+channel的组合，可以实现类似Unix
Pipe的能力。</p>
<p>总之，组合原则的应用实质上是塑造了Go程序的骨架结构。类型嵌入为类型提供了==垂直扩展能力==，而接口是==水平组合==的关键，它好比程序肌体上的“关节”，给予连接“关节”的两个部分各自“自由活动”的能力，而整体上又实现了某种功能。并且，组合也让遵循“简单”原则的Go语言，在表现力上丝毫不逊色于其他复杂的主流编程语言。
<!--SR:!2022-11-13,3,250!2022-11-13,3,250--></p>
<h3 id="并发">并发</h3>
<p>好，前面我们已经看过3个设计哲学了，紧接着我带你看的是第4个：<strong>并发</strong>。</p>
<p>“并发”这个设计哲学的出现有它的背景，你也知道CPU都是靠提高主频来改进性能的，但是现在这个做法已经遇到了瓶颈。主频提高导致CPU的功耗和发热量剧增，反过来制约了CPU性能的进一步提高。2007年开始，处理器厂商的竞争焦点从主频转向了多核。</p>
<p>在这种大背景下，Go的设计者在决定去创建一门新语言的时候，果断将面向多核、<strong>原生支持并发</strong>作为了新语言的设计原则之一。并且，Go放弃了传统的基于操作系统线程的并发模型，而采用了<strong>用户层轻量级线程</strong>，Go将之称为<strong>goroutine</strong>。</p>
<p>goroutine<mark style="background: #fefe00A6;">占用的资源非常小</mark>
，Go运行时默认为每个goroutine分配的栈空间仅2KB。goroutine<mark style="background: #fefe00A6;">调度</mark>
的切换也不用陷入（trap）操作系统内核层完成，代价很低。因此，一个Go程序中可以创建成千上万个并发的goroutine。而且，所有的Go代码都在goroutine中执行，哪怕是go运行时的代码也不例外。</p>
<p>在提供了开销较低的goroutine的同时，Go还在语言层面内置了<mark style="background: #fefe00A6;">辅助并发设计</mark>
的原语：channel和select。开发者可以通过语言内置的channel<mark style="background: #fefe00A6;">传递消息或实现同步</mark>
，并通过select实现多路channel的<mark style="background: #fefe00A6;">并发控制</mark>
。相较于传统复杂的线程并发模型，Go对并发的原生支持将大大降低开发人员在开发并发程序时的心智负担。
<!--SR:!2022-11-13,3,250--></p>
<p>此外，并发的设计哲学不仅仅让Go在语法层面提供了并发原语支持，其对Go应用程序设计的影响更为重要。并发是一种程序结构设计的方法，它使得并行成为可能。</p>
<p>采用并发方案设计的程序在单核处理器上也是可以正常运行的，也许在单核上的处理性能可能不如非并发方案。但随着处理器核数的增多，并发方案可以自然地提高处理性能。</p>
<p>而且，并发与组合的哲学是一脉相承的，并发是一个更大的组合的概念，它在程序设计的全局层面对程序进行拆解组合，再映射到程序执行层面上：goroutines各自执行特定的工作，通过channel+select将goroutines组合连接起来。并发的存在鼓励程序员在程序设计时进行独立计算的分解，而对并发的原生支持让Go语言也更适应现代计算环境。</p>
<h3 id="面向工程">面向工程</h3>
<p>最后，我们来看一下Go的最后一条设计哲学：面向工程。</p>
<p>Go语言设计的初衷，就是<strong>面向解决真实世界中Google内部大规模软件开发存在的各种问题，为这些问题提供答案</strong>，这些问题包括：程序构建慢、依赖管理失控、代码难于理解、跨语言构建难等。</p>
<p>很多编程语言设计者和他们的粉丝们认为这些问题并不是一门编程语言应该去解决的，但Go语言的设计者并不这么看，他们在Go语言最初设计阶段就<strong>将解决工程问题作为Go的设计原则之一</strong>去考虑Go语法、工具链与标准库的设计，这也是Go与其他偏学院派、偏研究型的编程语言在设计思路上的一个重大差异。</p>
<p>语法是编程语言的用户接口，它直接影响开发人员对于这门语言的使用体验。在面向工程设计哲学的驱使下，Go在语法设计细节上做了精心的打磨。比如：</p>
<ul>
<li>重新设计编译单元和目标文件格式，实现Go源码<mark style="background: #fefe00A6;">快速构建</mark>
，让大工程的构建时间缩短到类似动态语言的交互式解释的编译速度；</li>
<li>如果源文件导入它不使用的包，则程序将无法编译。这可以充分保证任何Go程序的依赖树是精确的。这也可以保证在构建程序时<mark style="background: #fefe00A6;">不会编译额外的代码</mark>
，从而最大限度地缩短编译时间；</li>
<li><mark style="background: #fefe00A6;">去除包的循环依赖</mark>
，循环依赖会在大规模的代码中引发问题，因为它们要求编译器同时处理更大的源文件集，这会减慢增量构建；</li>
<li>包路径是唯一的，而<mark style="background: #fefe00A6;">包名不必唯一</mark>
的。导入路径必须唯一标识要导入的包，而名称只是包的使用者如何引用其内容的约定。“包名称不必是唯一的”这个约定，大大降低了开发人员给包起唯一名字的心智负担；</li>
<li>故意<mark style="background: #fefe00A6;">不支持默认函数参数</mark>
。因为在规模工程中，很多开发者利用默认函数参数机制，向函数添加过多的参数以弥补函数API的设计缺陷，这会导致函数拥有太多的参数，降低清晰度和可读性；</li>
<li>增加<mark style="background: #fefe00A6;">类型别名</mark> （type
alias），支持大规模代码库的重构。 <!--SR:!2022-11-13,3,250--></li>
</ul>
<!-- -->
<p>在标准库方面，Go被称为“自带电池”的编程语言。如果说一门编程语言是“自带电池”，则说明这门语言标准库功能丰富，多数功能不需要依赖外部的第三方包或库，Go语言恰恰就是这类编程语言。</p>
<p>由于诞生年代较晚，而且目标比较明确，Go在标准库中提供了各类高质量且性能优良的功能包，其中的<code>net/http</code>、<code>crypto</code>、<code>encoding</code>等包充分迎合了云原生时代的关于API/RPC
Web服务的构建需求，Go开发者可以直接基于标准库提供的这些包实现一个满足生产要求的API服务，从而减少对外部第三方包或库的依赖，降低工程代码依赖管理的复杂性，也降低了开发人员学习第三方库的心理负担。</p>
<p>而且，开发人员在工程过程中肯定是需要使用工具的，Go语言就提供了足以让所有其它主流语言开发人员羡慕的工具链，工具链涵盖了编译构建、代码格式化、包依赖管理、静态代码检查、测试、文档生成与查看、性能剖析、语言服务器、运行时程序跟踪等方方面面。</p>
<p>这里值得重点介绍的是<strong>gofmt</strong>，它统一了Go语言的代码风格，在其他语言开发者还在为代码风格争论不休的时候，Go开发者可以更加专注于领域业务中。同时，相同的代码风格让以往困扰开发者的代码阅读、理解和评审工作变得容易了很多，至少Go开发者再也不会有那种因代码风格的不同而产生的陌生感。Go的这种统一代码风格思路也在开始影响着后续新编程语言的设计，并且一些现有的主流编程语言也在借鉴Go的一些设计。</p>
<p>在提供丰富的工具链的同时，Go在标准库中提供了官方的词法分析器、语法解析器和类型检查器相关包，开发者可以基于这些包快速构建并扩展Go工具链。</p>
<h3 id="小结">小结</h3>
<p>好了，今天的课讲到这里就结束了，现在我们一起来回顾一下吧。</p>
<p>在这一讲中，我和你一起了解了Go语言的设计哲学：<strong>简单</strong>、<strong>显式</strong>、<strong>组合</strong>、<strong>并发和面向工程</strong>。</p>
<ul>
<li><strong>简单</strong>是指Go语言特性始终保持在少且足够的水平，不走语言特性融合的道路，但又不乏生产力。简单是Go生产力的源泉，也是Go对开发者的最大吸引力；</li>
<li><strong>显式</strong>是指任何代码行为都需开发者明确知晓，不存在因“暗箱操作”而导致可维护性降低和不安全的结果；</li>
<li><strong>组合</strong>是构建Go程序骨架的主要方式，它可以大幅降低程序元素间的耦合，提高程序的可扩展性和灵活性；</li>
<li><strong>并发</strong>是Go敏锐地把握了CPU向多核方向发展这一趋势的结果，可以让开发人员在多核时代更容易写出充分利用系统资源、支持性能随CPU核数增加而自然提升的应用程序；</li>
<li><strong>面向工程</strong>是Go语言在语言设计上的一个重大创新，它将语言要解决的问题域扩展到那些原本并不是由编程语言去解决的领域，从而覆盖了更多开发者在开发过程遇到的“痛点”，为开发者提供了更好的使用体验。</li>
</ul>
<p>这些设计哲学直接影响了Go语言自身的设计。理解这些设计哲学，也能帮助我们理解Go语言语法、标准库以及工具链的演化决策过程。
<!--SR:!2022-11-13,3,250--></p>
<p>好了，学完这节课之后，你认同Go的设计哲学吗？认同的话就继续跟着我学下去吧。</p>
<h3 id="思考题">思考题</h3>
<p>今天，我还想问下你，你还能举出哪些符合Go语言设计哲学的例子吗？欢迎在留言区多多和我分享讨论。</p>
<p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go语言的设计哲学感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>01｜前世今生：你不得不了解的Go的历史和现状</title>
    <url>/d4aab8012bf7f302cfc6518701329727fb336bb8/</url>
    <content><![CDATA[<h1
id="前世今生你不得不了解的go的历史和现状">01｜前世今生：你不得不了解的Go的历史和现状</h1>
<p>你好，我是Tony Bai。</p>
<p>今天是我们的第一堂课。第一堂课的开场，我要做的事很简单，就想跟你聊一聊Go语言的前世今生。</p>
<p>我一直认为，当你开始接触一门新语言的时候，你一定要去了解它的历史和现状。因为这样，你才能建立起对这门语言的整体认知，了解它未来的走向。而且，也能建立你学习的“安全感”，相信它能够给你带来足够的价值和收益，更加坚定地学习下去。</p>
<p>所以，在这一节课，我就来跟你聊聊Go的前世今生，讲清楚Go到底是一门怎么样的语言，Go又是怎么诞生的，它经历了怎样的历史演进，它的现状和未来又会如何？</p>
<p>无论后面你是否会选择学习Go语言，无论你是否会真正成为一名Go程序员，我都建议你先了解一下这些内容，它会让你对编程语言的发展有更进一步的理解。</p>
<p>首先，我们就来看看Go语言是怎么诞生的，这可以让你真实地了解Go的诞生缘由、设计目标，以及它究竟要解决哪些问题。</p>
<h2 id="go语言是怎样诞生的">Go语言是怎样诞生的？</h2>
<p>Go语言的创始人有三位，分别是图灵奖获得者、C语法联合发明人、Unix之父肯·汤普森（Ken
Thompson），Plan 9操作系统领导者、UTF-8编码的最初设计者罗伯·派克（Rob
Pike），以及Java的HotSpot虚拟机和Chrome浏览器的JavaScript
V8引擎的设计者之一罗伯特·格瑞史莫（Robert Griesemer）。</p>
<!-- [[[read_end]]] -->
<p>他们可能都没有想到，他们三个人在2007年9月20日下午的一次普通讨论，就这么成为了计算机编程语言领域的一次著名历史事件，开启了一个新编程语言的历史。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/93/75/93e91ef659a99c1e37d1fd54a8655375.png"
alt="Go语言之父们（从左到右分别是Robert Griesemer、Rob Pike和Ken Thompson）" />
<figcaption aria-hidden="true">Go语言之父们（从左到右分别是Robert
Griesemer、Rob Pike和Ken Thompson）</figcaption>
</figure>
<p>那天下午，在谷歌山景城总部的那间办公室里，罗伯·派克启动了一个C++工程的编译构建。按照以往的经验判断，这次构建大约需要一个小时。利用这段时间，罗伯·派克和罗伯特·格瑞史莫、肯·汤普森坐在一处，交换了关于设计一门新编程语言的想法。</p>
<p>之所以有这种想法，是因为<strong>当时的谷歌内部主要使用C++语言构建各种系统，但C++的巨大复杂性、编译构建速度慢以及在编写服务端程序时对并发支持的不足</strong>，让三位大佬觉得十分不便，他们就想着设计一门新的语言。在他们的初步构想中，这门新语言应该是能够给程序员带来快乐、匹配未来硬件发展趋势并适合用来开发谷歌内部大规模网络服务程序的。</p>
<p>趁热打铁！在第一天的简短讨论后，第二天这三位大佬又在谷歌总部的“雅温得（Yaounde）”会议室里具体讨论了这门新语言的设计。会后罗伯特·格瑞史莫发出了一封题为“prog
lang
discussion”的电邮，对这门新编程语言的功能特性做了初步的归纳总结：</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/51/59/5117b2eebcc06973f1cb8c43919dd059.png?wh=1736x996"
alt="Go语言第一版特性设计稿" />
<figcaption aria-hidden="true">Go语言第一版特性设计稿</figcaption>
</figure>
<p>这封电邮对这门新编程语言的功能特性做了归纳总结。主要思路是，<strong>在C语言的基础上，修正一些明显的缺陷，删除一些被诟病较多的特性，增加一些缺失的功能</strong>，比如，使用import替代include、去掉宏、增加垃圾回收、支持接口等。这封电邮成为了这门新语言的第一版特性设计稿，三位大佬在这门语言的一些基础语法特性上达成了初步一致。</p>
<p>9月25日，罗伯·派克在一封回复电邮中把这门新编程语言命名为<strong>“go”：</strong></p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/db/8d/dbfd32e0ec9d4cdaae96f07125f9198d.png?wh=1654x958"
alt="新编程语言被命名为“go”" />
<figcaption aria-hidden="true">新编程语言被命名为“go”</figcaption>
</figure>
<p>在罗伯·派克的心目中，“go”这个单词短小、容易输入并且在组合其他字母后便可以用来命名Go相关的工具，比如编译器（goc）、汇编器（goa）、链接器（gol）等（go的早期版本曾如此命名go工具链，但后续版本撤销了这种命名方式，仅保留go这一统一的工具链名称
）。</p>
<p>这里我还想澄清一个误区，很多Go语言初学者经常称这门语言为Golang，其实这是不对的：“Golang”仅应用于命名Go语言官方网站，而且当时没有用go.com纯粹是这个域名被占用了而已。</p>
<h2 id="从三人行到众人拾柴">从“三人行”到“众人拾柴”</h2>
<p>经过早期讨论，Go语言的三位作者在语言设计上达成初步一致后，便开启了Go语言迭代设计和实现的过程。</p>
<p>2008年初，Unix之父肯·汤普森实现了第一版Go编译器，用于验证之前的设计。这个编译器先将Go代码转换为C代码，再由C编译器编译成二进制文件。</p>
<p>到2008年年中，Go的第一版设计就基本结束了。这时，同样在谷歌工作的伊恩·泰勒（Ian
Lance
Taylor）为Go语言实现了一个gcc的前端，这也是Go语言的第二个编译器。</p>
<p>伊恩·泰勒的这一成果不仅仅是一种鼓励，也证明了Go这一新语言的可行性
。有了语言的第二个实现，对Go的语言规范和标准库的建立也是很重要的。随后，伊恩·泰勒以团队的第四位成员的身份正式加入Go语言开发团队，后面也成为了Go语言，以及其工具设计和实现的核心人物之一。</p>
<p>罗斯·考克斯（Russ
Cox）是Go核心开发团队的第五位成员，也是在2008年加入的。进入团队后，罗斯·考克斯利用函数类型是“一等公民”，而且它也可以拥有自己的方法这个特性巧妙设计出了http包的<code>HandlerFunc</code>类型。这样，我们通过显式转型就可以让一个普通函数成为满足<code>http.Handler接口</code>的类型了。</p>
<p>不仅如此，罗斯·考克斯还在当时设计的基础上提出了一些更泛化的想法，比如<code>io.Reader</code>和<code>io.Writer</code>接口，这就奠定了Go语言的I/O结构模型。后来，罗斯·考克斯成为Go核心技术团队的负责人，推动Go语言的持续演化。</p>
<p>到这里，Go语言最初的核心团队形成，Go语言迈上了稳定演化的道路。</p>
<p>2009年10月30日，罗伯·派克在Google
Techtalk上做了一次有关Go语言的演讲<a
href="https://github.com/golang/talks/blob/master/2009/go_talk-20091030.pdf">“The
Go Programming
Language”</a>，这也是Go语言第一次公之于众。十天后，也就是2009年11月10日，谷歌官方宣布Go语言项目开源，之后这一天也被Go官方确定为Go语言的诞生日。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/e4/6e/e451dc3957632b2ff20b66abe558ab6e.png?wh=1490x1110"
alt="谷歌宣布Go语言项目开源" />
<figcaption aria-hidden="true">谷歌宣布Go语言项目开源</figcaption>
</figure>
<p>在Go语言项目开源后，Go语言也迎来了自己的“吉祥物”，是一只由罗伯·派克夫人芮妮·弗伦奇（Renee
French）设计的地鼠，从此地鼠（gopher）也就成为了世界各地Go程序员的象征，Go程序员也被昵称为<strong>Gopher，</strong>
在后面的课程中，我会直接使用Gopher指代Go语言开发者。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/75/ab/756c7093c15eb32b5f9476b9fc5fcfab.png?wh=245x300"
alt="Go语言的吉祥物" />
<figcaption aria-hidden="true">Go语言的吉祥物</figcaption>
</figure>
<p>Go语言项目的开源使得Go语言吸引了全世界开发者的目光，再加上Go三位作者在业界的影响力以及谷歌这座大树的加持，更多有才华的程序员加入到Go核心开发团队中，更多贡献者开始为Go语言项目添砖加瓦。于是，Go在宣布开源的当年，也就是2009年，就成为了著名编程语言排行榜TIOBE的年度最佳编程语言。</p>
<p>2012年3月28日，Go 1.0版本正式发布，同时Go官方发布了“Go
1兼容性”承诺：<strong>只要符合Go
1语言规范的源代码，Go编译器将保证向后兼容（backwards
compatible），也就是说我们使用新版编译器也可以正确编译用老版本语法编写的代码</strong>。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/c7/0f/c7460540bc848ef7af36bcd373e3350f.png?wh=1920x1233"
alt="Go 1.0版本正式发布" />
<figcaption aria-hidden="true">Go 1.0版本正式发布</figcaption>
</figure>
<p>从此，Go语言发展得非常迅猛。从正式开源到现在，十一年的时间过去了，Go语言发布了多个大版本更新，逐渐成熟。这里，我也梳理了迄今为止Go语言的重大版本更新，希望能帮助你快速了解Go语言的演化历史。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/04/fa/042843f49a53faa6e208c76ef6ed75fa.png?wh=1920x505"
alt="Go语言大事记" />
<figcaption aria-hidden="true">Go语言大事记</figcaption>
</figure>
<h2 id="go是否值得我们学习">Go是否值得我们学习？</h2>
<p>时间已经来到了2021年。经过了十余年的打磨与优化，如今的Go语言已经逐渐成为了云计算时代基础设施的编程语言。你能想到的现代云计算基础设施软件的大部分流行和可靠的作品，都是用Go编写的，比如：Docker、Kubernetes、Prometheus、Ethereum（以太坊）、Istio、CockroachDB、InfluxDB、Terraform、Etcd、Consul等等。当然，这个列表还在持续增加，可见Go语言的影响力已经十分强大。</p>
<p>Go除了在云计算基础设施领域，拥有上面这些杀手级应用之外，Go语言的用户数量也在近几年快速增加。Go语言项目技术负责人罗斯·考克斯甚至还专门写过一篇文章，来估算全世界范围的Gopher数量。按照他的估算结果，全世界范围的Gopher数量从2017年年中的最多100万，增长到2019年11月的最多196万，大概两年半翻了一番。庞大的Gopher基数为Go未来的发展提供持续的增长潜力和更大的想象空间。</p>
<p><strong>那么Go语言前景究竟如何，值不值得投入去学习呢？</strong></p>
<p>我在想，是否存在一种成熟的方法，能相对客观地描绘出Go语言的历史发展趋势，并对未来Go的走势做出指导呢？我想来想去，觉得Gartner的技术成熟度曲线（The
Hype Cycle）可以借来一试。</p>
<p>Gartner的技术成熟度曲线又叫技术循环曲线，是企业用来评估新科技是否要采用或采用时机的一种可视化方法，它利用时间轴与该技术在市面上的可见度（媒体曝光度）决定要不要采用，以及什么时候采用这种新科技，下面就是一条典型的技术成熟度曲线的形状：</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/1c/00/1c0c3b9714f772dfd5a833f7d2959b00.jpeg?wh=1920x1080"
alt="Gartner技术成熟度曲线" />
<figcaption aria-hidden="true">Gartner技术成熟度曲线</figcaption>
</figure>
<p>同理，如果我们将这条技术成熟度曲线应用于某种编程语言，比如Go，我们就可以用它来判断这门编程语言所处的成熟阶段，来辅助我们决定要不要采用，以及何时采用这门语言。</p>
<p>我们从知名的TIOBE编程语言指数排行榜获取Go从2009年开源以来至今的指数曲线图，并且根据Go版本发布历史在图中标记出了各个时段的Go发布版本，你可以看看。</p>
<figure>
<img
src="https://static001.geekbang.org/resource/image/89/e9/89c8fa7961ef4b3812af319f22b0e1e9.png?wh=1884x1082"
alt="Go语言的技术成熟度曲线" />
<figcaption aria-hidden="true">Go语言的技术成熟度曲线</figcaption>
</figure>
<p>对比前面的Gartner成熟度曲线，我们可以得出这样的结论：Go在经历了一个漫长的技术萌芽期后，从实现自举的Go
1.5版本开始逐步进入“期望膨胀期”，在经历从Go 1.6到Go
1.9版本的发布后，业界对Go的期望达到了峰值。</p>
<p>但随后“泡沫破裂”，在Go 1.11发布前跌到了“泡沫破裂期”的谷底，Go
1.11版本引入了Go
module，给社区解决Go包依赖问题注射了一支强心剂，于是Go又开始了缓慢爬升。</p>
<p>从TIOBE提供的曲线来看，Go 1.12到Go
1.15版本的发布让我们有信心认为Go已经走出“泡沫破裂谷底期”，进入到“稳步爬升的光明期”。</p>
<p>至于Go什么时候能达到实质生产高峰期呢？</p>
<p>我们还不好预测，但这应该是一个确定性事件。我认为现在离它到达实质生产高峰期只是一个时间问题了。也许预计在2022年初发布的支持Go泛型特性的Go
1.18版本，会是继Go
1.5版本之后又一“爆款”，很可能会快速推动Go迈入更高的发展阶段。</p>
<h2 id="小结">小结</h2>
<p>到这里，我们今天这节课就结束了。在这一节课里，我们一起探讨了“Go从哪里来，并可能要往哪里去”**的问题。</p>
<p>我前面也说了，一门编程语言的历史和现状，能给你带来学习的“安全感”，相信它可以提升你的个人价值，也会让你获得丰厚的回报。你也会更加清楚地认识到：自己为什么要学习它？它未来的发展趋势又是怎样的？而且，当这门语言的现状能给予你极大“安全感”的时候，我们才会“死心塌地”地学习和钻研这门语言，而不会有太多的后顾之忧。</p>
<p>从Go本身的发展来看，和多数编程语言一样，Go语言在诞生后，度过了一个较长的“技术萌芽期”。然后，实现了自举，而且对GC延迟进行了大幅优化的Go
1.5版本，成为了Go语言演化过程中的第一个“引爆点”，推动Go语言进入“技术膨胀期”。</p>
<p>也正是在这段时间内，Go语言以迅雷不及掩耳盗铃之势推出了以Docker、Kubernetes为典型代表的“杀手级应用”，充分展现了实力，在世界范围收获了百万粉丝，迸发出极高的潜力和持续的活力。</p>
<p>Go开源于2009年末，如果从那时算起，Go才11岁。但在Go核心开发团队眼中，Go的真正诞生年份是2007年，距今已13个年头有余了。</p>
<p>回顾一下计算机编程语言的历史，我们会发现，绝大多数主流编程语言，都将在其15至20年间大步前进。Java、Python、Ruby、JavaScript和许多其他编程语言都是这样。如今Go语言也马上进入自己的黄金5～10年，从前面的技术成熟度曲线分析也可以印证这一点：Go已经重新回到“稳步爬升的光明期”。</p>
<p>对于开发人员来说，<strong>Go语言学习的最佳时刻已经到来了</strong>！</p>
<h2 id="思考题">思考题</h2>
<p>相较于传统的静态编译型编程语言（如C、C++），Go做出了哪些改进？你可以思考一下，欢迎在留言区留下你的答案。</p>
<p>感谢你和我一起学习，也欢迎你把这节课分享给更多对Go语言感兴趣的朋友。我是Tony
Bai，我们下节课见。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>6.资源</category>
        <category>GeekTime</category>
        <category>go语言第一课</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>打造一套知识笔记管理系统</title>
    <url>/d900dee185d8ce554c93d6941d722d630ca0eeec/</url>
    <content><![CDATA[<h2 id="一.-什么是知识管理系统">一. 什么是知识管理系统？</h2>
<p>文章开始前，我们先来问一个问题，什么是知识管理系统，它能帮助我们干啥？</p>
<p>那什么是知识管理系统呢？</p>
<p>我这里先不回答这个问题，我直接给你个场景你来看~</p>
<p><strong>假如你床头有 10
本书，你要在其中找到一本书，你会怎么找？</strong></p>
<p>你可能会说，扫一眼就找到了啊。</p>
<p>但是，假如你现在身处世界上最大的图书馆：美国国会图书馆，藏书超 2.1
亿本，现在你想在里边找到某一本书，请问你如何找？</p>
<p>一本一本翻吗？</p>
<p>累死你，2.1 亿这个数字我给你换算了一下，把 2.1
亿本书铺起来可绕地球近两圈。</p>
<p>不仅仅找书，图书馆每天还要在其中处理上千万次的查询、借书、还书、入库………</p>
<p>试问，假如你是图书管理员，仅凭借大脑，你能处理这么大的信息量么？</p>
<p>那么他们是如何是如何解决这些问题的？</p>
<p><strong>当然是靠着一套管理系统，让一切规律化，规则化，系统化，把人解放出来。</strong></p>
<p><img src="/images/1614591657.png" /></p>
<p>同理，<strong>我们的知识管理系统就相当于这个图书管理系统，而知识就如同这一本本图书，当有了套系统去管理它们以后，我们就相当于拥有了另外的一个大脑</strong>，如此就可以把我们大脑不擅长的东西，全部扔给这个外脑，让它帮助我们记忆，整理等等。</p>
<p>好了，通过以上，你知道了<strong>知识管理系统就相当于我们外接一个大脑</strong>，那么为什么说你必须建立外脑呢？</p>
<h2 id="二为什么你必须建立外脑">二：为什么你必须建立外脑？</h2>
<h3 id="大脑是用来思考的不是用来记忆的">1
大脑是用来思考的，不是用来记忆的。</h3>
<p>记忆，尤其是死记硬背，是最反人性的，进化论告诉我们，大脑只会记住最能帮助我们生存的信息，至于无关紧要的，它为了节省脑力资源会尽可能的忘记它们~</p>
<p>同样的大脑处理信息也是如此，它只能处理眼下的小部分信息，当面对大量信息处理的时候，它就会罢工。</p>
<p>我们平常用脑的时候，感觉思绪乱，头昏脑涨，就是因为大脑处理的信息已经超过了它的负荷，大脑的机制天生就不是为了记忆和处理大量信息而设计的！！！</p>
<p>但是在现实生活中，我们又需要处理和记住很多信息和知识点，以便使用的时候可以随用随取，那应该怎么办呢？</p>
<p>当然是建立外脑！！！</p>
<p>前面说了我们大脑不擅长的记忆和大规模信息管理，但这却是我们外脑所擅长的。我们的大脑会遗忘，但是外脑它永远也不会忘的，你建立的这个外脑就会和你的大脑形成互补，各发挥其所长。</p>
<p>正如上面的图书管理案例，我们不需要记住每本书的信息，我们想要的时候，只要知道怎么从图书管理系统中找到它们即可。</p>
<p>所以想发挥大脑真正的威力，就把它从记忆中解放出来，让它去思考，而不是让它去记忆。</p>
<p><img src="/images/1614591657.jpg" /></p>
<p>有同学看到这里可能会抬杠：有必要弄这么一个外脑吗，我大脑就够用了啊。</p>
<p>当你只想做个 “撸瑟”
的时候，觉得这辈子能搬个砖，扛个水泥就够了，那么你就可以离开了，因为你确实没有这个需求。</p>
<p>但是你想获得不断成长，要获得更强的能力，想要在社会的激烈竞争中有足够的竞争力，你的知识储备必然需要被扩大，这种情况下，你要靠脑子记忆吗？</p>
<p>回想你上学的生涯就知道了，那是多么痛的领悟~</p>
<p>正如上文案例，你只有十本书的时候，当然不需要建立外脑，想要啥扫一眼就够了，但是当你有
1000 本、10000 本、一百万、一个亿本的时候呢？</p>
<p>以上只是我们必须建立外脑的一个理由之一，除此之外，还有一个更重要的理由。</p>
<h3 id="外脑是为了帮助大脑更好的记住">2
外脑是为了帮助大脑更好的记住</h3>
<p>有逻辑关系的知识，你用的时候才能想起来。</p>
<p>为什么会这样说呢？</p>
<p>同样我们先不回答这个问题，给你来个小测试。</p>
<p>现在思考一下：我让你说水果的名字，你看看你能说出多少个水果。</p>
<p>你可能会说，这有什么难的：苹果，香蕉，梨、橘子、火龙果、西瓜….</p>
<p>但是你发现越往下，你思考的时间就越长，越说不出来。</p>
<p>你可以先暂停阅读试试~</p>
<p>那么我再换一个问题，请告诉如西红柿炒鸡蛋怎么做？</p>
<p>你可能想都不用想，直接就可以脱口而出：准备食材–&gt; 洗菜切菜—&gt;
爆锅开炒—&gt;…..</p>
<p>为什么会这样？</p>
<p><strong>因为前者大脑索引的是一个点一个点的信息，后者索引的一整个结构，一整套流程，一整张知识的网。</strong></p>
<p>你看，点状的东西被大脑索引是很困难的，但是有逻辑有结构的东西则不同，后者一索引就是一大片，一整个体系。当你把点状的知识编织成一张网后，它们就会形成你的思维模型，这样，你用的时候才能想起来。</p>
<p>很多人抱怨，学过的东西用不出来，反思一下，从小到大，你调用你知识储备的时候是不是都像是上面想水果一样，想到哪是哪。</p>
<p>仔细反思下：</p>
<blockquote>
<p>你整理过你的知识吗？</p>
<p>你的知识是成结构的吗？</p>
<p>你脑中有这么一张庞大的知识结构网吗？</p>
</blockquote>
<p>而把知识打入外脑的过程就是在编织你这张网，所以建立外脑的本质就是体系化你知识的过程！！！</p>
<p><img src="/images/1614591658.jpg" /></p>
<p>说了那么多，想必你已经知道建立『外脑』的重要性了，那么如何建立外脑呢？</p>
<h2 id="三如何建立外脑">三：如何建立外脑？</h2>
<p>在正式开始前，我们先了解下外脑是由什么构成的~</p>
<p>其实整个外脑就是由两个系统构成的~</p>
<p><strong>第一个是储存笔记的系统。<br />
第二个则是索引笔记的系统。</strong></p>
<p>这是什么意思呢？</p>
<p>你可以理解成<strong>一个放，一个拿</strong>，这里知道有这么个东西即可，后文会展开介绍。</p>
<p><img src="/images/1614592169.jpg" /></p>
<p>而整个外脑的搭建可以归纳为三步走~</p>
<blockquote>
<p>第一步：把收集知识有序的装进去。</p>
<p>第二步：把知识整理好，设立规则，以供随时提用。</p>
<p>第三步：用的时候可以迅速的把需要的知识拿出来。</p>
</blockquote>
<p>整篇文章的核心下面一张图就概括了，但是为了让你彻底搞定这件事，我会掰开了揉碎了，一步步手把手带你搭出你的知识管理系统。</p>
<p><img src="/images/1614591659.png" /></p>
<p>下面我们先从搭建存放笔记的储存体入手，从零开始搭建整个外脑系统~</p>
<h3 id="选择外脑载体">1、选择外脑载体</h3>
<p>一台能正常跑的电脑系统，前提就是主机，显示屏这些硬件载体，你操作系统再牛逼，没有主机你也跑不起来。</p>
<p>同理，我们的外脑的搭建也是如此，所以建立外脑的第一步，就是找到外脑的载体，即存放我们知识的工具。</p>
<p>那么市面上提供给我们现成的外脑载体都有哪些呢？</p>
<p><img src="/images/1614591659.jpg" /></p>
<p>太多太多了，主流的有道云笔记、印象笔记、onenote
等，都可以作为我们外脑的载体，它们各有优缺点，想详细了解的同学请自行了解，我这里就不展开了，大家凭借喜好选择，总之，都是现成的，任君选择~</p>
<p>我本人的外脑载体为有道云笔记，下文演示，均以此笔记做案例，其他载体同理~</p>
<p><strong>当我们确定了大脑的载体以后呢？</strong></p>
<p>建立几个文件夹后，就开始一顿操作猛如虎，类似下面这样的吗？</p>
<p><img src="/images/1614591660.jpg" /></p>
<p><strong>这样的外脑系统有什么问题呢？</strong></p>
<p>① 层次结构混乱：这样长长的列下来，我不知道你头大没有，别说提取了，我单单看到这一串，头就先大一圈了。</p>
<p>因为这样混乱的结构，含糊其辞的目录，会让你翻看这些东西的时候，对这种凌乱有一种厌恶感。</p>
<p>② 提取困难：混乱的内容，会让真正用的时候找不到，所有的笔记，如果用的时候找不到，或者需要很大的功夫才能找到，那这个外脑系统就没多大意义了。</p>
<p>当你笔记内容少的时候，你还能记得那是哪，但是当大到一定量级了呢，你的外脑一定会崩溃。</p>
<p>③ 知识碎片化：以上所建立的文件夹，之间都是割裂的，笔记与笔记间连接不起来。</p>
<p>我们在文章开始的时候就说了，外脑的作用除了帮我们承担记忆的负担，还有一项职能就是辅助我们大脑为我们建立起知识体系，如果你的笔记之间都是一个个散乱的点，那么外脑的意义就要被砍掉一半。</p>
<p>一句话来说，上面的那些都不是一个好的外脑，因为它并没有解决我们为什么建立外脑的本质问题。</p>
<p><strong>那么什么是好的外脑呢？</strong></p>
<p>① <strong>知识结构体系化</strong>：笔记与笔记间的知识点不分散，不是乱七八糟的，不是碎片化的。</p>
<p>② <strong>方便管理</strong>：看到不头大，结构清晰，一目了然。</p>
<p>③ <strong>提取高效</strong>：最好高效到如同探囊取物，想到就能秒拿到。如果这一点满足不了，找一个想要的信息要半天，那么这套系统就没有多少意义。</p>
<p><img src="/images/1614591661.jpg" /> <!--SR:!2022-11-14,10,250--></p>
<p>好了，到了这里你知道了，一个好的外脑的标准，随着而来的一个问题就是，如何才能让你的外脑达成以上标准。</p>
<p><strong>那么如何让外脑满足以上条件呢？</strong></p>
<p>正如电脑的 windows 系统一样，装上了，我们就无需用乱七八糟反人性的 dos
命令去让计算机工作，所有的一切都有序的跑在这套清爽的图形化系统之上。</p>
<p>同理想让外脑不乱，你必须部署一套规则化的操作系统，让我们的知识笔记全部跑在这套管理系统之上，保证底盘不乱，根基稳，而不是随性而建。</p>
<p>所以找到载体之后，不是一顿操作猛如虎，而是要给我们的外脑装上一个类似
windows 一样的底层系统，而我们这套跑在外脑载体上的系统就是 GTD
系统，所以我们建立外脑的第二步就是给它装上这套系统。</p>
<h3 id="部署-gtd-操作系统">2、部署 GTD 操作系统</h3>
<h3 id="什么是-gtd-系统">什么是 GTD 系统？</h3>
<p>GTD 的英文全称是：Getting Things Done</p>
<p>这是由著名的时间管理人戴维・艾伦在他的著作《尽管去做》里提出的一套<strong>移动硬盘式的任务管理方法，它的核心精髓是把所有待办任务都从大脑里移出去，清空大脑，用外部的工具去管理任务，让大脑的全部资源都用来思考，而又不会遗漏任何一件事。</strong></p>
<p>部署了 GTD 系统在笔记本上，我们就可以借助 GTD
的工作流，不仅拥有了知识管理系统，而且还把我们的日程管理系统也都囊括其中了，极大幅度的解放了我们的大脑。</p>
<p><img src="/images/1614591661-1.jpg" /></p>
<h3 id="如何部署-gtd-系统到笔记本上">如何部署 GTD 系统到笔记本上？</h3>
<p>GTD 工作流总共有 5 个步骤：==收集、厘清、整理、归档、回顾==。</p>
<p>而把它用到我们的外脑上就变成了<strong>信息管理流</strong>，同样也是五个步骤：</p>
<p>GTD 信息流：收集箱、等待处理、将来可能、归档资料、专题研究。
<!--SR:!2022-11-14,10,250--></p>
<p><img src="/images/1614591662.png" /></p>
<p>什么意思呢？</p>
<p>下面分别介绍一下，我们设置的这五个文件夹可以干什么。</p>
<h3 id="收集箱">收集箱</h3>
<p>这个就相当于你在各大平台点的收藏，比如我们拿手机刷到好文了（比如这篇文章哈~），我们就可以把各大平台的好文，一键集中扔到这个收集箱中。</p>
<p>这个东西的作用就是负责收集，你不必操心该放到那个分类，所有的好东西，一股脑扔进去就
OK 了，这样就可以大幅度的解放我们分类归类的时间。</p>
<p>等到了一个固定的时间，比如晚上统一处理，这样既不打断我们当前手头的事情，同时又确保了收藏的文件不会乱七八糟，又能让你认真的评估和精读这篇文章，确保进入你笔记的都是精品。</p>
<p><img src="/images/1614591663-1.jpg" /></p>
<h3 id="等待处理">等待处理</h3>
<p>这个文件夹承载我们当天的日程，备忘录，记事本，沉思录、日记本等等。</p>
<p>你应该有体会，大脑凭记忆力处理这些事情有多坑爹，我们就可以把这些大脑不擅长的事情交给外脑处理。</p>
<p><strong>把日程，待办事项等全部移到这个文件夹里，把这些事情全部从大脑中清理出去，想知道接下来要做什么事情直接来翻这个文件夹</strong>，效率高的飞起。</p>
<p><img src="/images/1614591663.jpg" /></p>
<h3 id="将来可能">将来可能</h3>
<p>这里主要承载计划、规划、想法、点子类的东西。</p>
<p>比如你看到了一个点子，发现了一个项目，你就可以先把它扔到这里，作为你的灵感库。</p>
<p><img src="/images/1614591664.jpg" /></p>
<h3 id="归档资料">归档资料</h3>
<p>这个是我们的知识的大本营，最终所有的信息和笔记都会被归入到这个文件夹中，我们收集到的信息通过整理完毕以后，就放入这里，以供随手复习和使用的时候随时调取。</p>
<p><img src="/images/1614591664-1.jpg" /></p>
<h3 id="专题研究">专题研究</h3>
<p>比如我最近对唱歌比较感兴趣，那么我就可以单独这专题这里建立一个文件夹，专门服务于唱歌，当研究出成果了，再把它归入到归档资料中。</p>
<p><img src="/images/1614591665.jpg" /></p>
<p>当你在你的笔记本上，创建了这个 5 个文件夹后，你的 GTD
系统就部署完成了。</p>
<p>你看，部署了 GTD，通过 GTD
来处理信息后，你的外脑是不是特别有层次感，是不是感觉外脑像是有了灵魂一样~，而不是类似于上面那四个笔记长长的一串。</p>
<p><img src="/images/1614591665-1.jpg" /></p>
<p>那么部署完 GTD 系统后就完了吗？当然不是。</p>
<p>完成了最底层系统的搭建，我们就要开始去处理输入进来的笔记了，前面说了，最终所有的笔记都会被汇总归档到『归档资料』这个文件夹之中，所以我们管理笔记的核心就在此文件夹中。</p>
<p>但是那么多的笔记，怎么去管理啊，还是像上面图中那四个案例一样，列出长长的一串文件夹吗？</p>
<p>下面我们进入本文的第三个模块，来解决以上问题。</p>
<h3 id="规则化信息">3、规则化信息</h3>
<p>给外脑立结构、给笔记立规矩~</p>
<p>我们都知道无规矩不成方圆，如果归入进来的笔记没有规则，那就会乱七八糟，完全没效率可言，所以<strong>我们必须要给输入进来的笔记进行处理，教给它们规矩，让它们变得清晰有规律，只有这样，你提取它的时候才能迅速找到你想要的。</strong></p>
<p>但是要设立那些规矩呢？如何设立呢？</p>
<p>下面提供四大原则，保证让你的笔记规规矩矩的。</p>
<h3 id="最简层原则">最简层原则</h3>
<p>什么是最简层原则？</p>
<p>所谓最简层原则就是<strong>让文件夹尽可能的少，层级尽可能的少</strong>，因为只有数量少，你看起来才不会头大，如果还是一层又一层的文件夹，那就和前面你看到的那四张笔记没啥差别了。</p>
<p>那么如何才能尽可能的少呢？</p>
<p>当然是找一个<strong>可以把所有东西都包括进来的维度，它符合之前文章提到的
MECE 原则，既涵盖了所有笔记特性，又不遗漏，同时又不冗长。</strong></p>
<p>我这里就提供给你一个这样的维度，以笔记的 “用处”
这一个维度进行划分，即：『学习』『工作』『生活』。</p>
<p>你可以随便想，从用处来论，任何笔记都不会逃过这个三个分类的，所以它是符合
MECE
的，我们就以它作为划分知识的标准，作为『归档资料』的打底文件夹，这样我们就实现了最简层。</p>
<p><img src="/images/1614591666.jpg" /></p>
<p>打底文件夹有了，我们就需要根据自己的需求对文件夹做一些进一步细分，但如果你还是建立一串文件夹，整个笔记体系必然会乱，那么如何管理下一级的文件夹呢？</p>
<p>这就用到了让你笔记规矩的第二个原则！！！</p>
<h3 id="目录编码原则">目录编码原则</h3>
<p>什么是目录编码原则？</p>
<p>你可以先思考下这个问题，一本书有那么多的知识点，它是怎么排版才让内容清晰一目了然的？</p>
<p>当然是把图书知识结构整理成目录按照层次编码啊，如下图，这样你看起来结构就会非常清晰，一目了然~</p>
<p>同理，我们对文件夹的层级管理，同样采用这种方式，让文件夹的层级与层级之间建立起逻辑关系。</p>
<p><img src="/images/1614591667.jpg" /></p>
<p>那如何目录编码呢?</p>
<p>这里不进行赘述，我给你做了一张图，扫一眼估计你就会了。</p>
<p><img src="/images/1614591667-1.jpg" /></p>
<p>除了建立起清晰的逻辑层次外，为什么你一定要用目录编码？</p>
<p>因为有了目录编码后，笔记就能实现自动排序！！</p>
<p>云笔记一般都是按照名称排序的，比如，数字 1 在数字 2 前面，字母 A
在字母 B 前面，如此就会非常有序，可参考微信好友目录哈~</p>
<p>如果你没给它这样规则化命名，则会出现乱序情况，会让笔记看起来乱七八糟的，但如果你设置了编码，就能实现自动排序，非常爽啊~</p>
<p><strong>所以我们采用图书目录编码，一箭双雕，不仅让结构逻辑层次清晰，而且还能实现自动排序。</strong></p>
<p>以上我们说了让你笔记规矩的四个原则的前两个原则，有了它们可以让你的笔记结构层次有了一个质的提升，但仅仅是层次清晰还远远不够，想要你的笔记规矩，你还需要第三个原则。</p>
<h3 id="统一命名原则">统一命名原则</h3>
<p>什么是统一命名的原则？</p>
<p>即：无论是文件夹还是笔记本身，都要遵循一套标准的命名原则，只有这样你的笔记才不会乱，切记把笔记命名成这样的无格式笔记，一旦养成这样的习惯，后期会让你有一种想锤死你自己的感觉，相信我~</p>
<p><img src="/images/1614591668.jpg" /></p>
<p>那么用什么标准命名呢？怎么命名？</p>
<p>下面我给出三个方法，让你解决这个问题。</p>
<h3 id="用黄金圈法则命名文件夹">1. 用黄金圈法则命名文件夹</h3>
<p>你学习的任何一个知识点或专题都逃不过黄金圈的终极三问，即：<strong>是什么（what）、为什么（why）、如何做（how）。</strong></p>
<p>比如你想研究演讲的话题，那么你就可以创建三个文件夹：</p>
<blockquote>
<ol type="1">
<li><p>什么是演讲？（what is 演讲）</p></li>
<li><p>为什么要学习和训练演讲？（why 演讲）</p></li>
<li><p>如何训练演讲？（how to 演讲）</p></li>
</ol>
</blockquote>
<p>当你创建了这个三个文件夹后，你就可以把演讲相关的所有知识点按照黄金圈分出的三个文件夹分别归属，如此每个文件夹对应啥内容，一眼望穿~</p>
<p>你看，三个文件夹解决一切，而且看起来是那么的清晰，那么的一目了然~~
<!--SR:!2022-11-14,10,250--></p>
<p><img src="/images/1614591669.jpg" /></p>
<h3 id="笔记文件规范化命名">2. 笔记文件规范化命名</h3>
<p>上面讲的是文件夹的命名方法，这里则是具体到的某个笔记文件命名。</p>
<p>这里也没有太多可讲的，我给你做了一张图，提供了一个公式，你看一眼就秒懂了。</p>
<p><img src="/images/1614591669-1.jpg" /></p>
<p>规则化命名，效果示范~~</p>
<p>你看，这样的笔记标题命名和上图的两小人那张笔记标题命名，那个看起来让人爽？</p>
<p><img src="/images/1614591670.jpg" /> <!--SR:!2022-11-14,10,250--></p>
<h3 id="意义不明的层坚决不要">3. 意义不明的层，坚决不要。</h3>
<p>很多同学在整理笔记到时候都会建一个『其他』的文件夹，请问，你这个『其他』是什么？</p>
<p>你之所以建这个『其他』就是因为，<strong>你也搞不通某个笔记文件属于那个类别了，不好分类的所幸一股脑的扔到这里边。</strong></p>
<p>我告诉你，你在用的时候是根本不会去翻『其他』这个分类的，因为它在你脑中就没有啥概念，你都不知道你放了些啥，应该放些啥，又怎么能指望提取的时候找到呢？</p>
<p>所以，这种意义不明的层，坚决不要。</p>
<p><img src="/images/1614591670.png" /></p>
<p>到了这里，你知道了让笔记规矩的三个原则，但是仅仅知道以上三个原则，还不能让它们很规矩，想要他们更规矩一些，你还需要第四个原则。
<!--SR:!2022-11-14,10,250--></p>
<h3 id="标签化原则">4 标签化原则</h3>
<p>什么是标签化原则？以及为什么要用标签去管理我们的笔记？</p>
<p>我先不回答这个问题，给你出道小题~</p>
<p>假如让你给伟人归类，你会把毛爷爷归到哪一类？</p>
<p><img src="/images/1614591671-1.jpg" /></p>
<p>你会把毛爷爷归到政治家？思想家？军事家？……
抱歉，这些头衔毛爷爷都占了~</p>
<p><img src="/images/1614591671.jpg" /></p>
<p>你看，你是没有办法把他按单一的维度归类的。</p>
<p>如果你单一的把毛爷爷归到一个分类中，比如
“诗人”，那么搜索其他分类，就找不到毛爷爷了，那你就把毛爷爷给定住在某个分类中了，这样做就是有漏的，同理，我们再来看个案例~</p>
<p>你会把前两年大火的《战狼
2》归到什么分类中？你能对它进行单一归类吗？</p>
<p><img src="/images/1614591673.jpg" /></p>
<p>我们之前的文章中讲维度的时候就已经说了，<strong>任何一件事物都可以有很多个维度，如果你把某事物按照一个维度归类，你就相当于把它给定死了。</strong></p>
<p>同理我们的知识依旧如此，很多人的笔记之所以没有效率，用的时候找不到，很大的原因就是你把知识给限定死了。
<!--SR:!2022-11-14,10,250--></p>
<p>比如你学到了一个写作技巧 “如何煽情” ~</p>
<p>如果你单纯的把这个技巧归入到 “写小说”
这个分类中，只有写小说的时候，你才会想起它，那么这个这个知识点就让你学死了，因为这个技巧完全可能套用到写文案，写报告等等….</p>
<p>那么如何解决这个问题呢？</p>
<p>这就回答了上面，为什么要用标签来管理笔记了的问题了。</p>
<p>打标签就是为解决这个问题设置的，你可以给一个知识点打上无数个标签，当你搜索任何一个标签维度的时候都能够索引到这个知识点。</p>
<p>正如上面案例中，只要你给毛爷爷打上了标签，无论你搜 XX
家，都能找到毛爷爷。而《战狼
2》中你搜索商业片也能找到它，搜索战争片也能找到它，搜索吴京也能找到它….</p>
<p>如此，我们就不用纠结于某个知识点具体该归入『储存体』的那个文件夹中，无论是你放到那，只要标签打上了，就不用担心索引问题。</p>
<p>当你部署了一系列标签的时候，你的知识就活了。</p>
<blockquote>
<p>比如：『记忆』这个标签，当你想要这个标签的内容的时候，云笔记就会帮助你，把所有这个被你标记过这个标签的文章给找出来</p>
<p>无论它是你过去的读书笔记，或者是电视剧看到的，演讲听到的，课程中学到的，总之，只要包含这个标签的，一股脑的都会给你抓出来，供你调遣使用……</p>
</blockquote>
<p><img src="/images/1614591673.png" /></p>
<p>下面给你展示一下，我是如何给一个课程打标签的！！！</p>
<p><img src="/images/1614591674-1.png" /></p>
<p>好了
，看到这里你可能会说，完成以上部署，笔记的整体效率是高了很多，知识也给盘活了，但是以上知识之间仍然是割裂的。</p>
<p>笔记与笔记间仍然形成不了体系，而且笔记量和标签一多，标签本身也就乱了，都不知道标签那个是哪个了，那如何解决这一系列问题呢？</p>
<p>下面，我们就进入本文的最后一个模块，部署索引体，让你的外脑的效率彻底飞起来~~</p>
<h2 id="四部署索引体系统">四：部署索引体系统</h2>
<h3 id="什么是储存体和索引体系统">1 什么是储存体和索引体系统？</h3>
<p>储存体就是我们以上忙活的，那都是在部署储存体的系统，即在文件夹里的那一套。</p>
<p>我们前面说了，我们通过标签调取笔记或信息，而索引体系统，就是把标签与标签之间也建立起逻辑关系，形成体系和结构，最后内化成我们的知识体系。</p>
<p>一句话解释，<strong>储存体用于管理 “文件夹的系统”，而索引体则用于管理
“标签的系统”。</strong></p>
<p>为了让两者更有辨识度，文件夹系统作为储存体识别符号『C』，标签系统作为索引体，识别符『S』。</p>
<p><img src="/images/1614591674.png" /></p>
<h3 id="如何搭建索引体">2 如何搭建索引体？</h3>
<p>① 底层系统搭建</p>
<p><strong>储存体有 GTD
作为底层操作系统，那么索引体同样也应该有操作系统作为分类。</strong></p>
<p>索引体的分类规则就是我们前文说的『学习』、『工作』、『生活』三个分类，因为你笔记上所有的东西都逃不过这三点，它是符合
MECE 的。</p>
<p><img src="/images/1614591676.png" /></p>
<p>工作和生活的分类我这里不多介绍，因为这个体系不体系无所谓，大家按照自己的喜好打标签即可。</p>
<p>这里主要介绍的是『学习』，因为这才是承载我们知识标签的大本营，我们所有的知识标签都以这个分类为底。</p>
<p>那么在『学习』这个分类底下，应该怎么去构建知识架构呢？</p>
<p>② 一个维度分类所有知识标签</p>
<p>体系的构成一定有底层分类作为支撑的，所以想要把零散的标签，编织成系统就需要对他们进行分类，那么从作用的维度，你会把
“所有的知识” 标签分成哪几类？</p>
<p>可能每个人都有自己的标准~</p>
<p>我本人按照和参考了 “儒家的最高理想”
把一个人的一生所有的知识分成了四类：
<strong>即：修身的知识、齐家的知识、治国的知识、平天下的知识~</strong>
哈哈，比较中二，不过我看着很顺眼，这个分类仅供参考，如果你也觉得这个维度不错，可以直接拿去用~</p>
<p><img src="/images/1614591676-1.png" />
<!--SR:!2022-11-14,10,250--></p>
<p>好了，有了这个维度，你就可以把你在储存体里打上的标签，按照这四个维度，分门别类的整理在这里边即可，我截取一段我『索引体』系统中的整理效果，供大家参考~</p>
<p>你可以看出来，当『索引体』逐渐完善以后，它就是一套完整，清晰的知识体系~~</p>
<p><img src="/images/1614591677.png" /></p>
<p>③ 区别符号</p>
<p>你可能看到索引体中每个对象的前面都有个符号，有的符号是『 #
』有的符号是『 – 』，这是什么意思呢？</p>
<p>这两个符号是区别符号，前面有『 # 』的，说明它是标签，而前面有『 –
』的说明它不是标签。</p>
<p><strong>这些东西的存在仅仅是为了连接标签，把标签串联成系统的连接符号，帮助我们看的更清晰，更有结构和层次感，它们是不参与索引的。</strong></p>
<p>当然『 – 』符号你可加可不加，但是『 #
』这个符号，我建议一定要加上，原因会在下面说。</p>
<p>④ 通过『索引体』快速提取内容</p>
<p>当一切都搭建完毕以后，剩下的就是我们提取东西的时候了，你可以通过单击标签提取，但是我最常用的就是搜索提取，想要啥，直接搜索，如探囊取物一样酸爽。</p>
<p>比如：在我笔记中，我搜索『写作』这个标签，你看~，云笔记会把我打这个标签的所有内容都给我找了出来。</p>
<p>无论是我个人的随手感想、我读书的笔记，或者我收集到的任何东西，只要它是在这个标签之下，瞬间提取~~</p>
<p><img src="/images/1614591677-1.png" /></p>
<p>⑤ 如何让提取效率更高？</p>
<p>我们在实际的提取笔记的场景中，经常会遇到一个问题~</p>
<p>比如一本书的读书笔记，就在这一篇笔记中，它就可能涵盖无数个知识点，即使我用标签定位到了这篇笔记，想要找到笔记中的我想要的东西，也要翻看好久，那么有没有瞬间就能找到我想要的信息的方法呢？</p>
<p>有的，解决方案就是在笔记文件内处处打标签，如此可以瞬间找到我们想要的内容。</p>
<p>比如下图，我就在这个笔记的某一处的知识点，打上了三个标签，当我需要找这三个标签任意一个的时候，云笔记会迅速帮我找到它所在的位置，并且打上高亮，这样整篇文章都变成了我标签系统中的一个个知识点，它不再属于原作者，而是属于我体系中的一部分。</p>
<p>这就回答了上面所说的为什么要在标签上加一个
<code>#</code>，原因就在这，如果你不加这个 #识别符号
，搜索到的东西就会乱七八糟，异常痛苦啊，这是坑，我已经替你们踩过了~</p>
<p><img src="/images/1614591678.png" /></p>
<p>好了，到了这里，整篇文章也到了结尾了，这个剩下的你只需要在不断的学习过程中去完善和填充这个骨架，最终它就会形成一张庞大的知识结构网，到时候你就神功大成，就可以任意纵横了。</p>
<p><strong>打造完毕后的注意事项</strong></p>
<p>打造完毕后最重要的事情是什么？</p>
<p><strong>1. 把笔记软件本身玩熟</strong></p>
<p>因为这篇文章不是介绍软件功能的，所以几乎没有提到软件本身提供给我们的功能，包括日程模板、思维导图、ORC
等等太多太多了…..</p>
<p>你要是懂得笔记软件提供给我们的各种功能，那么你一定可以玩的非常
6，这个大家请自行了解，网上有的是介绍的，我这里不进行赘述了。</p>
<p><strong>2. 规律性的清理收集箱</strong></p>
<p>正如你装修房子一样，在装修的时候你可以一次性装修的美轮美奂，但是在生活中如果你邋邋遢遢，臭袜子，脏东西到处扔，很快你的新房子也就破旧了，想要让他一直焕然一新，高效运行，你就必须养成干净，卫生，自律的生活习惯。</p>
<p>同理我们的笔记系统依然如此，我们这次打造了一套超级牛逼的系统，但是如果你收集到的资料，长期堆积在收集箱中不去清理，内容被到处归类，那么这套系统很快就会被你搞残。</p>
<p>所以你的习惯，才是保持这套系统高效运转的关键！！！！！！！！</p>
<p>我个人的清理习惯是，每个周末拿出固定的时间，清理一次收集箱，当然如果你比我勤快，且时间充裕，完全可以一天一清理，这样肯定会更好。</p>
<p><strong>3. 迭代内容，删掉过时的东西，填充空白的内容。</strong></p>
<p>刚开始建立起你的外脑的时候，不可能一下子就建成类似我外脑那样的丰富，肯定会有很多需要完善的地方，不断迭代，更新，这才是你的外脑能持续运转，并且越用越顺手的核心。</p>
<p>最后提醒一句：外脑要时常翻阅，只有你时常翻阅它，它才会内化到你的大脑中。</p>
<p><img src="/images/1614591678-1.png" /></p>
<p>文章到这里就结束了，下面我们把上面的内容总结一下！！！</p>
<h2 id="小结一下">小结一下</h2>
<h3 id="一什么是知识管理系统">一：什么是知识管理系统？</h3>
<p>知识管理系统就是帮助我们管理和记忆知识的第二大脑，外脑。
<!--SR:!2022-11-14,10,250--></p>
<h3 id="二为什么要搭建外脑">二：为什么要搭建外脑？</h3>
<ol type="1">
<li><p>信息量多了，我们的大脑是无法记住的，我们需要通过别的方式<mark style="background: #fefe00A6;">记住</mark>
它，并且在用的时候，可以随手提取。</p></li>
<li><p>搭建外脑，本身就是把零碎的东西<mark style="background: #fefe00A6;">体系化</mark>
的过程，就是搭建知识体系的过程，大脑喜欢有结构的东西。
<!--SR:!2022-11-14,10,250--></p></li>
</ol>
<h3 id="三如何搭建外脑">三：如何搭建外脑?</h3>
<p>外脑的构成分成两个部分，第一部分为储存体搭建，第二部分为索引体搭建。</p>
<p>①：搭建储存体</p>
<blockquote>
<p><strong>什么是储存体？</strong></p>
<p>储存体就是管理文件夹、储存笔记的系统</p>
<p><strong>如何搭建储存体？</strong><br />
1. 以 GTD 信息流作为底层系统</p>
<ol start="2" type="1">
<li>规则化信息需要遵循四大原则，即：</li>
</ol>
<p>（1）最简层原则<br />
（2）目录编码原则<br />
（3）统一命名原则<br />
（4）标签化原则 <!--SR:!2022-11-14,10,250--></p>
</blockquote>
<p>②：搭建索引体</p>
<blockquote>
<p><strong>什么是索引体？</strong></p>
<p>索引体就是管理标签的系统。</p>
<p><strong>如何搭建索引体？</strong></p>
<ol type="1">
<li><p>以『学习』、『工作』、『生活』三分类为底层。</p></li>
<li><p>用一个维度涵盖所有『学习』的知识标签：修身的知识、齐家的知识、治国的知识、平天下的知识。</p></li>
</ol>
<p>如何进一步提升索引效率？</p>
<p>笔记内处处打标签 <!--SR:!2022-11-14,10,250--></p>
</blockquote>
<p>③：保证外脑的高效运转</p>
<blockquote>
<ol type="1">
<li><p>玩转笔记软件功能</p></li>
<li><p>规律的清理收集箱</p></li>
<li><p>不断的填充完善，迭代更新笔记。
<!--SR:!2022-11-14,10,250--></p></li>
</ol>
</blockquote>
<p><strong>全文复习导图</strong></p>
<p><img src="/images/v2-30e62eda1a5708b882269c27fe416175_r.jpg" /></p>
<p>原文：https://zhuanlan.zhihu.com/p/191519306</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Learn</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Node child_process 多进程</title>
    <url>/8b82868aaab31a34fa4ba830d7fa0092f301a021/</url>
    <content><![CDATA[<h2 id="关于-childprocess-类">关于 ChildProcess 类</h2>
<p>1、<code>ChildProcess</code> 类的实例都是 <a
href="http://nodejs.cn/s/pGAddE"><code>EventEmitter</code></a>，表示衍生的子进程<br />
2、每个实例都有 stdout, stdin, stderr 三个流对象<br />
3、通过 fork 产生的子进程与父进程可以用 send 方法及监听 message
事件来相互通信<br />
4、 几个事件： error , message , exit , close , disconnect
<!--SR:!2022-11-13,10,250--></p>
<h2 id="child_process-创建异步进程方法">child_process
创建异步进程方法</h2>
<p>以下四个方法均返回 ChildProcess 的实例</p>
<h3 id="child_process.exec">child_process.exec</h3>
<p>语法：<code>child_process.exec(command[, options][, callback])</code>
注意：<br />
1、command 是一个 shell 命令的字符串，包含了命令的参数<br />
2、可以使用 callback；<br />
3、衍生一个 shell 然后在该 shell 中执行 command，command 一般是 shell
内置的 命令，如 ls,cat 等，也可以是 shell 脚本组成的文件，如 start.sh 等
<!--SR:!2022-11-13,10,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数版</span></span><br><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;cat *.js missing_file | wc -l&#x27;</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stdout: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`stderr: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 版</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> exec = util.<span class="title function_">promisify</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">lsExample</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; stdout, stderr &#125; = <span class="keyword">await</span> <span class="title function_">exec</span>(<span class="string">&#x27;cat *.js missing_file | wc -l&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout:&#x27;</span>, stdout);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stderr:&#x27;</span>, stderr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">lsExample</span>();</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.execfile">child_process.execFile</h3>
<p>语法：<code>child_process.execFile(file[, args][, options][, callback])</code>
注意：<br />
1、与 exec
的不同是，命令的参数不能放在第一个参数，只能作为第二个参数传递；<br />
2、默认情况下不会衍生 shell，指定的可执行 file
直接作为新进程衍生，使其比 child_process.exec() 稍微更高效<br />
3、file 是要运行的可执行文件的名称或路径，如 node.exe，不能是 start.js
这种脚本文件 <!--SR:!2022-11-13,10,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 回调函数版</span></span><br><span class="line"><span class="keyword">const</span> &#123; execFile &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> child = <span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;--version&#x27;</span>], <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// promise 版</span></span><br><span class="line"><span class="keyword">const</span> util = <span class="built_in">require</span>(<span class="string">&#x27;util&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> execFile = util.<span class="title function_">promisify</span>(<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">execFile</span>);</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; stdout &#125; = <span class="keyword">await</span> <span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;--version&#x27;</span>]);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getVersion</span>();</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.fork">child_process.fork</h3>
<p>语法：<code>child_process.fork(modulePath[, args][, options])</code>
注意：<br />
1、该接口专门用于衍生新的 Node.js 进程<br />
2、modulePath 是要在 node 子进程中运行的模块，由于是 node.js
的进程，所以可以是 start.js 这种 js 文件<br />
3、无回调，参数要以第二个参数传入<br />
4、返回的子进程将内置一个额外的 ipc
通信通道，允许消息在父进程和子进程之间来回传递。
<!--SR:!2022-11-13,10,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IPC 通道</span></span><br><span class="line"><span class="comment">// parent.js</span></span><br><span class="line"><span class="keyword">var</span> child_process = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = child_process.<span class="title function_">fork</span>(<span class="string">&#x27;./child.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message from child: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="string">&#x27;parent&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// child.js</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="keyword">function</span>(<span class="params">m</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;message from parent: &#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(m));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">process.<span class="title function_">send</span>(&#123;<span class="attr">from</span>: <span class="string">&#x27;child&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 运行 node parent.js的 result </span></span><br><span class="line">message <span class="keyword">from</span> <span class="attr">child</span>: &#123;<span class="string">&quot;from&quot;</span>:<span class="string">&quot;child&quot;</span>&#125;</span><br><span class="line">message <span class="keyword">from</span> <span class="attr">parent</span>: &#123;<span class="string">&quot;from&quot;</span>:<span class="string">&quot;parent&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>
<h3 id="child_process.spawn">child_process.spawn</h3>
<p>语法：<code>child_process.spawn(command[, args][, options])</code>
注意：使用给定的 command 衍生一个新进程，并带上 args 中的命令行参数。
<!--SR:!2022-11-13,10,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">spawn</span>;</span><br><span class="line"><span class="keyword">var</span> child = <span class="title function_">spawn</span>(<span class="string">&#x27;bad_command&#x27;</span>);</span><br><span class="line"></span><br><span class="line">child.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Failed to start child process 1.&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="title function_">spawn</span>(<span class="string">&#x27;ls&#x27;</span>, [<span class="string">&#x27;nonexistFile&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">child2.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error msg from process 2: &#x27;</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">child2.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Failed to start child process 2.&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>
<h2 id="child_process-创建异步进程方法的区别">child_process
创建异步进程方法的区别</h2>
<p><mark style="background: #fefe00A6;">主要的区别在于第一个参数的含义不同：</mark><br />
- 对于 exec 和 execFile 传递的是 command 或 可执行文件，类似 ls 或者
start.sh 或者 node; 可接受回调; 二者不同的是命令的参数位置<br />
- fork 传递的是 node 支持的脚本，类似 start.js，无回调<br />
- spawn 是以上三个方法实现的基础。</p>
<p>对于构建开发环境而言，一般至少会起两个进程，主进程起
devServer；还需一个进程起 mock API 服务器，所以一般用 fork 较多</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fork = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">fork</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...省略 sass 任务</span></span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;dev-server&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  gulpLivereload.<span class="title function_">listen</span>();</span><br><span class="line">  gulp.<span class="title function_">watch</span>(<span class="string">&#x27;./public/scss/*.scss&#x27;</span>, gulp.<span class="title function_">series</span>([<span class="string">&#x27;sass&#x27;</span>]));</span><br><span class="line">  <span class="title function_">fork</span>(<span class="string">&#x27;./server.js&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">series</span>([<span class="string">&#x27;sass&#x27;</span>,<span class="string">&#x27;dev-server&#x27;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// fork(&#x27;./server.js&#x27;) 还可以用这样替换</span></span><br><span class="line"><span class="title function_">exec</span>(<span class="string">&#x27;node ./server.js&#x27;</span>,<span class="function">(<span class="params">err,stdout,stderr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">child.<span class="title function_">execFile</span>(<span class="string">&#x27;node&#x27;</span>, [<span class="string">&#x27;./server.js&#x27;</span>],<span class="function">(<span class="params">err,stdout,stderr</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;err&#x27;</span>,err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;stdout&#x27;</span>,stdout)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></div>
<p>然后一个 gulp 命令就会启动两个进程</p>
<p><strong>参考:</strong></p>
<ul>
<li><a
href="http://nodejs.cn/api/child_process.html#child_process_child_process">child_process（子进程）</a></li>
<li><a
href="https://github.com/chyingp/nodejs-learning-guide">nodejs-learning-guide</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 项目管理最佳实践 Poetry</title>
    <url>/bee840324ea8399f8f5b6d3c43e3bc68116056f9/</url>
    <content><![CDATA[<h2 id="依赖管理">依赖管理</h2>
<p>依赖管理一直都在编程语言中占据着至关重要的地位，无论是
Python、JavaScript 还是 Java、Go。</p>
<p>虽然不同编程语言的依赖管理工具不尽相同，但是它们追求的目标都是大同小异的。能够对项目以来进行更加轻松统一的管理，能够更加便捷的进行项目迁移和部署。</p>
<p>因此，就出现了 maven、npm、pip 这些依赖包管理工具，但是，对比于 Java
和 JS，Python
在依赖管理方面更加特殊。所以，先后出现了多款不同的管理工具，每一次升级都是为了更好的做好
Python 的依赖包管理工具。</p>
<h2 id="python-的特殊性">Python 的特殊性</h2>
<p>Python
在依赖包管理方面主要的特殊性就来自于，不仅需要考虑项目以来的第三方包，还要着重考虑<strong>虚拟环境</strong>。这一点，是由于
Python 和 Java、JS 这些编程语言本质上存在差异导致的。</p>
<p>Java、JS
是<strong>以项目进行隔离</strong>，每当开发一个项目，依赖包都是安装在项目工程路径下。每个工程之间是隔离的，这样，即便是不同工程用到同一个包的不同版本，它们之间也不会产生冲突。</p>
<p>但是，Python 则不同，在 Python 中无法通过工程对依赖包进行隔离。</p>
<p>当我们之间使用<code>pip</code>安装第三方包时，所有的依赖都会安装到安装目录下的<code>site-packages</code>。</p>
<p>试想一下，如果我们开发 A 工程，用到了
TensorFlow<code>v0.1</code>。但是，开发 B 工程，需要用到
TensorFlow<code>v0.2</code>。这时候，site-packages
下的依赖包就会产生冲突，后面安装的依赖包就会把前面已经安装的版本卸载掉然后再安装新版本依赖包。</p>
<p>显然，这样是非常不友好的。</p>
<h2 id="现有虚拟环境的局限性">现有虚拟环境的局限性</h2>
<p>为了解决这个问题，<strong>虚拟环境</strong>就起到了至关重要的作用。</p>
<p>在开发不同的工程时，可以创建并激活不同的虚拟环境。这样，不同的工程就会用到不同环境下的解析器，我们也可以把依赖包安装到不同虚拟环境的
site-packages 路径下。</p>
<p>因此，在 Python 中依赖管理一般指代<strong>依赖管理 +
虚拟环境</strong>。</p>
<h3 id="virtualenv-的局限性">virtualenv 的局限性</h3>
<p>以往，针对 Python 依赖管理和虚拟环境经常会用到 2
个工具：<code>pip</code>和<code>virtualenv</code>。</p>
<p>其中 pip 用于依赖包的管理，virtualenv 用于虚拟环境的管理。</p>
<p>这样虽然解决了不同工程之间环境隔离的问题，但是也存在着明显的不足：</p>
<ul>
<li><p>需要同时依赖 2 款管理工具</p></li>
<li><p>不能动态更新 requirements.txt</p></li>
</ul>
<p>其中比较突出的问题就是第 2 点。</p>
<p>在工程开发过程中，需要一个配置文件来记录依赖包和环境参数，例如，maven
的 pom.xml、npm 的 package.json。</p>
<p>而在 Python 中常用的就是 requirements.txt。</p>
<p>这种纯文本的格式只能用于记录依赖包的名称，而不能像 yaml、json、xml
这些文本存储格式一样记录更多环境参数信息。</p>
<p>另外，更致命的一点就是，每次导出依赖包都需要手动执行<code>pip freeze &gt; requirements.txt</code>命令。很明显，这样是非常不合理的。试想一下，如果由于忙碌忘记手动执行这项操作，那么费九牛二虎之力部署到生产环境之后发现报错，这样会造成很大的损失。</p>
<p>因此，<code>pipenv</code>就诞生了。</p>
<h3 id="pipenv-的局限性">pipenv 的局限性</h3>
<p>pipenv 是由 requests、flask 等知名工具包的作者 Kenneth Reitz 于 2017
年发布的一款 Python 依赖包管理工具。</p>
<p>pipenv 可以看成是 pip+virtualenv 两款工具的合体，它集合了 pip
的依赖包管理和 virtualenv 虚拟环境管理于一身。另外，在依赖包记录方面使用
Pipfile 替代原来的
requirements.txt。而且，它能够自动记录并更新记录文件，这样就不再需要手动执行命令来更新
requirements.txt。</p>
<p>pipenv 的出现的确大大降低了 Python
依赖包管理的复杂度，提升了项目开发、工程迁移的效率。</p>
<p>因此，近几年关于 pipenv 的评价一直都非常好，各大内容平台对于 pipenv
称颂的文章更是<strong>多如牛毛</strong>。</p>
<p>但是，我至今没有成为 pipenv 的忠实用户，而且，也不会选择 pipenv
来代替原来 pip+virtualenv 的方案。</p>
<p>我相信，那些满篇称颂 pipenv 的作者也未必是它的忠实用户。</p>
<p>不可否认，pipenv 在 Python
依赖包管理方面提供了一个很好的解决方案。但是，它依然有一些致命的缺陷，比原来
pip+virtualenv 方案的繁琐、手动操作更为棘手。</p>
<ul>
<li><p>Lock 速度缓慢</p></li>
<li><p>强行更新不相干依赖</p></li>
<li><p>依赖处理效果较差</p></li>
</ul>
<p>这里举个例子来解释一下第 3 点。</p>
<p>使用 pipenv 安装一个包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ pipenv install oslo.utils==1.4.0</span><br></pre></td></tr></table></figure></div>
<p>这时候就会发生报错，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">Could not find a version that matches pbr!=0.7,!=2.1.0,&lt;1.0,&gt;=0.6,&gt;=2.0.0</span><br></pre></td></tr></table></figure></div>
<p>这个报错的含义是无法找到合适版本的 pbr，即便是有合适的版本，pipenv
也会简单粗暴的抛出错误，无法完成依赖包的处理和安装。</p>
<p>这时，更为优秀的工具包出现了，它就是 <strong>poetry</strong>。</p>
<h2 id="依赖管理的最佳实践-poetry">依赖管理的最佳实践 poetry</h2>
<h3 id="什么是-poetry">什么是 poetry</h3>
<p>poetry 是一款可以管理 Python 依赖、环境，同时可以用于 Python
工程打包和发布的一款第三方工具包。</p>
<p>poetry
通过配置文件<code>pyproject.toml</code>来完成依赖管理、环境配置、基本信息配置等功能。相当于把
Python
项目中的<code>Pipfile</code>、<code>setup.py</code>、<code>setup.cfg</code>、<code>requirements.txt</code>、<code>MANIFEST.in</code>融合到一起。</p>
<p>通过<code>pyproject.toml</code>文件，不仅可以配置依赖包，还可以用于区分开发、测试、生产环境、配置源路径。
<!--SR:!2022-11-27,19,250--></p>
<h3 id="为什么选择-poetry">为什么选择 poetry</h3>
<p>poetry 相比于 pipenv 具有很多明显优势的功能：</p>
<ul>
<li>更强大的依赖处理功能<br />
</li>
<li>易于打包和构建 Python 工程<br />
</li>
<li>易于发布工具包<br />
</li>
<li>结构化展示依赖关系<br />
<!--SR:!2022-11-11,10,250--></li>
</ul>
<p><strong>1. 更强大的依赖处理功能</strong></p>
<p>以前面介绍 pipenv 的例子来介绍 poetry 在依赖处理方面的强大之处。</p>
<p>pipenv 在安装工具包遇到直观的问题时会直接报错，并终止。</p>
<p>而使用 poetry 安装则不会，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry add oslo.utils=1.4.0  </span><br><span class="line">- Installing pytz (2018.3)  </span><br><span class="line">- Installing netifaces (0.10.6)  - Installing netaddr (0.7.19)  - Installing oslo.i18n (2.1.0)  - Installing iso8601 (0.1.12)  - Installing six (1.11.0)  - Installing babel (2.5.3)  - Installing pbr (0.11.1)  - Installing oslo.utils (1.4.0)</span><br></pre></td></tr></table></figure></div>
<p>poetry
在遇到<code>pbr (&gt;=0.6,!=0.7,&lt;1.0)</code>这个限定条件时，它会尝试去安装最新的
pbr(0.11.1
版)，同时会选择<code>oslo.i18n==3.20.0</code>，但是，这时候发现<code>oslo.i18n</code>的版本和
pbr 最新版本冲突。如果在 pipenv 中则会报错。但是 poetry
会尝试找出解决方案，最后发现<code>oslo.i18n==2.1.0</code>时可以满足所有相互依赖关系的要求。最终，成功安装依赖包。
<!--SR:!2022-12-06,26,250--></p>
<p><strong>2. 易于打包和构建 Python 工程</strong></p>
<p>在工程开发过程中，项目迁移和工程化部署是无法绕开的问题。</p>
<p>如果需要把我们的工程部署到生产环境服务器上，这时候就需要用到 Python
的打包和安装功能。</p>
<p>在以往，会写繁琐的<code>setup.py</code>、<code>setup.cfg</code>。而在
poetry 中，一行命令就可以解决，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry buildBuilding poetry (1.0.0)- Building sdist- Built poetry-1.0.0.tar.gz- Building wheel- Built poetry-1.0.0-py2.py3-none-any.whl</span><br></pre></td></tr></table></figure></div>
<p><strong>3. 易于发布工具包</strong></p>
<p>如果想要把工程发布到 PyPI 仓库怎么办？</p>
<p>在 poetry
中，只需要简单配置一下<code>pyproject.toml</code>，就可以实现一行命令发布工具包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry publishPublishing poetry (1.0.0) to PyPI  - Uploading poetry-1.0.0.tar.gz 100%  - Uploading poetry-1.0.0-py2.py3-none-any.whl 58%</span><br></pre></td></tr></table></figure></div>
<p><strong>结构化展示依赖关系</strong></p>
<p>Python
是一款对第三方工具包依赖很强的一种编程语言，一个项目中会用到很多款不同的工具包，而这些包的依赖关系是什么样的，很多开发者对其了解却很少。</p>
<p>poetry
可以实现结构化展示每个工具包的依赖关系，让工程的依赖一目了然，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry show --treerequests-toolbelt 0.8.0 A utility belt <span class="keyword">for</span> advanced <span class="built_in">users</span>...└── requests &lt;3.0.0,&gt;=2.0.1    ├── certifi &gt;=2017.4.17    ├── chardet &gt;=3.0.2,&lt;3.1.0    ├── idna &gt;=2.5,&lt;2.7    └── urllib3 &lt;1.23,&gt;=1.21.1$ poetry show --latestpendulum 2.0.4   1.4.5 Python datetimes made easy.django   1.11.11 2.0.3 A high-level Python Web framework ...requests 2.18.4  2.18.4 Python HTTP <span class="keyword">for</span> Humans.</span><br></pre></td></tr></table></figure></div>
<h3 id="poetry-安装和初始化">poetry 安装和初始化</h3>
<p><strong>poetry 安装</strong></p>
<p>poetry 提供多种安装方式，个人推荐从以下 2 种方式中选择：</p>
<p>方式一：curl（推荐）</p>
<p><strong>Linux, macOS, Windows (WSL)</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">curl -sSL https://install.python-poetry.org | python3 -</span><br></pre></td></tr></table></figure></div></p>
<blockquote>
<p>Note: On some systems, <code>python</code> may still refer to Python
2 instead of Python 3. We always suggest the <code>python3</code> binary
to avoid ambiguity.</p>
</blockquote>
<p><strong>Windows (Powershell)</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="POWERSHELL"><figure class="iseeu highlight /powershell"><table><tr><td class="code"><pre><span class="line">(<span class="built_in">Invoke-WebRequest</span> <span class="literal">-Uri</span> https://install.python<span class="literal">-poetry</span>.org <span class="literal">-UseBasicParsing</span>).Content | py -</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>If you have installed Python through the Microsoft Store,
replace <code>py</code> with <code>python</code> in the command
above.</p>
</blockquote>
<p>方式二：pip （有可能会造成依赖冲突）</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ pip install --user poetry</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-30,21,250-->
<p><strong>poetry 配置环境变量</strong></p>
<p>The installer creates a <code>poetry</code> wrapper in a well-known,
platform-specific directory:</p>
<ul>
<li><code>$HOME/.local/bin</code> on Unix.</li>
<li><code>%APPDATA%\Python\Scripts</code> on Windows.</li>
<li><code>$POETRY_HOME/bin</code> if <code>$POETRY_HOME</code> is
set.</li>
</ul>
<p>If this directory is not present in your <code>$PATH</code>, you can
add it in order to invoke Poetry as <code>poetry</code>. Alternatively,
the full path to the <code>poetry</code> binary can always be used:</p>
<ul>
<li><code>~/Library/Application Support/pypoetry/venv/bin/poetry</code> on
MacOS.</li>
<li><code>~/.local/share/pypoetry/venv/bin/poetry</code> on
Linux/Unix.</li>
<li><code>%APPDATA%\pypoetry\venv\Scripts\poetry</code> on Windows.</li>
<li><code>$POETRY_HOME/venv/bin/poetry</code> if <code>$POETRY_HOME</code> is
set.</li>
</ul>
<p><strong>poetry 工程初始化</strong></p>
<p>如果当前还没有创建工程，可以使用 poetry 新建工程：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry new poetry-demo</span><br></pre></td></tr></table></figure></div>
<p>这时候，会创建一个包含如下内容的工程，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">poetry-demo</span><br><span class="line">├── pyproject.toml</span><br><span class="line">├── README.rst</span><br><span class="line">├── poetry_demo</span><br><span class="line">│   └── __init__.py</span><br><span class="line">└── tests</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    └── test_poetry_demo.py</span><br></pre></td></tr></table></figure></div>
<p>除了新建工程，还可以在已有工程的基础上进行创建，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry init</span><br></pre></td></tr></table></figure></div>
<p>这时候，它会让你输入包名称、版本号等信息，你可以选择输入，也可以选择按下<code>ENTER</code>键使用默认值。
<!--SR:!2022-12-06,26,250--></p>
<p><strong>poetry 更换国内镜像源</strong></p>
<p>在 pyproject.toml 配置文件中最下方添加国内镜像源地址配置,
提高下载速度。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TOML"><figure class="iseeu highlight /toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[[tool.poetry.source]]</span>  </span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;aliyun&quot;</span>  </span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;http://mirrors.aliyun.com/pypi/simple&quot;</span>  </span><br><span class="line"><span class="attr">default</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<p><strong>poetry 运行 Python 脚本</strong></p>
<p>切换到项目中 pyproject.toml 同级目录下， 执行 peotry run python
脚本文件即可。(代码import路径要从项目根目录开始)
<!--SR:!2022-11-29,20,250--></p>
<p><strong>Pycharm 中使用 poetry</strong></p>
<p>找到虚拟环境文件夹所在位置，并选中 bin 目录下的 Python 后，就可以用
Pycharm 引入虚拟环境了 <img
src="/images/Pasted%20image%2020221027182115.png" />
<!--SR:!2022-11-11,10,250--></p>
<h3 id="poetry-依赖包管理">poetry 依赖包管理</h3>
<ul>
<li><strong>安装依赖包</strong></li>
</ul>
<p>可以使用 add 命令来安装一款 Python 工具包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry add numpy</span><br></pre></td></tr></table></figure></div>
<p>还可以，通过添加配置参数<code>--dev</code>来区分不同环境下的依赖包。</p>
<p>可以使用 install
命令直接解析并安装<code>pyproject.toml</code>的依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry install</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-01,22,250-->
<ul>
<li><strong>更新依赖包</strong></li>
</ul>
<p>更新所有锁定版本的依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry update</span><br></pre></td></tr></table></figure></div>
<p>更新指定依赖包，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry update numpy</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>卸载依赖包</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry remove numpy</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-11,10,250-->
<h3 id="poetry-虚拟环境管理">poetry 虚拟环境管理</h3>
<ul>
<li><strong>创建虚拟环境</strong></li>
</ul>
<p>创建虚拟环境有 2 种方式：</p>
<p>方式 1：</p>
<p>如果在配置文件中配置了<code>virtualenvs.create=true</code>，执行<code>poetry install</code>时会检查是否有虚拟环境，否则会自动创建。</p>
<p>方式 2：</p>
<p>利用<code>poetry env use</code>命令，</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> use python3.7</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-06,26,250-->
<ul>
<li><strong>激活虚拟环境</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry shell</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-06,26,250-->
<ul>
<li><strong>查看虚拟环境信息</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> info</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-11,10,250-->
<ul>
<li><strong>显示虚拟环境列表</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> list</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-26,18,250-->
<ul>
<li><strong>删除虚拟环境</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ poetry <span class="built_in">env</span> remove python3.7</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-28,19,250-->
<p><strong>Poetry 常用命令行界面 (CLI) 命令</strong></p>
<p><img src="/images/v2-97299659f5761d6e00d72b0529b14dab_b.jpg" />
<!--SR:!2022-11-28,20,250--></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>英语语法</title>
    <url>/6e45ae15e39746ba3ada8b354e4c9e145923d255/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://www.zhihu.com/question/30030877/answer/2683083634">www.zhihu.com</a></p>
</blockquote>
<p>给我 10
分钟，保证帮你打通任督二脉，让你彻底征服语法！不管是初高中生、大学生、考研党、在职人员还是宝妈宝爸，甚至是
0 基础的同学都可以速成！</p>
<p>英语所有的语法都可以用三个公式来表示，只要你掌握了这三个公式，语法瞬间就搞懂了。</p>
<p><span class="math inline">\(语法公式：语法 = 词法 + 句法\)</span></p>
<p>英语所有的句子都由不同词性的单词组成，<mark style="background: #83d98fA6;">只要你学会了用词和造句，也就掌握了语法。</mark>
词法是基础，有了基础之后，掌握句法、搞清句子结构，语法也就大成了！
<!--SR:!2022-12-01,23,250--></p>
<p>接下来我就分别<strong>从词法和句法两大维度</strong>剖析英语语法如何快速习成！</p>
<h2 id="词法-词性-成分">词法 = 词性 + 成分</h2>
<p>词法包含两个内容， -
一个是==不同单词的词性==，是名词、动词、介词、形容词、副词、连词还是冠词....；
-
另一个是==不同的词性会在句子中充当不同的成分==，这个单词是作主语、谓语、宾语，还是定语、状语、补语...
<!--SR:!2022-12-08,28,250!2022-12-08,28,250--></p>
<p>词性和成分其实是互相对应的，请你把在课堂上学不会听不懂的东西全部换算成：</p>
<ul>
<li><span class="math inline">\(名词 / 代词 = 主语 / 宾语\)</span></li>
<li><span class="math inline">\(动词 = 谓语\)</span></li>
<li><span class="math inline">\(形容词 = 定语 / 补语\)</span></li>
<li><span class="math inline">\(副词 = 状语 / 补语\)</span></li>
</ul>
<p>学好语法，必须搞清这两个前提，把词法搞清楚了，我们才能深入研究句法，因为<mark style="background: #fefe00A6;">句法就是词法的延伸</mark>
！ <!--SR:!2022-12-02,23,250--></p>
<p>当然，如果你连基本的单词基础都没有，<strong>很多常用的单词都不认识的话，语法学习只能停留在表面了</strong>。因为深入的学法学习必然会涉及很多长难句，而长难句是由很多常用单词甚至难词、生词组成的，单词都不认识，句子拆分就更无从谈起了。</p>
<p>所以说，英语语法和单词其实是不可分割的整体，大家学习的时候一定要同步进行。学英语就是盖一栋高楼大厦，单词是地基，语法是大厦的结构。地基不牢，大厦想盖得更高那是不可能的。</p>
<h2 id="词性">词性</h2>
<h3 id="名词">1. 名词</h3>
<p><strong>（1）名词的概念：</strong></p>
<p>表示人、动物、地点、物品以及抽象概念的词。例如：人、地点、动物、物品、抽象概念等等。</p>
<p><img src="/images/v2-bdca6026c28a673eae7d83612d907a2d_r.jpg" />
<!--SR:!2022-12-08,28,250--></p>
<p><strong>（2）名词的分类</strong></p>
<p>名词又分为<strong>专有名词和普通名词</strong></p>
<ol type="1">
<li><strong>专有名词：</strong>
表示特定的人或事物，首字母一定要大写。比如人名 Paul 保罗、Saturday
星期六、China 中国等等；</li>
<li><strong>普通名词：</strong> 表示是一类人或东西，或一个抽象概念。
<!--SR:!2022-11-11,11,250--></li>
</ol>
<p>普通名词可分为<strong>四类：</strong></p>
<ol type="1">
<li><strong>个体名词：</strong> 单个（类）的人、物、事等。例如：drum
鼓、sock 袜子</li>
<li><strong>集体名词：</strong> 有集合、团体含义的词。例如：family
家庭、army 军队</li>
<li><strong>物质名词：</strong> 无法判断个体的事、物。例如：rice
米饭、water 水</li>
<li><strong>抽象名词：</strong>
表现动作、状态、品质、感情等概念。例如：health 健康、work 工作</li>
</ol>
<p>个体名词与集体名词可以用数来计算，<strong>称为可数名词。</strong>
<mark style="background: #fefe00A6;">可数名词有单数与复数两种形式</mark>
，单数名词表示名词的数量为 “一”。例如：a pen
一支钢笔；而复数名词表示名词的数量 “大于一”，例如：four pens
四支钢笔。</p>
<p>物质名词与抽象名词一般无法用数来计算，称为<strong>不可数名词。</strong>
<mark style="background: #fefe00A6;">不可数名词在句子中一般被视为单数，前面不能用
a 或 an，但可以用 the</mark> 。例如 The coffee tastes
good．咖啡味道不错。 <!--SR:!2022-11-11,11,250--></p>
<h3 id="动词">2. 动词</h3>
<p><strong>（1）动词的概念</strong></p>
<p>表示各类<strong>动作及状态</strong>的词，基本上<strong>每个完整的句子都有一个动词</strong>。动词是句子的核心它既决定着句子意思的表达，同时又决定着句子的语法结构。
<!--SR:!2022-12-03,24,250--></p>
<p><strong>（2）动词的分类：</strong></p>
<p>分为系动词；助动词；情态动词；实义动词四类。
<!--SR:!2022-12-08,28,250--></p>
<p><strong>1）系动词：</strong></p>
<p>表示谓语关系的动词，后面<mark style="background: #fefe00A6;">必须接表语</mark>
（名词或形容词）一起使用。</p>
<p>如：He fell ill yesterday．他昨天病了。（fell
是系动词，后跟形容词作表语，说明主语情况）</p>
<p>又比如：He is a teacher．他是一名教师。（is
是系动词，后跟形容词作表语，说明主语身份）</p>
<p>最主要的连系动词是
<strong>“be（am/is/are）”</strong>，其他常用的连系动词还有：seem
似乎，look 看起来，appear 好像，become 变成，keep 保持，get 成.
<!--SR:!2022-11-11,11,250--></p>
<p><strong>2）助动词</strong></p>
<p>帮助主要动词完成语法功能，<strong>本身没有意义，不能单独作谓语</strong>。最常用的助动词有：be,
have, do, shall, will, should, would。例如：He doesn't like English.
他不喜欢英语。（doesn't 是助动词，无词义；like
是主要动词，有词义）。</p>
<p>助动词只有语法作用，协助构成进行时、完成时、被动态、否定句、疑问句等。</p>
<p>例如：<br />
① be 构成进行时：I am reading a book．我正在读书。 ② do 构成疑问句：—Do
you like apple？你喜欢苹果吗？ ③ have 构成完成时态：He has made a
plan．他已经订了计划。 <!--SR:!2022-12-07,27,250--></p>
<p><strong>3）情态动词</strong></p>
<p>表示说话人的语气或者情态，<strong>不能单独作谓语</strong>，必须与动词合用。</p>
<p>常用的情态动词有： 1. <strong>can（能，会）</strong> 例如：I can
swim．我会游泳。 2. <strong>may（可以）</strong> 例如：You may go
now．你现在可以走了。 3. <strong>must（必须）</strong> 例如：You must do
your homework．你必须写作业。 4. <strong>need（需要）</strong>
例如：Need you go so soon？你需要这么早走吗？
<!--SR:!2022-11-11,11,250--></p>
<p><strong>4）实义动词</strong></p>
<p>根据<strong>后面是否带有宾语</strong>分为两类：及物动词（缩写为
<code>vt.</code>）和不及物动词（缩写形为 <code>vi</code>）。</p>
<p><strong>及物动词：所谓
“及物”，就是主体把动作作用到客体上</strong>，后面需要使用宾语使其意义完整。及物动词本身意义不完整，加上宾语才能表达完整的意思。</p>
<p>宾语既可以是人，也可以是物。例如：</p>
<ul>
<li>That dog makes the boy
happy．那条狗使这个孩子高兴起来。（宾语是人）</li>
<li>Many people earn their living by
writing．许多人靠写作谋生。（宾语是物）</li>
</ul>
<p><strong>不及物动词：就是本身词义完整，后面不需要加宾语，只能用于：“主
+ 谓” 结构。</strong></p>
<p>例如：</p>
<ol type="1">
<li>I <strong>live</strong> in Beijing．我住在北京。</li>
<li>This is the room where once
<strong>lived</strong>．这是我从前住的房间。</li>
<li>类似的还有：agree, go, work, listen, look, come, die, belong, fall,
exist, rise,arrive, sit, sail, hurry, fail, succeed...
<!--SR:!2022-12-05,26,250--></li>
</ol>
<h3 id="代词">3. 代词</h3>
<p><strong>（1）代词的概念</strong></p>
<p>代词是为了<strong>避免重复，代指前面出现的人、动物、事物</strong>。例如：This
is our new car. I bought it
yesterday（这是我们的新车，我昨天买的），代词 it 代替名词 car 人。
<!--SR:!2022-12-08,28,250--></p>
<p><strong>（2）代词的分类</strong></p>
<p><strong>代词分为：</strong>
人称代词、物主代词、反身代词、相互代词、关系代词、疑问代词、指示代词、不定代词。
<!--SR:!2022-11-11,11,250--></p>
<p><strong>人称代词：</strong></p>
<p>就是你、我、他、它，复数形式是你们我们他们这些，如下图所示： <img
src="/images/v2-40a091e501848059985408cf5e6f951a_r.jpg" />
<!--SR:!2022-11-29,21,250--></p>
<p><strong>物主代词：</strong></p>
<p>就是人称代词的形容词形式，就是你的、我的、他的.....，如下图所示：
<img src="/images/v2-141494cdb176bdc926aa13e543ff8142_r.jpg" />
<!--SR:!2022-12-03,24,250--></p>
<p><strong>反身代词：</strong></p>
<p>就是强调自己，我自己、你自己、他自己、我们自己....，如下图所示： <img
src="/images/v2-6d2310df1cb5fb0a3f150524e7d955da_r.jpg" />
<!--SR:!2022-12-02,23,250--></p>
<p><strong>相互代词：</strong></p>
<p>表示相互关系，只有 each other 和 one another
这两组，意思是二者或二者以上。 <!--SR:!2022-11-11,11,250--></p>
<p><strong>关系代词：</strong></p>
<p>用来引导定语从句，有 who, whose, whom,
that,which。可用作主语、表语、宾语、定语。<strong>代表从句所修饰的那个名词或代词</strong>。例如：I
know <strong>what</strong> he has done（我知道他做了什么）。
<!--SR:!2022-11-30,22,250--></p>
<p><strong>疑问代词：</strong></p>
<p>用作疑问词，构成特殊疑问句，如 “who, whom 谁，whose 谁的，what
什么，which 哪个” 等。例如：<strong>Who</strong> is going to go
shopping？（谁要去买东西？） <!--SR:!2022-11-11,11,250--></p>
<p><strong>指示代词：</strong></p>
<p>用来标识人或物，有 this 这个、that 那个、these 这些、those 那些、it
它......。在句中作主语，宾语，表语，定语。例如：<strong>That</strong> is
a good dictionary（作主语）；What do you want? I want
<strong>this</strong>（作宾语）. <!--SR:!2022-12-04,25,250--></p>
<p><strong>不定代词：</strong></p>
<p>表示不确定的人、物或模糊的数量。可以代替名词和形容词，在句中作主语、宾语、表语和定语。有
all, any, another, both,every, few, many, much, some, no, every
等等，如下图所示： <img
src="/images/v2-813b6954b0073cc6feb9306122f94407_r.jpg" />
<!--SR:!2022-11-26,18,250--></p>
<h3 id="形容词">4. 形容词</h3>
<p><strong>（1）形容词的概念</strong></p>
<p>用来<strong>描写或修饰名词</strong>，例如：good 好的，bad
不好的，special 特别的，beautiful 美丽的，interesting 有趣的......
<!--SR:!2022-11-27,19,250--></p>
<p><strong>（2）形容词的分类</strong></p>
<p>分为简单形容词和复合形容词。 <!--SR:!2022-11-11,11,250--></p>
<p><strong>简单形容词：</strong>
由一个单词或单个单词加前后缀构成，或由现在 / 过去分词演化而成</p>
<ol type="1">
<li>由一个单词构成，如 dark 黑暗的，white 白色的，beautiful
漂亮的；</li>
<li>由单个单词加前后缀构成，如 unkind 不善的，impossible 不可能的；</li>
<li>或由现在 / 过去分词演化而成，如 exciting 激动人心的，satisfied
满意的。</li>
</ol>
<p><strong>复合形容词：</strong> 由一个以上的词构成</p>
<ol type="1">
<li>形容词 + 形容词：bittersweet 痛苦而又甜蜜的，deaf-mute
又聋又哑的；</li>
<li>形容词 / 副词 + 分词：ordinary-looking 长相一般的，well-informed
了解信息的；</li>
<li>名词 + 形容词：soundproof 隔声的，water-resistant 防水的；</li>
<li>名词 + 分词：lawabiding 遵守法律的，oceangoing 向海洋方向的；
<!--SR:!2022-12-08,28,250--></li>
</ol>
<h3 id="副词">5. 副词</h3>
<p><strong>（1）副词的概念</strong></p>
<p>主要用来<strong>修饰动词、形容词</strong>，表示地点、时间、程度、方式、语气等。</p>
<ol type="1">
<li>Will you stay here overnight? 你今晚住在这里好吗？（here
修饰动词，表示地点）</li>
<li>Your order will be ready very soon. 您点的菜很快就会好的。（very
soon 修饰动词，表示时间）</li>
<li>I find these chairs incredibly uncomfortable.
我觉得这些椅子非常不舒服。（incredibly 修饰形容词，表示程度）
<!--SR:!2022-11-11,11,250--></li>
</ol>
<p><strong>（2）副词的分类</strong></p>
<ul>
<li>1）表示方向、位置。例如：go down 下去，step in 走进去，get out
出去；</li>
<li>2）表示地点。例如：upstairs 楼上，there 那儿，abroad 在国外；</li>
<li>3）表示时间。例如：today 今天，yesterday 昨天，tomorrow 明天；</li>
<li>4）表示顺序。例如：first 第一，next 下一个，then 接着；</li>
<li>5）表示频率。例如：always 总是，never 从不，sometimes 有时。
<!--SR:!2022-12-04,25,250--></li>
</ul>
<p><strong>副词可放在句首、句中或句末，表示不同的语气。</strong></p>
<ul>
<li>Sometimes I went to visit my parents.（sometimes
放在句首，语气最强）</li>
<li>I sometimes went to visit my parents.（sometimes
放在句中，语气较弱）</li>
<li>I went to visit my parents sometimes.（sometimes
放在句末，语气最弱） <!--SR:!2022-11-11,11,250--></li>
</ul>
<p><strong>（3）副词的用法、作用</strong></p>
<p>副词在句中主要用作状语、表语、宾语补足语和介词宾语等</p>
<p><strong>1）作状语，修饰动词、形容词、副词</strong></p>
<ul>
<li><strong>修饰动词。</strong> 如：He runs fast．他跑得很快。</li>
<li><strong>修饰形容词。</strong> 如：It was rather cold this
year．今年相当冷。</li>
<li><strong>修饰副词</strong>。如：He walks rather
slow．他走路相当慢。</li>
</ul>
<p><strong>2）作定语，修饰名词或代词</strong></p>
<p>置于 “不定冠词、名词” 之前，以增强语气。这类副词最常用的有 quite 和
rather。例如：My students are quite a nice
bunch．我的学生真是一群好孩子。</p>
<p><strong>3）作表语</strong></p>
<ul>
<li>I was down and out．我穷困潦倒。</li>
<li>My mother is not in．我妈妈不在家。</li>
</ul>
<p><strong>4）作宾语补语，对主体的状态进行解释说明</strong></p>
<p>The girl walked in <strong>with her head
up</strong>．那位女孩<strong>昂着头</strong>走了进来。
<!--SR:!2022-12-07,27,250--></p>
<h3 id="介词">6. 介词</h3>
<p><strong>（1）介词的概念</strong></p>
<p>置于名词、代词之前，不能单独作句子成分，只表示句中其他成分之间的关系。
<!--SR:!2022-11-11,11,250--></p>
<p><strong>（2）介词的分类</strong></p>
<ul>
<li><strong>1）表时间。</strong> 如： before, during，after, as, in,
since, through, until,within 等。</li>
<li><strong>2）表地点。</strong> 如：at, above, behind, below，beside,
by, down，over,under 等。</li>
<li><strong>3）表原因、目的</strong>。例如：from, for, with 等。</li>
<li><strong>4）表结果。</strong> 例如：without, to, with 等。</li>
<li><strong>5）表条件。</strong> 例如：considering, on, without
等。</li>
<li><strong>6）表手段、方式</strong>。例如：by, with, in 等。</li>
<li><strong>7）表让步。</strong> 例如：despite, in spite of 等。</li>
<li><strong>8）表关于</strong>。例如：with regard to, as for, as to,
about, concerning, regarding 等。</li>
<li><strong>9）表对于</strong>。例如：to, at, with, for, over 等。</li>
<li><strong>10）表根据</strong>。例如：according to, on 等。</li>
<li><strong>11）表除去</strong>。例如：but, except, besides 等。</li>
<li><strong>12）表比较</strong>。例如：as, like, above, over 等。</li>
<li><strong>13）表反对</strong>。例如：against, with 等。
<!--SR:!2022-12-08,28,250--></li>
</ul>
<p><strong>（3）介词的用法</strong></p>
<p><strong>1）通常放在名词、疑问词、关系代词、连接代词之前</strong>。</p>
<ul>
<li>With whom did you go？你同谁一道去？</li>
<li>This is the book from which I got the
story．这就是我从中读到这个故事的那本书。</li>
<li>From what I hear, he is a good
swimmer．我听说他是个优秀的游泳运动员。</li>
</ul>
<p><strong>2）介词在全句、分句或从句之末时，常后置</strong>。</p>
<ul>
<li>介词宾语为疑问词时，介词后置。如：Where do you come
from？你是哪儿人？</li>
<li>介词宾语为关系代词时，介词可后置。如：That's what he is talking
about．那就是他所谈的事。</li>
<li>在间接疑问句和感叹句中介词也可后置。如：What a jolly mess I am
in！我所处的局面多么糟糕啊！（感叹句） <!--SR:!2022-11-11,11,250--></li>
</ul>
<h3 id="连词">7. 连词</h3>
<p><strong>（1）连词的概念</strong></p>
<p>是一种虚词，用来连接单词、短语、从句，在句中不单独作句子成分。
<!--SR:!2022-12-04,25,250--></p>
<p><strong>（2）连词的分类</strong></p>
<ul>
<li><strong>1）表示选择或并列关系：</strong> either...or...,
neither...nor..., or, as well as, and, both...and...., and 等。</li>
<li><strong>2）表示解释说明：</strong> that is, that is to say, in other
words, such as, for example 等。</li>
<li><strong>3）表示总结：</strong> in a word, on the whole, in short,
briefly, in brief, to sum up, in all 等。</li>
<li><strong>4）表示时间顺序：</strong> the moment, as soon as, at first,
then, later, meanwhile, at the beginning 等．</li>
<li><strong>5）表示因果关系：</strong> therefore, so, as a result, as
the result of, hence, because of, due to 等。</li>
<li><strong>6）表示转折关系：</strong> yet, and yet, but, while, on the
contrary, on the other hand, however 等。</li>
<li><strong>7）表示递进关系：</strong> not only...but（also）, what's
more, besides, in addition 等。 <!--SR:!2022-11-23,15,230--></li>
</ul>
<p><strong>（3）怎么用？</strong></p>
<p>很简单，就是将前后内容连接起来，比如以下几个：</p>
<ol type="1">
<li><strong>Time and tide</strong> wait for no man．岁月不待人。</li>
<li>He is either <strong>sick or
lazy</strong>．他不是病了就是太懒。</li>
<li><strong>John as well as you</strong> is my bosom
friend．约翰和你都是我的知己。</li>
<li>I do not care whether you <strong>go or
stay</strong>．我才不管你是走是留呢。 <!--SR:!2022-12-01,22,250--></li>
</ol>
<h3 id="冠词">8. 冠词</h3>
<p><strong>（1）冠词的概念</strong></p>
<p>用来说明名词所指的人或物，本身没有词义，不能在句中单独使用。<strong>一般放在名词的前面，帮助指明名词的含义</strong>。例如：a
cup 一个杯子；an orange 一个橘子；the Yellow River 黄河
<!--SR:!2022-11-26,18,250--></p>
<p><strong>（2）冠词的分类</strong></p>
<p>分为三类：不定冠词 a 和 an、定冠词 the，零冠词。</p>
<p><strong>1）不定冠词：</strong>
是一个的意思，用于单数可数名词前面，但不强调数目概念，<strong>只用于泛指事物，说明其名称或种类</strong>。例如：a
table 一张桌子、a man 一个男人、an hour 一小时、an apple 一个苹果...</p>
<p><strong>2）定冠词：</strong> 与指示代词 this, that
同源，有这个、那个、这些、那些的意思，<strong>常表示强调</strong>。例如：She
is <strong>the only person</strong> who could do
that.（强调她是唯一能做那件事的人）</p>
<p><strong>3）零冠词：</strong>
一些词、短语前面不允许加冠词，也就是零冠词。<strong>国名、人名前通常用零冠词</strong>，包括人名、地名、国名、节日、月份、星期、季节等。例如：Mary
玛丽、China 中国、winter 冬、Sunday 星期天、October 十月、National Day
国庆节... <!--SR:!2022-12-08,28,250--></p>
<h3 id="感叹词">9. 感叹词</h3>
<p><strong>（1）感叹词的概念</strong></p>
<p>用来<strong>表示说话人的各种感情，如欢喜、痛苦、惊惧、赞叹等</strong>。一般放于句首，感情强烈时，句尾用感叹号!
。感叹句一般用于口语之中，在日常交际中常用。
<!--SR:!2022-12-03,24,250--></p>
<p><strong>（2）感叹词的分类</strong></p>
<ul>
<li><strong>1）表示赞赏：</strong>
Good！好！太好了！Terrific！太棒了！Excellent！好极了！太棒了！</li>
<li><strong>2）表示欢呼：</strong>
There！你瞧！Hurrah！万岁！加油！Bravo！万岁！好极了！</li>
<li><strong>3）表示痛苦：</strong> Ouch！哎呦！痛啊</li>
<li><strong>4）表示惊奇：</strong> My God！天啊！Dear me! 天啊！</li>
<li><strong>5）表示惊醒：</strong> Well！哎呀！Well, I must go
now！哎呀，我得走了！</li>
<li><strong>6）表示劝告：</strong> Here！好了！Here! Don't
cry！好了，别哭了！</li>
<li><strong>7）表示招呼：</strong> Hi！嗨！Hey！喂！嘿！Hello！喂！Hi!
How are you? <!--SR:!2022-12-08,28,250--></li>
</ul>
<h3 id="疑问词">10. 疑问词</h3>
<p><strong>（1）疑问词的概念：</strong></p>
<p>用在特殊疑问句中，引导整个句子 <!--SR:!2022-12-05,26,250--></p>
<p><strong>（2）疑问词的分类</strong></p>
<p>分为三类：</p>
<ol type="1">
<li><strong>疑问代词：</strong> what, who, which, whose, whom</li>
<li><strong>疑问形容词：</strong> what（which, whose）+ 名词</li>
<li><strong>疑问副词：</strong>when, where, why, how
<!--SR:!2022-12-08,28,250--></li>
</ol>
<p><strong>常用疑问词如下图所示：</strong></p>
<p><img src="/images/v2-ba25ccdd4c373a170c8bd9f5fcdb464d_r.jpg" />
<!--SR:!2022-12-05,26,250--></p>
<h2 id="成分">成分</h2>
<p>句子是最高级的语法单位，也是人们交际的基本语言单位。句子有两个特征：<strong>能在交际中单独使用并且能够表达完整的意思。</strong></p>
<p>一个句子的核心部分是==主语和谓语==。主语在构成方面很简单，只需整体上的更换，真正对句子起支撑作用是<strong>谓语动词</strong>或是<strong>系表结构</strong>，对<strong>动词的提炼即是对句型套路的掌握</strong>。</p>
<p>组成句子的各个部分叫做句子成分，包括<strong>主</strong>语、<strong>谓</strong>语、<strong>宾</strong>语、宾语<strong>补</strong>足语、<strong>表</strong>语、<strong>定</strong>语和<strong>状</strong>语。
<!--SR:!2022-11-11,11,250--></p>
<h3 id="主语">1. 主语</h3>
<p>句子所要==说明的人或物==，<strong>是句子的主体。一般由名词、代词或名词短语等组成</strong>，位于句首。</p>
<ul>
<li><strong>The desk</strong> is old．这张课桌旧了。（名词作主语）</li>
<li><strong>He</strong> is a doctor．他是一名医生。（代词作主语）</li>
<li><strong>The secret of success</strong> is to start from scratch and
keep on scratching.
成功的秘诀在于从磨练开始，并要坚持不断磨练。（名词短语作主语）
<!--SR:!2022-11-28,20,250--></li>
</ul>
<h3 id="谓语">2. 谓语</h3>
<p>用来说明主语 ==<strong>“干什么” 或 “怎么样”</strong>==
的，应在主语后面。</p>
<ul>
<li>I <strong>play</strong> basketball in the
morning．我早上打篮球。（实义动词作谓语）</li>
<li>We <strong>can speak</strong>
French．我们会讲法语。（情态动词和实义动词作谓语）
<!--SR:!2022-11-27,19,250--></li>
</ul>
<h3 id="宾语">3. 宾语</h3>
<p>表示==<strong>动词的作用对象</strong>==，位于动词之后。</p>
<ul>
<li>Pass <strong>methe book,</strong> please. 请把这本书递给我。</li>
<li>I want to eat <strong>two hamburgers now</strong>.
我现在想吃两个汉堡。 <!--SR:!2022-12-08,28,250--></li>
</ul>
<h3 id="定语">4. 定语</h3>
<p>用来==<strong>修饰名词或代词的，对其进行解释说明</strong>==，去掉不影响句子结构和成分。名词、形容词、数词、分词、不定式、介词短语或定语从句都可以用作定语。</p>
<p>例如：</p>
<ul>
<li>The boy <strong>pupil</strong> is in Class Thr，对其进行解释说明
ee．这个男生在三班。（名词 pupil 作定语，对 the boy
进行解释说明，说明其是学生 ）</li>
<li>The girl <strong>in red</strong> is my
sister．穿红衣服的女孩是我的妹妹。（介词短语 in red 作定语，对 the girl
进行解释说明，说明她穿着红色衣服） <!--SR:!2022-12-08,28,250--></li>
</ul>
<h3 id="状语">5. 状语</h3>
<p>用来==<strong>修饰动词、形容词和副词，对其进行解释说明，</strong>
==表示动作、行为发生的时间、原因、地点、方式、目的或程度等。一般由副词、不定式、介词短语来充当。</p>
<p>例如：</p>
<ul>
<li>I can jump <strong>high</strong>．我跳得高。（副词做状语）</li>
<li><strong>Without the idea,</strong> I can't finish the work.
没有这个创意，我不可能完成这份工作。（介词短语作状语）
<!--SR:!2022-11-11,11,250--></li>
</ul>
<h3 id="补语">6. 补语</h3>
<p>用来对主语、宾语等进行==<strong>补充说明</strong>==。例如：</p>
<ul>
<li>Tom was made
<strong>monitor</strong>．汤姆被选为班长。<strong>（主语补语）</strong></li>
<li>I made Tom
<strong>monitor</strong>．我选汤姆当班长。<strong>（宾语补语）</strong>
<!--SR:!2022-11-11,11,250--></li>
</ul>
<h3 id="表语">7. 表语</h3>
<p>用来==<strong>说明主语的身份、特征、性质或状态</strong>==，常位于系动词后，由名词、形容词、副词、介词短语充当。例如：</p>
<ul>
<li>It is <strong>a
flower</strong>．这是一朵花。<strong>（名词作表语）</strong></li>
<li>We are <strong>at
work</strong>．我们在上班。<strong>（介词短语作表语）</strong></li>
<li>She is
<strong>nice</strong>．她是友善的。<strong>（形容词作表语）</strong>
<!--SR:!2022-12-01,22,250--></li>
</ul>
<h2 id="句法-时态-结构">句法 = 时态 + 结构</h2>
<h2 id="结构">结构</h2>
<h3 id="简单句">1. 简单句</h3>
<p><strong>（1）概念</strong></p>
<p>只包含<strong>一个主谓结构</strong>。如：She is fond of collecting
stamps．她喜欢集邮。</p>
<p><strong>（2）简单句的五种基本句型</strong></p>
<p>英语句子是由主语（S），谓语动词（V），宾语（O），表语（P），状语（adv），宾语补足语（O.C）等成分组成，按照这些成分的不同组合，可分为五种基本句型。</p>
<ol type="1">
<li><strong>句型一：S+Vi.（主语 + 不及物动词）。</strong>例如：Students
read．学生读书；Rivers flow．河流会流动。</li>
<li><strong>句型二：S+Vt.+O（主语 + 及物动词 + 宾语）。</strong>He made
a story yesterday．他昨天编了一个故.</li>
<li><strong>句型三：S+Vt.+I.O+D.O（主语 + 及物动词 + 间接宾语 +
直接宾语）。</strong>He lent me some money．他借给我一些钱。</li>
<li><strong>句型四：S+Vi.+S.C（主语 + 不及物动词 +
主语补足语）</strong>。He turns adult．他长大成人了；The soup has gone
bad．汤已经馊了。</li>
<li><strong>句型五：S+Vt.+O+O.C（主语 + 及物动词 + 宾语 +
宾语补足语）</strong>。She really drove me mad．她真的把我惹火了；He
made me laugh．他把我逗乐了。</li>
</ol>
<h3 id="基本句型">2. 基本句型</h3>
<p><strong>（1）陈述句</strong></p>
<p><strong>说明事实，陈述看法</strong>，肯定什么或者否定什么。例如：</p>
<ul>
<li>Light travels faster than sound．光比声速度快。（说明事实）</li>
<li>I didn't tell him anything．我什么也没有告诉他。（说明事实）</li>
</ul>
<p><strong>（2）疑问句</strong></p>
<p>疑问句主要用来提出问题，分为一般疑问句、特殊疑问、选择疑问句、反意疑问句。</p>
<p><strong>1）一般疑问句：</strong>用来询问一件事情。</p>
<p>句中谓语动词是 be、助动词、情态动词时，将它们放到主语前面。</p>
<ul>
<li><strong>Is</strong> there something wrong with this
machine？这台机器有问题吗？</li>
<li><strong>Can</strong> you skate？你会滑冰吗？</li>
<li><strong>Would</strong> you like me to interpret for
you？要不要我帮你翻译？</li>
<li><strong>Have</strong> you got today's
milk？你拿到今天的牛奶了吗？</li>
</ul>
<p>如果没有上述词语而是其他动词时，则在主语前加助动词
<strong>do/does/did，原来的谓语动词改为原形。</strong></p>
<ul>
<li>Do you exercise？你做运动吗？</li>
<li>Does she look sick？她看上去像生病吗？</li>
</ul>
<p><strong>2）特殊疑问句</strong></p>
<p>对句中某一特殊部分提出疑问，通常以 who, whose, what, whichwhen, why,
how 等疑问词开头</p>
<p><strong>结构：疑问代词 + 一般疑问句 +.....？</strong></p>
<ul>
<li>What do you do when you are not working？你不工作的时候做什么？</li>
<li>Whose decision was it？那是谁作出的决定？</li>
<li>Which class are you in？你在哪个班？</li>
</ul>
<p><strong>3）选择疑问句</strong></p>
<p>对问题提出两个或者两个以上的答案，供对方选择，<strong>以一般疑问句 /
特殊疑问句为基础</strong>。</p>
<ul>
<li>Are you going to elect a boy or a
girl？你要选一个男孩还是女孩？</li>
<li>Which do you prefer, coffee or tea？你要哪一样，咖啡还是茶？</li>
</ul>
<p><strong>4）反意疑问句</strong></p>
<p>由 “陈述句 + 疑问句” 构成，表示反问</p>
<ul>
<li>The clock is slow, isn't it？表走的慢，不是吗？</li>
<li>He isn't old, is he？他不老，是吗？</li>
<li>I'm late, aren't I？我迟到了，不是吗？</li>
</ul>
<p>在句子中<strong>起名词作用的句子</strong>，其功能相当于名词词组，在句中担任主语、宾语、表语、同位语、介词宾语等。因此，根据它在句中不同的语法功能，名词从句又可分别称<strong>为主语从句、宾语从句、表语从句和同位语从句。</strong></p>
<h3 id="主语从句">3. 主语从句</h3>
<p>在复合句中用作主语的从句，通常由连词 that、whether、关系代词 what
来引导。</p>
<ul>
<li><strong>that 引导：</strong>That he has got the scholarship is
true．他得了奖学金的事是真的。</li>
<li><strong>whether 引导：</strong>Whether he can see that letter is
unknown．不知道他是否能看见那封信。</li>
<li><strong>关系代词 what 引导：</strong>What you have done is a bad
thing．你做的是一件错事。</li>
</ul>
<p>为了保持句子平衡，主语从句<strong>常用 it
作形式主语，将主语从句后置</strong>。</p>
<ul>
<li>It's necessary that you take an umbrella．你带把伞很有必要。</li>
<li>It is obvious what we must do．</li>
<li>It's a question whether he would accept this.
他们是否会接受是个问题。</li>
</ul>
<h3 id="宾语从句最常考">4. 宾语从句（最常考）</h3>
<p><strong>（1）概念</strong></p>
<p>在句子中起宾语作用的从句。宾语从句要用陈述语序，即<strong>主句 + 连词
+ 宾语从句</strong>。例如：</p>
<ul>
<li><em><strong>I don't know</strong></em> where <em><strong>he came
from</strong></em>．我不知道他来自哪里。</li>
<li><strong><em>Do you know</em></strong> where <strong><em>they
work</em></strong>？你知道他们在哪儿工作吗？</li>
</ul>
<p>引导宾语从句的连词有三种。</p>
<p><strong>1）从属连词引导的宾语从句</strong></p>
<p><strong>that（无词义）、whether/if（是否）</strong>，只起连接主句与从句的作用，在<strong>从句中不充当句子成分</strong>。由
that 引导的宾语从句中，that 可省略。例如：</p>
<ul>
<li>I am not sure <strong>if/whether I can catch up with
you</strong>．我不确定是否能赶上你。</li>
<li>Our teacher said<strong>（ that） you are a good
student</strong>．我们老师说你是个好学生</li>
</ul>
<p><strong>2）连接代词引导宾语从句</strong></p>
<p><strong>who（whom, whose）, what, which</strong>
等。连接代词<strong>有词义</strong>，在从句中<strong>充当句子成分</strong>，可以作主语、宾语、表语或定语等。例如：</p>
<ul>
<li>Do you know <strong>who</strong> the man
is？你知道这人是<strong>谁</strong>吗？</li>
<li>I am guessing <strong>wha</strong>t he is looking
for．我猜测他正在找<strong>什么</strong>。</li>
</ul>
<p><strong>3）连接副词引导的宾语从句</strong></p>
<p><strong>where, when, how, why</strong>
等。连接副词有词义，在从句中作状语。</p>
<p>例如：Do you know <strong>how</strong> to get
there？你知道<strong>如何</strong>去那里吗？</p>
<p><strong>（2）分类</strong></p>
<ul>
<li><strong>1）动词的宾语从句</strong>：I <strong>think that</strong> he
loves me．我认为他爱我。</li>
<li><strong>2）介词的宾语从句</strong>：We are talking <strong>about
who</strong> should go there．我们在讨论谁应该去那里</li>
<li><strong>3）形容词的宾语从句</strong>：I am glad that you invite me
to come here．很高兴你邀请我来这儿。常接宾语从句的形容词有：glad,
please, sure, certain, happy, sorry, afraid,satisfied....</li>
</ul>
<h3 id="表语从句">5. 表语从句</h3>
<p><strong>（1）概念</strong></p>
<p>说明<strong>主语是什么或者怎么样</strong>的句子。表语从句<strong>放在连系动词之后，充当复合句中的表语</strong>。例如：</p>
<ul>
<li>My opinion is that her advice should be
practical．我的意见是她的建议是可行的。</li>
<li>The question is that we have no money．问题是我们没有钱。</li>
</ul>
<p><strong>（2）分类</strong></p>
<p><strong>1）连系动词引导的表语从句</strong></p>
<p>常见的连系动词有 be, look, seem, sound,appear 等。</p>
<p>例如：It seems we have made a
progress．看起来似乎我们已经有进步了。</p>
<p><strong>2）as, as if/though 引导的表语从句</strong></p>
<p>It looks as if he were sleeping．似乎他正在睡觉。</p>
<p><strong>3）because, why 引导的表语从句</strong></p>
<ul>
<li>That is because I practiced a lot. 那是我拼命练习的结果。（that's
because 强调原因）</li>
<li>That is why he came．这就是他来的原因。（that's why 强调结果）</li>
</ul>
<h3 id="同位语从句">6. 同位语从句</h3>
<p>用来对名词作<strong>进一步解释，说明名词的具体内容。</strong></p>
<p>一般跟在如下抽象名词后面：</p>
<ul>
<li>hope 希望、wish 愿望、answer 答案、fact 事实、belief 信仰</li>
<li>news 消息、idea 主意、观念、promise 承诺、information 信息</li>
<li>conclusion 结论、order 命令、suggestion 建议、problem 问题</li>
<li>thought 想法、word 言语.........</li>
</ul>
<p>同位语从句和所修饰的名词在<strong>内容上为同一关系，删除掉该内容也能构成完整的句子</strong>，只是句意就没有那么明确了。一般用
that, whether, what, which, who, when, where, why,how 等引导。</p>
<p>例如：</p>
<ul>
<li><strong>The news that her childwas safe</strong> eased her
mind．孩子平安的消息使她放心了。</li>
<li><strong>The idea that you will work by yourself</strong> is
wrong．你要独自工作的想法是错误的。</li>
</ul>
<h3 id="定语从句十分常见">7. 定语从句（十分常见）</h3>
<p>在句中起定语，修饰某一名词或代词，或修饰整个主句，对其进行进一步的解释说明。</p>
<p><strong>引导定语从句的连词有：</strong></p>
<ol type="1">
<li><strong>关系代词</strong>：which, that, who, whom, whose 等。</li>
<li><strong>关系副词</strong>：when, where, why 等。</li>
</ol>
<p><strong>关系词有 3 个作用：</strong></p>
<ol type="1">
<li>引导定语从句；</li>
<li>代替被修饰的名词或代词；</li>
<li>在定语从句中<strong>担当一个成分</strong>，如主语、宾语、定语和状语等。</li>
</ol>
<p>例如：</p>
<p>The girl is my sister. 那个女孩是我妹妹.</p>
<p>这个句子本身就是一个完整的句子，但是<strong>那个女孩指代不明确</strong>，可能是小明、小红，还可能是小王。加上一个定语从句修饰后，对这个女孩进一步解释说明，大家就知道这个女孩是指的谁了。</p>
<p>The girl <strong>who is singing in the classroom</strong> is my
sister. 在班里唱歌的那个女孩是我妹妹。</p>
<p>哪个女孩？正在班里唱歌的那个女孩，一下子大家就知道是谁了。在该句中
the girl 是主语，关系代词 who 引导定语从句，同时代替 the gir
在从句中<strong>担任主语，</strong>对 the gir 进行解释说明。</p>
<h3 id="状语从句">8. 状语从句</h3>
<p>在复合句中作状语的从句，表示事件发生时候的状态，可以<strong>修饰谓语、非谓语动词、定语、状语或整个句子</strong>。从句位于句首或句中时通常用逗号与主句隔开，位于句尾时可以不用逗号隔开。</p>
<p>根据其意义和作用可分为：</p>
<ol type="1">
<li>时间状语从句</li>
<li>地点状语从句</li>
<li>条件状语从句</li>
<li>原因状语从句</li>
<li>目的状语从句</li>
<li>方式状语从句</li>
<li>结果状语从句</li>
<li>让步状语从句</li>
<li>比较状语从句</li>
</ol>
<p><strong>比如时间状语从句，由 when, while, as 等引导。</strong></p>
<p>He entered school <strong>when he was six</strong>．他 6 岁上学。</p>
<p>Our headmaster laughed <strong>as she
spoke</strong>．我们的校长边谈边笑。</p>
<h3 id="倒装句">9. 倒装句</h3>
<p>英语最基本结构是主、谓结构，倒装就是将这种固定的结构加以颠倒。倒装是一种语法手段，表示一定<strong>句子结构或强调某一句子成分</strong>的需要。</p>
<p>倒装分为两种：部分倒装和完全倒装。</p>
<p><strong>（1）部分倒装</strong></p>
<p>将谓语的一部分，如助动词或情态动词放至主语之前。若没有助动词或情态动词，则需添加助动词
do, does, did，并将其置于主语之前。</p>
<p>例如：Never have I watched such a moving
film．我从未看过如此感人的电影。</p>
<p><strong>（2）完全倒装</strong></p>
<p>将句子中的谓语动词全部置于主语之前。例如：</p>
<p>There came the bus．公交车来了。</p>
<p>Here is your pen．你的笔。</p>
<h3 id="强调句">10. 强调句</h3>
<p>能够被强调的句子成分通常为主语、宾语、状语等，基本结构为：<strong>It+be
+ 被强调部分 + that + 句子</strong>其余部分。例如：</p>
<p>We're going to know a new pupil at school tomorrow.</p>
<p>→<strong>It is we that（who）</strong>are going to know a new pupil
at school tomorrow.（强调主语）</p>
<p><strong>→It is a new pupil that</strong> we're going to know at
school tomorrow.（强调宾语）</p>
<p><strong>→It is at school that</strong> we're going to know a new
pupil tomorrow.（强调地点状语）</p>
<p><strong>→It is tomorrow that</strong> we're going to know a new pupil
at school.（强调时间状语）</p>
<h2 id="时态">时态</h2>
<p>动词的时态一共有十六种：</p>
<ul>
<li>一般现在时、一般过去时、一般将来时、一般过去将来时；</li>
<li>现在进行时、过去进行时、将来进行时、过去将来进行时；</li>
<li>现在完成时、过去完成时、将来完成时、过去将来完成时；</li>
<li>现在完成进行时、过去完成进行时、将来完成进行时、过去将来完成进行时。</li>
</ul>
<p>但最常用的主要有以下九种：</p>
<h3 id="一般现在时">1. 一般现在时</h3>
<p>表示<strong>人或事物的特点、经常或习惯性的动作、现在的状况以及客观规律和永恒真理</strong>等。句子中常有
often, always, from time to time 等时间状语。</p>
<ul>
<li>I usually go to school at 8 o'clock every
morning．我通常早上八点去学校。</li>
<li>Tibet is situated in the southwest of
China．西藏在中国的西南部。</li>
<li>Sometimes I do not know what to
do．有些时候我不知道该怎么办才好。</li>
</ul>
<h3 id="现在进行时">2. 现在进行时</h3>
<p>表示当下的一段时间内<strong>正在进行的某种活动</strong>，常用的时间状语有
now,at this time, these days 等。<strong>一般结构：</strong>系动词
am/is/are + V-ing。</p>
<ul>
<li>He<strong>'s not fighting</strong> alone at this
moment！此刻他不是一个人在战斗！</li>
<li><strong>Are</strong> you <strong>surfing</strong> the
Internet？你正在上网吗？</li>
</ul>
<h3 id="现在完成时">3. 现在完成时</h3>
<p>表示过去的<strong>动作已经完成，但对现在情况仍存在一定的影响</strong>；也可表示从过去一直持续到现在的动作或状态。常用的时间状语有
recently, lately,since... ,in the past few years,so far, these days
等。<strong>一般结构：have/has + done。</strong></p>
<ul>
<li>It is the most interesting book I <strong>have read</strong>
recently. 这是我最近看过的最有趣的一本书。</li>
<li>It <strong>hasn't rained</strong> for half a year in that place.
那个地方已经半年没有下雨了。</li>
</ul>
<h3 id="一般过去时">4. 一般过去时</h3>
<p>表示在过去某个确定时间里发生的动作，不强调对现在的影响，只说明过去。常用的时间状语有
yesterday, last week, at that time, once, during the war, before...</p>
<p><strong>一般结构：主语 + was/were 或者行为动词的过去式 +
宾语</strong></p>
<ul>
<li>He <strong>stayed</strong> outside last
night．他昨天晚上待在外面。</li>
<li>I <strong>didn't</strong> go to school
yesterday．我昨天没有去学校。</li>
</ul>
<h3 id="过去进行时">5. 过去进行时</h3>
<p>表示<strong>过去某个时间正在发生的动作</strong>。常用的时间状语有：at
this time yesterday, at that time, this morning, the whole
morning.....</p>
<p><strong>过去进行时的一般结构：was/were + doing</strong></p>
<ul>
<li>He <strong>was walking</strong> leisurely by the
lake．他正在湖边悠闲地散步。</li>
<li>She <strong>wasn't doing</strong> her homework when I got home.
当我回到家的时候她没有在做作业。</li>
</ul>
<h3 id="过去完成时">6. 过去完成时</h3>
<p>表示过去<strong>某个时间之前已经完成</strong>的动作，即
<strong>“过去的过去”</strong>。常用的时间状语有：before, until, when,
after, once, as soon as, by the end of last year...</p>
<p><strong>过去完成时的一般结构：had + done</strong></p>
<ul>
<li>When the police arrived, the thief <strong>had run</strong> away.
当警察赶到的时候，小偷已经跑了。</li>
<li>He said that he <strong>hadn't learned</strong> any English
before．他说他以前没有学过英语。</li>
</ul>
<h3 id="一般将来时">7. 一般将来时</h3>
<p>表示在<strong>将来某个时间会发生</strong>的动作或情况。常用的时间状语有：tomorrow,
next day, soon, in a few minutes, by...,the day after tomorrow...</p>
<p><strong>一般结构：am/is/are going to + do 或 will/shall +
do</strong></p>
<ul>
<li>Our school <strong>will host</strong> the sports meeting in
July．我们学校 7 月将举行运动会。</li>
<li>He <strong>isn't going to</strong> buy that
house．他不会买那套房子了。</li>
</ul>
<h3 id="将来进行时">8. 将来进行时</h3>
<p>表将来某个时间正在发生的动作。常用的时间状语有：soon, tomorrow, this
evening, on Sunday, by this time, in two days, tomorrow evening....</p>
<p><strong>一般结构：will/shall be + doing</strong></p>
<p>I'<strong>ll be doing</strong> my homework this time
tomorrow．明天这个时候我正在写作业。</p>
<p>Nancy <strong>will not be doing</strong> exercise tomorrow morning.
南希明天早上这会儿将不会在锻炼身体。</p>
<h3 id="将来完成时">9. 将来完成时</h3>
<p>表示在<strong>将来某一时间以前已经完成</strong>的动作。常用的时间状语为
by the time of; by the end of + 时间短语（将来）; by the time +
从句（将来）。</p>
<p><strong>一般结构：be going to/will/shall + have done</strong></p>
<ul>
<li>They <strong>will have been</strong> friends for 10 years by then.
到那个时候他们已经成为朋友 10 年了。</li>
<li>By the time you reach the station, the train <strong>will have
left.</strong> 你到车站的时候，火车将已经离开了。</li>
<li><strong>Will you have finished</strong> this experiment by the end
of this term? 到这个期末你们能完成这个实验吗？</li>
</ul>
<h2 id="英语语法的简单梳理">英语语法的简单梳理</h2>
<p>我：I love you</p>
<p>I 主语，love 谓语，you 宾语</p>
<p>英语老师：Why?</p>
<p>我：you are beautiful</p>
<p>you 主语，are 系动词，beautiful 表语</p>
<p>英语老师：I agree，anything else？</p>
<p>I 主语，agree，谓语</p>
<p>我：you make me happy</p>
<p>you 主语，make 谓语，me 宾语，happy 宾补，用来形容 me</p>
<p>我：and I bought you a rose</p>
<p>I 主语，bought 谓语，you 间接宾语，rose 直接宾语</p>
<p>英语老师：Oh my god，you are the most clever boy that I have ever
met</p>
<p>定语从句，I have ever met 修饰
boy，因为它是个句子，所以是定语从句。</p>
<p>英语老师：But I don’t know whether you will still love me in the
future</p>
<p>I 主语，know 谓语，whether you will still love me in the future
是宾语，因为他是个句子，所以是宾语从句</p>
<p>我：I will be always loving you until I die</p>
<p>until I die 作为状语，修饰 I will be always loving you 这个动作，因为
I die 是个句子，所以这是个状语从句</p>
<p>英语老师：That you love me is not allowed， because I’m your
teacher</p>
<p>That you love me 是主语，因为是个完整的句子，所以是主语从句</p>
<p>我：The fact that you are my teacher doesn’t affect our love at
all</p>
<p>the fact 和 that you are my teacher 表述的是同一个事，you are my
teacher 是个句子，修饰 fact，所以是同位语从句。</p>
<p>英语老师：The problem is that I care about rumors</p>
<p>The problem 是主语，is 系动词，I care about rumours
是表语，因为它是个句子，所以是表语从句</p>
<p>我：Trust me, I’ll protect you</p>
<p>英语老师：你他妈的又在课堂上睡觉，赶紧回答下这个问题，英语总共有哪些基本句式和几大从句</p>
<p>我：<strong>五大基本句式，主谓宾，主谓，主系表，主谓宾宾，主谓宾补。六大从句，定语从句，宾语从句，表语从句，主语从句，状语从句，同位语从句。所有复杂句，都可以追溯到这五大基本句和六大从句。</strong></p>
<p>英语老师：算你回答的不错，再课堂上睡觉，头都给你打爆。</p>
<p>完</p>
<h2 id="英语语法主干">英语语法主干</h2>
<p>首先，大家要清楚学习语法的目的是什么。</p>
<p><strong>说白了是为了造句子，看懂句子，语法就是句子排列的规则。</strong></p>
<p>而为什么学英语的同学们总是挣扎在语法的苦海里，到底是苦海无边，还是因为大家根本没有真正认真去了解过语法的精髓，只是在无限重复以下错误做法？</p>
<p>看看下图你有没有中招：</p>
<p><img
src="/images/v2-100a9a8f60ba65b54e4a8ad2a123b004_r.jpg.png" /></p>
<p>而真正高效的学习语法的姿势就是，<strong>抓重点。</strong></p>
<p>我们不是语法专家，不需要面面俱到，把 have 的几十个短语都背下来；</p>
<p>况且，就算你全背下来，也很难全部学会用法。一句话，把语法当成字典背，你就输了。</p>
<h3 id="英语句子-主干-修饰成分">英语句子 = 主干 + 修饰成分</h3>
<p><strong>语法是有逻辑，有框架的。</strong></p>
<p><strong>英语语法的框架可以用一个公式来表达：</strong></p>
<p><strong>英语句子 = 主干 + 修饰成分</strong></p>
<p><strong>一.
主干就是英语中五大句型（简单句)，简单句就是只有一套主谓结构。</strong></p>
<p><img
src="/images/v2-00312c8b59e642e370f6bf2147a58988_r.jpg.png" /></p>
<p><strong>1. 主谓 (一个句子最不可或缺的两个部分）：You jump；I
jump.</strong></p>
<p><strong>2. 主谓宾（宾语是主语动作的对象)：I love him.</strong></p>
<p><strong>3. 主谓宾（人）宾（物）：please do me(人） a
favor（物）.</strong></p>
<p><strong>检验是否是双宾语句型的原则：两个宾语可以调换位置，增加相应介词
to/for please do a favor for me</strong></p>
<p><strong>4. 主谓宾补（补充说明宾语）：I found the book easy(the book
是 found 的对象，easy 是用来修饰 the book 的)</strong></p>
<p><strong>检验是否是宾补句型的原则：宾语和补语之间加一个系动词，可以构成语义通顺的句子
the book is easy</strong></p>
<p><strong>5. 主系表（说明主语的状态特点）：She is pretty.</strong></p>
<h3 id="动词构成了一个句子的骨架结构">动词构成了一个句子的骨架结构</h3>
<p>一定要记住，英语黄金思维法则第一条——
<strong>动词构成了一个句子的骨架结构！</strong></p>
<p><strong>因为动词决定了一个句子是否有宾语，有几个宾语以及其他句子成分。</strong></p>
<p>我为大家整理了几个例句，帮助大家更好地理解简单句几个句型：</p>
<p><img src="/images/v2-18efa839fd6d7eed7c0dc17a9638a585_r.jpg" /></p>
<p><strong>二.
任何高阶复杂的句子都是从这五种简单句型演化而来。</strong></p>
<p>五种基本句型，是解读英语句子和构造英语句子的基础。</p>
<p>英文中各种复杂句子均是由这五种基本句型扩大、组合、省略或倒装等各种形式变化而来。</p>
<p>简单句没有什么句序的调整，所以翻译起来基本没有什么难度。</p>
<p>但是如果都是这五大简单句型的句子，我们也就不会觉得语法难了，长难句有了方法也很简单，<strong>任何长难句都是这些简单句型的演变</strong>，无非是加入了一些修饰成分。</p>
<p>我将以<strong>『薄荷英语外刊』</strong>中的句子分析为例，带大家一起实践，在长难句中学习单词和语法。</p>
<p>分析长难句首先要找到主干，层层剖析。我最喜欢 APP
的这一点：<strong>挑出长难句中的关键结构来解析句子</strong>，打磨读者对于长难句的语感，让读者在分析长难句时越来越熟练。</p>
<p><strong>以下面句子为例</strong></p>
<p><img src="/images/v2-93f1a7180c6bd1561badd5c1d0623ba4_r.jpg" /></p>
<p>乍一看是不是很难？尤其是第二句话就占了三行。不要着急，我们逐层分析将它
“打败”。</p>
<p>首先解决单词。句中 “subjects” 的常用词义是
“主题”，但是在该句中显然不合理。那么我们就需要在句子中理解它的意思。由后面“30
million” 及下文的 “queen” 女王得知这里的 “subjects” 指人，是
“臣民，国民” 的意思。</p>
<p>单词基本了解后，接着解决语法。APP
上老师会将句子中的关键结构标出并由此剖析句子。第一句是由 “so...that”
引导的结果状语从句; 第二句的主干是“the Queen regretted giving...and
requested...”。</p>
<p><img src="/images/v2-c99bea7017c3ce2d831cf83a29e24977_r.jpg" /></p>
<p>以上例子简单地阐述了如何将单词、语法及句子三者有机地统一学习。在 APP
上，还有很多类似的分析。</p>
<p><img src="/images/v2-32580eb2a9a1a2587ad4389f41659fa3_r.jpg" /></p>
<p>英语学习不是一蹴而就的，它是一个漫长的过程。多读一些外刊，像《薄荷英语外刊》，《经济学人》等，对你的英语学习很有帮助。</p>
<p>再说回简单句，如果你在英文写作中全部使用简单句型，那就显示不了英语水平，很难在应试中取悦阅卷老师，也就是我们说的提升不了文章的逼格。</p>
<p>所以，我们就是要找出让我们看不懂句子的罪魁祸首——<strong>句子中的修饰成分。</strong></p>
<p>英语中的修饰成分，分<strong>定语</strong>和<strong>状语</strong>两种情况。</p>
<p><img src="/images/v2-93b6e324889c2c9f61292ddce5bec323_r.jpg" /></p>
<p>两种修饰成分：</p>
<p>修饰名词叫定语——修饰限定名词。</p>
<p>修饰其他词的叫状语——把句子「壮大」。</p>
<p><strong>下面介绍第一种修饰成分，定语——修饰限定名词。</strong></p>
<p>定语的修饰，分下面四种情况：</p>
<p><img
src="/images/v2-083e062e089eea662efcb3c24661cdac_r.jpg.png" /></p>
<p>分别举例子：</p>
<p><strong>形容词：</strong>She is a <strong>lovely</strong> girl.
她是一位<strong>可爱的</strong>女孩。</p>
<p><strong>定语从句：</strong>New York is the place <strong>that he
would like to visit</strong>.
纽约是<strong>他想去游览的</strong>地方。</p>
<p><strong>介词短语</strong>：The girl <strong>in red</strong> is my
sister. <strong>穿红色衣服的</strong>那个女孩，是我的妹妹。</p>
<p><strong>非谓语动词</strong>：the girl <strong>standing</strong>
there=the girl <strong>who is standing</strong> there.
<strong>站在那的</strong>女孩。</p>
<p>the building <strong>completed</strong> yesterday=the building
<strong>that was completed</strong> yesterday.
<strong>昨天竣工的</strong>楼房</p>
<p>I have something <strong>to say=</strong> I have something that I
want <strong>to say.</strong> 我还有些<strong>要说的</strong>话。</p>
<p>从上面非谓语例句可以看到，<strong>非谓语动词通常可以变成定语从句。</strong></p>
<p>接下来讲状语。</p>
<p><strong>状语——功能是扩大句子，把句子变复杂，即所谓的长难句。它有以下几种形式：</strong></p>
<p><img
src="/images/v2-4709bd6aca90c749a4c0ea6a66e7655b_r.jpg.png" /></p>
<p><strong>名词</strong>: come <strong>this way.</strong></p>
<p><strong>副词</strong>: speak <strong>politely.</strong></p>
<p><strong>介词短语</strong>：Can you say it <strong>in
English？</strong></p>
<p><strong>状语从句</strong>：I enjoyed myself <strong>when I visited my
friends in Shanghai last year.</strong></p>
<p><strong>非谓语动词：Having finished the homework,</strong> I went
home.</p>
<p><strong>Given more time</strong>, I could write the essay better.</p>
<p><strong>To give the teacher a good impression</strong>, I decided to
help her.</p>
<p>最后，再介绍英语黄金思维法则第二条——</p>
<p>如果要表达多个动作概念：有三种方式</p>
<p><strong>1. 使用连词</strong></p>
<p><strong>2. 使用非谓语动词</strong></p>
<p><strong>3. 使用从句</strong></p>
<p><img
src="/images/v2-851dc69eba1c9561293b388841730e48_r.jpg.png" /></p>
<p>我给大家举一个长难句，并带大家分析本句的句子结构大家就明白了——</p>
<p>例句：There are many lovers become strangers finally</p>
<p><strong>此句是错误的，因为一个句子只能有一个动词，这里面有两个动词，所以另外一个动词就需要变一下形式。</strong></p>
<p>那该如何改呢？根据上面的情况，可以有三种改法。</p>
<p>1.There are many lovers <strong>and</strong> they become strangers
finally(并列连词）</p>
<p>2.There are many lovers <strong>who become strangers
finall</strong>y(从句）</p>
<p>3.There are many lovers <strong>becoming strangers
finally</strong>(非谓语动词）</p>
<p><strong>主干和修饰成分讲完了，该实战演练了，下面给出一句考研英语中的句子。</strong></p>
<p><strong>你会发现原来考研英语的句子也可以这么简单看懂</strong></p>
<p>例句：During the past generation, the American middle-class family
that once could count on hard work and fair play to keep itself
financially secure has been transformed by economic risk and new
realities.</p>
<p>大家直接按步骤就能看懂。</p>
<p><img src="/images/v2-a8b59de94ebdb3f5cb12995162c8f798_r.jpg" /></p>
<p>注：本文是英语语法干货中的干货，是语法最精髓的要义。</p>
<p>要读懂一个英文句子，希望大家能够做到，先拆分句子结构，剔除修饰成分，拎出本句的谓语动词和简单句骨骼。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>English</category>
        <category>语法</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>english</tag>
      </tags>
  </entry>
  <entry>
    <title>python 数据精度</title>
    <url>/b656bb93e116f57d822708c4a3df64eca503468c/</url>
    <content><![CDATA[<p>因为二进制表示浮点数的特殊性, 浮点数误差在计算机编程中普遍存在, 参考:
<a
href="../0a439d90b4580decd4ee52f222a25a30b9f2cd21">浮点数精度问题及解决方案</a>
下面是 Python 语言的浮点数精度问题和解决方案</p>
<h3 id="python-浮点小数精度问题">python 浮点小数精度问题</h3>
<ol type="1">
<li><strong>小数的精度问题</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种情况</span></span><br><span class="line">a = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">print</span>(a)             <span class="comment"># 默认精度</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.17f \n&quot;</span>%a)  <span class="comment"># 17位精度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种情况</span></span><br><span class="line">b = <span class="number">1.1</span> + <span class="number">2.2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>输出: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">0.1 </span><br><span class="line">0.10000000000000001 <span class="comment"># 超出16位后就会出现误差</span></span><br><span class="line"></span><br><span class="line">3.3000000000000003  <span class="comment"># 小数计算误差</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2022-12-07,28,250--></p>
<ol start="2" type="1">
<li><strong>round() 的进位规则问题</strong></li>
</ol>
<p>在Python 3里面， <code>round</code>对小数的精确度采用
<code>四舍六入五成双</code>的方式。比如 1.15—&gt;1.2, 1.25—&gt;1.2,
1.250—&gt;1.2, 1.25012—&gt;1.3</p>
<p><code>round</code>给出的结果如果与你设想的不一样，有两个原因：</p>
<ol type="1">
<li>你的这个小数在计算机中能不能被精确储存？如果不能，那么它可能并没有达到四舍五入的标准，例如 <code>1.115</code>，它的小数点后第三位实际上是 <code>4</code>，当然会被舍去。<br />
</li>
<li>如果你的这个小数在计算机中能被精确表示，那么， <code>round</code>采用的进位机制是 <code>奇进偶舍</code>，所以这取决于你要保留的那一位，它是奇数还是偶数，以及它的下一位后面还有没有数据。
<!--SR:!2022-12-07,28,250--></li>
</ol>
<h3 id="解决方法">解决方法</h3>
<ol type="1">
<li><strong>小数的精度问题</strong> 使用 Decimal 表示和计算数字
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"></span><br><span class="line">a = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">print</span>(a)             <span class="comment"># 默认精度</span></span><br><span class="line"><span class="built_in">print</span>(Decimal(<span class="string">&#x27;0.1&#x27;</span>))  <span class="comment"># 17位精度</span></span><br><span class="line"></span><br><span class="line">b = Decimal(<span class="string">&#x27;1.1&#x27;</span>) + Decimal(<span class="string">&#x27;2.2&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li><strong>round() 的进位规则问题</strong> 自定义round规则
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal, ROUND_HALF_UP</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_round</span>(<span class="params">number: <span class="built_in">str</span>, precision: <span class="built_in">int</span> = <span class="number">0</span></span>):  </span><br><span class="line">    <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">    自定义浮点型四舍五入  </span></span><br><span class="line"><span class="string">    :param number: 输入数值  </span></span><br><span class="line"><span class="string">    :param precision: 浮点型的精度位数, 可能是负数  </span></span><br><span class="line"><span class="string">    :return:  </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    number_decimal = Decimal(number)  </span><br><span class="line">    number_float = <span class="built_in">float</span>(number)  </span><br><span class="line">  </span><br><span class="line">    sign = <span class="number">1</span>  <span class="comment"># 正负号处理， 默认是正号  </span></span><br><span class="line">    <span class="keyword">if</span> number_decimal &lt; <span class="number">0</span>:  <span class="comment"># 符号变更 (Decimal 的 quantize 不支持负数, 需要先转为正数)  </span></span><br><span class="line">        sign = -<span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        number_float = number_float * -<span class="number">1</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> precision &lt;= <span class="number">0</span>:  </span><br><span class="line">        <span class="comment"># 整数或者负精度的数字的处理方式  </span></span><br><span class="line">        base = <span class="number">10</span> ** precision  </span><br><span class="line">        big = number_float * base + <span class="number">0.5</span>  <span class="comment"># 先变小&#x27;精度*10&#x27;倍, 然后 +0.5 进位  </span></span><br><span class="line">        restore = <span class="built_in">int</span>(big) / base  </span><br><span class="line">        <span class="keyword">return</span> sign * restore  </span><br><span class="line">  </span><br><span class="line">    precision = <span class="built_in">str</span>(<span class="number">1</span> / <span class="number">10</span> ** precision)  </span><br><span class="line">    <span class="keyword">return</span> number_decimal.quantize(Decimal(precision), rounding=ROUND_HALF_UP) * sign</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(<span class="number">3.14159265358979323846</span>, <span class="number">19</span>)&#125;</span> \tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;3.14159265358979323846&#x27;</span>, <span class="number">19</span>)&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(-<span class="number">6.25</span>, -<span class="number">1</span>)&#125;</span> \tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;-6.25&#x27;</span>, -<span class="number">1</span>)&#125;</span>&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;normal round: <span class="subst">&#123;<span class="built_in">round</span>(<span class="number">6.25</span>, -<span class="number">2</span>)&#125;</span>\tcustom round:<span class="subst">&#123;custom_round(<span class="string">&#x27;6.25&#x27;</span>, -<span class="number">2</span>)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
</ol>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>python 数据精度
<ul>
<li><a
href="../0a439d90b4580decd4ee52f222a25a30b9f2cd21">浮点数精度问题及解决方案</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>浮点数精度问题及解决方案</title>
    <url>/0a439d90b4580decd4ee52f222a25a30b9f2cd21/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://fivecakes.com/p/5f2fa84aa02ad92eba436b17">fivecakes.com</a></p>
</blockquote>
<h2 id="浮点数精度问题">浮点数精度问题</h2>
<p>浮点数精度问题示例： <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> a = <span class="number">0.1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.10f\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%.15f\n\n&quot;</span>,a);</span><br><span class="line">    </span><br><span class="line">    <span class="type">float</span> b = <span class="number">100000000</span>;</span><br><span class="line">    <span class="type">float</span> c = <span class="number">5</span>;</span><br><span class="line">    <span class="type">float</span> d = b + c;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%f\n\n&quot;</span>, d);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> 输出为 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="code"><pre><span class="line"><span class="number">0.100000</span> 		    <span class="comment">//正确输出是因为四舍五入了</span></span><br><span class="line"><span class="number">0.1000000015</span>		<span class="comment">//将精确度提高就会发现误差</span></span><br><span class="line"><span class="number">0.100000001490116</span>	<span class="comment">//再次提高精度</span></span><br><span class="line"></span><br><span class="line"><span class="number">100000008.000000</span>	<span class="comment">//加法居然算错了？傻了吧？</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-06,28,250--></p>
<h2 id="浮点数精度误差原因">浮点数精度误差原因</h2>
<p><strong>1.
第一种造成精度误差的原因是大多数小数转化为二进制为无限小数，而计算机内存有限，只能保存一部分，</strong></p>
<p>例如：<br />
0.1 转换为二进制是 0.0001100110011001100110011001100...<br />
float
只能保留一部分，所以一定会有误差，好在大多数场景用不到这么高的精度，不过要注意多个小误差累积成大误差。</p>
<p><strong>2.
第二种造成精度误差的原因是因为较大的浮点数与较小的浮点数相加。</strong></p>
<p>例子中 <code>100000000 + 5</code> 居然等于
100000008，这是因为浮点数是用科学计数法来存储数据，即：<br />
<span class="math inline">\(100000000 = 1.011111010111100001 \times
2^{26}\)</span> <span class="math inline">\(5 = 1.01 \times
2^{2}\)</span><br />
两个数相加的时候先要对阶，就是把指数部分统一，按照小阶数化为大阶数的原则：<br />
<span class="math inline">\(5 = 0.00000000000000000000000101 \times
2^{26}\)</span><br />
按照 IEEE 754 标准，<mark style="background: #fefe00A6;">浮点数 float 为
32 位，1 个符号位，8 个指数位，23 个小数位。 </mark> 而
0.00000000000000000000000101（小数点后有 26 位）不能用 23
位保存下来，所以舍入成 0.00000000000000000000001（小数点后有 23
位），就是这里的舍入造成的误差。<br />
对阶后，将尾数相加得到结果：<br />
(0.00000000000000000000001+1.011111010111100001)^{26} = 100000008
<!--SR:!2022-12-06,28,250--></p>
<h2 id="浮点数精度误差问题解决方法">浮点数精度误差问题解决方法</h2>
<p><mark style="background: #fbab4bA6;">浮点数在工程控制，游戏引擎等众多领域有着广泛的应用。但是因为其有误差，所以不适合在金融领域使用。</mark></p>
<p>某水果 3.6 元一斤，某人买了 1.2 斤，总计 4.32 元。如果用 float
存储价格的话，一单的误差比较小看不出差别。但是如果统计一年的营业额，累加很多
float 就会出现较大的误差。</p>
<h3 id="放大成int再还原法">放大成int再还原法</h3>
<p><mark style="background: #83d98fA6;">货币通常只精确到小数点后两位，所以我们可以将其乘
100，用整数存储</mark> 。上面那个例子可以将 3.6 存成 int 型 360，1.2 用
float 存储，4.32 存成 int 型 432(其实 432
由浮点数计算而来也是有误差的，但是一次计算误差非常小，四舍五入就可以得到正确的值)。累加一年营业额时累加的是
int，所以不会有误差。</p>
<h3 id="保存分子分母法">保存分子分母法</h3>
<p>更特殊的情况，某水果 3.6 元一斤，某人买了 1.2 斤，75 折，含税
0.02，快递费 1.5，总价为
3.6x1.2x0.75x0.98+1.5，多次使用浮点数参与运算，有可能造成累积误差。<mark style="background: #83d98fA6;">这种情况可以可以分子和分母分别保存</mark>
。计算时只计算分子，计算的结果也分子分母分别保存，只有显示时才除一下分母，而一次计算的误差非常小，四舍五入就可以得到正确的值。不过用这种方法要小心分子和分母溢出，或者写到一半发现这里要开个平方根或者求个三角函数，然后发现结果根本不是有理数了，进而开始怀疑人生。
<!--SR:!2022-12-06,28,250--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../b656bb93e116f57d822708c4a3df64eca503468c">python
数据精度</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>浮点数精度问题及解决方案
<ul>
<li><a href="../b656bb93e116f57d822708c4a3df64eca503468c">python
数据精度</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>3.理论</category>
        <category>计算机</category>
        <category>体系结构</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>cs</tag>
        <tag>basis</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn 简介</title>
    <url>/696c5673813e9eac4d382ce511c432cd8c3dcc4f/</url>
    <content><![CDATA[<p>Yarn 是 Facebook 发布的新一代包管理工具，旨在解决以往使用 npm
作为包管理会遇到的一些问题。特点：<mark style="background: #83d98fA6;">快</mark>
、<mark style="background: #83d98fA6;">可靠</mark>
、<mark style="background: #83d98fA6;">安全</mark> 。</p>
<h2 id="yarn-的优点">Yarn 的优点？</h2>
<ul>
<li><strong>速度快</strong> 。速度快主要来自以下两个方面： 　1.
并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm
是按照队列执行每个 package，也就是说必须要等到当前 package
安装完成之后，才能继续后面的安装。而 Yarn
是同步执行所有任务，提高了性能。 　2.
离线模式：如果之前已经安装过一个软件包，用 Yarn
再次安装时之间从缓存中获取，就不用像 npm 那样再从网络下载了。</li>
<li><strong>安装版本统一</strong>：为了防止拉取到不同的版本，Yarn
有一个锁定文件 (lock file)
记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn
就会创建（或更新）yarn.lock
这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm
其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm
shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install
的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm
和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过
shrinkwrap 命令生成 npm-shrinkwrap.json
文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。</li>
<li><strong>更简洁的输出</strong>：npm 的输出信息比较冗长。在执行 npm
install 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn
简洁太多：默认情况下，结合了 emoji
直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。</li>
<li><strong>多注册来源处理：</strong>
所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是
npm 要么是 bower, 防止出现混乱不一致。</li>
<li><strong>更好的语义化</strong>： yarn 改变了一些 npm 命令的名称，比如
yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。
<!--SR:!2022-11-14,40,250--></li>
</ul>
<h2 id="常用命令">常用命令</h2>
<p><strong>执行 <code>yarn / yarn install</code> 解析 package.json
时，分为 4 个步骤：</strong></p>
<ol type="1">
<li><strong>依赖关系解析</strong>：yarn 在解析 package.json
文件时，会对其每个依赖包进行遍历分析生成 yarn.lock
文件。该文件描述了项目中每个包以及每个包中所依赖的包的版本信息。<br />
</li>
<li><strong>包下载</strong>：根据第一步中解析的结果下载特定版本的包。如果该包曾经被下载过，则跳过此次的下载操作，直接使用本地缓存，即
yarn 的离线模式特性。<br />
</li>
<li><strong>包关联</strong>：关联拷贝下载或者缓存在全局的包到项目。<br />
</li>
<li><strong>包编译</strong>：编译项目中使用到的包。 <br />
<!--SR:!2022-11-15,16,250--></li>
</ol>
<p>yarn.lock(该文件用于锁定包版本已保障每次编译的结果一致，也可通过 yarn
install --no-lockfile 命令设置不生成 yarn.lock 文件)</p>
<p><strong>yarn &amp; npm 常用命令对比</strong> Yarn 的命令基本跟 npm
的大同小异， 使用 <code>yarn init</code> 生成 package.json 文件， 用
<code>yarn add</code>和 <code>yarn add --dev</code> 分别替换
<code>npm install --save</code> 和<code>npm install --dev</code>
命令即可。</p>
<table width="825">
<thead>
<tr>
<th>
NPM
</th>
<th>
YARN
</th>
<th>
说明
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
npm init
</td>
<td>
yarn init
</td>
<td>
初始化某个项目
</td>
</tr>
<tr>
<td>
npm install/link
</td>
<td>
yarn install/link
</td>
<td>
默认的安装依赖操作
</td>
</tr>
<tr>
<td>
npm install taco —save
</td>
<td>
yarn add taco
</td>
<td>
安装某个依赖，并且默认保存到 package.
</td>
</tr>
<tr>
<td>
npm uninstall taco —save
</td>
<td>
yarn remove taco
</td>
<td>
移除某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco —save-dev
</td>
<td>
yarn add taco —dev
</td>
<td>
安装某个开发时依赖项目
</td>
</tr>
<tr>
<td>
npm update taco —save
</td>
<td>
yarn upgrade taco
</td>
<td>
更新某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco --global
</td>
<td>
yarn global add taco
</td>
<td>
安装某个全局依赖项目
</td>
</tr>
<tr>
<td>
npm publish/login/logout
</td>
<td>
yarn publish/login/logout
</td>
<td>
发布 / 登录 / 登出，一系列 NPM Registry 操作
</td>
</tr>
<tr>
<td>
npm run/test
</td>
<td>
yarn run/test
</td>
<td>
运行某个命令
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-25,54,250-->
<h2 id="设置国内源">设置国内源</h2>
<p>yarn 原仓库包下载不稳定时需要设置国内源</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure></div>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
<li><a href="../4ce24a9a0b757cfdf6a6b990df3fc82506a5cddc">Node
开发环境搭建 Win10</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Yarn 简介
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
<li><a href="../4ce24a9a0b757cfdf6a6b990df3fc82506a5cddc">Node
开发环境搭建 Win10</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Server</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>N 常用命令</title>
    <url>/08b6858d1e7f950a80d08062a2a9e8c429243979/</url>
    <content><![CDATA[<p><strong>n 常用命令有哪些?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 10.13.0 版本的 Node.js </span></span><br><span class="line">n 10.13.0                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版 nodejs</span></span><br><span class="line">sudo n stable </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版 nodejs</span></span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个版本</span></span><br><span class="line">n <span class="built_in">rm</span> 10.13.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 n 切换版本</span></span><br><span class="line">n   --回车</span><br><span class="line">    node/10.13.0</span><br><span class="line">  ο node/10.15.3</span><br><span class="line">    node/11.0.0</span><br><span class="line">    node/11.8.0</span><br><span class="line">    node/12.2.0</span><br><span class="line"><span class="comment"># 按上下键选择版本后，回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nodejs 版本</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定的版本来执行脚本</span></span><br><span class="line">n use 10.13.0  test.js</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-04-13,175,252-->
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>N 常用命令
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>n</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 常用命令</title>
    <url>/3891bc44a6507d046fb5508c9955848ad90bf49c/</url>
    <content><![CDATA[<h3 id="安装模块">1. 安装模块</h3>
<p><strong>npm 安装命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm i/install moduleName    <span class="comment"># 安装模块；i 是 install 的缩写，两者功能是一样的</span></span><br><span class="line">npm i moduleName -g         <span class="comment"># 全局安装模块</span></span><br><span class="line">npm i moduleName@0.0.1      <span class="comment"># 安装模块的指定版本</span></span><br><span class="line"></span><br><span class="line">npm i moduleName --save     <span class="comment"># 安装并保存至 package.json 文件的 dependencies 中</span></span><br><span class="line">npm i moduleName --save-dev <span class="comment"># 安装并保存至 package.json 文件的 devDependencies 中</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-25,126,252-->
<p><strong>npm 直接从 github 安装 module</strong></p>
<ul>
<li><strong>命令行</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm install qiaogaojian/pouchdb-server  </span><br></pre></td></tr></table></figure></div> 或者<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm install git://github.com/qiaogaojian/pouchdb-server<span class="comment">#sqlite5  </span></span><br></pre></td></tr></table></figure></div></li>
<li><strong>package.json</strong><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;git://github.com/user/project.git#commit-ish&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div> 或者<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">   <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;user/project#branch_name&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure></div> <!--SR:!2022-10-20,22,252--></li>
</ul>
<h3 id="查看已安装模块">2. 查看已安装模块</h3>
<p><strong>npm查看已安装模块命令?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span>                       <span class="comment"># 查看所有局部安装的模块</span></span><br><span class="line">npm <span class="built_in">ls</span> -g                    <span class="comment"># 查看所有全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm <span class="built_in">ls</span> moduleName            <span class="comment"># 查看指定模块的局部安装情况</span></span><br><span class="line">npm <span class="built_in">ls</span> moduleName -g         <span class="comment"># 查看指定模块的全局安装情况</span></span><br><span class="line"></span><br><span class="line">npm view moduleName          <span class="comment"># 查看当前源中指定模块的信息</span></span><br><span class="line">npm view moduleName versions <span class="comment"># 查看当前源中指定模块的所有历史版本</span></span><br><span class="line">npm view moduleName version  <span class="comment"># 查看当前源中指定模块的最新版本</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-03-02,168,252-->
<h3 id="卸载模块">3. 卸载模块</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm uninstall moduleName</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-02-03,150,252-->
<h3 id="更新模块">4. 更新模块</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照 package.json 中的描述更新模块，且会在 package.json 文件中保存更新后的版本描述；</span></span><br><span class="line"><span class="comment"># ^a.b.c 更新至 a 下的最新版本</span></span><br><span class="line"><span class="comment"># ~a.b.c 更新至 a.b 下的最新版本</span></span><br><span class="line"><span class="comment"># a.b.c 不会做任何更新</span></span><br><span class="line">npm update </span><br><span class="line"></span><br><span class="line">npm update moduleName <span class="comment"># 更新指定模块</span></span><br></pre></td></tr></table></figure></div>
<h3 id="npm-源查看与修改">5. npm 源查看与修改</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config get registry                                 <span class="comment"># 查看当前 npm 源地址</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org <span class="comment"># 将 npm 源设置成相应的地址</span></span><br></pre></td></tr></table></figure></div>
<h3 id="万能的-help">6. 万能的 help</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">help</span> <span class="comment"># 当忘记了相应命令后，查看帮助</span></span><br></pre></td></tr></table></figure></div>
<h3 id="npm-注意事项">npm 注意事项</h3>
<ol type="1">
<li>package-lock.json 需要提交</li>
</ol>
<p>npm 从 5.0 版本开始添加了 package-lock.json 文件 (下称 lock
文件)；用于保证再次安装模块时能安装同样的版本；如果未保存 lock 文件；npm
会安装符合描述规则的最新版本如 gulp 中的 ^3.0.0 会安装 3.9.1
版本；这就容易造成一些版本不兼容的问题；
<!--SR:!2022-11-25,108,252--></p>
<ol start="2" type="1">
<li>时间精力允许的情况下，可进一步了解 npm</li>
</ol>
<ul>
<li>packge.json 中各字段的意义</li>
<li>package-lock.json 的由来与作用 </li>
<li>npm 包的发布与更新 </li>
<li>npm 源的搭建</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
<li><a href="../4ce24a9a0b757cfdf6a6b990df3fc82506a5cddc">Node
开发环境搭建 Win10</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Npm 常用命令
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
<li><a href="../4ce24a9a0b757cfdf6a6b990df3fc82506a5cddc">Node
开发环境搭建 Win10</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 配置国内源</title>
    <url>/1147d6dfd41190e9c83dd723ff1803dc5516c66f/</url>
    <content><![CDATA[<p>刚安装的 npm
使用默认的源会感觉特别特别慢，所以，非常有必要使用国内的源，比如说众所周知的淘宝镜像源</p>
<ol type="1">
<li><strong>查看当前源</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure></div>
<ol start="2" type="1">
<li><strong>设置为淘宝源</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></div>
<ol start="3" type="1">
<li><strong>还原默认源</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure></div>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Npm 配置国内源
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 开发环境搭建 Win10</title>
    <url>/4ce24a9a0b757cfdf6a6b990df3fc82506a5cddc/</url>
    <content><![CDATA[<h2 id="安装">1. 安装</h2>
<p><strong>安装 NVM</strong> (用来安装和管理 Node)</p>
<ul>
<li>下载: <a
href="https://github.com/coreybutler/nvm-windows/releases">nvm
下载地址</a></li>
<li>版本说明:
<ul>
<li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li>
<li>nvm-setup.zip：安装版，推荐使用</li>
</ul></li>
<li>安装 nvm 之前要先卸载之前安装的所有 node.js 版本,
并且删除相关的文件夹,例如：<code>C: /Users/AppData/Roaming/npm</code></li>
<li>安装文件夹名不要出现中文和空格。</li>
<li>打开 CMD，输入 nvm，安装成功则会如下图所示，它会显示出当前 nvm
版本以及 nvm 的命令： <img
src="https://cdn.learnku.com/uploads/images/202104/01/64262/tYfMg16LUe.png!large" /></li>
</ul>
<p><mark style="background: #fbab4bA6;">注意:</mark>
某个版本下全局安装的模块，只有在当前版本能够使用</p>
<p><strong>安装 yarn</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 yarn</span></span><br><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure></div>
<h2 id="配置">2.配置</h2>
<p><strong>配置 nvm 国内源</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">nvm node_mirror https://npm.taobao.org/mirrors/node/</span><br><span class="line">nvm npm_mirror https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></div>
<p><a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#设置国内源">Yarn
简介#设置国内源</a></p>
<h2 id="常用命令">3. 常用命令</h2>
<p><a href="../3891bc44a6507d046fb5508c9955848ad90bf49c">Npm
常用命令</a> <a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#常用命令">Yarn
简介#常用命令</a></p>
<p><strong>nvm 常用命令有哪些?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">nvm list 　　　　　　  <span class="comment"># 显示已安装的版本（同 nvm list installed）</span></span><br><span class="line">nvm list available 　 <span class="comment"># 显示所有可以下载的版本</span></span><br><span class="line">nvm list installed 　 <span class="comment"># 显示已安装的版本</span></span><br><span class="line"></span><br><span class="line">nvm install 14.5.0 　 <span class="comment"># 安装14.5.0版本node</span></span><br><span class="line">nvm install latest 　 <span class="comment"># 安装最新版本node</span></span><br><span class="line"><span class="comment"># nvm install 时，有可能会出现无权限安装的问题，如果遇到此问题，请 `以管理员身份运行` cmd。</span></span><br><span class="line"></span><br><span class="line">nvm use 14.5.0 　　　 <span class="comment"># 使用14.5.0版本node</span></span><br><span class="line">nvm uninstall 14.5.0  <span class="comment"># 卸载14.5.0版本node</span></span><br><span class="line"></span><br><span class="line">nvm <span class="built_in">arch</span> 　　　　　　  <span class="comment"># 显示 node 是运行在32位还是64位系统上的</span></span><br><span class="line">nvm on 　　　　　　　  <span class="comment"># 开启nodejs版本管理</span></span><br><span class="line">nvm off 　　　　　　　 <span class="comment"># 关闭nodejs版本管理</span></span><br><span class="line">nvm proxy [url] 　　  <span class="comment"># 设置下载代理。不加可选参数url，显示当前代理。将url设置为none则移除代理。</span></span><br><span class="line"></span><br><span class="line">nvm version 　　　　   <span class="comment"># 显示nvm版本。version可简化为v。</span></span><br><span class="line">nvm -h 　　　　　　　  <span class="comment"># 可以看到nvm的所有命令，都有相应的解释。</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-04-01,169,252-->
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Node 开发环境搭建 Win10
<ul>
<li><a href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#常用命令">Yarn
简介#常用命令</a></li>
<li><a href="../3891bc44a6507d046fb5508c9955848ad90bf49c">Npm
常用命令</a></li>
<li><a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#设置国内源">Yarn
简介#设置国内源</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>deepin</tag>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 开发环境搭建 Deepin</title>
    <url>/7962ceea5a61f0bcef11f8d9abf63940e874942b/</url>
    <content><![CDATA[<h2 id="安装">1. 安装</h2>
<p><strong>使用 n 安装和管理 Node</strong></p>
<p>安装命令:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 npm</span></span><br><span class="line">sudo apt-get install npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yarn</span></span><br><span class="line">sudo npm i -g yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 n, n 模块是管理 nodejs 版本的</span></span><br><span class="line">sudo npm i -g n</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="配置">2. 配置</h2>
<ul>
<li><a href="../1147d6dfd41190e9c83dd723ff1803dc5516c66f">Npm
配置国内源</a></li>
<li><a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#设置国内源">Yarn
简介#设置国内源</a></li>
</ul>
<h2 id="常用命令">3. 常用命令</h2>
<ul>
<li><a href="../3891bc44a6507d046fb5508c9955848ad90bf49c">Npm
常用命令</a></li>
<li><a href="../08b6858d1e7f950a80d08062a2a9e8c429243979">N
常用命令</a></li>
<li><a href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#常用命令">Yarn
简介#常用命令</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Node 开发环境搭建 Deepin
<ul>
<li><a href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#常用命令">Yarn
简介#常用命令</a></li>
<li><a href="../1147d6dfd41190e9c83dd723ff1803dc5516c66f">Npm
配置国内源</a></li>
<li><a href="../08b6858d1e7f950a80d08062a2a9e8c429243979">N
常用命令</a></li>
<li><a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#设置国内源">Yarn
简介#设置国内源</a></li>
<li><a href="../3891bc44a6507d046fb5508c9955848ad90bf49c">Npm
常用命令</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Comprehensive Python Cheatsheet</title>
    <url>/9c826b624344960b78729fb44cbb2bc900da255b/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/gto76/python-cheatsheet">github.com</a></p>
</blockquote>
<blockquote>
<p>Comprehensive Python Cheatsheet. Contribute to
gto76/python-cheatsheet development by creating an acc......</p>
</blockquote>
<h1 id="comprehensive-python-cheatsheet">Comprehensive Python
Cheatsheet</h1>
<p><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/image_888.jpeg" /></p>
<h2 id="contents">Contents</h2>
<p><strong>1. Collections:</strong> <strong><a
href="#list"><code>List</code></a>,</strong> <strong><a
href="#dictionary"><code>Dictionary</code></a>,</strong> <strong><a
href="#set"><code>Set</code></a>,</strong> <strong><a
href="#tuple"><code>Tuple</code></a>,</strong> <strong><a
href="#range"><code>Range</code></a>,</strong> <strong><a
href="#enumerate"><code>Enumerate</code></a>,</strong> <strong><a
href="#iterator"><code>Iterator</code></a>,</strong> <strong><a
href="#generator"><code>Generator</code></a>.</strong><br />
<strong>2. Types:</strong> <strong><a
href="#type"><code>Type</code></a>,</strong> <strong><a
href="#string"><code>String</code></a>,</strong> <strong><a
href="#regex"><code>Regular_Exp</code></a>,</strong> <strong><a
href="#format"><code>Format</code></a>,</strong> <strong><a
href="#numbers-1"><code>Numbers</code></a>,</strong> <strong><a
href="#combinatorics"><code>Combinatorics</code></a>,</strong>
<strong><a href="#datetime"><code>Datetime</code></a>.</strong><br />
<strong>3. Syntax:</strong> <strong><a
href="#arguments"><code>Args</code></a>,</strong> <strong><a
href="#inline"><code>Inline</code></a>,</strong> <strong><a
href="#imports"><code>Import</code></a>,</strong> <strong><a
href="#decorator"><code>Decorator</code></a>,</strong> <strong><a
href="#class"><code>Class</code></a>,</strong> <strong><a
href="#duck-types"><code>Duck_Types</code></a>,</strong> <strong><a
href="#enum"><code>Enum</code></a>,</strong> <strong><a
href="#exceptions"><code>Exception</code></a>.</strong><br />
<strong>4. System:</strong> <strong><a
href="#exit"><code>Exit</code></a>,</strong> <strong><a
href="#print"><code>Print</code></a>,</strong> <strong><a
href="#input"><code>Input</code></a>,</strong> <strong><a
href="#command-line-arguments"><code>Command_Line_Arguments</code></a>,</strong>
<strong><a href="#open"><code>Open</code></a>,</strong> <strong><a
href="#paths"><code>Path</code></a>,</strong> <strong><a
href="#os-commands"><code>OS_Commands</code></a>.</strong><br />
<strong>5. Data:</strong> <strong><a
href="#json"><code>JSON</code></a>,</strong> <strong><a
href="#pickle"><code>Pickle</code></a>,</strong> <strong><a
href="#csv"><code>CSV</code></a>,</strong> <strong><a
href="#sqlite"><code>SQLite</code></a>,</strong> <strong><a
href="#bytes"><code>Bytes</code></a>,</strong> <strong><a
href="#struct"><code>Struct</code></a>,</strong> <strong><a
href="#array"><code>Array</code></a>,</strong> <strong><a
href="#memory-view"><code>Memory_View</code></a>,</strong> <strong><a
href="#deque"><code>Deque</code></a>.</strong><br />
<strong>6. Advanced:</strong> <strong><a
href="#threading"><code>Threading</code></a>,</strong> <strong><a
href="#operator"><code>Operator</code></a>,</strong> <strong><a
href="#introspection"><code>Introspection</code></a>,</strong>
<strong><a
href="#metaprogramming"><code>Metaprograming</code></a>,</strong>
<strong><a href="#eval"><code>Eval</code></a>,</strong> <strong><a
href="#coroutines"><code>Coroutines</code></a>.</strong><br />
<strong>7. Libraries:</strong> <strong><a
href="#progress-bar"><code>Progress_Bar</code></a>,</strong> <strong><a
href="#plot"><code>Plot</code></a>,</strong> <strong><a
href="#table"><code>Table</code></a>,</strong> <strong><a
href="#curses"><code>Curses</code></a>,</strong> <strong><a
href="#logging"><code>Logging</code></a>,</strong> <strong><a
href="#scraping"><code>Scraping</code></a>,</strong> <strong><a
href="#web"><code>Web</code></a>,</strong> <strong><a
href="#profiling"><code>Profile</code></a>,</strong><br />
<strong><a href="#numpy"><code>NumPy</code></a>,</strong> <strong><a
href="#image"><code>Image</code></a>,</strong> <strong><a
href="#audio"><code>Audio</code></a>,</strong> <strong><a
href="#pygame"><code>Games</code></a>,</strong> <strong><a
href="#pandas"><code>Data</code></a>.</strong></p>
<h2 id="main"><a href="#main"></a>Main</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:     # Runs main() if file wasn&#x27;t imported.</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="list"><a href="#list"></a>List</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       # Or: &lt;list&gt;[from_inclusive : to_exclusive : ±step]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.append(&lt;el&gt;)            # Or: &lt;list&gt; += [&lt;el&gt;]</span><br><span class="line">&lt;list&gt;.extend(&lt;collection&gt;)    # Or: &lt;list&gt; += &lt;collection&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.sort()                  # Sorts in ascending order.</span><br><span class="line">&lt;list&gt;.reverse()               # Reverses the list in-place.</span><br><span class="line">&lt;list&gt; = sorted(&lt;collection&gt;)  # Returns a new sorted list.</span><br><span class="line">&lt;iter&gt; = reversed(&lt;list&gt;)      # Returns reversed iterator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">sum_of_elements  = sum(&lt;collection&gt;)</span><br><span class="line">elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))</span><br><span class="line">flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))</span><br><span class="line">product_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)</span><br><span class="line">list_of_chars    = list(&lt;str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>For details about sorted(), min() and max() see <a
href="#sortable">sortable</a>.</strong></li>
<li><strong>Module <a href="#operator">operator</a> provides functions
itemgetter() and mul() that offer the same functionality as <a
href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     # Inserts item at index and moves the rest to the right.</span><br><span class="line">&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    # Removes and returns item at index or from the end.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     # Returns number of occurrences. Also works on strings.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     # Returns index of the first occurrence or raises ValueError.</span><br><span class="line">&lt;list&gt;.remove(&lt;el&gt;)            # Removes first occurrence of the item or raises ValueError.</span><br><span class="line">&lt;list&gt;.clear()                 # Removes all items. Also works on dictionary and set.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="dictionary"><a href="#dictionary"></a>Dictionary</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.</span><br><span class="line">value  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value of type.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.</span><br><span class="line">&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.</span><br><span class="line">&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.</span><br><span class="line">value = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError.</span><br><span class="line">&#123;k for k, v in &lt;dict&gt;.items() if v == value&#125;    # Returns set of keys that point to the value.</span><br><span class="line">&#123;k: v for k, v in &lt;dict&gt;.items() if k in keys&#125;  # Returns a dictionary, filtered by keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="counter"><a href="#counter"></a>Counter</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; colors = [&#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;red&#x27;]</span><br><span class="line">&gt;&gt;&gt; counter = Counter(colors)</span><br><span class="line">&gt;&gt;&gt; counter[&#x27;yellow&#x27;] += 1</span><br><span class="line">Counter(&#123;&#x27;blue&#x27;: 3, &#x27;red&#x27;: 2, &#x27;yellow&#x27;: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; counter.most_common()[0]</span><br><span class="line">(&#x27;blue&#x27;, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="set"><a href="#set"></a>Set</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt; = set()                                   # `&#123;&#125;` returns a dictionary.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= &#123;&lt;el&gt;&#125;</span><br><span class="line">&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.</span><br><span class="line">&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.</span><br><span class="line">&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn&#x27;t raise an error.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="frozen-set"><a href="#frozen-set"></a>Frozen Set</h3>
<ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an
element in a set.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frozenset&gt; = frozenset(&lt;collection&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="tuple"><a href="#tuple"></a>Tuple</h2>
<p><strong>Tuple is an immutable and hashable list.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tuple&gt; = ()                                # Empty tuple.</span><br><span class="line">&lt;tuple&gt; = (&lt;el&gt;,)                           # Or: &lt;el&gt;,</span><br><span class="line">&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="named-tuple"><a href="#named-tuple"></a>Named Tuple</h3>
<p><strong>Tuple's subclass with named elements.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import namedtuple</span><br><span class="line">&gt;&gt;&gt; Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)</span><br><span class="line">&gt;&gt;&gt; p = Point(1, y=2)</span><br><span class="line">Point(x=1, y=2)</span><br><span class="line">&gt;&gt;&gt; p[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; p.x</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; getattr(p, &#x27;y&#x27;)</span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="range"><a href="#range"></a>Range</h2>
<p><strong>Immutable and hashable sequence of integers.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;range&gt; = range(stop)                       # range(to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop)                # range(from_inclusive, to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop, ±step)         # range(from_inclusive, to_exclusive, ±step_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [i for i in range(3)]</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="enumerate"><a href="#enumerate"></a>Enumerate</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">for i, el in enumerate(&lt;collection&gt; [, i_start]):</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="iterator"><a href="#iterator"></a>Iterator</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = iter(&lt;collection&gt;)                 # `iter(&lt;iter&gt;)` returns unmodified iterator.</span><br><span class="line">&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     # A sequence of return values until &#x27;to_exclusive&#x27;.</span><br><span class="line">&lt;el&gt;   = next(&lt;iter&gt; [, default])           # Raises StopIteration or returns &#x27;default&#x27; on end.</span><br><span class="line">&lt;list&gt; = list(&lt;iter&gt;)                       # Returns a list of iterator&#x27;s remaining elements.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="itertools"><a href="#itertools"></a>Itertools</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.count(start=0, step=1)          # Returns updated value endlessly. Accepts floats.</span><br><span class="line">&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])          # Returns element endlessly or &#x27;times&#x27; times.</span><br><span class="line">&lt;iter&gt; = it.cycle(&lt;collection&gt;)             # Repeats the sequence endlessly.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])   # Empties collections in order (figuratively).</span><br><span class="line">&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)     # Empties collections inside a collection in order.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)    # Only returns first &#x27;to_exclusive&#x27; elements.</span><br><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, …)     # `to_exclusive, +step_size`. Indices can be None.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="generator"><a href="#generator"></a>Generator</h2>
<ul>
<li><strong>Any function that contains a yield statement returns a
generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def count(start, step):</span><br><span class="line">    while True:</span><br><span class="line">        yield start</span><br><span class="line">        start += step</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = count(10, 2)</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(10, 12, 14)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="type"><a href="#type"></a>Type</h2>
<ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__</span><br><span class="line">&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(&#x27;a&#x27;), &#x27;a&#x27;.__class__, str</span><br><span class="line">(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="some-types-do-not-have-built-in-names-so-they-must-be-imported"><a
href="#some-types-do-not-have-built-in-names-so-they-must-be-imported"></a>Some
types do not have built-in names, so they must be imported:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="abstract-base-classes"><a
href="#abstract-base-classes"></a>Abstract Base Classes</h3>
<p><strong>Each abstract base class specifies a set of virtual
subclasses. These classes are then recognized by isinstance() and
issubclass() as subclasses of the ABC, although they are really not. ABC
can also manually decide whether or not a specific class is its virtual
subclass, usually based on which methods the class has implemented. For
instance, Iterable ABC looks for method iter(), while Collection ABC
looks for iter(), contains() and len().</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence</span><br><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">|                  |  Iterable  | Collection |  Sequence  |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">| list, range, str |    yes     |    yes     |    yes     |</span><br><span class="line">| dict, set        |    yes     |    yes     |            |</span><br><span class="line">| iter             |    yes     |            |            |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Number)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">|                    |  Number  |  Complex |   Real   | Rational | Integral |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">| int                |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |</span><br><span class="line">| float              |   yes    |   yes    |   yes    |          |          |</span><br><span class="line">| complex            |   yes    |   yes    |          |          |          |</span><br><span class="line">| decimal.Decimal    |   yes    |          |          |          |          |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="string"><a href="#string"></a>String</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.strip(&#x27;&lt;chars&gt;&#x27;)              # Strips all passed characters from both ends.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on &#x27;sep&#x27; str at most &#x27;maxsplit&#x27; times.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains a substring.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces &#x27;old&#x27; with &#x27;new&#x27; at most &#x27;count&#x27; times.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.</span><br><span class="line">&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also: <code>'lstrip()'</code>, <code>'rstrip()'</code> and
<code>'rsplit()'</code>.</strong></li>
<li><strong>Also: <code>'lower()'</code>, <code>'upper()'</code>,
<code>'capitalize()'</code> and <code>'title()'</code>.</strong></li>
</ul>
<h3 id="property-methods"><a href="#property-methods"></a>Property
Methods</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isnumeric()   |          |          |   yes    |   yes    |   yes    |</span><br><span class="line">| isdigit()     |          |          |          |   yes    |   yes    |</span><br><span class="line">| isdecimal()   |          |          |          |          |   yes    |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also: <code>'isspace()'</code> checks for
<code>'[ \t\n\r\f\v\x1c-\x1f\x85\u2000…]'</code>.</strong></li>
</ul>
<h2 id="regex"><a href="#regex"></a>Regex</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with &#x27;new&#x27;.</span><br><span class="line">&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.</span><br><span class="line">&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.</span><br><span class="line">&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # Searches for first occurrence of the pattern.</span><br><span class="line">&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.</span><br><span class="line">&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Argument 'new' can be a function that accepts a Match object
and returns a string.</strong></li>
<li><strong>Search() and match() return None if they can't find a
match.</strong></li>
<li><strong>Argument <code>'flags=re.IGNORECASE'</code> can be used with
all functions.</strong></li>
<li><strong>Argument <code>'flags=re.MULTILINE'</code> makes
<code>'^'</code> and <code>'$'</code> match the start/end of each
line.</strong></li>
<li><strong>Argument <code>'flags=re.DOTALL'</code> makes dot also
accept the <code>'\n'</code>.</strong></li>
<li><strong>Use <code>r'\1'</code> or <code>'\\1'</code> for
backreference (<code>'\1'</code> returns a character with octal code
1).</strong></li>
<li><strong>Add <code>'?'</code> after <code>'*'</code> and
<code>'+'</code> to make them non-greedy.</strong></li>
</ul>
<h3 id="match-object"><a href="#match-object"></a>Match Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).</span><br><span class="line">&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part in the first bracket.</span><br><span class="line">&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="special-sequences"><a href="#special-sequences"></a>Special
Sequences</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;\d&#x27; == &#x27;[0-9]&#x27;                                # Matches decimal characters.</span><br><span class="line">&#x27;\w&#x27; == &#x27;[a-zA-Z0-9_]&#x27;                         # Matches alphanumerics and underscore.</span><br><span class="line">&#x27;\s&#x27; == &#x27;[ \t\n\r\f\v]&#x27;                        # Matches whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>By default, decimal characters, alphanumerics and
whitespaces from all alphabets are matched unless
<code>'flags=re.ASCII'</code> argument is used.</strong></li>
<li><strong>As shown above, it restricts all special sequence matches to
the first 128 characters and prevents <code>'\s'</code> from accepting
<code>'[\x1c-\x1f]'</code> (the so-called separator
characters).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters
will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<h2 id="format"><a href="#format"></a>Format</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = f&#x27;&#123;&lt;el_1&gt;&#125;, &#123;&lt;el_2&gt;&#125;&#x27;            # Curly brackets can also contain expressions.</span><br><span class="line">&lt;str&gt; = &#x27;&#123;&#125;, &#123;&#125;&#x27;.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: &#x27;&#123;0&#125;, &#123;a&#125;&#x27;.format(&lt;el_1&gt;, a=&lt;el_2&gt;)</span><br><span class="line">&lt;str&gt; = &#x27;%s, %s&#x27; % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C style formatting.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="attributes"><a href="#attributes"></a>Attributes</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Person = collections.namedtuple(&#x27;Person&#x27;, &#x27;name height&#x27;)</span><br><span class="line">&gt;&gt;&gt; person = Person(&#x27;Jean-Luc&#x27;, 187)</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;person.height&#125;&#x27;</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;&#123;p.height&#125;&#x27;.format(p=person)</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="general-options"><a href="#general-options"></a>General
Options</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&lt;el&gt;:&lt;10&#125;                               # &#x27;&lt;el&gt;      &#x27;</span><br><span class="line">&#123;&lt;el&gt;:^10&#125;                               # &#x27;   &lt;el&gt;   &#x27;</span><br><span class="line">&#123;&lt;el&gt;:&gt;10&#125;                               # &#x27;      &lt;el&gt;&#x27;</span><br><span class="line">&#123;&lt;el&gt;:.&lt;10&#125;                              # &#x27;&lt;el&gt;......&#x27;</span><br><span class="line">&#123;&lt;el&gt;:0&#125;                                 # &#x27;&lt;el&gt;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Options can be generated dynamically:
<code>f'&#123;&lt;el&gt;:&#123;&lt;str/int&gt;&#125;[…]&#125;'</code>.</strong></li>
<li><strong>Adding <code>'!r'</code> before the colon converts object to
string by calling its <a href="#class">repr()</a> method.</strong></li>
</ul>
<h3 id="strings"><a href="#strings"></a>Strings</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;abcde&#x27;:10&#125;                             # &#x27;abcde     &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:10.3&#125;                           # &#x27;abc       &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:.3&#125;                             # &#x27;abc&#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;!r:10&#125;                           # &quot;&#x27;abcde&#x27;   &quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="numbers"><a href="#numbers"></a>Numbers</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;123456:10&#125;                              # &#x27;    123456&#x27;</span><br><span class="line">&#123;123456:10,&#125;                             # &#x27;   123,456&#x27;</span><br><span class="line">&#123;123456:10_&#125;                             # &#x27;   123_456&#x27;</span><br><span class="line">&#123;123456:+10&#125;                             # &#x27;   +123456&#x27;</span><br><span class="line">&#123;123456:=+10&#125;                            # &#x27;+   123456&#x27;</span><br><span class="line">&#123;123456: &#125;                               # &#x27; 123456&#x27;</span><br><span class="line">&#123;-123456: &#125;                              # &#x27;-123456&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="floats"><a href="#floats"></a>Floats</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1.23456:10.3&#125;                           # &#x27;      1.23&#x27;</span><br><span class="line">&#123;1.23456:10.3f&#125;                          # &#x27;     1.235&#x27;</span><br><span class="line">&#123;1.23456:10.3e&#125;                          # &#x27; 1.235e+00&#x27;</span><br><span class="line">&#123;1.23456:10.3%&#125;                          # &#x27;  123.456%&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="comparison-of-presentation-types"><a
href="#comparison-of-presentation-types"></a>Comparison of presentation
types:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |    &#123;&lt;float&gt;&#125;   |   &#123;&lt;float&gt;:f&#125;  |   &#123;&lt;float&gt;:e&#125;  |   &#123;&lt;float&gt;:%&#125;  |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |   &#x27;5.6789e-05&#x27; |    &#x27;0.000057&#x27;  | &#x27;5.678900e-05&#x27; |    &#x27;0.005679%&#x27; |</span><br><span class="line">|  0.00056789  |   &#x27;0.00056789&#x27; |    &#x27;0.000568&#x27;  | &#x27;5.678900e-04&#x27; |    &#x27;0.056789%&#x27; |</span><br><span class="line">|  0.0056789   |   &#x27;0.0056789&#x27;  |    &#x27;0.005679&#x27;  | &#x27;5.678900e-03&#x27; |    &#x27;0.567890%&#x27; |</span><br><span class="line">|  0.056789    |   &#x27;0.056789&#x27;   |    &#x27;0.056789&#x27;  | &#x27;5.678900e-02&#x27; |    &#x27;5.678900%&#x27; |</span><br><span class="line">|  0.56789     |   &#x27;0.56789&#x27;    |    &#x27;0.567890&#x27;  | &#x27;5.678900e-01&#x27; |   &#x27;56.789000%&#x27; |</span><br><span class="line">|  5.6789      |   &#x27;5.6789&#x27;     |    &#x27;5.678900&#x27;  | &#x27;5.678900e+00&#x27; |  &#x27;567.890000%&#x27; |</span><br><span class="line">| 56.789       |  &#x27;56.789&#x27;      |   &#x27;56.789000&#x27;  | &#x27;5.678900e+01&#x27; | &#x27;5678.900000%&#x27; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |  &#123;&lt;float&gt;:.2&#125;  |  &#123;&lt;float&gt;:.2f&#125; |  &#123;&lt;float&gt;:.2e&#125; |  &#123;&lt;float&gt;:.2%&#125; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |    &#x27;5.7e-05&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-05&#x27;   |      &#x27;0.01%&#x27;   |</span><br><span class="line">|  0.00056789  |    &#x27;0.00057&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-04&#x27;   |      &#x27;0.06%&#x27;   |</span><br><span class="line">|  0.0056789   |    &#x27;0.0057&#x27;    |      &#x27;0.01&#x27;    |   &#x27;5.68e-03&#x27;   |      &#x27;0.57%&#x27;   |</span><br><span class="line">|  0.056789    |    &#x27;0.057&#x27;     |      &#x27;0.06&#x27;    |   &#x27;5.68e-02&#x27;   |      &#x27;5.68%&#x27;   |</span><br><span class="line">|  0.56789     |    &#x27;0.57&#x27;      |      &#x27;0.57&#x27;    |   &#x27;5.68e-01&#x27;   |     &#x27;56.79%&#x27;   |</span><br><span class="line">|  5.6789      |    &#x27;5.7&#x27;       |      &#x27;5.68&#x27;    |   &#x27;5.68e+00&#x27;   |    &#x27;567.89%&#x27;   |</span><br><span class="line">| 56.789       |    &#x27;5.7e+01&#x27;   |     &#x27;56.79&#x27;    |   &#x27;5.68e+01&#x27;   |   &#x27;5678.90%&#x27;   |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>When both rounding up and rounding down are possible, the
one that returns result with even last digit is chosen. That makes
<code>'&#123;6.5:.0f&#125;'</code> a <code>'6'</code> and <code>'&#123;7.5:.0f&#125;'</code>
an <code>'8'</code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented
exactly by a float (<code>.5</code>, <code>.25</code>, …).</strong></li>
</ul>
<h3 id="ints"><a href="#ints"></a>Ints</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;90:c&#125;                                   # &#x27;Z&#x27;</span><br><span class="line">&#123;90:b&#125;                                   # &#x27;1011010&#x27;</span><br><span class="line">&#123;90:X&#125;                                   # &#x27;5A&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="numbers-1"><a href="#numbers-1"></a>Numbers</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt;      = int(&lt;float/str/bool&gt;)                # Or: math.floor(&lt;float&gt;)</span><br><span class="line">&lt;float&gt;    = float(&lt;int/str/bool&gt;)                # Or: &lt;real&gt;e±&lt;int&gt;</span><br><span class="line">&lt;complex&gt;  = complex(real=0, imag=0)              # Or: &lt;real&gt; ± &lt;real&gt;j</span><br><span class="line">&lt;Fraction&gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)</span><br><span class="line">&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           # Or: Decimal((sign, digits, exponent))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'int(&lt;str&gt;)'</code> and
<code>'float(&lt;str&gt;)'</code> raise ValueError on malformed
strings.</strong></li>
<li><strong>Decimal numbers are stored exactly, unlike most floats where
<code>'1.1 + 2.2 != 3.3'</code>.</strong></li>
<li><strong>Floats can be compared with:
<code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>.</strong></li>
<li><strong>Precision of decimal operations is set with:
<code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</strong></li>
</ul>
<h3 id="basic-functions"><a href="#basic-functions"></a>Basic
Functions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         # Or: &lt;num&gt; ** &lt;num&gt;</span><br><span class="line">&lt;num&gt; = abs(&lt;num&gt;)                                # &lt;float&gt; = abs(&lt;complex&gt;)</span><br><span class="line">&lt;num&gt; = round(&lt;num&gt; [, ±ndigits])                 # `round(126, -1) == 130`</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="math"><a href="#math"></a>Math</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from math import e, pi, inf, nan, isinf, isnan    # `&lt;el&gt; == nan` is always False.</span><br><span class="line">from math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.</span><br><span class="line">from math import log, log10, log2                 # Log can accept base as second arg.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="statistics"><a href="#statistics"></a>Statistics</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="random"><a href="#random"></a>Random</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import random, randint, choice        # Also shuffle, gauss, triangular, seed.</span><br><span class="line">&lt;float&gt; = random()                                # A float inside [0, 1).</span><br><span class="line">&lt;int&gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].</span><br><span class="line">&lt;el&gt;    = choice(&lt;sequence&gt;)                      # Keeps the sequence intact.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="bin-hex"><a href="#bin-hex"></a>Bin, Hex</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = ±0b&lt;bin&gt;                                  # Or: ±0x&lt;hex&gt;</span><br><span class="line">&lt;int&gt; = int(&#x27;±&lt;bin&gt;&#x27;, 2)                          # Or: int(&#x27;±&lt;hex&gt;&#x27;, 16)</span><br><span class="line">&lt;int&gt; = int(&#x27;±0b&lt;bin&gt;&#x27;, 0)                        # Or: int(&#x27;±0x&lt;hex&gt;&#x27;, 0)</span><br><span class="line">&lt;str&gt; = bin(&lt;int&gt;)                                # Returns &#x27;[-]0b&lt;bin&gt;&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="bitwise-operators"><a href="#bitwise-operators"></a>Bitwise
Operators</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             # And (0b1100 &amp; 0b1010 == 0b1000).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             # Or  (0b1100 | 0b1010 == 0b1110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           # Left shift. Use &gt;&gt; for right.</span><br><span class="line">&lt;int&gt; = ~&lt;int&gt;                                    # Not. Also -&lt;int&gt; - 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="combinatorics"><a href="#combinatorics"></a>Combinatorics</h2>
<ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to
the list() function first!</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product([0, 1], repeat=3)</span><br><span class="line">[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),</span><br><span class="line"> (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product(&#x27;abc&#x27;, &#x27;abc&#x27;)                      #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),              # b x  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;), (&#x27;c&#x27;, &#x27;c&#x27;)]              # c x  x  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;c&#x27;)]                                      # b .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations_with_replacement(&#x27;abc&#x27;, 2)    #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b .  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;c&#x27;)]                                      # c .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.permutations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b x  .  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;)]                          # c x  x  .</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="datetime"><a href="#datetime"></a>Datetime</h2>
<ul>
<li><strong>Module 'datetime' provides 'date' <code>&lt;D&gt;</code>,
'time' <code>&lt;T&gt;</code>, 'datetime' <code>&lt;DT&gt;</code> and
'timedelta' <code>&lt;TD&gt;</code> classes. All are immutable and
hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware'
<code>&lt;a&gt;</code>, meaning they have defined timezone, or 'naive'
<code>&lt;n&gt;</code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's
timezone.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import date, time, datetime, timedelta</span><br><span class="line">from dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="constructors"><a href="#constructors"></a>Constructors</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.</span><br><span class="line">&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.</span><br><span class="line">&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, …`.</span><br><span class="line">&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microsecond=0`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of
the week as an int, with Monday being 0.</strong></li>
<li><strong><code>'fold=1'</code> means the second pass in case of time
jumping back for one hour.</strong></li>
<li><strong>Timedelta normalizes arguments to ±days, seconds
(&lt;86 400) and microseconds (&lt; 1M).</strong></li>
</ul>
<h3 id="now"><a href="#now"></a>Now</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive datetime.</span><br><span class="line">&lt;DTn&gt;    = DT.utcnow()                      # Naive datetime from current UTC time.</span><br><span class="line">&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware datetime from current tz time.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>To extract time use <code>'&lt;DTn&gt;.time()'</code>,
<code>'&lt;DTa&gt;.time()'</code> or
<code>'&lt;DTa&gt;.timetz()'</code>.</strong></li>
</ul>
<h3 id="timezone"><a href="#timezone"></a>Timezone</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tzinfo&gt; = UTC                              # UTC timezone. London without DST.</span><br><span class="line">&lt;tzinfo&gt; = tzlocal()                        # Local timezone. Also gettz().</span><br><span class="line">&lt;tzinfo&gt; = gettz(&#x27;&lt;Continent&gt;/&lt;City&gt;&#x27;)      # &#x27;Continent/City_Name&#x27; timezone or None.</span><br><span class="line">&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        # Datetime, converted to the passed timezone.</span><br><span class="line">&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Unconverted object with a new timezone.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="encode"><a href="#encode"></a>Encode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&#x27;&lt;iso&gt;&#x27;)    # Object from ISO string. Raises ValueError.</span><br><span class="line">&lt;DT&gt;     = DT.strptime(&lt;str&gt;, &#x27;&lt;format&gt;&#x27;)   # Datetime from str, according to format.</span><br><span class="line">&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.</span><br><span class="line">&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         # Local time DTn from seconds since the Epoch.</span><br><span class="line">&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  # Aware datetime from seconds since the Epoch.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>ISO strings come in following forms:
<code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[±HH:MM]'</code>, or
both separated by an arbitrary character. All parts following hours are
optional.</strong></li>
<li><strong>Python uses the Unix Epoch:
<code>'1970-01-01 00:00 UTC'</code>,
<code>'1970-01-01 01:00 CET'</code>, ...</strong></li>
</ul>
<h3 id="decode"><a href="#decode"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=&#x27;T&#x27;)      # Also: `timespec=&#x27;auto/hours/minutes/seconds/…&#x27;`.</span><br><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(&#x27;&lt;format&gt;&#x27;)    # Custom string representation.</span><br><span class="line">&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="format-1"><a href="#format-1"></a>Format</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dt = datetime.strptime(&#x27;2015-05-14 23:39:00.00 +2000&#x27;, &#x27;%Y-%m-%d %H:%M:%S.%f %z&#x27;)</span><br><span class="line">&gt;&gt;&gt; dt.strftime(&quot;%A, %dth of %B &#x27;%y, %I:%M%p %Z&quot;)</span><br><span class="line">&quot;Thursday, 14th of May &#x27;15, 11:39PM UTC+02:00&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'%Z'</code> only accepts <code>'UTC/GMT'</code> and
local timezone's code. <code>'%z'</code> also accepts
<code>'±HH:MM'</code>.</strong></li>
<li><strong>For abbreviated weekday and month use <code>'%a'</code> and
<code>'%b'</code>.</strong></li>
</ul>
<h3 id="arithmetics"><a href="#arithmetics"></a>Arithmetics</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DT&gt;   = &lt;D/DT&gt;  ± &lt;TD&gt;                   # Returned datetime can fall into missing hour.</span><br><span class="line">&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                # Returns the difference, ignoring time jumps.</span><br><span class="line">&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  # Ignores time jumps if they share tzinfo object.</span><br><span class="line">&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; ±% &lt;TD&gt;.</span><br><span class="line">&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   # How many weeks/years there are in TD. Also //.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="arguments"><a href="#arguments"></a>Arguments</h2>
<h3 id="inside-function-call"><a href="#inside-function-call"></a>Inside
Function Call</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">func(&lt;positional_args&gt;)                           # func(0, 0)</span><br><span class="line">func(&lt;keyword_args&gt;)                              # func(x=0, y=0)</span><br><span class="line">func(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inside-function-definition"><a
href="#inside-function-definition"></a>Inside Function Definition</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...</span><br><span class="line">def func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...</span><br><span class="line">def func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Default values are evaluated when function is first
encountered in the scope.</strong></li>
<li><strong>Any mutation of a mutable default value will persist between
invocations.</strong></li>
</ul>
<h2 id="splat-operator"><a href="#splat-operator"></a>Splat
Operator</h2>
<h3 id="inside-function-call-1"><a
href="#inside-function-call-1"></a>Inside Function Call</h3>
<p><strong>Splat expands a collection into positional arguments, while
splatty-splat expands a dictionary into keyword arguments.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">args   = (1, 2)</span><br><span class="line">kwargs = &#123;&#x27;x&#x27;: 3, &#x27;y&#x27;: 4, &#x27;z&#x27;: 5&#125;</span><br><span class="line">func(*args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="is-the-same-as"><a href="#is-the-same-as"></a>Is the same
as:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">func(1, 2, x=3, y=4, z=5)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inside-function-definition-1"><a
href="#inside-function-definition-1"></a>Inside Function Definition</h3>
<p><strong>Splat combines zero or more positional arguments into a
tuple, while splatty-splat combines zero or more keyword arguments into
a dictionary.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def add(*a):</span><br><span class="line">    return sum(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add(1, 2, 3)</span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="legal-argument-combinations"><a
href="#legal-argument-combinations"></a>Legal argument
combinations:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args): ...               # f(1, 2, 3)</span><br><span class="line">def f(x, *args): ...            # f(1, 2, 3)</span><br><span class="line">def f(*args, z): ...            # f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(**kwargs): ...            # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def f(*, x, y, z): ...          # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line">def f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="other-uses"><a href="#other-uses"></a>Other Uses</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;set&gt;   = &#123;*&lt;coll.&gt; [, ...]&#125;    # Or: set(&lt;collection&gt;) [| ...]</span><br><span class="line">&lt;dict&gt;  = &#123;**&lt;dict&gt; [, ...]&#125;    # Or: dict(**&lt;dict&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="inline"><a href="#inline"></a>Inline</h2>
<h3 id="lambda"><a href="#lambda"></a>Lambda</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.</span><br><span class="line">&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="comprehensions"><a
href="#comprehensions"></a>Comprehensions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]</span><br><span class="line">&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;set&gt;  = &#123;i+5 for i in range(10)&#125;                   # Or: &#123;5, 6, ..., 14&#125;</span><br><span class="line">&lt;dict&gt; = &#123;i: i*2 for i in range(10)&#125;                # Or: &#123;0: 0, 1: 2, ..., 9: 18&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [l+r for l in &#x27;abc&#x27; for r in &#x27;abc&#x27;]</span><br><span class="line">[&#x27;aa&#x27;, &#x27;ab&#x27;, &#x27;ac&#x27;, ..., &#x27;cc&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="map-filter-reduce"><a href="#map-filter-reduce"></a>Map, Filter,
Reduce</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])</span><br><span class="line">&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Reduce must be imported from the functools
module.</strong></li>
</ul>
<h3 id="any-all"><a href="#any-all"></a>Any, All</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(el)` True for any element.</span><br><span class="line">&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="conditional-expression"><a
href="#conditional-expression"></a>Conditional Expression</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [a if a else &#x27;zero&#x27; for a in (0, 1, 2, 3)]</span><br><span class="line">[&#x27;zero&#x27;, 1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="named-tuple-enum-dataclass"><a
href="#named-tuple-enum-dataclass"></a>Named Tuple, Enum, Dataclass</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line">Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)                  # Creates a tuple&#x27;s subclass.</span><br><span class="line">point = Point(0, 0)                                 # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">Direction = Enum(&#x27;Direction&#x27;, &#x27;n e s w&#x27;)            # Creates an enum.</span><br><span class="line">direction = Direction.n                             # Returns its member.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">Player = make_dataclass(&#x27;Player&#x27;, [&#x27;loc&#x27;, &#x27;dir&#x27;])   # Creates a class.</span><br><span class="line">player = Player(point, direction)                   # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="imports"><a href="#imports"></a>Imports</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import &lt;module&gt;            # Imports a built-in or &#x27;&lt;module&gt;.py&#x27;.</span><br><span class="line">import &lt;package&gt;           # Imports a built-in or &#x27;&lt;package&gt;/__init__.py&#x27;.</span><br><span class="line">import &lt;package&gt;.&lt;module&gt;  # Imports a built-in or &#x27;&lt;package&gt;/&lt;module&gt;.py&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Package is a collection of modules, but it can also define
its own objects.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python
files with an optional init script.</strong></li>
<li><strong>Running <code>'import &lt;package&gt;'</code> does not
automatically provide access to the package's modules unless they are
explicitly imported in its init script.</strong></li>
</ul>
<h2 id="closure"><a href="#closure"></a>Closure</h2>
<p><strong>We have/get a closure in Python when:</strong></p>
<ul>
<li><strong>A nested function references a value of its enclosing
function and then</strong></li>
<li><strong>the enclosing function returns the nested
function.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_multiplier(a):</span><br><span class="line">    def out(b):</span><br><span class="line">        return a * b</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>If multiple nested functions within enclosing function
reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use
<code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</strong></li>
</ul>
<h3 id="partial"><a href="#partial"></a>Partial</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import operator as op</span><br><span class="line">&gt;&gt;&gt; multiply_by_3 = partial(op.mul, 3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Partial is also useful in cases when function needs to be
passed as an argument because it enables us to set its arguments
beforehand.</strong></li>
<li><strong>A few examples being:
<code>'defaultdict(&lt;function&gt;)'</code>,
<code>'iter(&lt;function&gt;, to_exclusive)'</code> and dataclass's
<code>'field(default_factory=&lt;function&gt;)'</code>.</strong></li>
</ul>
<h3 id="non-local"><a href="#non-local"></a>Non-Local</h3>
<p><strong>If variable is being assigned to anywhere in the scope, it is
regarded as a local variable, unless it is declared as a 'global' or a
'nonlocal'.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_counter():</span><br><span class="line">    i = 0</span><br><span class="line">    def out():</span><br><span class="line">        nonlocal i</span><br><span class="line">        i += 1</span><br><span class="line">        return i</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = get_counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="decorator"><a href="#decorator"></a>Decorator</h2>
<ul>
<li><strong>A decorator takes a function, adds some functionality and
returns it.</strong></li>
<li><strong>It can be any <a href="#callable">callable</a>, but is
usually implemented as a function that returns a <a
href="#closure">closure</a>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@decorator_name</span><br><span class="line">def function_that_gets_passed_to_decorator():</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="debugger-example"><a href="#debugger-example"></a>Debugger
Example</h3>
<p><strong>Decorator that prints function's name every time the function
is called.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def out(*args, **kwargs):</span><br><span class="line">        print(func.__name__)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the
passed function (func) to the function it is wrapping
(out).</strong></li>
<li><strong>Without it <code>'add.__name__'</code> would return
<code>'out'</code>.</strong></li>
</ul>
<h3 id="lru-cache"><a href="#lru-cache"></a>LRU Cache</h3>
<p><strong>Decorator that caches function's return values. All
function's arguments must be hashable.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import lru_cache</span><br><span class="line"></span><br><span class="line">@lru_cache(maxsize=None)</span><br><span class="line">def fib(n):</span><br><span class="line">    return n if n &lt; 2 else fib(n-2) + fib(n-1)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Default size of the cache is 128 values. Passing
<code>'maxsize=None'</code> makes it unbounded.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 1000 by
default. To increase it use
<code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</strong></li>
</ul>
<h3 id="parametrized-decorator"><a
href="#parametrized-decorator"></a>Parametrized Decorator</h3>
<p><strong>A decorator that accepts arguments and returns a normal
decorator that accepts a function.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(print_result=False):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def out(*args, **kwargs):</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            print(func.__name__, result if print_result else &#x27;&#x27;)</span><br><span class="line">            return result</span><br><span class="line">        return out</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@debug(print_result=True)</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Using only <code>'@debug'</code> to decorate the add()
function would not work here, because debug would then receive the add()
function as a 'print_result' argument. Decorators can however manually
check if the argument they received is a function and act
accordingly.</strong></li>
</ul>
<h2 id="class"><a href="#class"></a>Class</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        class_name = self.__class__.__name__</span><br><span class="line">        return f&#x27;&#123;class_name&#125;(&#123;self.a!r&#125;)&#x27;</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.a)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def get_class_name(cls):</span><br><span class="line">        return cls.__name__</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Return value of repr() should be unambiguous and of str()
readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for
str().</strong></li>
<li><strong>Methods decorated with <code>'@staticmethod'</code> do not
receive 'self' nor 'cls' as their first arg.</strong></li>
</ul>
<h4 id="str-use-cases"><a href="#str-use-cases"></a>Str() use
cases:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el&gt;)</span><br><span class="line">f&#x27;&#123;&lt;el&gt;&#125;&#x27;</span><br><span class="line">logging.warning(&lt;el&gt;)</span><br><span class="line">csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])</span><br><span class="line">raise Exception(&lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="repr-use-cases"><a href="#repr-use-cases"></a>Repr() use
cases:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print/str/repr([&lt;el&gt;])</span><br><span class="line">f&#x27;&#123;&lt;el&gt;!r&#125;&#x27;</span><br><span class="line">Z = dataclasses.make_dataclass(&#x27;Z&#x27;, [&#x27;a&#x27;]); print/str/repr(Z(&lt;el&gt;))</span><br><span class="line">&gt;&gt;&gt; &lt;el&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="constructor-overloading"><a
href="#constructor-overloading"></a>Constructor Overloading</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a=None):</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inheritance"><a href="#inheritance"></a>Inheritance</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age  = age</span><br><span class="line"></span><br><span class="line">class Employee(Person):</span><br><span class="line">    def __init__(self, name, age, staff_num):</span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self.staff_num = staff_num</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="multiple-inheritance"><a
href="#multiple-inheritance"></a>Multiple Inheritance</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class A: pass</span><br><span class="line">class B: pass</span><br><span class="line">class C(A, B): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p><strong>MRO determines the order in which parent classes are
traversed when searching for a method or an attribute:</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; C.mro()</span><br><span class="line">[&lt;class &#x27;C&#x27;&gt;, &lt;class &#x27;A&#x27;&gt;, &lt;class &#x27;B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="property"><a href="#property"></a>Property</h3>
<p><strong>Pythonic way of implementing getters and
setters.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        return &#x27; &#x27;.join(self._name)</span><br><span class="line"></span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self, value):</span><br><span class="line">        self._name = value.split()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person = Person()</span><br><span class="line">&gt;&gt;&gt; person.name = &#x27;\t Guido  van Rossum \n&#x27;</span><br><span class="line">&gt;&gt;&gt; person.name</span><br><span class="line">&#x27;Guido van Rossum&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="dataclass"><a href="#dataclass"></a>Dataclass</h3>
<p><strong>Decorator that automatically generates init(), repr() and
eq() special methods.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import dataclass, field</span><br><span class="line"></span><br><span class="line">@dataclass(order=False, frozen=False)</span><br><span class="line">class &lt;class_name&gt;:</span><br><span class="line">    &lt;attr_name_1&gt;: &lt;type&gt;</span><br><span class="line">    &lt;attr_name_2&gt;: &lt;type&gt; = &lt;default_value&gt;</span><br><span class="line">    &lt;attr_name_3&gt;: list/dict/set = field(default_factory=list/dict/set)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Objects can be made sortable with <code>'order=True'</code>
and immutable with <code>'frozen=True'</code>.</strong></li>
<li><strong>For object to be hashable, all attributes must be hashable
and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because
<code>'&lt;attr_name&gt;: list = []'</code> would make a list that is
shared among all instances. Its 'default_factory' argument can be any <a
href="#callable">callable</a>.</strong></li>
<li><strong>For attributes of arbitrary type use
<code>'typing.Any'</code>.</strong></li>
</ul>
<h4 id="inline-1"><a href="#inline-1"></a>Inline:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_attribute_names&gt;)</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_tuples&gt;)</span><br><span class="line">&lt;tuple&gt; = (&#x27;&lt;attr_name&gt;&#x27;, &lt;type&gt; [, &lt;default_value&gt;])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="rest-of-type-annotations-cpython-interpreter-ignores-them-all"><a
href="#rest-of-type-annotations-cpython-interpreter-ignores-them-all"></a>Rest
of type annotations (CPython interpreter ignores them all):</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...</span><br><span class="line">&lt;var_name&gt;: typing.List/Set/Iterable/Sequence/Optional[&lt;type&gt;]</span><br><span class="line">&lt;var_name&gt;: typing.Dict/Tuple/Union[&lt;type&gt;, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="slots"><a href="#slots"></a>Slots</h3>
<p><strong>Mechanism that restricts objects to attributes listed in
'slots' and significantly reduces their memory footprint.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyClassWithSlots:</span><br><span class="line">    __slots__ = [&#x27;a&#x27;]</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="copy"><a href="#copy"></a>Copy</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from copy import copy, deepcopy</span><br><span class="line">&lt;object&gt; = copy(&lt;object&gt;)</span><br><span class="line">&lt;object&gt; = deepcopy(&lt;object&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="duck-types"><a href="#duck-types"></a>Duck Types</h2>
<p><strong>A duck type is an implicit type that prescribes a set of
special methods. Any object that has those methods defined is considered
a member of that duck type.</strong></p>
<h3 id="comparable"><a href="#comparable"></a>Comparable</h3>
<ul>
<li><strong>If eq() method is not overridden, it returns
<code>'id(self) == id(other)'</code>, which is the same as
<code>'self is other'</code>.</strong></li>
<li><strong>That means all objects compare not equal by
default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it
returns NotImplemented, in which case the right object is consulted.
False is returned if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq()
defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyComparable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="hashable"><a href="#hashable"></a>Hashable</h3>
<ul>
<li><strong>Hashable object needs both hash() and eq() methods and its
hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash
value, meaning default hash() that returns <code>'id(self)'</code> will
not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if
you only implement eq().</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyHashable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self._a = a</span><br><span class="line">    @property</span><br><span class="line">    def a(self):</span><br><span class="line">        return self._a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sortable"><a href="#sortable"></a>Sortable</h3>
<ul>
<li><strong>With 'total_ordering' decorator, you only need to provide
eq() and one of lt(), gt(), le() or ge() special methods and the rest
will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while
max() only requires gt(). However, it is best to define them all so that
confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their
values get compared in order until a pair of unequal values is found.
The comparison of this two values is then returned. The shorter sequence
is considered smaller in case of all values being equal.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import total_ordering</span><br><span class="line"></span><br><span class="line">@total_ordering</span><br><span class="line">class MySortable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a &lt; other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="iterator-1"><a href="#iterator-1"></a>Iterator</h3>
<ul>
<li><strong>Any object that has methods next() and iter() is an
iterator.</strong></li>
<li><strong>Next() should return next item or raise
StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="python-has-many-different-iterator-objects"><a
href="#python-has-many-different-iterator-objects"></a>Python has many
different iterator objects:</h4>
<ul>
<li><strong>Sequence iterators returned by the <a
href="#iterator">iter()</a> function, such as list_iterator and
set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a>
module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator
functions</a> and <a href="#comprehensions">generator
expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a>
function, etc.</strong></li>
</ul>
<h3 id="callable"><a href="#callable"></a>Callable</h3>
<ul>
<li><strong>All functions and classes have a call() method, hence are
callable.</strong></li>
<li><strong>When this cheatsheet uses <code>'&lt;function&gt;'</code> as
an argument, it actually means
<code>'&lt;callable&gt;'</code>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __call__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="context-manager"><a href="#context-manager"></a>Context
Manager</h3>
<ul>
<li><strong>Enter() should lock the resources and optionally return an
object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed
to the exit() method.</strong></li>
<li><strong>If it wishes to suppress the exception it must return a true
value.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyOpen:</span><br><span class="line">    def __init__(self, filename):</span><br><span class="line">        self.filename = filename</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        self.file = open(self.filename)</span><br><span class="line">        return self.file</span><br><span class="line">    def __exit__(self, exc_type, exception, traceback):</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; with open(&#x27;test.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="line">...     file.write(&#x27;Hello World!&#x27;)</span><br><span class="line">&gt;&gt;&gt; with MyOpen(&#x27;test.txt&#x27;) as file:</span><br><span class="line">...     print(file.read())</span><br><span class="line">Hello World!</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="iterable-duck-types"><a href="#iterable-duck-types"></a>Iterable
Duck Types</h2>
<h3 id="iterable"><a href="#iterable"></a>Iterable</h3>
<ul>
<li><strong>Only required method is iter(). It should return an iterator
of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter()
defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyIterable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; obj = MyIterable([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; [el for el in obj]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; 1 in obj</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="collection"><a href="#collection"></a>Collection</h3>
<ul>
<li><strong>Only required methods are iter() and len(). Len() should
return the number of items.</strong></li>
<li><strong>This cheatsheet actually means
<code>'&lt;iterable&gt;'</code> when it uses
<code>'&lt;collection&gt;'</code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds
scarier and more vague than 'collection'. The only drawback of this
decision is that a reader could think a certain function doesn't accept
iterators when it does, since iterators are the only built-in objects
that are iterable but are not collections.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyCollection:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sequence"><a href="#sequence"></a>Sequence</h3>
<ul>
<li><strong>Only required methods are len() and getitem().</strong></li>
<li><strong>Getitem() should return an item at the passed index or raise
IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that
has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has len()
and getitem() defined.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MySequence:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line">    def __reversed__(self):</span><br><span class="line">        return reversed(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="discrepancies-between-glossary-definitions-and-abstract-base-classes"><a
href="#discrepancies-between-glossary-definitions-and-abstract-base-classes"></a>Discrepancies
between glossary definitions and abstract base classes:</h4>
<ul>
<li><strong>Glossary defines iterable as any object with iter() or
getitem() and sequence as any object with getitem() and len(). It does
not define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() checks
whether object/class has method iter(), while ABC Collection checks for
iter(), contains() and len().</strong></li>
</ul>
<h3 id="abc-sequence"><a href="#abc-sequence"></a>ABC Sequence</h3>
<ul>
<li><strong>It's a richer interface than the basic
sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(),
index() and count().</strong></li>
<li><strong>Unlike <code>'abc.Iterable'</code> and
<code>'abc.Collection'</code>, it is not a duck type. That is why
<code>'issubclass(MySequence, abc.Sequence)'</code> would return False
even if MySequence had all the methods defined. It however recognizes
list, tuple, range, str, bytes, bytearray, memoryview and deque, because
they are registered as Sequence's virtual subclasses.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import abc</span><br><span class="line"></span><br><span class="line">class MyAbcSequence(abc.Sequence):</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="table-of-required-and-automatically-available-special-methods"><a
href="#table-of-required-and-automatically-available-special-methods"></a>Table
of required and automatically available special methods:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">|            |  Iterable  | Collection |  Sequence  | abc.Sequence |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |</span><br><span class="line">| contains() |    Yes     |    Yes     |    Yes     |     Yes      |</span><br><span class="line">| len()      |            |    REQ     |    REQ     |     REQ      |</span><br><span class="line">| getitem()  |            |            |    REQ     |     REQ      |</span><br><span class="line">| reversed() |            |            |    Yes     |     Yes      |</span><br><span class="line">| index()    |            |            |            |     Yes      |</span><br><span class="line">| count()    |            |            |            |     Yes      |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Other ABCs that generate missing methods are:
MutableSequence, Set, MutableSet, Mapping and
MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in
<code>'&lt;abc&gt;.__abstractmethods__'</code>.</strong></li>
</ul>
<h2 id="enum"><a href="#enum"></a>Enum</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum, auto</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;enum_name&gt;(Enum):</span><br><span class="line">    &lt;member_name_1&gt; = &lt;value_1&gt;</span><br><span class="line">    &lt;member_name_2&gt; = &lt;value_2_a&gt;, &lt;value_2_b&gt;</span><br><span class="line">    &lt;member_name_3&gt; = auto()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>If there are no numeric values before auto(), it returns
1.</strong></li>
<li><strong>Otherwise it returns an increment of the last numeric
value.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;                 # Returns a member.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;[&#x27;&lt;member_name&gt;&#x27;]              # Returns a member or raises KeyError.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                      # Returns a member or raises ValueError.</span><br><span class="line">&lt;str&gt;    = &lt;member&gt;.name                        # Returns member&#x27;s name.</span><br><span class="line">&lt;obj&gt;    = &lt;member&gt;.value                       # Returns member&#x27;s value.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">list_of_members = list(&lt;enum&gt;)</span><br><span class="line">member_names    = [a.name for a in &lt;enum&gt;]</span><br><span class="line">member_values   = [a.value for a in &lt;enum&gt;]</span><br><span class="line">random_member   = random.choice(list(&lt;enum&gt;))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def get_next_member(member):</span><br><span class="line">    members = list(member.__class__)</span><br><span class="line">    index   = (members.index(member) + 1) % len(members)</span><br><span class="line">    return members[index]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inline-2"><a href="#inline-2"></a>Inline</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#x27;fork knife spoon&#x27;)</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, [&#x27;fork&#x27;, &#x27;knife&#x27;, &#x27;spoon&#x27;])</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#123;&#x27;fork&#x27;: 1, &#x27;knife&#x27;: 2, &#x27;spoon&#x27;: 3&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="user-defined-functions-cannot-be-values-so-they-must-be-wrapped"><a
href="#user-defined-functions-cannot-be-values-so-they-must-be-wrapped"></a>User-defined
functions cannot be values, so they must be wrapped:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">LogicOp = Enum(&#x27;LogicOp&#x27;, &#123;&#x27;AND&#x27;: partial(lambda l, r: l and r),</span><br><span class="line">                           &#x27;OR&#x27;:  partial(lambda l, r: l or r)&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Member names are in all caps because trying to access a
member that is named after a reserved keyword raises
SyntaxError.</strong></li>
</ul>
<h2 id="exceptions"><a href="#exceptions"></a>Exceptions</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="complex-example"><a href="#complex-example"></a>Complex
Example</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code_1&gt;</span><br><span class="line">except &lt;exception_a&gt;:</span><br><span class="line">    &lt;code_2_a&gt;</span><br><span class="line">except &lt;exception_b&gt;:</span><br><span class="line">    &lt;code_2_b&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;code_2_c&gt;</span><br><span class="line">finally:</span><br><span class="line">    &lt;code_3&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Code inside the <code>'else'</code> block will only be
executed if <code>'try'</code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code>'finally'</code> block will always be
executed (unless a signal is received).</strong></li>
</ul>
<h3 id="catching-exceptions"><a href="#catching-exceptions"></a>Catching
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt;: ...</span><br><span class="line">except &lt;exception&gt; as &lt;name&gt;: ...</span><br><span class="line">except (&lt;exception&gt;, [...]): ...</span><br><span class="line">except (&lt;exception&gt;, [...]) as &lt;name&gt;: ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code>'traceback.print_exc()'</code> to print the error
message to stderr.</strong></li>
<li><strong>Use <code>'print(&lt;name&gt;)'</code> to print just the
cause of the exception (its arguments).</strong></li>
<li><strong>Use <code>'logging.exception(&lt;message&gt;)'</code> to log
the exception.</strong></li>
</ul>
<h3 id="raising-exceptions"><a href="#raising-exceptions"></a>Raising
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">raise &lt;exception&gt;</span><br><span class="line">raise &lt;exception&gt;()</span><br><span class="line">raise &lt;exception&gt;(&lt;el&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="re-raising-caught-exception"><a
href="#re-raising-caught-exception"></a>Re-raising caught
exception:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt; as &lt;name&gt;:</span><br><span class="line">    ...</span><br><span class="line">    raise</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="exception-object"><a href="#exception-object"></a>Exception
Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">arguments = &lt;name&gt;.args</span><br><span class="line">exc_type  = &lt;name&gt;.__class__</span><br><span class="line">filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename</span><br><span class="line">func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name</span><br><span class="line">line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)</span><br><span class="line">traceback = &#x27;&#x27;.join(traceback.format_tb(&lt;name&gt;.__traceback__))</span><br><span class="line">error_msg = &#x27;&#x27;.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="built-in-exceptions"><a href="#built-in-exceptions"></a>Built-in
Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit                   # Raised by the sys.exit() function.</span><br><span class="line"> +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).</span><br><span class="line"> +-- Exception                    # User-defined exceptions should be derived from this class.</span><br><span class="line">      +-- ArithmeticError         # Base class for arithmetic errors.</span><br><span class="line">      |    +-- ZeroDivisionError  # Raised when dividing by zero.</span><br><span class="line">      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.</span><br><span class="line">      +-- AttributeError          # Raised when an attribute is missing.</span><br><span class="line">      +-- EOFError                # Raised by input() when it hits end-of-file condition.</span><br><span class="line">      +-- LookupError             # Raised when a look-up on a collection fails.</span><br><span class="line">      |    +-- IndexError         # Raised when a sequence index is out of range.</span><br><span class="line">      |    +-- KeyError           # Raised when a dictionary key or set element is missing.</span><br><span class="line">      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.</span><br><span class="line">      +-- NameError               # Raised when an object is missing.</span><br><span class="line">      +-- OSError                 # Errors such as “file not found” or “disk full” (see Open).</span><br><span class="line">      |    +-- FileNotFoundError  # When a file or directory is requested but doesn&#x27;t exist.</span><br><span class="line">      +-- RuntimeError            # Raised by errors that don&#x27;t fall into other categories.</span><br><span class="line">      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.</span><br><span class="line">      +-- StopIteration           # Raised by next() when run on an empty iterator.</span><br><span class="line">      +-- TypeError               # Raised when an argument is of wrong type.</span><br><span class="line">      +-- ValueError              # When an argument is of right type but inappropriate value.</span><br><span class="line">           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="collections-and-their-exceptions"><a
href="#collections-and-their-exceptions"></a>Collections and their
exceptions:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">|           |    List    |    Set     |    Dict    |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">| getitem() | IndexError |            |  KeyError  |</span><br><span class="line">| pop()     | IndexError |  KeyError  |  KeyError  |</span><br><span class="line">| remove()  | ValueError |  KeyError  |            |</span><br><span class="line">| index()   | ValueError |            |            |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="useful-built-in-exceptions"><a
href="#useful-built-in-exceptions"></a>Useful built-in exceptions:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">raise TypeError(&#x27;Argument is of wrong type!&#x27;)</span><br><span class="line">raise ValueError(&#x27;Argument is of right type but inappropriate value!&#x27;)</span><br><span class="line">raise RuntimeError(&#x27;None of above!&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="user-defined-exceptions"><a
href="#user-defined-exceptions"></a>User-defined Exceptions</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyError(Exception): pass</span><br><span class="line">class MyInputError(MyError): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="exit"><a href="#exit"></a>Exit</h2>
<p><strong>Exits the interpreter by raising SystemExit
exception.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.exit()                        # Exits with exit code 0 (success).</span><br><span class="line">sys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.</span><br><span class="line">sys.exit(&lt;int&gt;)                   # Exits with passed exit code.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="print"><a href="#print"></a>Print</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el_1&gt;, ..., sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'file=sys.stderr'</code> for messages about
errors.</strong></li>
<li><strong>Use <code>'flush=True'</code> to forcibly flush the
stream.</strong></li>
</ul>
<h3 id="pretty-print"><a href="#pretty-print"></a>Pretty Print</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pprint import pprint</span><br><span class="line">pprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Levels deeper than 'depth' get replaced by
'...'.</strong></li>
</ul>
<h2 id="input"><a href="#input"></a>Input</h2>
<p><strong>Reads a line from user input or pipe if present.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = input(prompt=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before
reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input
stream gets exhausted.</strong></li>
</ul>
<h2 id="command-line-arguments"><a
href="#command-line-arguments"></a>Command Line Arguments</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">scripts_path = sys.argv[0]</span><br><span class="line">arguments    = sys.argv[1:]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="argument-parser"><a href="#argument-parser"></a>Argument
Parser</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from argparse import ArgumentParser, FileType</span><br><span class="line">p = ArgumentParser(description=&lt;str&gt;)</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, action=&#x27;store_true&#x27;)  # Flag.</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, type=&lt;type&gt;)          # Option.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=1)                    # First argument.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;+&#x27;)                  # Remaining arguments.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;*&#x27;)                  # Optional arguments.</span><br><span class="line">args  = p.parse_args()                                            # Exits on error.</span><br><span class="line">value = args.&lt;name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'help=&lt;str&gt;'</code> to set argument
description that will be displayed in help message.</strong></li>
<li><strong>Use <code>'default=&lt;el&gt;'</code> to set the default
value.</strong></li>
<li><strong>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files.
Accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<h2 id="open"><a href="#open"></a>Open</h2>
<p><strong>Opens the file and returns a corresponding file
object.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt; = open(&lt;path&gt;, mode=&#x27;r&#x27;, encoding=None, newline=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'encoding=None'</code> means that the default encoding
is used, which is platform dependent. Best practice is to use
<code>'encoding="utf-8"'</code> whenever possible.</strong></li>
<li><strong><code>'newline=None'</code> means all different end of line
combinations are converted to '' on read, while on write all ''
characters are converted to system's default line
separator.</strong></li>
<li><strong><code>'newline=""'</code> means no conversions take place,
but input is still broken into chunks by readline() and readlines() on
every '', ' and ''.</strong></li>
</ul>
<h3 id="modes"><a href="#modes"></a>Modes</h3>
<ul>
<li><strong><code>'r'</code> - Read (default).</strong></li>
<li><strong><code>'w'</code> - Write (truncate).</strong></li>
<li><strong><code>'x'</code> - Write or fail if the file already
exists.</strong></li>
<li><strong><code>'a'</code> - Append.</strong></li>
<li><strong><code>'w+'</code> - Read and write (truncate).</strong></li>
<li><strong><code>'r+'</code> - Read and write from the
start.</strong></li>
<li><strong><code>'a+'</code> - Read and write from the
end.</strong></li>
<li><strong><code>'t'</code> - Text mode (default).</strong></li>
<li><strong><code>'b'</code> - Binary mode (<code>'br'</code>,
<code>'bw'</code>, <code>'bx'</code>, …).</strong></li>
</ul>
<h3 id="exceptions-1"><a href="#exceptions-1"></a>Exceptions</h3>
<ul>
<li><strong><code>'FileNotFoundError'</code> can be raised when reading
with <code>'r'</code> or <code>'r+'</code>.</strong></li>
<li><strong><code>'FileExistsError'</code> can be raised when writing
with <code>'x'</code>.</strong></li>
<li><strong><code>'IsADirectoryError'</code> and
<code>'PermissionError'</code> can be raised by any.</strong></li>
<li><strong><code>'OSError'</code> is the parent class of all listed
exceptions.</strong></li>
</ul>
<h3 id="file-object"><a href="#file-object"></a>File Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.seek(0)                      # Moves to the start of the file.</span><br><span class="line">&lt;file&gt;.seek(offset)                 # Moves &#x27;offset&#x27; chars/bytes from the start.</span><br><span class="line">&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.</span><br><span class="line">&lt;bin_file&gt;.seek(±offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads &#x27;size&#x27; chars/bytes or until EOF.</span><br><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.</span><br><span class="line">&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.</span><br><span class="line">&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.</span><br><span class="line">&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.</span><br><span class="line">&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even
writelines().</strong></li>
</ul>
<h3 id="read-text-from-file"><a href="#read-text-from-file"></a>Read
Text from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-text-to-file"><a href="#write-text-to-file"></a>Write Text
to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_file(filename, text):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        file.write(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="paths"><a href="#paths"></a>Paths</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from os import getcwd, path, listdir, scandir</span><br><span class="line">from glob import glob</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = getcwd()                   # Returns the current working directory.</span><br><span class="line">&lt;str&gt;  = path.join(&lt;path&gt;, ...)     # Joins two or more pathname components.</span><br><span class="line">&lt;str&gt;  = path.abspath(&lt;path&gt;)       # Returns absolute path.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = path.basename(&lt;path&gt;)      # Returns final component of the path.</span><br><span class="line">&lt;str&gt;  = path.dirname(&lt;path&gt;)       # Returns path without the final component.</span><br><span class="line">&lt;tup.&gt; = path.splitext(&lt;path&gt;)      # Splits on last period of the final component.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = listdir(path=&#x27;.&#x27;)          # Returns filenames located at path.</span><br><span class="line">&lt;list&gt; = glob(&#x27;&lt;pattern&gt;&#x27;)          # Returns paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = path.exists(&lt;path&gt;)        # Or: &lt;Path&gt;.exists()</span><br><span class="line">&lt;bool&gt; = path.isfile(&lt;path&gt;)        # Or: &lt;DirEntry/Path&gt;.is_file()</span><br><span class="line">&lt;bool&gt; = path.isdir(&lt;path&gt;)         # Or: &lt;DirEntry/Path&gt;.is_dir()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;stat&gt; = os.stat(&lt;path&gt;)            # Or: &lt;DirEntry/Path&gt;.stat()</span><br><span class="line">&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/…  # Modification time, size in bytes, …</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="direntry"><a href="#direntry"></a>DirEntry</h3>
<p><strong>Unlike listdir(), scandir() returns DirEntry objects that
cache isfile, isdir and on Windows also stat information, thus
significantly increasing the performance of code that requires
it.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = scandir(path=&#x27;.&#x27;)          # Returns DirEntry objects located at path.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns whole path as a string.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="path-object"><a href="#path-object"></a>Path Object</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.</span><br><span class="line">&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path(&#x27;.&#x27;).</span><br><span class="line">&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().</span><br><span class="line">&lt;Path&gt; = Path.home()                # Returns user&#x27;s home directory (absolute).</span><br><span class="line">&lt;Path&gt; = Path(__file__).resolve()   # Returns script&#x27;s path if cwd wasn&#x27;t changed.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component&#x27;s extension.</span><br><span class="line">&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.</span><br><span class="line">&lt;iter&gt; = &lt;Path&gt;.glob(&#x27;&lt;pattern&gt;&#x27;)   # Returns Paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="os-commands"><a href="#os-commands"></a>OS Commands</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import os, shutil, subprocess</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.chdir(&lt;path&gt;)                    # Changes the current working directory.</span><br><span class="line">os.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Permissions are in octal.</span><br><span class="line">os.makedirs(&lt;path&gt;, mode=0o777)     # Creates all path&#x27;s dirs. Also: `exist_ok=False`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">shutil.copy(from, to)               # Copies the file. &#x27;to&#x27; can exist or be a dir.</span><br><span class="line">shutil.copytree(from, to)           # Copies the directory. &#x27;to&#x27; must not exist.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.rename(from, to)                 # Renames/moves the file or directory.</span><br><span class="line">os.replace(from, to)                # Same, but overwrites &#x27;to&#x27; if it exists.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">os.remove(&lt;path&gt;)                   # Deletes the file.</span><br><span class="line">os.rmdir(&lt;path&gt;)                    # Deletes the empty directory.</span><br><span class="line">shutil.rmtree(&lt;path&gt;)               # Deletes the directory.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry
objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError
or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<h3 id="shell-commands"><a href="#shell-commands"></a>Shell
Commands</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pipe&gt; = os.popen(&#x27;&lt;command&gt;&#x27;)      # Executes command in sh/cmd. Returns its stdout pipe.</span><br><span class="line">&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)       # Reads &#x27;size&#x27; chars or until EOF. Also readline/s().</span><br><span class="line">&lt;int&gt;  = &lt;pipe&gt;.close()             # Closes the pipe. Returns None on success.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="sends-1-1-to-the-basic-calculator-and-captures-its-output"><a
href="#sends-1--1-to-the-basic-calculator-and-captures-its-output"></a>Sends
'1 + 1' to the basic calculator and captures its output:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; subprocess.run(&#x27;bc&#x27;, input=&#x27;1 + 1\n&#x27;, capture_output=True, text=True)</span><br><span class="line">CompletedProcess(args=&#x27;bc&#x27;, returncode=0, stdout=&#x27;2\n&#x27;, stderr=&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="sends-test.in-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-test.out"><a
href="#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout"></a>Sends
test.in to the basic calculator running in standard mode and saves its
output to test.out:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from shlex import split</span><br><span class="line">&gt;&gt;&gt; os.popen(&#x27;echo 1 + 1 &gt; test.in&#x27;)</span><br><span class="line">&gt;&gt;&gt; subprocess.run(split(&#x27;bc -s&#x27;), stdin=open(&#x27;test.in&#x27;), stdout=open(&#x27;test.out&#x27;, &#x27;w&#x27;))</span><br><span class="line">CompletedProcess(args=[&#x27;bc&#x27;, &#x27;-s&#x27;], returncode=0)</span><br><span class="line">&gt;&gt;&gt; open(&#x27;test.out&#x27;).read()</span><br><span class="line">&#x27;2\n&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="json"><a href="#json"></a>JSON</h2>
<p><strong>Text file format for storing collections of strings and
numbers.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">&lt;str&gt;    = json.dumps(&lt;object&gt;)     # Converts object to JSON string.</span><br><span class="line">&lt;object&gt; = json.loads(&lt;str&gt;)        # Converts JSON string to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-object-from-json-file"><a
href="#read-object-from-json-file"></a>Read Object from JSON File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_json_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return json.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-object-to-json-file"><a
href="#write-object-to-json-file"></a>Write Object to JSON File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_json_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        json.dump(an_object, file, ensure_ascii=False, indent=2)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pickle"><a href="#pickle"></a>Pickle</h2>
<p><strong>Binary file format for storing Python objects.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   # Converts object to bytes object.</span><br><span class="line">&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    # Converts bytes object to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-object-from-file"><a href="#read-object-from-file"></a>Read
Object from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_pickle_file(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return pickle.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-object-to-file"><a href="#write-object-to-file"></a>Write
Object to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_pickle_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        pickle.dump(an_object, file)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="csv"><a href="#csv"></a>CSV</h2>
<p><strong>Text file format for storing spreadsheets.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read"><a href="#read"></a>Read</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.</span><br><span class="line">&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or newlines embedded inside quoted fields will not be
interpreted correctly!</strong></li>
<li><strong>To print the spreadsheet to the console use <a
href="#table">Tabulate</a> library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a
href="#dataframe-plot-encode-decode">Pandas</a> library.</strong></li>
</ul>
<h3 id="write"><a href="#write"></a>Write</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.</span><br><span class="line">&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or ' will be added in front of every '' on platforms that use
'' line endings!</strong></li>
</ul>
<h3 id="parameters"><a href="#parameters"></a>Parameters</h3>
<ul>
<li><strong><code>'dialect'</code> - Master parameter that sets the
default values. String or a Dialect object.</strong></li>
<li><strong><code>'delimiter'</code> - A one-character string used to
separate fields.</strong></li>
<li><strong><code>'quotechar'</code> - Character for quoting fields that
contain special characters.</strong></li>
<li><strong><code>'doublequote'</code> - Whether quotechars inside
fields are/get doubled or escaped.</strong></li>
<li><strong><code>'skipinitialspace'</code> - Is space character at the
start of the field stripped by the reader.</strong></li>
<li><strong><code>'lineterminator'</code> - How writer terminates rows.
Reader is hardcoded to '', ', ''.</strong></li>
<li><strong><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but
numbers which are read as floats, 3: None.</strong></li>
<li><strong><code>'escapechar'</code> - Character for escaping
quotechars if doublequote is False.</strong></li>
</ul>
<h3 id="dialects"><a href="#dialects"></a>Dialects</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">|                  |     excel    |   excel-tab  |     unix     |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">| delimiter        |       &#x27;,&#x27;    |      &#x27;\t&#x27;    |       &#x27;,&#x27;    |</span><br><span class="line">| quotechar        |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |</span><br><span class="line">| doublequote      |      True    |      True    |      True    |</span><br><span class="line">| skipinitialspace |     False    |     False    |     False    |</span><br><span class="line">| lineterminator   |    &#x27;\r\n&#x27;    |    &#x27;\r\n&#x27;    |      &#x27;\n&#x27;    |</span><br><span class="line">| quoting          |         0    |         0    |         1    |</span><br><span class="line">| escapechar       |      None    |      None    |      None    |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-rows-from-csv-file"><a
href="#read-rows-from-csv-file"></a>Read Rows from CSV File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_csv_file(filename, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        return list(csv.reader(file, dialect))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-rows-to-csv-file"><a
href="#write-rows-to-csv-file"></a>Write Rows to CSV File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_csv_file(filename, rows, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        writer = csv.writer(file, dialect)</span><br><span class="line">        writer.writerows(rows)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="sqlite"><a href="#sqlite"></a>SQLite</h2>
<p><strong>A server-less database engine that stores each database into
a separate file.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Opens existing or new file. Also &#x27;:memory:&#x27;.</span><br><span class="line">&lt;conn&gt;.close()                                  # Closes the connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-1"><a href="#read-1"></a>Read</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)            # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).</span><br><span class="line">&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-1"><a href="#write-1"></a>Write</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                       # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.</span><br><span class="line">&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or"><a href="#or"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),</span><br><span class="line">    &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                   # depending on whether any exception occurred.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="placeholders"><a href="#placeholders"></a>Placeholders</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;list/tuple&gt;)         # Replaces &#x27;?&#x27;s in query with values.</span><br><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;dict/namedtuple&gt;)    # Replaces &#x27;:&lt;key&gt;&#x27;s with values.</span><br><span class="line">&lt;conn&gt;.executemany(&#x27;&lt;query&gt;&#x27;, &lt;coll_of_above&gt;)  # Runs execute() multiple times.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None,
bool, datetime.date or datetime.datetime.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a
href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<h3 id="example"><a href="#example"></a>Example</h3>
<p><strong>Values are not actually saved in this example because
<code>'conn.commit()'</code> is omitted!</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; conn = sqlite3.connect(&#x27;test.db&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;INSERT INTO person VALUES (NULL, ?, ?)&#x27;, (&#x27;Jean-Luc&#x27;, 187)).lastrowid</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;SELECT * FROM person&#x27;).fetchall()</span><br><span class="line">[(1, &#x27;Jean-Luc&#x27;, 187)]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sqlalchemy"><a href="#sqlalchemy"></a>SqlAlchemy</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install sqlalchemy</span><br><span class="line">from sqlalchemy import create_engine, text</span><br><span class="line">&lt;engine&gt; = create_engine(&#x27;&lt;url&gt;&#x27;).connect()     # Url: &#x27;dialect://user:password@host/dbname&#x27;.</span><br><span class="line">&lt;conn&gt;   = &lt;engine&gt;.connect()                   # Creates a connection. Also &lt;conn&gt;.close().</span><br><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(text(&#x27;&lt;query&gt;&#x27;), …)   # Replaces &#x27;:&lt;key&gt;&#x27;s with keyword arguments.</span><br><span class="line">with &lt;conn&gt;.begin(): ...                        # Exits the block with commit or rollback.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| Dialects   | pip3 install | import    | Dependencies                      |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| mysql      | mysqlclient  | MySQLdb   | www.pypi.org/project/mysqlclient  |</span><br><span class="line">| postgresql | psycopg2     | psycopg2  | www.psycopg.org/docs/install.html |</span><br><span class="line">| mssql      | pyodbc       | pyodbc    | apt install g++ unixodbc-dev      |</span><br><span class="line">| oracle     | cx_oracle    | cx_Oracle | Oracle Instant Client             |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="bytes"><a href="#bytes"></a>Bytes</h2>
<p><strong>Bytes object is an immutable sequence of single bytes.
Mutable version is called bytearray.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = b&#x27;&lt;str&gt;&#x27;                          # Only accepts ASCII characters and \x00-\xff.</span><br><span class="line">&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="encode-1"><a href="#encode-1"></a>Encode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;str&gt;, &#x27;utf-8&#x27;)             # Or: &lt;str&gt;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&lt;bytes&gt; = bytes.fromhex(&#x27;&lt;hex&gt;&#x27;)            # Hex pairs can be separated by whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="decode-1"><a href="#decode-1"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.</span><br><span class="line">&lt;str&gt;   = str(&lt;bytes&gt;, &#x27;utf-8&#x27;)             # Or: &lt;bytes&gt;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-bytes-from-file"><a href="#read-bytes-from-file"></a>Read
Bytes from File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_bytes(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return file.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-bytes-to-file"><a href="#write-bytes-to-file"></a>Write
Bytes to File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_bytes(filename, bytes_obj):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(bytes_obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="struct"><a href="#struct"></a>Struct</h2>
<ul>
<li><strong>Module that performs conversions between a sequence of
numbers and a bytes object.</strong></li>
<li><strong>System’s type sizes, byte order, and alignment rules are
used by default.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from struct import pack, unpack</span><br><span class="line">&lt;bytes&gt; = pack(&#x27;&lt;format&gt;&#x27;, &lt;el_1&gt; [, ...])  # Packages arguments into bytes object.</span><br><span class="line">&lt;tuple&gt; = unpack(&#x27;&lt;format&gt;&#x27;, &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pack(&#x27;&gt;hhl&#x27;, 1, 2, 3)</span><br><span class="line">b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;</span><br><span class="line">&gt;&gt;&gt; unpack(&#x27;&gt;hhl&#x27;, b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="format-2"><a href="#format-2"></a>Format</h3>
<h4
id="for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"><a
href="#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"></a>For
standard type sizes and manual alignment (padding) start format string
with:</h4>
<ul>
<li><strong><code>'='</code> - System's byte order (usually
little-endian).</strong></li>
<li><strong><code>'&lt;'</code> - Little-endian.</strong></li>
<li><strong><code>'&gt;'</code> - Big-endian (also
<code>'!'</code>).</strong></li>
</ul>
<h4
id="besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"><a
href="#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"></a>Besides
numbers, pack() and unpack() also support bytes objects as part of the
sequence:</h4>
<ul>
<li><strong><code>'c'</code> - A bytes object with a single element. For
pad byte use <code>'x'</code>.</strong></li>
<li><strong><code>'&lt;n&gt;s'</code> - A bytes object with n
elements.</strong></li>
</ul>
<h4
id="integer-types.-use-a-capital-letter-for-unsigned-type.-minimum-and-standard-sizes-are-in-brackets"><a
href="#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets"></a>Integer
types. Use a capital letter for unsigned type. Minimum and standard
sizes are in brackets:</h4>
<ul>
<li><strong><code>'b'</code> - char (1/1)</strong></li>
<li><strong><code>'h'</code> - short (2/2)</strong></li>
<li><strong><code>'i'</code> - int (2/4)</strong></li>
<li><strong><code>'l'</code> - long (4/4)</strong></li>
<li><strong><code>'q'</code> - long long (8/8)</strong></li>
</ul>
<h4 id="floating-point-types"><a
href="#floating-point-types"></a>Floating point types:</h4>
<ul>
<li><strong><code>'f'</code> - float (4/4)</strong></li>
<li><strong><code>'d'</code> - double (8/8)</strong></li>
</ul>
<h2 id="array"><a href="#array"></a>Array</h2>
<p><strong>List that can only hold numbers of a predefined type.
Available types and their minimum sizes in bytes are listed above. Sizes
and byte order are always determined by the system.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from array import array</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;collection&gt;)    # Array from collection of numbers.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;bytes&gt;)         # Array from bytes object.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;array&gt;)         # Treats array as a sequence of numbers.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()</span><br><span class="line">&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="memory-view"><a href="#memory-view"></a>Memory View</h2>
<ul>
<li><strong>A sequence object that points to the memory of another
object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive
bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with
slicing.</strong></li>
<li><strong>Casting only works between char and other types and uses
system's sizes.</strong></li>
<li><strong>Byte order is always determined by the system.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.</span><br><span class="line">&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;.cast(&#x27;&lt;typecode&gt;&#x27;)           # Casts memoryview to the new format.</span><br><span class="line">&lt;mview&gt;.release()                              # Releases the object&#x27;s memory buffer.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="decode-2"><a href="#decode-2"></a>Decode</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;mview&gt;)         # Treats mview as a sequence of numbers.</span><br><span class="line">&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.</span><br><span class="line">&lt;str&gt;   = str(&lt;mview&gt;, &#x27;utf-8&#x27;)                # Treats mview as a bytes object.</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, …)           # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="deque"><a href="#deque"></a>Deque</h2>
<p><strong>A thread-safe list with efficient appends and pops from
either side. Pronounced "deck".</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line">&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.</span><br><span class="line">&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.</span><br><span class="line">&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.</span><br><span class="line">&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="threading"><a href="#threading"></a>Threading</h2>
<ul>
<li><strong>CPython interpreter can only run a single thread at a
time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster
execution, unless at least one of the threads contains an I/O
operation.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread, RLock, Semaphore, Event, Barrier</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="thread"><a href="#thread"></a>Thread</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.</span><br><span class="line">&lt;Thread&gt;.start()                               # Starts the thread.</span><br><span class="line">&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.</span><br><span class="line">&lt;Thread&gt;.join()                                # Waits for the thread to finish.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword
arguments to the function.</strong></li>
<li><strong>Use <code>'daemon=True'</code>, or the program will not be
able to exit while the thread is alive.</strong></li>
</ul>
<h3 id="lock"><a href="#lock"></a>Lock</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.</span><br><span class="line">&lt;lock&gt;.acquire()                               # Waits for the lock to be available.</span><br><span class="line">&lt;lock&gt;.release()                               # Makes the lock available again.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or-1"><a href="#or-1"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;lock&gt;:                                   # Enters the block by calling acquire(),</span><br><span class="line">    ...                                        # and exits it with release().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="semaphore-event-barrier"><a
href="#semaphore-event-barrier"></a>Semaphore, Event, Barrier</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by &#x27;value&#x27; threads.</span><br><span class="line">&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.</span><br><span class="line">&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it&#x27;s called n_times.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="thread-pool-executor"><a href="#thread-pool-executor"></a>Thread
Pool Executor</h3>
<ul>
<li><strong>Object that manages thread execution.</strong></li>
<li><strong>An object with the same interface called ProcessPoolExecutor
provides true parallelism by running a separate interpreter in each
process. All arguments must be <a
href="#pickle">pickable</a>.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: …`</span><br><span class="line">&lt;Exec&gt;.shutdown(wait=True)                     # Blocks until all threads finish executing.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # A multithreaded and non-lazy map().</span><br><span class="line">&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Starts a thread and returns its Future object.</span><br><span class="line">&lt;bool&gt; = &lt;Futr&gt;.done()                         # Checks if the thread has finished executing.</span><br><span class="line">&lt;obj&gt;  = &lt;Futr&gt;.result()                       # Waits for thread to finish and returns result.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="queue"><a href="#queue"></a>Queue</h3>
<p><strong>A thread-safe FIFO queue. For LIFO queue use
LifoQueue.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from queue import Queue</span><br><span class="line">&lt;Queue&gt; = Queue(maxsize=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.</span><br><span class="line">&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="operator"><a href="#operator"></a>Operator</h2>
<p><strong>Module of functions that provide the functionality of
operators.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import operator as op</span><br><span class="line">&lt;el&gt;      = op.add/sub/mul/truediv/floordiv/mod(&lt;el&gt;, &lt;el&gt;)  # +, -, *, /, //, %</span><br><span class="line">&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)            # &amp;, |, ^</span><br><span class="line">&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)     # ==, !=, &lt;, &lt;=, &gt;, &gt;=</span><br><span class="line">&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt;)     # [index/key], .name, .name()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">elementwise_sum  = map(op.add, list_a, list_b)</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))</span><br><span class="line">product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)</span><br><span class="line">union_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)</span><br><span class="line">first_element    = op.methodcaller(&#x27;pop&#x27;, 0)(&lt;list&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Binary operators require objects to have and(), or(), xor()
and invert() special methods, unlike logical operators that work on all
types of objects.</strong></li>
<li><strong>Also:
<code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and
<code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</strong></li>
</ul>
<h2 id="introspection"><a href="#introspection"></a>Introspection</h2>
<p><strong>Inspecting code at runtime.</strong></p>
<h3 id="variables"><a href="#variables"></a>Variables</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir()                             # Names of local variables (incl. functions).</span><br><span class="line">&lt;dict&gt; = vars()                            # Dict of local variables. Also locals().</span><br><span class="line">&lt;dict&gt; = globals()                         # Dict of global variables.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="attributes-1"><a href="#attributes-1"></a>Attributes</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object&#x27;s attributes (incl. methods).</span><br><span class="line">&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.</span><br><span class="line">&lt;bool&gt; = hasattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Checks if getattr() raises an AttributeError.</span><br><span class="line">value  = getattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Raises AttributeError if attribute is missing.</span><br><span class="line">setattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;, value)    # Only works on objects with &#x27;__dict__&#x27; attribute.</span><br><span class="line">delattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="parameters-1"><a href="#parameters-1"></a>Parameters</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function&#x27;s Signature object.</span><br><span class="line">&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.</span><br><span class="line">&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.</span><br><span class="line">&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or &lt;Param&gt;.empty.</span><br><span class="line">&lt;type&gt; = &lt;Param&gt;.annotation                # Type or &lt;Param&gt;.empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="metaprogramming"><a
href="#metaprogramming"></a>Metaprogramming</h2>
<p><strong>Code that generates code.</strong></p>
<h3 id="type-1"><a href="#type-1"></a>Type</h3>
<p><strong>Type is the root class. If only passed an object it returns
its type (class). Otherwise it creates a new class.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class&gt; = type(&#x27;&lt;class_name&gt;&#x27;, &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Z = type(&#x27;Z&#x27;, (), &#123;&#x27;a&#x27;: &#x27;abcde&#x27;, &#x27;b&#x27;: 12345&#125;)</span><br><span class="line">&gt;&gt;&gt; z = Z()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="meta-class"><a href="#meta-class"></a>Meta Class</h3>
<p><strong>A class that creates classes.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def my_meta_class(name, parents, attrs):</span><br><span class="line">    attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">    return type(name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="or-2"><a href="#or-2"></a>Or:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyMetaClass(type):</span><br><span class="line">    def __new__(cls, name, parents, attrs):</span><br><span class="line">        attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">        return type.__new__(cls, name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>New() is a class method that gets called before init(). If
it returns an instance of its class, then that instance gets passed to
init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the
first one that specifies the desired type of the returned instance
(MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually
from a new() method of a child class
(</strong><code>def __new__(cls): return super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that
my_meta_class() returns a class of type type, while MyMetaClass()
returns a class of type MyMetaClass.</strong></li>
</ul>
<h3 id="metaclass-attribute"><a
href="#metaclass-attribute"></a>Metaclass Attribute</h3>
<p><strong>Right before a class is created it checks if it has the
'metaclass' attribute defined. If not, it recursively checks if any of
his parents has it defined and eventually comes to type().</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass(metaclass=MyMetaClass):</span><br><span class="line">    b = 12345</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; MyClass.a, MyClass.b</span><br><span class="line">(&#x27;abcde&#x27;, 12345)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="type-diagram"><a href="#type-diagram"></a>Type Diagram</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">type(MyClass) == MyMetaClass         # MyClass is an instance of MyMetaClass.</span><br><span class="line">type(MyMetaClass) == type            # MyMetaClass is an instance of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass --&gt; MyMetaClass |</span><br><span class="line">|             |     v       |</span><br><span class="line">|    object -----&gt; type &lt;+  |</span><br><span class="line">|             |     ^ +--+  |</span><br><span class="line">|     str ----------+       |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="inheritance-diagram"><a
href="#inheritance-diagram"></a>Inheritance Diagram</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">MyClass.__base__ == object           # MyClass is a subclass of object.</span><br><span class="line">MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass   | MyMetaClass |</span><br><span class="line">|      v      |     v       |</span><br><span class="line">|    object &lt;----- type     |</span><br><span class="line">|      ^      |             |</span><br><span class="line">|     str     |             |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="eval"><a href="#eval"></a>Eval</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from ast import literal_eval</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;[1, 2, 3]&#x27;)</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;1 + 2&#x27;)</span><br><span class="line">ValueError: malformed node or string</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="coroutines"><a href="#coroutines"></a>Coroutines</h2>
<ul>
<li><strong>Coroutines have a lot in common with threads, but unlike
threads, they only give up control when they call another coroutine and
they don’t use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code>'async'</code> and
its call with <code>'await'</code>.</strong></li>
<li><strong><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main
entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() start multiple
coroutines at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a
href="#queue">Queue</a>, <a href="#semaphore-event-barrier">Event</a>,
<a href="#lock">Lock</a> and <a
href="#semaphore-event-barrier">Semaphore</a> classes.</strong></li>
</ul>
<h4
id="runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"><a
href="#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"></a>Runs
a terminal game where you control an asterisk that must avoid
numbers:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import asyncio, collections, curses, curses.textpad, enum, random</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)         # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                  # Direction</span><br><span class="line">W, H = 15, 7                                   # Width, Height</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    curses.curs_set(0)                         # Makes cursor invisible.</span><br><span class="line">    screen.nodelay(True)                       # Makes getch() non-blocking.</span><br><span class="line">    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.</span><br><span class="line"></span><br><span class="line">async def main_coroutine(screen):</span><br><span class="line">    moves = asyncio.Queue()</span><br><span class="line">    state = &#123;&#x27;*&#x27;: P(0, 0), **&#123;id_: P(W//2, H//2) for id_ in range(10)&#125;&#125;</span><br><span class="line">    ai    = [random_controller(id_, moves) for id_ in range(10)]</span><br><span class="line">    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]</span><br><span class="line">    tasks = [asyncio.create_task(cor) for cor in ai + mvc]</span><br><span class="line">    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)</span><br><span class="line"></span><br><span class="line">async def random_controller(id_, moves):</span><br><span class="line">    while True:</span><br><span class="line">        d = random.choice(list(D))</span><br><span class="line">        moves.put_nowait((id_, d))</span><br><span class="line">        await asyncio.sleep(random.triangular(0.01, 0.65))</span><br><span class="line"></span><br><span class="line">async def human_controller(screen, moves):</span><br><span class="line">    while True:</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        key_mappings = &#123;258: D.s, 259: D.n, 260: D.w, 261: D.e&#125;</span><br><span class="line">        if ch in key_mappings:</span><br><span class="line">            moves.put_nowait((&#x27;*&#x27;, key_mappings[ch]))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">async def model(moves, state):</span><br><span class="line">    while state[&#x27;*&#x27;] not in (state[id_] for id_ in range(10)):</span><br><span class="line">        id_, d = await moves.get()</span><br><span class="line">        x, y   = state[id_]</span><br><span class="line">        deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)</span><br><span class="line"></span><br><span class="line">async def view(state, screen):</span><br><span class="line">    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)</span><br><span class="line">    while True:</span><br><span class="line">        screen.erase()</span><br><span class="line">        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)</span><br><span class="line">        for id_, p in state.items():</span><br><span class="line">            screen.addstr(offset.y + (p.y - state[&#x27;*&#x27;].y + H//2) % H,</span><br><span class="line">                          offset.x + (p.x - state[&#x27;*&#x27;].x + W//2) % W, str(id_))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h1 id="libraries"><a href="#libraries"></a>Libraries</h1>
<h2 id="progress-bar"><a href="#progress-bar"></a>Progress Bar</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tqdm</span><br><span class="line">&gt;&gt;&gt; from tqdm import tqdm</span><br><span class="line">&gt;&gt;&gt; from time import sleep</span><br><span class="line">&gt;&gt;&gt; for el in tqdm([1, 2, 3], desc=&#x27;Processing&#x27;):</span><br><span class="line">...     sleep(1)</span><br><span class="line">Processing: 100%|████████████████████| 3/3 [00:03&lt;00:00,  1.00s/it]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="plot"><a href="#plot"></a>Plot</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.plot(&lt;x_data&gt;, &lt;y_data&gt; [, label=&lt;str&gt;])   # Or: plt.plot(&lt;y_data&gt;)</span><br><span class="line">plt.legend()                                   # Adds a legend.</span><br><span class="line">plt.savefig(&lt;path&gt;)                            # Saves the figure.</span><br><span class="line">plt.show()                                     # Displays the figure.</span><br><span class="line">plt.clf()                                      # Clears the figure.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="table"><a href="#table"></a>Table</h2>
<h4 id="prints-a-csv-file-as-an-ascii-table"><a
href="#prints-a-csv-file-as-an-ascii-table"></a>Prints a CSV file as an
ASCII table:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tabulate</span><br><span class="line">import csv, tabulate</span><br><span class="line">with open(&#x27;test.csv&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">    rows   = csv.reader(file)</span><br><span class="line">    header = next(rows)</span><br><span class="line">    table  = tabulate.tabulate(rows, header)</span><br><span class="line">print(table)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="curses"><a href="#curses"></a>Curses</h2>
<h4 id="runs-a-basic-file-explorer-in-the-terminal"><a
href="#runs-a-basic-file-explorer-in-the-terminal"></a>Runs a basic file
explorer in the terminal:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import curses, curses.ascii, os</span><br><span class="line">from curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    ch, first, selected, paths = 0, 0, 0, os.listdir()</span><br><span class="line">    while ch != curses.ascii.ESC:</span><br><span class="line">        height, _ = screen.getmaxyx()</span><br><span class="line">        screen.erase()</span><br><span class="line">        for y, filename in enumerate(paths[first : first+height]):</span><br><span class="line">            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        selected += (ch == KEY_DOWN) - (ch == KEY_UP)</span><br><span class="line">        selected = max(0, min(len(paths)-1, selected))</span><br><span class="line">        first += (first &lt;= selected - height) - (first &gt; selected)</span><br><span class="line">        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:</span><br><span class="line">            new_dir = &#x27;..&#x27; if ch == KEY_LEFT else paths[selected]</span><br><span class="line">            if os.path.isdir(new_dir):</span><br><span class="line">                os.chdir(new_dir)</span><br><span class="line">                first, selected, paths = 0, 0, os.listdir()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="logging"><a href="#logging"></a>Logging</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install loguru</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">logger.add(&#x27;debug_&#123;time&#125;.log&#x27;, colorize=True)  # Connects a log file.</span><br><span class="line">logger.add(&#x27;error_&#123;time&#125;.log&#x27;, level=&#x27;ERROR&#x27;)  # Another file for errors or higher.</span><br><span class="line">logger.&lt;level&gt;(&#x27;A logging message.&#x27;)           # Logs to file/s and prints to stderr.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Levels: <code>'debug'</code>, <code>'info'</code>,
<code>'success'</code>, <code>'warning'</code>, <code>'error'</code>,
<code>'critical'</code>.</strong></li>
</ul>
<h3 id="exceptions-2"><a href="#exceptions-2"></a>Exceptions</h3>
<p><strong>Exception description, stack trace and values of variables
are appended automatically.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    ...</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    logger.exception(&#x27;An error happened.&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rotation"><a href="#rotation"></a>Rotation</h3>
<p><strong>Argument that sets a condition when a new log file is
created.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">rotation=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;datetime.time&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max file size in
bytes.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;time&gt;'</code> - Time of day.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Any of above as a string:
<code>'100 MB'</code>, <code>'1 month'</code>,
<code>'monday at 12:00'</code>, ...</strong></li>
</ul>
<h3 id="retention"><a href="#retention"></a>Retention</h3>
<p><strong>Sets a condition which old log files get
deleted.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">retention=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max number of
files.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Max age as a string:
<code>'1 week, 3 days'</code>, <code>'2 months'</code>,
...</strong></li>
</ul>
<h2 id="scraping"><a href="#scraping"></a>Scraping</h2>
<h4
id="scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"><a
href="#scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"></a>Scrapes
Python's URL, version number and logo from its Wikipedia page:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests beautifulsoup4</span><br><span class="line">import requests, bs4, os, sys</span><br><span class="line"></span><br><span class="line">WIKI_URL = &#x27;https://en.wikipedia.org/wiki/Python_(programming_language)&#x27;</span><br><span class="line">try:</span><br><span class="line">    html       = requests.get(WIKI_URL).text</span><br><span class="line">    document   = bs4.BeautifulSoup(html, &#x27;html.parser&#x27;)</span><br><span class="line">    table      = document.find(&#x27;table&#x27;, class_=&#x27;infobox vevent&#x27;)</span><br><span class="line">    python_url = table.find(&#x27;th&#x27;, text=&#x27;Website&#x27;).next_sibling.a[&#x27;href&#x27;]</span><br><span class="line">    version    = table.find(&#x27;th&#x27;, text=&#x27;Stable release&#x27;).next_sibling.strings.__next__()</span><br><span class="line">    logo_url   = table.find(&#x27;img&#x27;)[&#x27;src&#x27;]</span><br><span class="line">    logo       = requests.get(f&#x27;https:&#123;logo_url&#125;&#x27;).content</span><br><span class="line">    filename   = os.path.basename(logo_url)</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(logo)</span><br><span class="line">    print(f&#x27;&#123;python_url&#125;, &#123;version&#125;, file://&#123;os.path.abspath(filename)&#125;&#x27;)</span><br><span class="line">except requests.exceptions.ConnectionError:</span><br><span class="line">    print(&quot;You&#x27;ve got problems with connection.&quot;, file=sys.stderr)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="web"><a href="#web"></a>Web</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install bottle</span><br><span class="line">from bottle import run, route, static_file, template, post, request, response</span><br><span class="line">import json</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="run"><a href="#run"></a>Run</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">run(host=&#x27;localhost&#x27;, port=8080)        # Runs locally.</span><br><span class="line">run(host=&#x27;0.0.0.0&#x27;, port=80)            # Runs globally.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="static-request"><a href="#static-request"></a>Static
Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/img/&lt;filename&gt;&#x27;)</span><br><span class="line">def send_file(filename):</span><br><span class="line">    return static_file(filename, root=&#x27;img_dir/&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="dynamic-request"><a href="#dynamic-request"></a>Dynamic
Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/&lt;sport&gt;&#x27;)</span><br><span class="line">def send_html(sport):</span><br><span class="line">    return template(&#x27;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&#x27;, title=sport)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rest-request"><a href="#rest-request"></a>REST Request</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">@post(&#x27;/&lt;sport&gt;/odds&#x27;)</span><br><span class="line">def send_json(sport):</span><br><span class="line">    team = request.forms.get(&#x27;team&#x27;)</span><br><span class="line">    response.headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27;</span><br><span class="line">    response.headers[&#x27;Cache-Control&#x27;] = &#x27;no-cache&#x27;</span><br><span class="line">    return json.dumps(&#123;&#x27;team&#x27;: team, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="test"><a href="#test"></a>Test:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests</span><br><span class="line">&gt;&gt;&gt; import threading, requests</span><br><span class="line">&gt;&gt;&gt; threading.Thread(target=run, daemon=True).start()</span><br><span class="line">&gt;&gt;&gt; url = &#x27;http://localhost:8080/football/odds&#x27;</span><br><span class="line">&gt;&gt;&gt; request_data = &#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; response = requests.post(url, data=request_data)</span><br><span class="line">&gt;&gt;&gt; response.json()</span><br><span class="line">&#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="profiling"><a href="#profiling"></a>Profiling</h2>
<h3 id="stopwatch"><a href="#stopwatch"></a>Stopwatch</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from time import perf_counter</span><br><span class="line">start_time = perf_counter()</span><br><span class="line">...</span><br><span class="line">duration_in_seconds = perf_counter() - start_time</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="timing-a-snippet"><a href="#timing-a-snippet"></a>Timing a
Snippet</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from timeit import timeit</span><br><span class="line">&gt;&gt;&gt; timeit(&quot;&#x27;&#x27;.join(str(i) for i in range(100))&quot;,</span><br><span class="line">...        number=10000, globals=globals(), setup=&#x27;pass&#x27;)</span><br><span class="line">0.34986</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="profiling-by-line"><a href="#profiling-by-line"></a>Profiling by
Line</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install line_profiler memory_profiler</span><br><span class="line">@profile</span><br><span class="line">def main():</span><br><span class="line">    a = [*range(10000)]</span><br><span class="line">    b = &#123;*range(10000)&#125;</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ kernprof -lv test.py</span><br><span class="line">Line #   Hits     Time  Per Hit   % Time  Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1                                    @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3      1    955.0    955.0     43.7      a = [*range(10000)]</span><br><span class="line">     4      1   1231.0   1231.0     56.3      b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m memory_profiler test.py</span><br><span class="line">Line #         Mem usage      Increment   Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1        37.668 MiB     37.668 MiB   @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3        38.012 MiB      0.344 MiB       a = [*range(10000)]</span><br><span class="line">     4        38.477 MiB      0.465 MiB       b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="call-graph"><a href="#call-graph"></a>Call Graph</h3>
<h4
id="generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"><a
href="#generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"></a>Generates
a PNG image of the call graph with highlighted bottlenecks:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pycallgraph2; apt/brew install graphviz</span><br><span class="line">import pycallgraph2 as cg, datetime</span><br><span class="line"></span><br><span class="line">filename = f&#x27;profile-&#123;datetime.datetime.now():%Y%m%d_%H%M%S&#125;.png&#x27;</span><br><span class="line">drawer = cg.output.GraphvizOutput(output_file=filename)</span><br><span class="line">with cg.PyCallGraph(drawer):</span><br><span class="line">    &lt;code_to_be_profiled&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="numpy"><a href="#numpy"></a>NumPy</h2>
<p><strong>Array manipulation mini-language. It can run up to one
hundred times faster than the equivalent Python code. An even faster
alternative that runs on a GPU is called CuPy.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install numpy</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                # Returns 1d/2d NumPy array.</span><br><span class="line">&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        # Also np.full(&lt;shape&gt;, &lt;el&gt;).</span><br><span class="line">&lt;array&gt; = np.arange(from_inc, to_exc, ±step)            # Also np.linspace(start, stop, num).</span><br><span class="line">&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.flatten()                             # Collapses array into one dimension.</span><br><span class="line">&lt;view&gt;  = &lt;array&gt;.squeeze()                             # Removes dimensions of length one.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = &lt;array&gt;.sum/min/mean/var/std(axis)            # Passed dimension gets aggregated.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.argmin(axis)                          # Returns indexes of smallest elements.</span><br><span class="line">&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has
shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of the dimension that gets aggregated.
Leftmost dimension has index 0. Summing the RGB image along axis 2 will
return a greyscale image with shape (50, 100).</strong></li>
<li><strong>Passing a tuple of axes will chain the operations like this:
<code>'&lt;array&gt;.&lt;method&gt;(axis_1, keepdims=True).&lt;method&gt;(axis_2).squeeze()'</code>.</strong></li>
</ul>
<h3 id="indexing"><a href="#indexing"></a>Indexing</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_is, row_is, column_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_is, row_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_is, :, column_is]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el&gt;                       # &lt;3d_array&gt; &gt;&lt;== &lt;1d_array&gt;</span><br><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;2d_bools&gt;]                     # &lt;3d_array&gt;[&lt;2d_bools&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>All examples also allow assignments.</strong></li>
</ul>
<h3 id="broadcasting"><a href="#broadcasting"></a>Broadcasting</h3>
<p><strong>Broadcasting is a set of rules by which NumPy functions
operate on arrays of different sizes and/or dimensions.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"><a
href="#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"></a>1.
If array shapes differ in length, left-pad the shorter shape with
ones:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4
id="if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"><a
href="#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"></a>2.
If any dimensions differ in size, expand the ones that have size 1 by
duplicating their elements:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.6,  0.6,  0.6],</span><br><span class="line">         [0.8,  0.8,  0.8]]</span><br><span class="line"></span><br><span class="line">right = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.1,  0.6,  0.8],</span><br><span class="line">         [0.1,  0.6,  0.8]]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="if-neither-non-matching-dimension-has-size-1-raise-an-error."><a
href="#3-if-neither-non-matching-dimension-has-size-1-raise-an-error"></a>3.
If neither non-matching dimension has size 1, raise an error.</h4>
<h3 id="example-1"><a href="#example-1"></a>Example</h3>
<h4
id="for-each-point-returns-index-of-its-nearest-point-0.1-0.6-0.8-1-2-1"><a
href="#for-each-point-returns-index-of-its-nearest-point-01-06-08--1-2-1"></a>For
each point returns index of its nearest point
(<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])</span><br><span class="line"> [ 0.1,  0.6,  0.8]</span><br><span class="line">&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)</span><br><span class="line">[[ 0.1],</span><br><span class="line"> [ 0.6],</span><br><span class="line"> [ 0.8]]</span><br><span class="line">&gt;&gt;&gt; distances = wrapped_points - points</span><br><span class="line">[[ 0. , -0.5, -0.7],</span><br><span class="line"> [ 0.5,  0. , -0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; distances = np.abs(distances)</span><br><span class="line">[[ 0. ,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  0. ,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; i = np.arange(3)</span><br><span class="line">[0, 1, 2]</span><br><span class="line">&gt;&gt;&gt; distances[i, i] = np.inf</span><br><span class="line">[[ inf,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  inf,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  inf]]</span><br><span class="line">&gt;&gt;&gt; distances.argmin(1)</span><br><span class="line">[1, 2, 1]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="image"><a href="#image"></a>Image</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pillow</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Image&gt; = Image.new(&#x27;&lt;mode&gt;&#x27;, (width, height))   # Also: `color=&lt;int/tuple/str&gt;`.</span><br><span class="line">&lt;Image&gt; = Image.open(&lt;path&gt;)                     # Identifies format based on file contents.</span><br><span class="line">&lt;Image&gt; = &lt;Image&gt;.convert(&#x27;&lt;mode&gt;&#x27;)              # Converts image to the new mode.</span><br><span class="line">&lt;Image&gt;.save(&lt;path&gt;)                             # Selects format based on the path extension.</span><br><span class="line">&lt;Image&gt;.show()                                   # Opens image in default preview app.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))           # Returns a pixel.</span><br><span class="line">&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)            # Writes a pixel to the image.</span><br><span class="line">&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()                # Returns a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)              # Writes a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                   # Writes passed image to the image.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_array&gt; = np.array(&lt;Image_L&gt;)                 # Creates NumPy array from greyscale image.</span><br><span class="line">&lt;3d_array&gt; = np.array(&lt;Image_RGB/A&gt;)             # Creates NumPy array from color image.</span><br><span class="line">&lt;Image&gt;    = Image.fromarray(np.uint8(&lt;array&gt;))  # Use &lt;array&gt;.clip(0, 255) to clip the values.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="modes-1"><a href="#modes-1"></a>Modes</h3>
<ul>
<li><strong><code>'1'</code> - 1-bit pixels, black and white, stored
with one pixel per byte.</strong></li>
<li><strong><code>'L'</code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code>'RGB'</code> - 3x8-bit pixels, true
color.</strong></li>
<li><strong><code>'RGBA'</code> - 4x8-bit pixels, true color with
transparency mask.</strong></li>
<li><strong><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value
color space.</strong></li>
</ul>
<h3 id="examples"><a href="#examples"></a>Examples</h3>
<h4 id="creates-a-png-image-of-a-rainbow-gradient"><a
href="#creates-a-png-image-of-a-rainbow-gradient"></a>Creates a PNG
image of a rainbow gradient:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">WIDTH, HEIGHT = 100, 100</span><br><span class="line">n_pixels = WIDTH * HEIGHT</span><br><span class="line">hues = (255 * i/n_pixels for i in range(n_pixels))</span><br><span class="line">img = Image.new(&#x27;HSV&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">img.putdata([(int(h), 255, 255) for h in hues])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="adds-noise-to-a-png-image"><a
href="#adds-noise-to-a-png-image"></a>Adds noise to a PNG image:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import randint</span><br><span class="line">add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))</span><br><span class="line">img = Image.open(&#x27;test.png&#x27;).convert(&#x27;HSV&#x27;)</span><br><span class="line">img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="image-draw"><a href="#image-draw"></a>Image Draw</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from PIL import ImageDraw</span><br><span class="line">&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ImageDraw&gt;.point((x, y))                        # Truncates floats into ints.</span><br><span class="line">&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))       # To get anti-aliasing use Image&#x27;s resize().</span><br><span class="line">&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)    # Always draws in clockwise direction.</span><br><span class="line">&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))          # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line">&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))       # Last point gets connected to the first.</span><br><span class="line">&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))            # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'fill=&lt;color&gt;'</code> to set the primary
color.</strong></li>
<li><strong>Use <code>'width=&lt;int&gt;'</code> to set the width of
lines or contours.</strong></li>
<li><strong>Use <code>'outline=&lt;color&gt;'</code> to set the color of
the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code>'#rrggbb[aa]'</code>
string or a color name.</strong></li>
</ul>
<h2 id="animation"><a href="#animation"></a>Animation</h2>
<h4 id="creates-a-gif-of-a-bouncing-ball"><a
href="#creates-a-gif-of-a-bouncing-ball"></a>Creates a GIF of a bouncing
ball:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install imageio</span><br><span class="line">from PIL import Image, ImageDraw</span><br><span class="line">import imageio</span><br><span class="line"></span><br><span class="line">WIDTH, HEIGHT, R = 126, 126, 10</span><br><span class="line">frames = []</span><br><span class="line">for velocity in range(1, 16):</span><br><span class="line">    y = sum(range(velocity))</span><br><span class="line">    frame = Image.new(&#x27;L&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">    draw  = ImageDraw.Draw(frame)</span><br><span class="line">    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill=&#x27;white&#x27;)</span><br><span class="line">    frames.append(frame)</span><br><span class="line">frames += reversed(frames[1:-1])</span><br><span class="line">imageio.mimsave(&#x27;test.gif&#x27;, frames, duration=0.03)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="audio"><a href="#audio"></a>Audio</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import wave</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_read&gt;  = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;rb&#x27;)        # Opens the WAV file.</span><br><span class="line">framerate    = &lt;Wave_read&gt;.getframerate()       # Number of frames per second.</span><br><span class="line">nchannels    = &lt;Wave_read&gt;.getnchannels()       # Number of samples per frame.</span><br><span class="line">sampwidth    = &lt;Wave_read&gt;.getsampwidth()       # Sample size in bytes.</span><br><span class="line">nframes      = &lt;Wave_read&gt;.getnframes()         # Number of frames.</span><br><span class="line">&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          # Immutable collection of above.</span><br><span class="line">&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  # Returns next &#x27;nframes&#x27; frames.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_write&gt; = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;wb&#x27;)        # Truncates existing file.</span><br><span class="line">&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                # 44100 for CD, 48000 for video.</span><br><span class="line">&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                # 1 for mono, 2 for stereo.</span><br><span class="line">&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                # 2 for CD quality sound.</span><br><span class="line">&lt;Wave_write&gt;.setparams(&lt;params&gt;)                # Sets all parameters.</span><br><span class="line">&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               # Appends frames to the file.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting
of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to
the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when
converted to an integer, indicate the displacement of a speaker membrane
at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be
encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed
with little-endian byte order.</strong></li>
</ul>
<h3 id="sample-values"><a href="#sample-values"></a>Sample Values</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">| sampwidth |    min    | zero |    max    |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">|     1     |         0 |  128 |       255 |</span><br><span class="line">|     2     |    -32768 |    0 |     32767 |</span><br><span class="line">|     3     |  -8388608 |    0 |   8388607 |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="read-float-samples-from-wav-file"><a
href="#read-float-samples-from-wav-file"></a>Read Float Samples from WAV
File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def read_wav_file(filename):</span><br><span class="line">    def get_int(bytes_obj):</span><br><span class="line">        an_int = int.from_bytes(bytes_obj, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">        return an_int - 128 * (sampwidth == 1)</span><br><span class="line">    with wave.open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        sampwidth = file.getsampwidth()</span><br><span class="line">        frames = file.readframes(-1)</span><br><span class="line">    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))</span><br><span class="line">    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="write-float-samples-to-wav-file"><a
href="#write-float-samples-to-wav-file"></a>Write Float Samples to WAV
File</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):</span><br><span class="line">    def get_bytes(a_float):</span><br><span class="line">        a_float = max(-1, min(1 - 2e-16, a_float))</span><br><span class="line">        a_float += sampwidth == 1</span><br><span class="line">        a_float *= pow(2, sampwidth * 8 - 1)</span><br><span class="line">        return int(a_float).to_bytes(sampwidth, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">    with wave.open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.setnchannels(nchannels)</span><br><span class="line">        file.setsampwidth(sampwidth)</span><br><span class="line">        file.setframerate(framerate)</span><br><span class="line">        file.writeframes(b&#x27;&#x27;.join(get_bytes(f) for f in float_samples))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="examples-1"><a href="#examples-1"></a>Examples</h3>
<h4 id="saves-a-440-hz-sine-wave-to-a-mono-wav-file"><a
href="#saves-a-440-hz-sine-wave-to-a-mono-wav-file"></a>Saves a 440 Hz
sine wave to a mono WAV file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from math import pi, sin</span><br><span class="line">samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="adds-noise-to-a-mono-wav-file"><a
href="#adds-noise-to-a-mono-wav-file"></a>Adds noise to a mono WAV
file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from random import random</span><br><span class="line">add_noise = lambda value: value + (random() - 0.5) * 0.03</span><br><span class="line">samples_f = (add_noise(f) for f in read_wav_file(&#x27;test.wav&#x27;))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="plays-a-wav-file"><a href="#plays-a-wav-file"></a>Plays a WAV
file:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">from simpleaudio import play_buffer</span><br><span class="line">with wave.open(&#x27;test.wav&#x27;, &#x27;rb&#x27;) as file:</span><br><span class="line">    p = file.getparams()</span><br><span class="line">    frames = file.readframes(-1)</span><br><span class="line">    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="text-to-speech"><a href="#text-to-speech"></a>Text to
Speech</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pyttsx3</span><br><span class="line">import pyttsx3</span><br><span class="line">engine = pyttsx3.init()</span><br><span class="line">engine.say(&#x27;Sally sells seashells by the seashore.&#x27;)</span><br><span class="line">engine.runAndWait()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="synthesizer"><a href="#synthesizer"></a>Synthesizer</h2>
<h4 id="plays-popcorn-by-gershon-kingsley"><a
href="#plays-popcorn-by-gershon-kingsley"></a>Plays Popcorn by Gershon
Kingsley:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">import itertools as it, math, struct, simpleaudio</span><br><span class="line"></span><br><span class="line">F  = 44100</span><br><span class="line">P1 = &#x27;71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,&#x27;</span><br><span class="line">P2 = &#x27;71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,&#x27;</span><br><span class="line">get_pause   = lambda seconds: it.repeat(0, int(seconds * F))</span><br><span class="line">sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)</span><br><span class="line">get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))</span><br><span class="line">get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)</span><br><span class="line">parse_note  = lambda note: (get_hz(note[:2]), 1/4 if &#x27;♩&#x27; in note else 1/8)</span><br><span class="line">get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)</span><br><span class="line">samples_f   = it.chain.from_iterable(get_samples(n) for n in f&#x27;&#123;P1&#125;,&#123;P1&#125;,&#123;P2&#125;&#x27;.split(&#x27;,&#x27;))</span><br><span class="line">samples_b   = b&#x27;&#x27;.join(struct.pack(&#x27;&lt;h&#x27;, int(f * 30000)) for f in samples_f)</span><br><span class="line">simpleaudio.play_buffer(samples_b, 1, 2, F)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pygame"><a href="#pygame"></a>Pygame</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pygame</span><br><span class="line">import pygame as pg</span><br><span class="line"></span><br><span class="line">pg.init()</span><br><span class="line">screen = pg.display.set_mode((500, 500))</span><br><span class="line">rect = pg.Rect(240, 240, 20, 20)</span><br><span class="line">while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">    deltas = &#123;pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)&#125;</span><br><span class="line">    for ch, is_pressed in enumerate(pg.key.get_pressed()):</span><br><span class="line">        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect</span><br><span class="line">    screen.fill((0, 0, 0))</span><br><span class="line">    pg.draw.rect(screen, (255, 255, 255), rect)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rectangle"><a href="#rectangle"></a>Rectangle</h3>
<p><strong>Object for storing rectangular coordinates.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.</span><br><span class="line">&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/…                # Topright, bottomright, bottomleft. Same.</span><br><span class="line">&lt;Rect&gt; = &lt;Rect&gt;.move((x, y))                    # Use move_ip() to move in-place.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains a point.</span><br><span class="line">&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.</span><br><span class="line">&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="surface"><a href="#surface"></a>Surface</h3>
<p><strong>Object for representing images.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt; = pg.display.set_mode((width, height))   # Returns a display surface.</span><br><span class="line">&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span><br><span class="line">&lt;Surf&gt; = pg.image.load(&#x27;&lt;path&gt;&#x27;)                # Loads the image. Format depends on source.</span><br><span class="line">&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Returns a subsurface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt;.fill(color)                              # Tuple, Color(&#x27;#rrggbb[aa]&#x27;) or Color(&lt;name&gt;).</span><br><span class="line">&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel.</span><br><span class="line">&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.transform import scale, ...</span><br><span class="line">&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.</span><br><span class="line">&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.</span><br><span class="line">&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.draw import line, ...</span><br><span class="line">line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.</span><br><span class="line">arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also: ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)</span><br><span class="line">rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also: polygon(&lt;Surf&gt;, color, points, width=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="font"><a href="#font"></a>Font</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Font&gt; = pg.font.SysFont(&#x27;&lt;name&gt;&#x27;, size)        # Loads the system font or default if missing.</span><br><span class="line">&lt;Font&gt; = pg.font.Font(&#x27;&lt;path&gt;&#x27;, size)           # Loads the TTF file. Pass None for default.</span><br><span class="line">&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="sound"><a href="#sound"></a>Sound</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sound&gt; = pg.mixer.Sound(&#x27;&lt;path&gt;&#x27;)              # Loads the WAV file.</span><br><span class="line">&lt;Sound&gt;.play()                                  # Starts playing the sound.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="basic-mario-brothers-example"><a
href="#basic-mario-brothers-example"></a>Basic Mario Brothers
Example</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)          # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                   # Direction</span><br><span class="line">W, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    def get_screen():</span><br><span class="line">        pg.init()</span><br><span class="line">        return pg.display.set_mode((W*16, H*16))</span><br><span class="line">    def get_images():</span><br><span class="line">        url = &#x27;https://gto76.github.io/python-cheatsheet/web/mario_bros.png&#x27;</span><br><span class="line">        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))</span><br><span class="line">        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]</span><br><span class="line">    def get_mario():</span><br><span class="line">        Mario = dataclasses.make_dataclass(&#x27;Mario&#x27;, &#x27;rect spd facing_left frame_cycle&#x27;.split())</span><br><span class="line">        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))</span><br><span class="line">    def get_tiles():</span><br><span class="line">        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]</span><br><span class="line">        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]</span><br><span class="line">        return [get_rect(x, y) for x, y in border + platforms]</span><br><span class="line">    def get_rect(x, y):</span><br><span class="line">        return pg.Rect(x*16, y*16, 16, 16)</span><br><span class="line">    run(get_screen(), get_images(), get_mario(), get_tiles())</span><br><span class="line"></span><br><span class="line">def run(screen, images, mario, tiles):</span><br><span class="line">    clock = pg.time.Clock()</span><br><span class="line">    while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">        keys = &#123;pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w&#125;</span><br><span class="line">        pressed = &#123;keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd&#125;</span><br><span class="line">        update_speed(mario, tiles, pressed)</span><br><span class="line">        update_position(mario, tiles)</span><br><span class="line">        draw(screen, images, mario, tiles, pressed)</span><br><span class="line">        clock.tick(28)</span><br><span class="line"></span><br><span class="line">def update_speed(mario, tiles, pressed):</span><br><span class="line">    x, y = mario.spd</span><br><span class="line">    x += 2 * ((D.e in pressed) - (D.w in pressed))</span><br><span class="line">    x -= (x &gt; 0) - (x &lt; 0)</span><br><span class="line">    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10</span><br><span class="line">    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))</span><br><span class="line"></span><br><span class="line">def update_position(mario, tiles):</span><br><span class="line">    x, y = mario.rect.topleft</span><br><span class="line">    n_steps = max(abs(s) for s in mario.spd)</span><br><span class="line">    for _ in range(n_steps):</span><br><span class="line">        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))</span><br><span class="line">        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps</span><br><span class="line">        mario.rect.topleft = x, y</span><br><span class="line"></span><br><span class="line">def get_boundaries(rect, tiles):</span><br><span class="line">    deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">    return &#123;d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1&#125;</span><br><span class="line"></span><br><span class="line">def stop_on_collision(spd, bounds):</span><br><span class="line">    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,</span><br><span class="line">             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)</span><br><span class="line"></span><br><span class="line">def draw(screen, images, mario, tiles, pressed):</span><br><span class="line">    def get_marios_image_index():</span><br><span class="line">        if D.s not in get_boundaries(mario.rect, tiles):</span><br><span class="line">            return 4</span><br><span class="line">        return next(mario.frame_cycle) if &#123;D.w, D.e&#125; &amp; pressed else 6</span><br><span class="line">    screen.fill((85, 168, 255))</span><br><span class="line">    mario.facing_left = (D.w in pressed) if &#123;D.w, D.e&#125; &amp; pressed else mario.facing_left</span><br><span class="line">    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)</span><br><span class="line">    for t in tiles:</span><br><span class="line">        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pandas"><a href="#pandas"></a>Pandas</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pandas matplotlib</span><br><span class="line">import pandas as pd</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="series"><a href="#series"></a>Series</h3>
<p><strong>Ordered dictionary with a name.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;], name=&#x27;a&#x27;)</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = Series(&lt;list&gt;)                          # Assigns RangeIndex starting at 0.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict&gt;)                          # Takes dictionary&#x27;s keys for index.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict/Series&gt;, index=&lt;list&gt;)     # Only keeps items with keys specified in index.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;key_range/range&gt;]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.i/loc[bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       # Returns a Series of bools.</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.append(&lt;Sr&gt;)                       # Or: pd.concat(&lt;coll_of_Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.</span><br><span class="line">&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="series-aggregate-transform-map"><a
href="#series--aggregate-transform-map"></a>Series — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sr = Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;s&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |      3      |    sum  3   |     s  3      |</span><br><span class="line">| sr.agg(…)       |             |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;r&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |             |      rank   |               |</span><br><span class="line">| sr.agg(…)       |     x  1    |   x     1   |    r  x  1    |</span><br><span class="line">| sr.transform(…) |     y  2    |   y     2   |       y  2    |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Last result has a hierarchical index. Use
<code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</strong></li>
</ul>
<h3 id="dataframe"><a href="#dataframe"></a>DataFrame</h3>
<p><strong>Table with labeled rows and columns.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = DataFrame(&lt;list_of_rows&gt;)            # Rows can be either lists, dicts or series.</span><br><span class="line">&lt;DF&gt;    = DataFrame(&lt;dict_of_columns&gt;)         # Columns can be either lists, dicts or series.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to False values.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 # Returns DF of bools. Sr is treated as a row.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from a column.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.reset_index()                   # Moves row keys to a column named index.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by the passed column/s.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="dataframe-merge-join-concat"><a
href="#dataframe--merge-join-concat"></a>DataFrame — Merge, Join,
Concat:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; l = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line">&gt;&gt;&gt; r = DataFrame([[4, 5], [6, 7]], index=[&#x27;b&#x27;, &#x27;c&#x27;], columns=[&#x27;y&#x27;, &#x27;z&#x27;])</span><br><span class="line">   y  z</span><br><span class="line">b  4  5</span><br><span class="line">c  6  7</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">|                        |    &#x27;outer&#x27;    |   &#x27;inner&#x27;  |   &#x27;left&#x27;   |       Description        |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.merge(r, on=&#x27;y&#x27;,     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |</span><br><span class="line">|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |</span><br><span class="line">|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |</span><br><span class="line">|                        | 2  .   6   7  |            |            | Uses &#x27;inner&#x27; by default. |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.join(r, lsuffix=&#x27;l&#x27;, |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|</span><br><span class="line">|           rsuffix=&#x27;r&#x27;, | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses &#x27;left&#x27; by default.  |</span><br><span class="line">|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |</span><br><span class="line">|           axis=0,      | a  1   2   .  |     2      |            | Uses &#x27;outer&#x27; by default. |</span><br><span class="line">|           join=…)      | b  3   4   .  |     4      |            | A Series is treated as a |</span><br><span class="line">|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |</span><br><span class="line">|                        | c  .   6   7  |     6      |            | to add a row instead.    |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |</span><br><span class="line">|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses &#x27;outer&#x27;  |</span><br><span class="line">|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |</span><br><span class="line">|                        | a  1   2   .  |            |            | columns. Also updates    |</span><br><span class="line">|                        | b  3   4   5  |            |            | items that contain NaN.  |</span><br><span class="line">|                        | c  .   6   7  |            |            | R must be a DataFrame.   |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="dataframe-aggregate-transform-map"><a
href="#dataframe--aggregate-transform-map"></a>DataFrame — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>All operations operate on columns by default. Pass
<code>'axis=1'</code> to process the rows instead.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;x&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |             |       x  y  |               |</span><br><span class="line">| df.agg(…)       |     x  4    |  sum  4  6  |     x  4      |</span><br><span class="line">|                 |     y  6    |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |      x  y   |      x    y |        x      |</span><br><span class="line">| df.agg(…)       |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">| df.transform(…) |   b  2  2   | a    1    1 |     b  2      |</span><br><span class="line">|                 |             | b    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code>
to get the fifth result's values.</strong></li>
</ul>
<h4 id="dataframe-plot-encode-decode"><a
href="#dataframe--plot-encode-decode"></a>DataFrame — Plot, Encode,
Decode:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;.plot.line/bar/hist/scatter/box()          # Also: `x=column_key, y=column_key/s`.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = pd.read_json/html(&#x27;&lt;str/path/url&gt;&#x27;)     # Run `$ pip3 install beautifulsoup4 lxml`.</span><br><span class="line">&lt;DF&gt; = pd.read_csv/pickle/excel(&#x27;&lt;path/url&gt;&#x27;)  # Use `sheet_name=None` to get all Excel sheets.</span><br><span class="line">&lt;DF&gt; = pd.read_sql(&#x27;&lt;table/query&gt;&#x27;, &lt;conn.&gt;)   # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line">&lt;DF&gt; = pd.read_clipboard()                     # Reads a copied table from the clipboard.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = &lt;DF&gt;.to_dict([&#x27;d/l/s/…&#x27;])             # Returns columns as dicts, lists or series.</span><br><span class="line">&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).</span><br><span class="line">&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install openpyxl` for xlsx files.</span><br><span class="line">&lt;DF&gt;.to_sql(&#x27;&lt;table_name&gt;&#x27;, &lt;connection&gt;)      # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="groupby"><a href="#groupby"></a>GroupBy</h3>
<p><strong>Object that groups together rows of a dataframe based on the
value of the passed column.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list(&#x27;abc&#x27;), columns=list(&#x27;xyz&#x27;))</span><br><span class="line">&gt;&gt;&gt; df.groupby(&#x27;z&#x27;).get_group(6)</span><br><span class="line">   x  y</span><br><span class="line">b  4  5</span><br><span class="line">c  7  8</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.</span><br><span class="line">&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="groupby-aggregate-transform-map"><a
href="#groupby--aggregate-transform-map"></a>GroupBy — Aggregate,
Transform, Map:</h4>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; gb = df.groupby(&#x27;z&#x27;)</span><br><span class="line">      x  y  z</span><br><span class="line">3: a  1  2  3</span><br><span class="line">6: b  4  5  6</span><br><span class="line">   c  7  8  6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.agg(…)       |      x   y  |      x  y   |      x    y |        x      |</span><br><span class="line">|                 |  z          |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">|                 |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |</span><br><span class="line">|                 |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |</span><br><span class="line">|                 |             |             | c    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.transform(…) |      x   y  |      x  y   |             |               |</span><br><span class="line">|                 |  a   1   2  |   a  1  1   |             |               |</span><br><span class="line">|                 |  b  11  13  |   b  1  1   |             |               |</span><br><span class="line">|                 |  c  11  13  |   c  2  2   |             |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="rolling"><a href="#rolling"></a>Rolling</h3>
<p><strong>Object for rolling window calculations.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.</span><br><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key</span><br><span class="line">&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="plotly"><a href="#plotly"></a>Plotly</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install plotly kaleido</span><br><span class="line">from plotly.express import line</span><br><span class="line">&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: line(x=&lt;list&gt;, y=&lt;list&gt;)</span><br><span class="line">&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor=&#x27;rgba(0, 0, 0, 0)&#x27;</span><br><span class="line">&lt;Figure&gt;.write_html/json/image(&#x27;&lt;path&gt;&#x27;)                 # Also: &lt;Figure&gt;.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="covid-deaths-by-continent"><a
href="#covid-deaths-by-continent"></a>Covid deaths by continent:</h4>
<p><a
href="/gto76/python-cheatsheet/blob/main/web/covid_deaths.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_deaths.png" /></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">covid = pd.read_csv(&#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;,</span><br><span class="line">                    usecols=[&#x27;iso_code&#x27;, &#x27;date&#x27;, &#x27;total_deaths&#x27;, &#x27;population&#x27;])</span><br><span class="line">continents = pd.read_csv(&#x27;https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff&#x27;</span><br><span class="line">                         &#x27;846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv&#x27;,</span><br><span class="line">                         usecols=[&#x27;Three_Letter_Country_Code&#x27;, &#x27;Continent_Name&#x27;])</span><br><span class="line">df = pd.merge(covid, continents, left_on=&#x27;iso_code&#x27;, right_on=&#x27;Three_Letter_Country_Code&#x27;)</span><br><span class="line">df = df.groupby([&#x27;Continent_Name&#x27;, &#x27;date&#x27;]).sum().reset_index()</span><br><span class="line">df[&#x27;Total Deaths per Million&#x27;] = df.total_deaths * 1e6 / df.population</span><br><span class="line">df = df[df.date &gt; &#x27;2020-03-14&#x27;]</span><br><span class="line">df = df.rename(&#123;&#x27;date&#x27;: &#x27;Date&#x27;, &#x27;Continent_Name&#x27;: &#x27;Continent&#x27;&#125;, axis=&#x27;columns&#x27;)</span><br><span class="line">line(df, x=&#x27;Date&#x27;, y=&#x27;Total Deaths per Million&#x27;, color=&#x27;Continent&#x27;).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"><a
href="#confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"></a>Confirmed
covid cases, Dow Jones, Gold, and Bitcoin price:</h4>
<p><a href="/gto76/python-cheatsheet/blob/main/web/covid_cases.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_cases.png" /></a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import plotly.graph_objects as go</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    display_data(wrangle_data(*scrape_data()))</span><br><span class="line"></span><br><span class="line">def scrape_data():</span><br><span class="line">    def scrape_covid():</span><br><span class="line">        url = &#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;location&#x27;, &#x27;date&#x27;, &#x27;total_cases&#x27;])</span><br><span class="line">        return df[df.location == &#x27;World&#x27;].set_index(&#x27;date&#x27;).total_cases</span><br><span class="line">    def scrape_yahoo(slug):</span><br><span class="line">        url = f&#x27;https://query1.finance.yahoo.com/v7/finance/download/&#123;slug&#125;&#x27; + \</span><br><span class="line">              &#x27;?period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;Date&#x27;, &#x27;Close&#x27;])</span><br><span class="line">        return df.set_index(&#x27;Date&#x27;).Close</span><br><span class="line">    out = scrape_covid(), scrape_yahoo(&#x27;BTC-USD&#x27;), scrape_yahoo(&#x27;GC=F&#x27;), scrape_yahoo(&#x27;^DJI&#x27;)</span><br><span class="line">    return map(pd.Series.rename, out, [&#x27;Total Cases&#x27;, &#x27;Bitcoin&#x27;, &#x27;Gold&#x27;, &#x27;Dow Jones&#x27;])</span><br><span class="line"></span><br><span class="line">def wrangle_data(covid, bitcoin, gold, dow):</span><br><span class="line">    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.</span><br><span class="line">    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.</span><br><span class="line">    df = df.loc[&#x27;2020-02-23&#x27;:]                    # Discards rows before &#x27;2020-02-23&#x27;.</span><br><span class="line">    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.</span><br><span class="line">    df = df.join(covid)                           # Adds column with covid cases.</span><br><span class="line">    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day&#x27;s value.</span><br><span class="line"></span><br><span class="line">def display_data(df):</span><br><span class="line">    figure = go.Figure()</span><br><span class="line">    for col_name in reversed(df.columns):</span><br><span class="line">        yaxis = &#x27;y1&#x27; if col_name == &#x27;Total Cases&#x27; else &#x27;y2&#x27;</span><br><span class="line">        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)</span><br><span class="line">        figure.add_trace(trace)</span><br><span class="line">    figure.update_layout(</span><br><span class="line">        yaxis1=dict(title=&#x27;Total Cases&#x27;, rangemode=&#x27;tozero&#x27;),</span><br><span class="line">        yaxis2=dict(title=&#x27;%&#x27;, rangemode=&#x27;tozero&#x27;, overlaying=&#x27;y&#x27;, side=&#x27;right&#x27;),</span><br><span class="line">        legend=dict(x=1.1),</span><br><span class="line">        height=450</span><br><span class="line">    ).show()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="pysimplegui"><a href="#pysimplegui"></a>PySimpleGUI</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install PySimpleGUI</span><br><span class="line">import PySimpleGUI as sg</span><br><span class="line">layout = [[sg.Text(&quot;What&#x27;s your name?&quot;)], [sg.Input()], [sg.Button(&#x27;Ok&#x27;)]]</span><br><span class="line">window = sg.Window(&#x27;Window Title&#x27;, layout)</span><br><span class="line">event, values = window.read()</span><br><span class="line">print(f&#x27;Hello &#123;values[0]&#125;!&#x27; if event == &#x27;Ok&#x27; else &#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="appendix"><a href="#appendix"></a>Appendix</h2>
<h3 id="cython"><a href="#cython"></a>Cython</h3>
<p><strong>Library that compiles Python code into C.</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install cython</span><br><span class="line">import pyximport; pyximport.install()</span><br><span class="line">import &lt;cython_script&gt;</span><br><span class="line">&lt;cython_script&gt;.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h4 id="definitions"><a href="#definitions"></a>Definitions:</h4>
<ul>
<li><strong>All <code>'cdef'</code> definitions are optional, but they
contribute to the speed-up.</strong></li>
<li><strong>Script needs to be saved with a <code>'pyx'</code>
extension.</strong></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;</span><br><span class="line">cdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el_1&gt;, &lt;el_2&gt;, ...]</span><br><span class="line">cdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef class &lt;class_name&gt;:</span><br><span class="line">    cdef public &lt;ctype&gt; &lt;attr_name&gt;</span><br><span class="line">    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):</span><br><span class="line">        self.&lt;attr_name&gt; = &lt;arg_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">cdef enum &lt;enum_name&gt;: &lt;member_name_1&gt;, &lt;member_name_2&gt;, ...</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h3 id="pyinstaller"><a href="#pyinstaller"></a>PyInstaller</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ pip3 install pyinstaller</span><br><span class="line">$ pyinstaller script.py                        # Compiles into &#x27;./dist/script&#x27; directory.</span><br><span class="line">$ pyinstaller script.py --onefile              # Compiles into &#x27;./dist/script&#x27; console app.</span><br><span class="line">$ pyinstaller script.py --windowed             # Compiles into &#x27;./dist/script&#x27; windowed app.</span><br><span class="line">$ pyinstaller script.py --add-data &#x27;&lt;path&gt;:.&#x27;  # Adds file to the root of the executable.</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong>File paths need to be updated to
<code>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</code>.</strong></li>
</ul>
<h3 id="basic-script-template"><a
href="#basic-script-template"></a>Basic Script Template</h3>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">#</span><br><span class="line"># Usage: .py</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">from sys import argv, exit</span><br><span class="line">from collections import defaultdict, namedtuple</span><br><span class="line">from dataclasses import make_dataclass</span><br><span class="line">from enum import Enum</span><br><span class="line">import functools as ft, itertools as it, operator as op, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">###  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">##  UTIL</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<h2 id="index"><a href="#index"></a>Index</h2>
<ul>
<li><strong>Only available in the <a
href="https://transactions.sendowl.com/products/78175486/4422834F/view">PDF</a>.</strong></li>
<li><strong>Ctrl+F / ⌘F is usually sufficient.</strong></li>
<li><strong>Searching <code>'#&lt;title&gt;'</code> on the <a
href="https://gto76.github.io/python-cheatsheet/">webpage</a> will limit
the search to the titles.</strong></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Regex the Easy Way</title>
    <url>/89523a1718574a14da66ca44dd69b04b7459a0fa/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">github.com</a></p>
</blockquote>
<p><img
src="/images/68747470733a2f2f692e696d6775722e636f6d2f6259776c3756662e706e67.png" /></p>
<h2 id="什么是正则表达式">什么是正则表达式？</h2>
<blockquote>
<p>正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。
<!--SR:!2022-11-19,20,250--></p>
</blockquote>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular
expression”这个词比较拗口，我们常使用缩写的术语 “regex” 或“regexp”。
正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。
我们使用以下正则表达式来验证一个用户名：</p>
<p><img src="/images/regexp-cn.png" /></p>
<p>以上的正则表达式可以接受
<code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。
但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h2 id="基本匹配">1. 基本匹配</h2>
<p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。
例如：一个正则表达式
<code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;the&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>==正则表达式是大小写敏感的==
，所以<code>The</code>不会匹配<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-18,19,250-->
<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="元字符">2. 元字符</h2>
<p>正则表达式主要依赖于元字符。
元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：</p>
<table>
<thead>
<tr>
<th align="center">
元字符
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
.
</td>
<td>
句号匹配任意单个字符除了换行符。
</td>
</tr>
<tr>
<td align="center">
[ ]
</td>
<td>
字符种类。匹配方括号内的任意字符。
</td>
</tr>
<tr>
<td align="center">
[^]
</td>
<td>
否定的字符种类。匹配除了方括号里的任意字符
</td>
</tr>
<tr>
<td align="center">
*
</td>
<td>
匹配 &gt;=0 个重复的在 * 号之前的字符。
</td>
</tr>
<tr>
<td align="center">
+
</td>
<td>
匹配 &gt;=1 个重复的 + 号前的字符。
</td>
</tr>
<tr>
<td align="center">
?
</td>
<td>
标记? 之前的字符为可选.
</td>
</tr>
<tr>
<td align="center">
{n,m}
</td>
<td>
匹配 num 个大括号之前的字符或字符集 (n &lt;= num &lt;= m).
</td>
</tr>
<tr>
<td align="center">
(xyz)
</td>
<td>
字符集，匹配与 xyz 完全相等的字符串.
</td>
</tr>
<tr>
<td align="center">
|
</td>
<td>
或运算符，匹配符号前或后的字符.
</td>
</tr>
<tr>
<td align="center">
&lt;/td&gt;
<td>
转义字符, 用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $  |</code>
</td>
</tr>
<tr>
<td align="center">
^
</td>
<td>
从开始行开始匹配.
</td>
</tr>
<tr>
<td align="center">
$
</td>
<td>
从末端开始匹配.
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-25,24,250-->
<h3 id="点运算符-.">2.1 点运算符 <code>.</code></h3>
<p><code>.</code>是元字符中最简单的例子。
<code>.</code>匹配任意单个字符，但不匹配==换行符==。
例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。
<!--SR:!2022-11-29,28,250--></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;.ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h3 id="字符集">2.2 字符集</h3>
<p>字符集也叫做字符类。 方括号用来指定一个字符集。
在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。
例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和
<code>The</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[Tt]he&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号。 表达式 <code>ar[.]</code> 匹配
<code>ar.</code>字符串</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ar[.]&quot; =&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<p><strong>2.2.1 否定字符集</strong></p>
<p>一般来说 <code>^</code>
表示一个字符串的<strong>开头</strong>，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。
例如，表达式<code>[^c]ar</code>
匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[^c]ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a>
<!--SR:!2022-11-29,28,250--></p>
<h3 id="重复次数">2.3 重复次数</h3>
<p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code>
的，用来指定匹配子模式的次数。
这些元字符在不同的情况下有着不同的意思。</p>
<p><strong>2.3.1 <code>*</code> 号</strong></p>
<p><code>*</code>号匹配
在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式
<code>a*</code> 匹配 0 或更多个以 a
开头的字符。表达式<code>[a-z]*</code>
匹配一个行中所有以小写字母开头的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[a-z]*&quot; =&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。
<code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配
0 或更多个空格开头和 0 或更多个空格结尾的 cat 字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;\s*cat\s*&quot; =&gt; The fat cat sat on the concatenation.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<p><strong>2.3.2 <code>+</code> 号</strong></p>
<p><code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。
例如表达式<code>c.+t</code>
匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;c.+t&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<p><strong>2.3.3 <code>?</code> 号</strong></p>
<p>在正则表达式中元字符 <code>?</code>
标记在符号前面的字符为可选，即出现 0 或 1 次。 例如，表达式
<code>[T]?he</code> 匹配字符串 <code>he</code> 和 <code>The</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]?he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a>
<!--SR:!2022-11-26,25,250--></p>
<h3 id="号">2.4 <code>&#123;&#125;</code> 号</h3>
<p>在正则表达式中 <code>&#123;&#125;</code>
是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式
<code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数。 例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位
0~9 的数字。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<p>如果逗号也省略掉则表示重复固定的次数。 例如，<code>[0-9]&#123;3&#125;</code>
匹配 3 位数字</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a>
<!--SR:!2022-11-15,17,250--></p>
<h3 id="exp-特征标群">2.5 <code>(exp)</code> 特征标群</h3>
<p>特征标群是一组写在 <code>(exp)</code> 中的子模式。<code>(exp)</code>
中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如,
表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个
<code>ab</code>。如果没有使用 <code>(exp)</code> ，那么表达式
<code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code>
。再比如之前说的 <code>&#123;&#125;</code>
是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code>
前加上特征标群 <code>(exp)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code>
表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或
<code>gar</code> 或 <code>par</code>.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(c|g|p)ar&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<h3 id="或运算符">2.6 <code>|</code> 或运算符</h3>
<p>或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或
<code>car</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he|car&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a>
<!--SR:!2022-11-12,14,250--></p>
<h3 id="转码特殊字符">2.7 转码特殊字符</h3>
<p>反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定
<code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code>
这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线
<code>\</code>。</p>
<p>例如 <code>.</code>
是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code>
则要写成 <code>\.</code> 以下这个例子
<code>\.?</code>是选择性匹配<code>.</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(f|c|m)at\.?&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a>
<!--SR:!2022-11-25,24,250--></p>
<h3 id="锚点">2.8 锚点</h3>
<p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code>
指定开头，<code>$</code> 指定结尾。</p>
<p><strong>2.8.1 <code>^</code> 号</strong></p>
<p><code>^</code> 用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果
<code>a</code>。但如果使用 <code>^b</code>
将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以
<code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或
<code>the</code> 开头的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;^(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a>
<!--SR:!2022-11-13,15,250--></p>
<p><strong>2.8.2 <code>$</code> 号</strong></p>
<p>同理于 <code>^</code> 号，<code>$</code>
号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)$&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a>
<!--SR:!2022-11-29,28,250--></p>
<h2 id="简写字符集">3. 简写字符集</h2>
<p>正则表达式提供一些常用的字符集简写。如下:</p>
<table>
<thead>
<tr>
<th align="center">
简写
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
<code>.</code>
</td>
<td>
除换行符外的所有字符
</td>
</tr>
<tr>
<td align="center">
<code>\w</code>
</td>
<td>
匹配所有字母数字，等同于 <code><code>[a-zA-Z0-9_]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\W</code>
</td>
<td>
匹配所有非字母数字，即符号，等同于： <code><code>[^\w]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\d</code>
</td>
<td>
匹配数字： <code><code>[0-9]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\D</code>
</td>
<td>
匹配非数字： <code><code>[^\d]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\s</code>
</td>
<td>
匹配所有空格字符，等同于： <code><code>[\t\n\f\r\p&#123;Z&#125;]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\S</code>
</td>
<td>
匹配所有非空格字符： <code><code>[^\s]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\f</code>
</td>
<td>
匹配一个换页符
</td>
</tr>
<tr>
<td align="center">
<code>\n</code>
</td>
<td>
匹配一个换行符
</td>
</tr>
<tr>
<td align="center">
<code>\r</code>
</td>
<td>
匹配一个回车符
</td>
</tr>
<tr>
<td align="center">
<code>\t</code>
</td>
<td>
匹配一个制表符
</td>
</tr>
<tr>
<td align="center">
<code>\v</code>
</td>
<td>
匹配一个垂直制表符
</td>
</tr>
<tr>
<td align="center">
<code>\p</code>
</td>
<td>
匹配 CR/LF（等同于 <code><code>\r\n</code></code>），用来匹配 DOS
行终止符
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-29,28,250-->
<h2 id="零宽度断言前后预查">4. 零宽度断言（前后预查）</h2>
<p><strong>先行断言和后发断言</strong>（合称
lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但==不包括在匹配列表中==）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和
<code>$10.88</code> 中获得所有以 <code>$</code>
字符开头的数字，我们将使用以下的正则表达式
<code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code>
并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">
符号
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
?=
</td>
<td>
正先行断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?!
</td>
<td>
负先行断言 - 排除
</td>
</tr>
<tr>
<td align="center">
?&lt;=
</td>
<td>
正后发断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?&lt;!
</td>
<td>
负后发断言 - 排除
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-18,19,250-->
<h3 id="exp-放在后面-匹配后面跟的是exp">4.1 (?=exp) 放在后面
匹配后面跟的是exp</h3>
<p><code>?=exp</code> 正先行断言，表示第一部分表达式之后必须跟着
<code>?=exp</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用
<code>()</code>。在括号内部使用一个问号和等号：
<code>(?=exp)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。 例如，表达式
<code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code>
，即 <code>The</code> 和 <code>the</code> 后面紧跟着
<code>(空格)fat</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?=\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a>
<!--SR:!2022-11-27,26,250--></p>
<h3 id="exp-放在后面-匹配后面跟的不是exp">4.2 (?!exp) 放在后面
匹配后面跟的不是exp</h3>
<p>负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为
其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和
<code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成
<code>!</code> 也就是 <code>(?!exp)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?!\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<h3 id="exp-放在前面-匹配后面跟的是exp">4.3 (?&lt;= exp) 放在前面
匹配后面跟的是exp</h3>
<p>正后发断言 记作<code>(?&lt;=exp)</code>
用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配
<code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或
<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;=(T|t)he\s)(fat|mat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/avH165/1">在线练习</a>
<!--SR:!2022-11-19,9,250--></p>
<h3 id="exp-放在前面-匹配后面跟的不是exp">4.4 (?&lt;!exp) 放在前面
匹配后面跟的不是exp</h3>
<p>负后发断言 记作 <code>(?&lt;!exp)</code>
用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配
<code>cat</code>，且其前不跟着 <code>The</code> 或
<code>the</code>。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;!(T|t)he\s)(cat)&quot; =&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a>
<!--SR:!2022-11-29,28,250--></p>
<h2 id="标志">5. 标志</h2>
<p>标志也叫模式修正符，因为它可以用来==修改表达式的搜索结果==。
这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">
标志
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
i
</td>
<td>
忽略大小写。
</td>
</tr>
<tr>
<td align="center">
g
</td>
<td>
全局搜索。
</td>
</tr>
<tr>
<td align="center">
m
</td>
<td>
多行修饰符：锚点元字符 <code>^</code> <code>$</code>
工作范围在每行的起始。
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-29,28,250-->
<h3 id="忽略大小写-case-insensitive">5.1 忽略大小写 (Case
Insensitive)</h3>
<p>修饰语 <code>i</code> 用于忽略大小写。 例如，表达式
<code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的
<code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和
<code>The</code>，<code>g</code> 表示全局搜索。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/The/gi&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a>
<!--SR:!2022-11-19,20,250--></p>
<h3 id="全局搜索-global-search">5.2 全局搜索 (Global search)</h3>
<p>修饰符 <code>g</code>
常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。
例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+
<code>at</code>，并返回全部结果。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/g&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a>
<!--SR:!2022-11-27,26,250--></p>
<h3 id="多行修饰符-multiline">5.3 多行修饰符 (Multiline)</h3>
<p>多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code>
用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符
<code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code>
后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据
<code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/&quot; =&gt; The fat</span><br><span class="line">                cat sat</span><br><span class="line">                on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/gm&quot; =&gt; The fat</span><br><span class="line">                  cat sat</span><br><span class="line">                  on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a>
<!--SR:!2022-11-29,28,250--></p>
<h3 id="贪婪匹配与惰性匹配-greedy-vs-lazy-matching">6.
贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3>
<p>正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用
<code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*?at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure></div>
<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a>
<!--SR:!2022-11-28,27,250--></p>
<h2 id="正则替换">6. 正则替换</h2>
<p>正则替换时如果要引用匹配的内容, 需要加分组<code>'#&#123;2,&#125;.*\n'</code>
=&gt; <code>'(#&#123;2,&#125;.*\n)'</code>, 根据分组的顺序获取内容, 从1开始,
如<code>/1</code>或<code>$1</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">content = <span class="string">&quot;&quot;&quot;  </span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">## Title</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">paragraph</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 寻找下方段落只有1个换行的标题, 替换为加一个换行的标题, \1(其他语言有$1的)是匹配文本分组的占位符</span></span><br><span class="line">res = re.sub(<span class="string">r&quot;(#&#123;2,&#125;.*\n)(?!\n)&quot;</span>, <span class="string">r&#x27;\1\n&#x27;</span>, content)  </span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-19,17,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/491620052">滚蛋吧，正则表达式！
- 知乎</a></p>
<p><a href="https://regex-vis.com/">Regex Vis</a></p>
<p><a href="https://regexlearn.com/zh-cn">Regex Learn -
逐步从零基础到高阶。</a></p>
<p><a href="https://regex101.com/">regex101: build, test, and debug
regex</a></p>
<p><a href="https://ihateregex.io/">i Hate Regex - The Regex Cheat
Sheet</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>syncthing 如何移动同步仓库位置</title>
    <url>/93b271a4b50fa0d57f5c4585e735dc462fa40798/</url>
    <content><![CDATA[<p><strong>how to move syncthing folder position?</strong></p>
<ol type="1">
<li>Make sure the folder is <mark style="background: #018bffA6;">up to
date</mark> with the remote. (probably not strictly necessary)</li>
<li><mark style="background: #018bffA6;">Stop Syncthing</mark> (Pausing
the folder could be enough)</li>
<li><mark style="background: #018bffA6;">Copy the folder</mark> to the
external drive (e.g. using rsync or equivalent).</li>
<li><mark style="background: #018bffA6;">Edit the path in syncthing
config file</mark>
(C:/Users/Administrator/AppData/Local/Syncthing/config.xml )</li>
<li><mark style="background: #018bffA6;">Restart syncthing</mark></li>
<li>Wait for scanning and initial sync (exchanging and comparing
metadata to be sure the contents are the same as on remote) to
finish.</li>
<li>if everything works ok, delete the original folder
<!--SR:!2022-12-20,57,250--></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Syncthing</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>syncthing</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题添加访问量统计功能</title>
    <url>/f25ed57e4b953e28746c6650d2c02252af68ae66/</url>
    <content><![CDATA[<h2 id="开启不蒜子访问量统计功能">1. 开启不蒜子访问量统计功能</h2>
<p>在<code>themes/next/_config.yml</code> 添加属性</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div>
<h2 id="解决live2d冲突问题">2、解决live2d冲突问题</h2>
<p>在<code>themes/next/layout/_partial/footer.njk</code>中隐藏busuanzi组件的外层span
<img src="/images/Pasted%20image%2020221017182619.png" /></p>
<p><strong>参考:</strong></p>
<p><a
href="https://www.jianshu.com/p/c9f83d5b893a">Hexo博客添加访问量统计 -
简书</a></p>
<p><a
href="https://moguangpeng998.github.io/2020/06/13/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%92%9C%E5%AD%90%E5%92%8Clive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Hexo博客不蒜子和live2d看板娘冲突问题解决方案
| MoonBird博客</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Import module from different directory</title>
    <url>/444fdbf98270c2b627e5837a41c9e9ed322c10b5/</url>
    <content><![CDATA[<h2
id="method-1-import-module-from-different-directory-by-append-sys.path">Method
1: Import module from different directory by append sys.path</h2>
<p>We can use <strong>sys.path</strong> to add the path of the new
different folder (the folder from where we want to import the modules)
to the system path so that Python can also look for the module in that
directory if it doesn’t find the module in its current directory.
As <strong>sys.path</strong> falls under the <strong>list type
class</strong> so, we can easily use the insert method to add the folder
path.</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">import_root_path = os.path.abspath(<span class="string">&#x27;import/root/path/&#x27;</span>)  </span><br><span class="line">sys.path.append(import_root_path)</span><br></pre></td></tr></table></figure></div>
<h2 id="method-2-using-the-pythonpath-environment-variable">Method 2:
Using the PYTHONPATH environment variable</h2>
<p>if you don’t want to use the <strong>sys</strong> module to set the
path of the new directory. You can assign a directory path to the
PYTHONPATH variable and still get your program working.</p>
<ul>
<li>In Linux, we can use the following command in the terminal to set
the path:</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=’path/to/directory’  </span><br></pre></td></tr></table></figure></div>
<ul>
<li>In the Windows system :</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">SET PYTHONPATH=”path/to/directory”  </span><br></pre></td></tr></table></figure></div>
<p>To see if the PYTHONPATH variable holds the path of the new folder,
we can use the following command:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure></div>
<p><strong>注意:</strong></p>
<ul>
<li>把项目根目录加入环境变量(手动或通过脚本)<br />
</li>
<li>import 导入路径以项目根目录下的源码目录 src 为起始</li>
</ul>
<p><strong>参考:</strong></p>
<ul>
<li><a href="../7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f">Python import
导入其他脚本</a></li>
<li><a
href="https://www.geeksforgeeks.org/python-import-module-from-different-directory/">Python
– Import module from different directory - GeeksforGeeks</a></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f">Python import
导入其他脚本</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Python Import module from different directory
<ul>
<li><a href="../7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f">Python import
导入其他脚本</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 使用 MSVC 编译器搭建 OpenGL 开发环境</title>
    <url>/2d4749c98b17ee629f8de0b700cf131d14544f51/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/qiaogaojian/cpp_learn-opengl">github.com</a></p>
</blockquote>
<p>因为 windows 环境下使用 g++ 编译器 assimp 库链接失败, 报错 "undefined
reference to'Assimp::Importer::Importer()", 后来发现使用 MSVC
编译器没有这个问题, 踩了几个坑终于搭建成功, 在此记录一下基于VSCode +
MSVC编译器的 OpenGL 开发环境配置.</p>
<p>另外, mingw/g++ 开发环境在 g++ 分支 visual studio 开发环境在 vs2019
分支.</p>
<h3 id="安装所需软件">1. 安装所需软件</h3>
<ul>
<li><p>VSCode 安装 C++ extension</p></li>
<li><p>下载安装 <a
href="https://github.com/assimp/assimp/releases/tag/v3.3.1/">assimp-sdk-3.3.1-setup_vs2017.exe</a></p></li>
<li><p>安装带 C++ build tools 的 Visual Studio, 下载独立的 <a
href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++
build tools</a> 也可以.</p></li>
<li><p>其他所用的库在<a
href="https://github.com/qiaogaojian/learn-opengl.git">项目</a>中的
include 文件夹里</p></li>
</ul>
<h3 id="配置环境变量">2. 配置环境变量</h3>
<ul>
<li>Path 中添加 assimp 库</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Opengl\Assimp\bin\x86  <span class="comment"># 这样就不需要把assimp.dll放到build目录了</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>新建 INCLUDE 环境变量, 添加以下目录</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\include</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\include</span><br><span class="line">D:\Program\VS2019\VS\Common7\Tools</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\ucrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\um</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\shared</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\winrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\cppwinrt</span><br></pre></td></tr></table></figure></div>
<ul>
<li>新建 LIB 环境变量, 添加以下目录</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\UnitTest\lib</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\ucrt\x86</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\um\x86</span><br></pre></td></tr></table></figure></div>
<h3 id="配置-vscode">3. 配置 vscode</h3>
<ul>
<li>新建目录 OpenGl 并使用 VSCode 打开, <code>.vscode</code> 目录下
(没有就新建) 创建 <code>settings.json</code>, 配置以下内容</li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;C:\\Windows\\Sysnative\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="string">&quot;/k&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="string">&quot;D:/Program Files/VS2019/VS/Common7/Tools/VsDevCmd.bat&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;*.json&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsonc&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.cfg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.fsh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;glsl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iomanip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>.vscode 下创建 <code>c_cpp_properties.json</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_gb2312&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<ul>
<li>.vscode 下创建 <code>tasks.json</code></li>
</ul>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;/Od&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Zi&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/EHsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/MD&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/W4&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fd:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fo:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fe:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/shader_loader.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/stb_image.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/assimp/lib/assimp.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glfw/lib-vc2019/glfw3.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glad/lib/glad.o&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/OpenGL32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/User32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/Gdi32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/shell32.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Link /NODEFAULTLIB:msvcrt.lib&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$msCompile&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl.exe&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<p>.vscode 下创建 <code>launch.json</code></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Windows) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppvsdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>
<h3 id="注意事项">注意事项</h3>
<ol type="1">
<li><p>要确保环境变量和项目中的库保持一致 要么都是 x86 要么都是
x64</p></li>
<li><p>确保使用 vsdevcmd 进行编译</p></li>
<li><p>遇到 "undefined reference to xxx", 先检查 tasks.json
链接缺失的库, 再检查环境变量</p></li>
<li><p>编译时需要引用 build 文件夹, 但是 build 文件夹 git 已忽略,
因此需要自己提前新建好</p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>3.理论</category>
        <category>计算机</category>
        <category>图形学</category>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>cpp</tag>
        <tag>mscv</tag>
        <tag>开发环境</tag>
        <tag>opengl</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 LaTeX 公式符号</title>
    <url>/3ce969880cd0098d1862a98866197846a8c24d92/</url>
    <content><![CDATA[<h2 id="希腊字符">希腊字符</h2>
<p><span class="math inline">\(\theta\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\theta</span><br></pre></td></tr></table></figure></div>
<h2 id="空格">空格</h2>
<p><span class="math inline">\(1 \ 2\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \ 2</span><br></pre></td></tr></table></figure></div>
<h2 id="删除线">删除线</h2>
<p><del>abc</del></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sout &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>单斜线</p>
<p><span class="math inline">\(\cancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\cancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>反斜线 backslash</p>
<p><span class="math inline">\(\bcancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\bcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<p>双斜线</p>
<p><span class="math inline">\(\xcancel {abc}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\xcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="乘号">乘号</h2>
<p><strong>Q: latex 点乘 表示?</strong></p>
<p><span class="math inline">\(1 \cdot 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \cdot 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-21,61,210--></p>
<p><strong>Q: latex 叉乘表示?</strong></p>
<p><span class="math inline">\(1 \times 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \times 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-02-21,129,230--></p>
<h2 id="除号-divide">除号 divide</h2>
<p><strong>Q: latex 除法表示?</strong></p>
<p><span class="math inline">\(1 \div 2\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">1 \div 2</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-01-21,127,250--></p>
<h2 id="下标-上标">下标 上标</h2>
<p><strong>Q: latex 的下标表示?</strong></p>
<p><span class="math inline">\(v_a\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">v_a</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-15,88,270--></p>
<p><strong>Q: latex 的上标表示?</strong></p>
<p><span class="math inline">\(v^{21}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">v^&#123;21&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-04-20,177,250--></p>
<h2 id="根号">根号</h2>
<p><span class="math inline">\(\sqrt{3}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;3&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\sqrt[3]{9}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt[3]&#123;9&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="不等于-not-equal-to">不等于 not equal to</h2>
<p><span class="math inline">\(1\neq 0\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$$\neq 0$$</span><br></pre></td></tr></table></figure></div>
<h2 id="分号-fraction">分号 fraction</h2>
<p><strong>Q: latex 的分数表示?</strong></p>
<p><span class="math inline">\(\frac{1}{2}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;2&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-12,76,246--></p>
<h2 id="省略号">省略号</h2>
<p>水平</p>
<p><span class="math inline">\(\cdots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\cdots</span><br></pre></td></tr></table></figure></div>
<p>垂直</p>
<p><span class="math inline">\(\vdots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\vdots</span><br></pre></td></tr></table></figure></div>
<p>倾斜</p>
<p><span class="math inline">\(\ddots\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\ddots</span><br></pre></td></tr></table></figure></div>
<h2 id="约等于">约等于</h2>
<p><span class="math inline">\(\approx\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\approx</span><br></pre></td></tr></table></figure></div>
<h2 id="ln">ln</h2>
<p><span class="math inline">\(\ln n\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\ln n</span><br></pre></td></tr></table></figure></div>
<h2 id="大括号-brace">大括号 brace</h2>
<p><span class="math inline">\(\{ \}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\&#123; \&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\underbrace {123}_{456}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\underbrace &#123;123&#125;_&#123;456&#125;</span><br></pre></td></tr></table></figure></div>
<p><span class="math inline">\(\overbrace {123}^{456}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overbrace &#123;123&#125;^&#123;456&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="矩阵">矩阵</h2>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p><span class="math display">\[
\begin{vmatrix}
  1 &amp; 2 &amp; 3 \\
  4 &amp; 5 &amp; 6
\end{vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 2 &amp; 3 \\</span><br><span class="line">  4 &amp; 5 &amp; 6</span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2023-04-11,172,250--></p>
<p><span class="math display">\[
\begin{vmatrix}
  1 &amp; 4 \\
  2 &amp; 5 \\
  3 &amp; 6
\end{vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 4 \\</span><br><span class="line">  2 &amp; 5 \\</span><br><span class="line">  3 &amp; 6 </span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <strong>Q: latex 的矩阵表示?</strong></p>
<p>圆括号 (parentheses) <span class="math display">\[
\begin{pmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{pmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2023-03-02,146,250--></p>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p>中括号 (square brackets) <span class="math display">\[
\begin{bmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{bmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-19,78,230--></p>
<p><strong>Q: latex 的矩阵表示?</strong></p>
<p>双竖线 (double vertical lines) <span class="math display">\[
\begin{Vmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{Vmatrix}
\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2023-01-25,123,250--></p>
<h2 id="向量">向量</h2>
<p><strong>Q: latex 的向量表示?</strong></p>
<p><strong>单个字符</strong> <span class="math display">\[\vec
a\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\vec a</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-13,88,270--></p>
<p><strong>Q: latex 的向量表示?</strong></p>
<p><strong>多个字符</strong> <span
class="math display">\[\overrightarrow{ab}\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overrightarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure></div> <span
class="math display">\[\overleftarrow{ab}\]</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\overleftarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-02-19,130,230--></p>
<h2 id="单位向量">单位向量</h2>
<p><span class="math inline">\(\hat{ab}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\hat&#123;ab&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="求和运算">求和运算</h2>
<p><strong>Q: latex 的求和符号表示?</strong></p>
<p><span class="math inline">\(\sum_{i=1}^{n}\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\sum_&#123;i=1&#125;^&#123;n&#125;</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-05-05,189,250--></p>
<h2 id="对齐">对齐</h2>
<p><strong>Q: latex 的对齐符号?</strong></p>
<p><span class="math display">\[\begin{aligned}
a &amp;= b + c &amp; = d \\
   &amp;= d &amp; = e    
\end{aligned}\]</span> &amp; 表示对齐位置, 同一行可以有多个 &amp;
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c &amp; = d \\</span><br><span class="line">   &amp;= d &amp; = e    </span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2023-01-10,114,250--></p>
<h2 id="注释">注释</h2>
<p><span class="math inline">\(\text{注释}\)</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\text&#123;注释&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="箭头">箭头</h2>
<h3 id="右箭头">右箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xrightarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下：</p>
<p><span class="math inline">\(a \rightarrow b\)</span> <span
class="math inline">\(a \Rightarrow b\)</span> <span
class="math inline">\(\xrightarrow[下方公式]{上方公式}\)</span>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ a \rightarrow b $</span><br><span class="line">$ a \Rightarrow b $</span><br><span class="line">$ \xrightarrow[下方公式]&#123;上方公式&#125; $</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-12-04,39,247--></p>
<h3 id="左箭头">左箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xleftarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下：</p>
<p><span class="math inline">\(a \leftarrow b\)</span> <span
class="math inline">\(a \Leftarrow b\)</span> <span
class="math inline">\(\xleftarrow[上方公式]{下方公式}\)</span><br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ a \leftarrow b $</span><br><span class="line">$ a \Leftarrow b $</span><br><span class="line">$ \xleftarrow[上方公式]&#123;下方公式&#125; $  </span><br></pre></td></tr></table></figure></div> <!--SR:!2022-12-05,39,247--></p>
<h3 id="双向箭头">双向箭头</h3>
<p><span class="math inline">\(a \leftrightarrow b\)</span> <span
class="math inline">\(a \Leftrightarrow b\)</span> <span
class="math inline">\(a \xLeftrightarrow[下]{上} b\)</span>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$a \leftrightarrow b$</span><br><span class="line">$a \Leftrightarrow b$</span><br><span class="line">$a \xLeftrightarrow[下]&#123;上&#125; b$</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-12-08,41,247--></p>
<h2 id="加减-减加">加减 减加</h2>
<p><span class="math inline">\(\pm\)</span> <span
class="math inline">\(\mp\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$ \pm $</span><br><span class="line">$ \mp $</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-02,37,247--></p>
<h2 id="希腊字母">希腊字母</h2>
<p><span class="math inline">\(\delta\)</span> <span
class="math inline">\(\Delta\)</span> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">$\delta$</span><br><span class="line">$\Delta$</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-12,44,247--></p>
<h2 id="自动调整括号大小">自动调整括号大小</h2>
<p><span class="math display">\[\left \{  
  \frac{1}{2}
  \left [
    \left (
      a + b
    \right )
  \right ]
\right \}\]</span></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">\left \&#123;  </span><br><span class="line">  \frac&#123;1&#125;&#123;2&#125;</span><br><span class="line">  \left [</span><br><span class="line">    \left (</span><br><span class="line">      a + b</span><br><span class="line">    \right )</span><br><span class="line">  \right ]</span><br><span class="line">\right \&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="参考">参考</h2>
<p><a
href="https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX">https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX</a></p>
<p><a
href="https://tex.stackexchange.com/questions/28608/how-to-add-a-matrix-to-a-latex-document">math
mode - How to add a matrix to a LaTeX document - TeX - LaTeX Stack
Exchange</a></p>
<p><a
href="https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols">List of
LaTeX mathematical symbols - OeisWiki</a></p>
<p><a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的
LaTeX 表示方法</a></p>
<p><a
href="https://blog.csdn.net/foreverdengwei/article/details/8189243">latex
中括号大小控制_Cloud-Datacenter-Renewable Energy-Big Data-Model-CSDN
博客</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>常用 LaTeX 公式符号
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Obsidian</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/8f6545d7e67011208be5a476458127a9efcf702f/</url>
    <content><![CDATA[<h1 id="双链测试笔记-3">双链测试笔记 3</h1>
<p>双链测试笔记 3 和 双链测试笔记 2 同名, 用于测试同名笔记的双链解析</p>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#链接">Obsidian+Hexo
Markdown 测试#链接</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>test_note2
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#链接">Obsidian+Hexo
Markdown 测试#链接</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
        <category>deep</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
        <tag>obsidian</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/a1051e510da0bf87d685c05b40001b7020d14a66/</url>
    <content><![CDATA[<h1 id="双链测试笔记-2">双链测试笔记 2</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#图表">Obsidian+Hexo
Markdown 测试#图表</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>test_note2
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#图表">Obsidian+Hexo
Markdown 测试#图表</a></li>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
        <tag>obsidian</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note1</title>
    <url>/a58ee0e911c1ffedefc347d0eac29b0f5fae0d41/</url>
    <content><![CDATA[<h1 id="双链测试笔记-1">双链测试笔记 1</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#注脚">Obsidian+Hexo
Markdown 测试#注脚</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>test_note1
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#注脚">Obsidian+Hexo
Markdown 测试#注脚</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>test</tag>
        <tag>markdown</tag>
        <tag>obsidian</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 参数传递的4种方式</title>
    <url>/dbf16f0359b132fca77e8472b47d86ac9249e5ef/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="http://h3blog.com/article/flask-params/">h3blog.com</a></p>
</blockquote>
<h2 id="get-方式传参">get 方式传参</h2>
<p>代码： <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></div> 测试 curl
http://127.0.0.1:5000/name?name=www.h3blog.com <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -i -X GET http://127.0.0.1:5000/name?name=www.h3blog.com</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-24,51,250--></p>
<h2 id="post-方式传参">post 方式传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/post_address_nft&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_address_nft</span>():  </span><br><span class="line">	addresses = flask.request.values.get(<span class="string">&#x27;address_list&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure></div> 测试 curl http://127.0.0.1:5000/name
<strong>-d</strong> 'name=www.h3blog.com' <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST http://127.0.0.1:5000/name -d <span class="string">&#x27;name=www.h3blog.com&#x27;</span> -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-28,54,250--></p>
<h2 id="url-路径传参">url 路径传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br></pre></td></tr></table></figure></div> 测试 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X GET http://127.0.0.1:5000/name/www.h3blog.com -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-14,42,250--></p>
<h2 id="json-body-传参">json body 传参</h2>
<p>代码 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure></div> 测试 curl <code>url</code> <strong>-H</strong>
<code>'Content-Type:application/json'</code> <strong>-d</strong>
<code>'json_string'</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> http://127.0.0.1:5000/json -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;www.h3blog.com&quot;&#125;&#x27;</span> -i</span><br></pre></td></tr></table></figure></div></p>
<p>response: <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;www.h3blog.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-28,54,250--></p>
<h2 id="flask-传参汇总">Flask 传参汇总</h2>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = flask.request.get_json()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-28,54,250-->
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JS == 和 === 的区别</title>
    <url>/894af26ddcc518ccc45e0f52fd57df311958d1c0/</url>
    <content><![CDATA[<h2 id="区别">区别</h2>
<p>在 JS 项目里，除了能看到 ==
操作符来判断两个变量是否相等外，我们还会看到 ===
操作符，这两者有什么区别？</p>
<ul>
<li>对于 String, number 这些<strong>值类型</strong>，<code>==</code>
操作符会先把两边的变量<mark style="background: #fefe00A6;">进行类型强制转换成相同的类型再比较是否相等</mark>
；<code>===</code> 操作符则不会进行类型转换，而是直接进行比较。</li>
<li>对于 array, object 这些<strong>引用类型</strong>，<code>==</code> 和
<code>===</code>
是没有区别的，因为它们<mark style="background: #fefe00A6;">比较的是
“指针地址</mark> ” 。</li>
<li><strong>值类型和引用类型之间</strong>比较，<code>==</code> 和
<code>===</code>
是有区别的；<code>==</code>操作符会<mark style="background: #fefe00A6;">先把高级类型转换为基础类型</mark>
之后，进行值的比较；<code>===</code>
操作符则不会进行转换，类型不同，直接返回 false</li>
</ul>
<p>也就是说，<code>==</code>
操作符只要求比较<mark style="background: #83d98fA6;">两个变量的值是否相等</mark>
，<code>===</code>
操作符则是要求<mark style="background: #83d98fA6;">两个变量的值和类型都要相同</mark>
；类似地，<code>!=</code> 操作符会去做类型强制转换，<code>!==</code>
操作符则不会转换类型。</p>
<p><strong>值类型</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></p>
<p><strong>引用类型</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line">c = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===c);</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-25,55,250--></p>
<h2 id="注意事项">注意事项</h2>
<p><mark style="background: #fa518dA6;">JS == / ===注意事项: </mark></p>
<ul>
<li>对于特殊值 NaN（Not a Number）表示非数字，NaN
和任何数（包括它自己）做相等比较，都会返回
false，所以<mark style="background: #83d98fA6;">判断 NaN 最好用 isNaN()
函数</mark></li>
<li>undefined 和 null，两者的值相比较，会返回 true。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>==<span class="literal">null</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>===<span class="literal">null</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></li>
<li>由于 == 和!=
操作符带来的类型隐式转换规则非常繁琐，还有为了避免数据类型混淆导致出现
bug，还是推荐使用 <code>===</code> 操作符和<code>!==</code> 操作符。
<!--SR:!2023-01-15,71,250--></li>
</ul>
<h2 id="stack-overflow-相关">Stack Overflow 相关</h2>
<p>So there you have the two common sources of errors in Javascript
comparisons: 1. comparing different types with == can lead to
==unexpected type conversions.== 2. comparing objects and arrays is
based on ==references not values stored inside==.</p>
<p>As the existing answer already says, Typescript is designed as a
superset of Javascript. So it doesn't change the behaviour of these
comparison operators. If you write <code>==</code> in Typescript, you
get type conversions.</p>
<p>So how is this fixed? ==With the compiler. ==If you actually do write
code that compares incompatible types with <code>==</code> it's a
compiler error. Try compiling the following sample:<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="TS"><figure class="iseeu highlight /ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str==num);</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-01-05,64,250!2023-02-01,90,270!2023-01-16,71,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://nowjava.com/article/44330">nowjava.com</a></p>
<p><a
href="https://stackoverflow.com/questions/57125700/why-use-triple-equal-in-typescript">javascript
- Why use triple-equal (<code>===</code>) in TypeScript? - Stack
Overflow</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 常用命令</title>
    <url>/14dab12572d9fd706144fe09626534625a2a2eb8/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p><strong>怎么查看 vim 的 clipboard 功能是否开启</strong></p>
<p>以下命令用来检查vim剪贴板的支持情况 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure></div>
如果结果中有这个<img
src="/images/Pasted%20image%2020220819181213.png" />,
前面是+号代表支持剪贴板操作, -号代表不支持。
<!--SR:!2023-02-16,106,251--></p>
<p>如果系统自带vim不支持剪贴板的话, 需要重新安装: 参考:<a
href="../6b3a3abf0a6c8711830275afbe228de56da9066d">vim
使用全局剪贴板</a></p>
<h2 id="移动光标">移动光标</h2>
<p><strong>Vim 上下左右移动光标</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">　　K</span><br><span class="line">H　　　　I</span><br><span class="line">　　J</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-02-26,113,251-->
<h2 id="模式切换">模式切换</h2>
<ul>
<li><p>进入默认是普通模式</p></li>
<li><p><strong>Vim 切换到插入模式</strong></p></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>i</td>
<td>在光标的前边进入插入模式</td>
</tr>
<tr class="even">
<td>I</td>
<td>在光标所在行的行首进入插入模式</td>
</tr>
<tr class="odd">
<td>a</td>
<td>在光标的后面进入插入模式</td>
</tr>
<tr class="even">
<td>A</td>
<td>在光标所在行的行尾进入插入模式</td>
</tr>
<tr class="odd">
<td>o</td>
<td>在光标所在行的下方插入空行进入插入模式</td>
</tr>
<tr class="even">
<td>O</td>
<td>在光标所在行的上方插入空行进入插入模式</td>
</tr>
<tr class="odd">
<td>s</td>
<td>删除光标指定的字符并进入插入模式</td>
</tr>
<tr class="even">
<td>S</td>
<td>将光标所在行清除并进入插入模式</td>
</tr>
</tbody>
</table>
<!--SR:!2023-01-10,83,251-->
<ul>
<li><strong>Vim 切换到选中模式</strong></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>v</td>
<td>普通选中</td>
</tr>
<tr class="even">
<td>V</td>
<td>行选中</td>
</tr>
<tr class="odd">
<td>ctrl+v</td>
<td>列选中</td>
</tr>
</tbody>
</table>
<!--SR:!2022-12-06,66,251-->
<ul>
<li><strong>Vim退出</strong></li>
</ul>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>:q</td>
<td>未改动退出</td>
</tr>
<tr class="even">
<td>:q!</td>
<td>改动后不保存强制退出</td>
</tr>
<tr class="odd">
<td>:wq</td>
<td>:w表示保存,:q表示退出</td>
</tr>
<tr class="even">
<td>shift+z+z</td>
<td>保存修改并退出</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-19,56,251-->
<h2 id="编辑">编辑</h2>
<p><strong>Vim编辑常用命令</strong></p>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>y</td>
<td>复制</td>
</tr>
<tr class="even">
<td>p</td>
<td>粘贴</td>
</tr>
<tr class="odd">
<td>d</td>
<td>剪切</td>
</tr>
<tr class="even">
<td>u</td>
<td>撤销</td>
</tr>
<tr class="odd">
<td>ctrl+r</td>
<td>重做</td>
</tr>
<tr class="even">
<td>r</td>
<td>替换单个</td>
</tr>
<tr class="odd">
<td>shift+r</td>
<td>替换多个</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-17,55,251-->
<p><strong>Vim 中有多少个剪贴板?</strong></p>
<p>Vim 有12个粘贴板依次编号为：0、1、2、...、9、a、"、+，其中 +
号为系统粘贴板，”
为临时粘贴板。系统剪切板中的内容可在其他程序中使用。上面的复制指令都可以配合剪切板进行操作。
-
用<code>"+y</code> 代替<code>y</code>将选中的内容复制到系统剪贴板，效果和<code>ctrl-c</code>一致。
-
用<code>"+p</code>代替<code>p</code>将剪贴板内容复制到指定位置，也可以用<code>ctrl-v</code>。
<code>d</code>，<code>x</code>，<code>c</code>，<code>s</code>也一样，用之前前面加<code>"+</code>。
<!--SR:!2022-12-02,65,250--></p>
<h3 id="复制">复制</h3>
<ul>
<li><strong>单行复制</strong>：按esc键后, 然后<code>yy</code></li>
<li><strong>全部复制</strong>：按esc键后，然后<code>ggyG</code></li>
</ul>
<h3 id="粘贴">粘贴</h3>
<ul>
<li><strong>粘贴</strong>：按esc键后, 然后<code>p</code></li>
</ul>
<h3 id="剪切">剪切</h3>
<ul>
<li><strong>单行删除</strong>：按esc键后, 然后dd</li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code></li>
</ul>
<h3 id="撤销与恢复">撤销与恢复</h3>
<p><strong>vim 撤销和恢复快捷键?</strong></p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">u         撤销操作  </span><br><span class="line">Ctrl + r  恢复撤销的操作</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-31,86,270-->
<h2 id="选择">选择</h2>
<ul>
<li><strong>全选选择：</strong> 按esc后，然后<code>ggvG</code></li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code><br />
</li>
<li><strong>全部复制：</strong> 按esc后，然后<code>ggyG</code></li>
</ul>
<p>解析： <strong>gg：</strong>
是让光标移到首行，在<strong>vim</strong>才有效，vi中无效  <strong>G
：</strong> 光标移到最后一行  <strong>v
：</strong> 是进入Visual(可视）模式  <strong>d
：</strong>  删除选中内容 <br />
<strong>y ：</strong>  复制选中内容到0号寄存器 </p>
<h2 id="跳转">跳转</h2>
<p><strong>Vim 跳转常用命令</strong></p>
<table>
<thead>
<tr class="header">
<th>按键</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>^</td>
<td>光标到行首</td>
</tr>
<tr class="even">
<td>$</td>
<td>光标到行尾</td>
</tr>
<tr class="odd">
<td>w</td>
<td>光标到下个单词开头</td>
</tr>
<tr class="even">
<td>b</td>
<td>光标到所在单词开头</td>
</tr>
<tr class="odd">
<td>e</td>
<td>光标到所在单词结尾</td>
</tr>
<tr class="even">
<td>gg</td>
<td>光标到文件的开头</td>
</tr>
<tr class="odd">
<td>G</td>
<td>光标到文件的结尾</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-14,9,252-->
<ol type="1">
<li><strong>跳到第一行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-22,62,250-->
<ol start="2" type="1">
<li><strong>跳到第10行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">10gg</span><br><span class="line">或10G</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-05,70,250-->
<ol start="3" type="1">
<li><strong>跳到最后一行</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">shift</span>]+g</span><br><span class="line">或G</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-23,69,270-->
<h2 id="搜索">搜索</h2>
<h3 id="进入搜索模式">1. 进入搜索模式</h3>
<ol type="1">
<li><strong>打开文件后马上搜索</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[/]</span><br></pre></td></tr></table></figure></div></li>
<li>在<strong>编辑模式</strong>切换到搜索 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">先按[Esc]退出编辑，再按[/]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-02-06,106,250--></li>
</ol>
<h3 id="搜索-1">2. 搜索</h3>
<ol type="1">
<li><strong>普通搜索</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">/关键字  </span><br><span class="line"><span class="comment"># 向下找（左斜杠+关键字）</span></span><br><span class="line"></span><br><span class="line">?关键字 </span><br><span class="line"> <span class="comment"># 向上找（逆向搜索）（问号+关键字）</span></span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #fa518dA6;">注意</mark>
：搜索一些特殊的字符，例如：*、[、]、^、%、/、?、~、$ 等,
需要在它们的前面加上转义符号。 <!--SR:!2022-12-07,72,250--></p>
<ol start="2" type="1">
<li><strong>匹配搜索</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配单词开头（右斜杠+小于号）</span></span><br><span class="line">/\&lt;关键字    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行末尾</span></span><br><span class="line">/^关键字   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配单词末尾（右斜杠+大于号）</span></span><br><span class="line">/关键字\&gt;   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行开头</span></span><br><span class="line">/关键字$     </span><br><span class="line"></span><br><span class="line">/\&lt;关键字\&gt; </span><br><span class="line"><span class="comment"># 匹配单词全部（匹配开头和结尾的符号加起来）</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-03-17,129,250-->
<h3 id="搜索定位">3. 搜索定位</h3>
<p>输入搜索命令后按回车开始定位</p>
<ol type="1">
<li><strong>移动到下一个匹配处</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[n]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-03-18,128,250-->
<ol start="2" type="1">
<li><strong>移动到上一个匹配处</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">按[N]或[<span class="built_in">shift</span>]+[n]</span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-12-26,86,270-->
<ol start="3" type="1">
<li><strong>搜索当前光标所在单词</strong></li>
</ol>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">光标移动到关键字任意位置，按[*] 或 [<span class="comment">#] </span></span><br><span class="line"><span class="comment"># 如果当前光标位置单词为the，那么执行命令 * 相当于搜索命令 /the，命令 # 等同于命令 ?the</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2023-03-15,127,250-->
<h2 id="替换">替换</h2>
<p><strong>Vim 替换命令?</strong></p>
<p><code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure></div>
例如 <code>:%s/foo/bar/g</code> 会在全局范围(<code>%</code>)查找 <code>foo</code> 并替换为 <code>bar</code>，所有出现都会被替换（<code>g</code>）。
<!--SR:!2022-12-03,67,250--></p>
<h2 id="tab">Tab</h2>
<p><strong>Vim Tab切换快捷键</strong></p>
<table>
<thead>
<tr class="header">
<th>快捷键</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>ctrl + w + w</td>
<td>光标自动在左右侧窗口切换</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-12,39,232-->
<h2 id="配置">配置</h2>
<p>将配置粘贴到你的 <code>~/.vimrc</code>，重新打开 Vim 即可生效。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="JS"><figure class="iseeu highlight /js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; ********************************* 插件 *********************************</span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">Plugins</span> will be downloaded under the specified directory.</span><br><span class="line">call plug#<span class="title function_">begin</span>(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Declare the list of plugins.</span></span><br><span class="line"><span class="string">Plug &#x27;matze/vim-move&#x27;       </span></span><br><span class="line"><span class="string">Plug &#x27;plasticboy/vim-markdown&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;luochen1990/rainbow&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;vim-syntastic/syntastic&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;scrooloose/nerdtree&#x27;, &#123; &#x27;on&#x27;:  &#x27;NERDTreeToggle&#x27; &#125; &quot;</span> 目录树插件</span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;kien/ctrlp.vim&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;Yggdroot/indentLine&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;vim-scripts/indentpython&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;vim-python/python-syntax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; List ends here. Plugins become visible to Vim after this call.</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">NERDTree</span></span><br><span class="line">noremap &lt;C-n&gt; :<span class="title class_">NERDTreeToggle</span>&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; vim-move</span></span><br><span class="line"><span class="string">map &lt;ESC&gt;[1;5B &lt;A-Down&gt;</span></span><br><span class="line"><span class="string">map &lt;ESC&gt;[1;5A &lt;A-Up&gt;</span></span><br><span class="line"><span class="string">map! &lt;ESC&gt;[1;5B &lt;A-Down&gt;</span></span><br><span class="line"><span class="string">map! &lt;ESC&gt;[1;5A &lt;A-Up&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">let g:move_map_keys = 0</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">vmap &lt;A-Up&gt;   &lt;Plug&gt;MoveBlockUp</span></span><br><span class="line"><span class="string">vmap &lt;A-Down&gt; &lt;Plug&gt;MoveBlockDown</span></span><br><span class="line"><span class="string">nmap &lt;A-Up&gt;   &lt;Plug&gt;MoveLineUp</span></span><br><span class="line"><span class="string">nmap &lt;A-Down&gt; &lt;Plug&gt;MoveLineDown</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">YouCompleteMe</span></span><br><span class="line"><span class="string">&quot;打开vim时不再询问是否加载ycm_extra_conf.py配置&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_confirm_extra_conf=<span class="number">0</span></span><br><span class="line">set completeopt=longest,menu</span><br><span class="line"><span class="string">&quot;python解释器路径&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_path_to_python_interpreter=<span class="string">&#x27;/usr/bin/python3&#x27;</span></span><br><span class="line"><span class="string">&quot;是否开启语义补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_seed_identifiers_with_syntax=<span class="number">1</span></span><br><span class="line"><span class="string">&quot;是否在注释中也开启补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_complete_in_comments=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_collect_identifiers_from_comments_and_strings = <span class="number">0</span></span><br><span class="line"><span class="string">&quot;开始补全的字符数&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_min_num_of_chars_for_completion=<span class="number">2</span></span><br><span class="line"><span class="string">&quot;补全后自动关机预览窗口&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_autoclose_preview_window_after_completion=<span class="number">1</span></span><br><span class="line"><span class="string">&quot; 禁止缓存匹配项,每次都重新生成匹配项&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_cache_omnifunc=<span class="number">0</span></span><br><span class="line"><span class="string">&quot;字符串中也开启补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_complete_in_strings = <span class="number">1</span></span><br><span class="line"><span class="string">&quot;离开插入模式后自动关闭预览窗口&quot;</span></span><br><span class="line">autocmd <span class="title class_">InsertLeave</span> * <span class="keyword">if</span> <span class="title function_">pumvisible</span>() == <span class="number">0</span>|pclose|endif</span><br><span class="line"><span class="string">&quot;回车即选中当前项&quot;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="variable constant_">CR</span>&gt;       <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;&lt;C-y&gt;&#x27;</span> : <span class="string">&#x27;\&lt;CR&gt;&#x27;</span>     </span><br><span class="line"><span class="string">&quot;上下左右键行为&quot;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">Down</span>&gt;     <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;Down&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">Up</span>&gt;       <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;C-p&gt;&#x27;</span> : <span class="string">&#x27;\&lt;Up&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">PageDown</span>&gt; <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;PageDown&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">PageUp</span>&gt;   <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;PageUp&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; ********************************* 公共配置 ********************************* </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 基础  </span><br><span class="line">syntax on  <span class="string">&quot; 开启代码高亮  </span></span><br><span class="line"><span class="string">set number &quot;</span> 显示行号</span><br><span class="line">set ruler  <span class="string">&quot; 开启标尺  </span></span><br><span class="line"><span class="string">set cursorline &quot;</span> 开启高亮光标所在行  </span><br><span class="line">set showmatch <span class="string">&quot; 显示匹配括号</span></span><br><span class="line"><span class="string">set encoding=utf-8 &quot;</span>设置vim内部编码</span><br><span class="line">set history=<span class="number">1000</span> <span class="string">&quot;Vim 需要记住多少次历史操作。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 性能  </span><br><span class="line">set viminfo= <span class="string">&quot; 关闭 viminfo (用于加快 vim 启动速度)  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 功能填补  </span><br><span class="line">set clipboard=unnamed <span class="string">&quot; 开启系统剪贴板支持</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start &quot;</span> 开启 <span class="title class_">Backspace</span> 键支持(否则 <span class="title class_">Backspace</span> 无法删除字符)  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 鼠标支持  </span></span><br><span class="line"><span class="string">set mouse=a &quot;</span> 开启鼠标支持  </span><br><span class="line">set selection=inclusive <span class="string">&quot; 指定在选择文本时光标所在位置也属于被选中的范围  </span></span><br><span class="line"><span class="string">set selectmode=mouse,key &quot;</span> 使鼠标和键盘都可以控制光标选择文本  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; tab键  </span></span><br><span class="line"><span class="string">set ts=4 &quot;</span> 指定制表符(tab)等于的空格数  </span><br><span class="line">set tabstop=<span class="number">4</span> <span class="string">&quot; tab 键相当于 4 个空格 </span></span><br><span class="line"><span class="string">set softtabstop=4 &quot;</span> 开启软制表(如果这<span class="number">4</span>个空格是用tab键打出来的删除会一起删除)  </span><br><span class="line">set shiftwidth=<span class="number">4</span> <span class="string">&quot; 指定自动缩进时缩进4个空格  </span></span><br><span class="line"><span class="string">set smarttab &quot;</span> 开启智能 tab</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 缩进  </span></span><br><span class="line"><span class="string">set smartindent &quot;</span> 开启智能缩进  </span><br><span class="line">set autoindent <span class="string">&quot; 开启自动缩进  </span></span><br><span class="line"><span class="string">set cindent &quot;</span> 开启C缩进(对C、C++语言文件有效)  </span><br><span class="line">::</span><br><span class="line"><span class="string">&quot; 其它配置   </span></span><br><span class="line"><span class="string">set viminfo=&#x27;1000,&lt;500 &quot;</span> 复制粘贴扩大到<span class="number">500</span>行 </span><br><span class="line">set backupcopy=yes <span class="string">&quot; 开启备份时行为为覆盖  </span></span><br><span class="line"><span class="string">set cmdheight=1 &quot;</span> 设置命令行的高度为<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 代码</span></span><br><span class="line"><span class="string">set foldenable &quot;</span> 打开折叠</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 搜索</span></span><br><span class="line"><span class="string">set ignorecase &quot;</span> 设置默认进行大小写不敏感查找</span><br><span class="line">set smartcase <span class="string">&quot; 如果有一个大写字母，则切换到大小写敏感查找 </span></span><br><span class="line"><span class="string">set hlsearch &quot;</span> 高亮搜索，如果需要清除屏幕搜索高亮，可以在<span class="title class_">Vim</span>命令行模式使用命令 :noh</span><br><span class="line">set incsearch <span class="string">&quot; 递进搜索</span></span><br><span class="line"><span class="string">set paste &quot;</span> 取消自动注释#后所有行</span><br><span class="line"></span><br><span class="line">noremap s :noh&lt;<span class="variable constant_">CR</span>&gt; <span class="string">&quot; 按下s取消高亮结果显示,本来按下s删除当前字符并进入插入模式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>设置代码折叠,映射空格键来折叠和取消折叠</span><br><span class="line">set foldenable 		    <span class="string">&quot;开始折叠</span></span><br><span class="line"><span class="string">set foldmethod=indent   &quot;</span>设置indent折叠方式</span><br><span class="line">set foldcolumn=<span class="number">0</span>        <span class="string">&quot;设置折叠区域的宽度</span></span><br><span class="line"><span class="string">setlocal foldlevel=1    &quot;</span>设置折叠层数</span><br><span class="line">set foldlevelstart=<span class="number">99</span>   <span class="string">&quot;打开文件默认不折叠</span></span><br><span class="line"><span class="string">nnoremap &lt;space&gt; @=((foldclosed(line(&#x27;.&#x27;)) &lt; 0) ? &#x27;zc&#x27;: &#x27;zo&#x27;)&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>map <span class="variable constant_">F5</span> to run files</span><br><span class="line">map &lt;<span class="variable constant_">F5</span>&gt; :call <span class="title class_">CompileRun</span>()&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line">func! <span class="title class_">CompileRun</span>()</span><br><span class="line">    exec <span class="string">&quot;w&quot;</span></span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;java&#x27;</span></span><br><span class="line">	exec <span class="string">&quot;!javac %&quot;</span></span><br><span class="line">	exec <span class="string">&quot;!java %&lt;&quot;</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">&#x27;python&#x27;</span></span><br><span class="line">	exec <span class="string">&quot;!python3 %&quot;</span></span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;PEP8风格设置,python代码风格标准</span></span><br><span class="line"><span class="string">au BufNewFile,BufRead *.py</span></span><br><span class="line"><span class="string">	    \ set tabstop=4 |</span></span><br><span class="line"><span class="string">	    \ set softtabstop=4 |</span></span><br><span class="line"><span class="string">	    \ set shiftwidth=4 |</span></span><br><span class="line"><span class="string">	    \ set textwidth=79 |</span></span><br><span class="line"><span class="string">	    \ set expandtab |</span></span><br><span class="line"><span class="string">	    \ set autoindent |</span></span><br><span class="line"><span class="string">	    \ set fileformat=unix</span></span><br><span class="line"><span class="string">&quot;</span> ********************************* 快捷键 *********************************</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; -- Control + a to select all file</span></span><br><span class="line"><span class="string">inoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">nnoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">vnoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">&quot;</span> -- <span class="title class_">Control</span> + s to save</span><br><span class="line">inoremap &lt;C-s&gt; &lt;<span class="title class_">Esc</span>&gt;:w&lt;<span class="variable constant_">CR</span>&gt;i</span><br><span class="line">nnoremap &lt;C-s&gt; :w&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line">vnoremap &lt;C-s&gt; :w&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line"></span><br><span class="line">noremap R :source $MYVIMRC&lt;<span class="variable constant_">CR</span>&gt;    </span><br><span class="line"><span class="string">&quot; ********************************* 主题 *********************************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> color schema</span><br><span class="line"><span class="string">&quot; 从 https://github.com/tomasr/molokai 获取molokai.vim 放到～/.vim/colors </span></span><br><span class="line"><span class="string">colorscheme molokai</span></span><br><span class="line"><span class="string">set t_Co=256</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure></div>
<h3 id="安装语法补全插件-youcompleteme">安装语法补全插件
YouCompleteMe</h3>
<p>除了通过 Vundle 安装语法补全
YouCompleteMe，也可以自己手动编译安装，这里有另外一种更加简单的方法。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 试试这个命令，看是否已经安装 vim-addons</span></span><br><span class="line">$ vim-addons</span><br><span class="line"><span class="comment"># 如果没有安装 vim-addons，则需安装 vim-addon-manager</span></span><br><span class="line">$ sudo apt-get install vim-addon-manager</span><br><span class="line"><span class="comment"># 开始安装 YouCompleteMe</span></span><br><span class="line">$ sudo apt-get install vim-youcompleteme</span><br><span class="line"><span class="comment"># 将 YCM 加入 addons 管理器中</span></span><br><span class="line">$ vim-addons install youcompleteme</span><br></pre></td></tr></table></figure></div>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Vim 常用命令
<ul>
<li><a href="../6b3a3abf0a6c8711830275afbe228de56da9066d">vim
使用全局剪贴板</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 使用全局剪贴板</title>
    <url>/6b3a3abf0a6c8711830275afbe228de56da9066d/</url>
    <content><![CDATA[<p>查看 vim 的 clipboard 功能是否开启</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure></div>
<p><img src="/images/2325099-c78cfca714ce958a.png" /> 没有开启是减号</p>
<p>如果不支持 clipboard 功能, 需要安装支持 clipboard 的 vim 版本</p>
<h3 id="ubuntu">ubuntu</h3>
<p>安装 vim-gtk</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">sudo apt install vim-gtk</span><br></pre></td></tr></table></figure></div>
<h3 id="centos">centos</h3>
<p>安装 vim-x11 和 vim-enhanced</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="SH"><figure class="iseeu highlight /sh"><table><tr><td class="code"><pre><span class="line">yum install vim*</span><br></pre></td></tr></table></figure></div>
<p>使用 vimx 代替 vim<br />
编辑 <code>~/.zshrc</code> 添加：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">alias vi=&#x27;vimx&#x27;</span><br><span class="line">alias vim=&#x27;vimx&#x27;</span><br></pre></td></tr></table></figure></div>
<ul>
<li>Debian &amp; Ubuntu: Install <code>vim-gtk</code> or
<code>vim-gnome</code>.</li>
<li>Fedora: install <code>vim-X11</code>, and run <code>vimx</code>
instead of <code>vim</code> (<a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fq%2F2063%2F51">more
info</a>).</li>
<li>Arch Linux: install <code>gvim</code> (this will enable
<code>+clipboard</code> for normal <code>vim</code> as well).</li>
</ul>
<p><strong>参考：</strong></p>
<ul>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F84%2Fhow-can-i-copy-text-to-the-system-clipboard-from-vim">how-can-i-copy-text-to-the-system-clipboard-from-vim</a></p></li>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F2063%2Fhow-do-i-get-clipboard-support-in-fedora-20">how-do-i-get-clipboard-support-in-fedora-20</a></p></li>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F19863631">如何将
Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</a></p></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../14dab12572d9fd706144fe09626534625a2a2eb8">Vim
常用命令</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>vim 使用全局剪贴板
<ul>
<li><a href="../14dab12572d9fd706144fe09626534625a2a2eb8">Vim
常用命令</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>深入浅出 python 闭包</title>
    <url>/1204f31cf6f554b2754cf12932ef2a8746e990b7/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://zhuanlan.zhihu.com/p/22229197">zhuanlan.zhihu.com</a></p>
</blockquote>
<p>周围有些同事初学 python，往往对 python 的一些高级特性，比如生成器
(Generator), 闭包(closure)，装饰器(Decorator)
感到有点不太容易理解，虽然这些特性并非 python
独有，但真的掌握了一定会让你感觉原来生活如此美好。</p>
<h2 id="闭包介绍">1. 闭包介绍</h2>
<p>闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。举个栗子先：</p>
<p><img
src="https://pic3.zhimg.com/0bf070da6fba4187510d4f423f451dd2_b.png" /><img
src="https://pic4.zhimg.com/564bc6ce56fc4cf2bf5128cd6c60b477_b.png" /><img
src="https://pic1.zhimg.com/dee4a1e824a6da024b5eace407eeab90_r.jpg" /><img
src="https://pic1.zhimg.com/f54f1765811dd5c13f415ec25cf2072c_b.png" /><img
src="https://pic2.zhimg.com/5ea23ecb27f7aa70eff3b6e445093f31_b.png" /></p>
<h2 id="常见错误">2. 常见错误</h2>
<h3
id="闭包无法修改外部函数的局部变量">闭包无法修改外部函数的局部变量</h3>
<p><img
src="https://pic1.zhimg.com/37066f1c440ecf7a31f685728119cfa8_r.jpg" />
这个是什么意思呢？ 如果 innerFunc 可以修改 x 的值的话，x
的值前后会发生变化，但结果是：</p>
<p><img
src="https://pic3.zhimg.com/a7d6feca997ecb0262aaa2875a77c4fa_b.png" /></p>
<h3 id="python-循环中不包含域的概念">python 循环中不包含域的概念</h3>
<p><img
src="https://pic3.zhimg.com/0c44b9dee2b981816d4137a432c4185e_b.png" /></p>
<p>按照大家正常的理解，应该输出的是 0, 2, 4 对吧？但实际输出的结果是: 4,
4, 4. 原因是什么呢？loop 在 python 中是没有域的概念的，flist
在像列表中添加 func 的时候，并没有保存 i 的值，而是当执行 f(2)
的时候才去取，这时候循环已经结束，i 的值是 2，所以结果都是 4。</p>
<p>其实修改方案也挺简单的：</p>
<p><img
src="https://pic1.zhimg.com/b61fccab921e91f626fb0488a0bace5c_r.jpg" /></p>
<h2 id="闭包的作用">3. 闭包的作用</h2>
<p>闭包可以保存当前的运行环境，以一个类似棋盘游戏的例子来说明。假设棋盘大小为
50*50，左上角为坐标系原点 (0,0)，我需要一个函数，接收 2
个参数，分别为方向 (direction)，步长 (step)，该函数控制棋子的运动。
这里需要说明的是，每次运动的起点都是上次运动结束的终点。</p>
<p>参考代码：</p>
<p><img
src="https://pic3.zhimg.com/9ce54b9dd939bb31e18923e7b3618d42_b.png" /><img
src="https://pic3.zhimg.com/dcbee56a8bcc7d164dddd39d68ee80b6_b.png" /></p>
<p>当然，闭包在爬虫以及 web
应用中都有很广泛的应用，并且闭包也是装饰器的基础，这些内容笔者会在后续的文章中分别介绍，这里就不多谈了。理解了本文中的概念，你应该知道的关于闭包的知识也差不多了，请在自己的编程中尽情使用吧。</p>
<p><strong>参考连接</strong>：</p>
<ol type="1">
<li><p><a
href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Closure_%28computer_programming%29">Closure
(computer programming)</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/11408515/about-python-closure">About
python closure</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//www.jb51.net/article/54498.htm">Python
中的闭包实例详解_python_脚本之家</a></p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 Python 的命名规范</title>
    <url>/294569e1f86c7dd015c83e6c236fd191ef29e2ad/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://mp.weixin.qq.com/s?src=11×tamp=1658813253&amp;ver=3943&amp;signature=rCEdWJcul585rSrw*vj*31qqKuqpuyjfoKsndxF88l6GQJ2nYUFoeIaXuil-zzPuDJx1HpltWSNMqT0hSJRkWO4MvJTiW4uipN7*uN2rpgW2MPfTIMNuW4k2D0SeknEl&amp;new=1">mp.weixin.qq.com</a></p>
</blockquote>
<p>命名规范在编写代码中起到很重要的作用，虽然不遵循命名规范，程序可能也可以运行，但是使用命名规范可以更加直观地了解代码所代表的含义。</p>
<p>Python 的命名规范（其它编程语言也差不多）</p>
<ol type="1">
<li>不能以数字开头，不能出现中文。</li>
<li>命名以字母开头，包含数字，字母（区分大小写），下划线。</li>
<li>不能包含关键字。</li>
</ol>
<p>下面具体说说 Python 的命名规范:</p>
<h2 id="类">1.类</h2>
<p><strong>python 类命名规则?</strong></p>
<p><mark style="background: #be9affA6;">类</mark>
<mark style="background: #018bffA6;">项目</mark>
<mark style="background: #fefe00A6;">异常</mark>
的命名遵循<strong>大驼峰</strong>规则,
单词首字母总是大写，私有类可以下划线开头。如: <code>MyClass</code>。
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchool</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-12,3,250--></p>
<h2 id="函数">2.函数<!--SR:!2023-04-15,158,250--></h2>
<p><strong>Python 函数命名规则?</strong></p>
<p>函数名<strong>一律小写</strong>，<mark style="background: #fefe00A6;">若有多个单词用下划线隔开</mark>
。另外，<mark style="background: #fefe00A6;">私有函数下划线开头</mark>
。 <mark style="background: #be9affA6;">文件</mark>
<mark style="background: #018bffA6;">包</mark>
<mark style="background: #fefe00A6;">模块</mark>
<mark style="background: #57e8b8A6;">函数方法</mark>
<mark style="background: #83d98fA6;">变量</mark> 的命名规则是一样的:
<mark style="background: #83d98fA6;">全小写 + 下划线</mark> 如:
<code>this_is_var</code> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_private_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div> <!--SR:!2022-11-14,70,250--></p>
<h2 id="变量">3.变量</h2>
<p><strong>Python 变量命名规则?</strong></p>
<ul>
<li><strong>变量</strong>名最好小写，若有多个使用下划线分开 。</li>
<li><strong>常量</strong>使用<mark style="background: #fefe00A6;">全大写</mark>
，多个单词使用下划线隔开 。 <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">20</span></span><br><span class="line">this_is_a_variable = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MAX_NUM = <span class="number">1000</span></span><br></pre></td></tr></table></figure></div>
<!--SR:!2022-11-11,68,250--></li>
</ul>
<p><strong>Python 命名规约?</strong></p>
<p><img
src="https://mmbiz.qpic.cn/mmbiz_png/IibUVnJ665WriaXQa5CcJ1j5qgLSB3nsDEn4yWicaNcbcIiaicvN6nb3dCtx3sxVaddqBgNbr2mZ0SvSoWPBLhom7aw/640?wx_fmt=png" />
<!--SR:!2023-03-18,143,250--></p>
<p><strong>额外补充：</strong></p>
<p><strong>1. 缩写</strong></p>
<p>命名应当尽量使用全拼写的单词，缩写的情况有如下两种： 1.
常用的缩写，如 XML.ID 等，在命名时也应只大写首字母，如 XmlParser。 2.
命名中含有长单词，对某个单词进行缩写。这时应使用约定成俗的缩写方式。</p>
<p>例如： function 缩写为 fn text 缩写为 txt object 缩写为 obj count
缩写为 cnt number 缩写为 num，等。</p>
<p><strong>2. 下划线</strong></p>
<p>一个前导下划线：表示非公有。 一个后缀下划线：避免关键字冲突。</p>
<p>两个前导下划线：当命名一个类属性引起名称冲突时使用。
两个前导和后缀下划线：“magic”（有特殊用图）对象或者属性，例如__init__或者__file__。绝对不要创造这样的名字，而只是使用它们。</p>
<p>注意：关于下划线的使用存在一些争议。</p>
<p><strong>3. 特定命名方式</strong></p>
<p>主要是指 <code>__xxx__</code>
形式的系统保留字命名法。项目中也可以使用这种命名，它的意义在于这种形式的变量是只读的，这种形式的类成员函数尽量不要重载。如</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, parent = <span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">self.__id__ = <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">self.__parent__ = parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__message__</span>(<span class="params">self, msgid</span>):</span><br></pre></td></tr></table></figure></div>
<p>其中 <strong>id</strong>.<code>__parent__</code> 和
<code>__message__</code> 都采用了系统保留字命名法。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python import 导入其他脚本</title>
    <url>/7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f/</url>
    <content><![CDATA[<p>假设有如下目录结构：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p><mark style="background: #be9affA6;">dir0</mark> 文件夹下有
<mark style="background: #fefe00A6;">file1.py</mark>
、<mark style="background: #fefe00A6;">file2.py</mark> 两个文件 和
<mark style="background: #018bffA6;">dir3</mark>
、<mark style="background: #018bffA6;">dir4</mark>
两个子文件夹，<mark style="background: #018bffA6;">dir3</mark> 中有
<mark style="background: #fefe00A6;">file3.py</mark>
文件，<mark style="background: #018bffA6;">dir4</mark> 中有
<mark style="background: #fefe00A6;">file4.py</mark> 文件。</p>
<h2 id="导入同级模块">1. 导入同级模块</h2>
<p>python 导入同级模块（在同一个文件夹中的 py 文件）直接导入即可。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 file1.py 中想导入 file2.py，注意无需加后缀 ".py"：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> file2</span><br><span class="line"><span class="comment"># 使用file2中函数时需加上前缀&quot;file2.&quot;，即：</span></span><br><span class="line"><span class="comment"># file2.fuction_name()</span></span><br></pre></td></tr></table></figure></div>
<h2 id="导入下级模块">2. 导入下级模块</h2>
<p>导入下级目录模块也很容易，<mark style="background: #fbab4bA6;">需在下级目录中新建一个空白的__init__.py
文件再导入</mark> ：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dirname <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 file1.py 中想导入 dir3 下的 file3.py，首先要在 dir3
中新建一个空白的_<em>init</em>___.py 文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　| __init__.py</span><br><span class="line">　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p>再使用如下语句：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan A</span></span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure></div>
<p>或是</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan B</span></span><br><span class="line"><span class="keyword">import</span> dir3.file3</span><br><span class="line"><span class="comment"># import dir3.file3 as df3</span></span><br></pre></td></tr></table></figure></div>
<p>但使用第二种方式则下文需要一直带着路径 dir3
书写，较为累赘，建议可以另起一个别名。</p>
<h2 id="导入上级模块">3. 导入上级模块</h2>
<p>要导入上级目录下模块，可以使用 sys.path： 　</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>如在 <code>file4.py</code> 中想引入 import 上级目录下的 file1.py：
<strong>file4.py</strong> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> file1</span><br></pre></td></tr></table></figure></div> <strong>python 中 sys.path
的作用?</strong></p>
<p>当使用 import
语句<mark style="background: #018bffA6;">导入模块</mark>
时，解释器会搜索<mark style="background: #fefe00A6;">当前模块所在目录</mark>
以及 <mark style="background: #fefe00A6;">sys.path 指定的路径</mark>
去找需要 import 的模块，所以这里是直接把上级目录加到了 sys.path 里。
<!--SR:!2022-12-01,56,250--></p>
<p><strong>“..” 的含义：</strong> 等同于 linux
里的‘..’，表示当前工作目录的上级目录。实际上 python 中的‘.’也和 linux
中一致，表示当前目录。</p>
<h2 id="导入隔壁文件夹下的模块">4. 导入隔壁文件夹下的模块</h2>
<p>如在 <code>file4.py</code> 中想引入 import 在 dir3 目录下的
file3.py。</p>
<p>这其实是前面两个操作的组合，其思路本质上是将上级目录加到 sys.path
里，再按照对下级目录模块的方式导入。</p>
<p>同样需要被引文件夹也就是 dir3 下有空的__init__.py 文件。</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line">-- <span class="built_in">dir</span></span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| __init__.py</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure></div>
<p>同时也要将上级目录加到 sys.path 里： <strong>file4.py</strong>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure></div></p>
<h2 id="常见错误及-import-原理">5. 常见错误及 import 原理：</h2>
<p>在使用直接从上级目录引入模块的操作时：</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure></div>
<p>经常会报错:</p>
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PLAINTEXT"><figure class="iseeu highlight /plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: attempted relative import beyond top-level package</span><br></pre></td></tr></table></figure></div>
<p>这是由于相对导入时，文件夹实质上充当的是
package，也就是包的角色（比如我们常用的 numpy、pandas 都是包）。如果
python 解释器没有认同该文件夹是
package，那么这就是一个普通的文件夹，无法实现相对导入。</p>
<p><strong>python 中文件夹作为 package 需要满足的条件?</strong></p>
<ol type="1">
<li>文件夹中<mark style="background: #fefe00A6;">必须</mark>
存在有<code>__init__.py</code> 文件，可以为空。</li>
<li>不能作为顶层模块来执行该文件夹中的 py 文件。
<!--SR:!2022-11-30,54,250--></li>
</ol>
<h2 id="导入最佳实践">6. 导入最佳实践</h2>
<ul>
<li>把项目根目录加入环境变量(手动或通过脚本)<br />
</li>
<li>import 导入路径以项目根目录下的源码目录 src 为起始, 如下:<br />
<div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="true"data-rel="PYTHON"><figure class="iseeu highlight /python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> src.core.logger_class <span class="keyword">import</span> Logger  </span><br><span class="line"><span class="keyword">from</span> src.core.config_class <span class="keyword">import</span> LoadConfig  </span><br><span class="line"><span class="keyword">from</span> src.core.db_class <span class="keyword">import</span> MySql, Mongo, Redis, Kafka  </span><br></pre></td></tr></table></figure></div> 参考:<a
href="../444fdbf98270c2b627e5837a41c9e9ed322c10b5">Python Import module
from different directory</a></li>
</ul>
<h2 id="各种导入示例">各种导入示例</h2>
<p><img src="/images/Pasted%20image%2020220904222845.png" />
<!--SR:!2022-11-28,54,250--></p>
<p><strong>参考</strong></p>
<p><a
href="https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time">python
- Relative imports for the billionth time - Stack Overflow</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../444fdbf98270c2b627e5837a41c9e9ed322c10b5">Python Import
module from different directory</a></li>
</ul>
<blockquote class="pullquote mindmap mindmap-md"><ul>
<li>Python import 导入其他脚本
<ul>
<li><a href="../444fdbf98270c2b627e5837a41c9e9ed322c10b5">Python Import
module from different directory</a></li>
</ul></li>
</ul>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.6.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
