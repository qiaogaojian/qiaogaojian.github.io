<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>深入浅出 python 闭包</title>
    <url>/1204f31cf6f554b2754cf12932ef2a8746e990b7/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://zhuanlan.zhihu.com/p/22229197">zhuanlan.zhihu.com</a></p>
</blockquote>
<p>周围有些同事初学 python，往往对 python 的一些高级特性，比如生成器
(Generator), 闭包(closure)，装饰器(Decorator)
感到有点不太容易理解，虽然这些特性并非 python
独有，但真的掌握了一定会让你感觉原来生活如此美好。</p>
<h2 id="闭包介绍">1. 闭包介绍</h2>
<p>闭包概念：在一个内部函数中，对外部作用域的变量进行引用，(并且一般外部函数的返回值为内部函数)，那么内部函数就被认为是闭包。举个栗子先：</p>
<p><img
src="https://pic3.zhimg.com/0bf070da6fba4187510d4f423f451dd2_b.png" /><img
src="https://pic4.zhimg.com/564bc6ce56fc4cf2bf5128cd6c60b477_b.png" /><img
src="https://pic1.zhimg.com/dee4a1e824a6da024b5eace407eeab90_r.jpg" /><img
src="https://pic1.zhimg.com/f54f1765811dd5c13f415ec25cf2072c_b.png" /><img
src="https://pic2.zhimg.com/5ea23ecb27f7aa70eff3b6e445093f31_b.png" /></p>
<h2 id="常见错误">2. 常见错误</h2>
<h3
id="闭包无法修改外部函数的局部变量">闭包无法修改外部函数的局部变量</h3>
<p><img
src="https://pic1.zhimg.com/37066f1c440ecf7a31f685728119cfa8_r.jpg" />
这个是什么意思呢？ 如果 innerFunc 可以修改 x 的值的话，x
的值前后会发生变化，但结果是：</p>
<p><img
src="https://pic3.zhimg.com/a7d6feca997ecb0262aaa2875a77c4fa_b.png" /></p>
<h3 id="python-循环中不包含域的概念">python 循环中不包含域的概念</h3>
<p><img
src="https://pic3.zhimg.com/0c44b9dee2b981816d4137a432c4185e_b.png" /></p>
<p>按照大家正常的理解，应该输出的是 0, 2, 4 对吧？但实际输出的结果是: 4,
4, 4. 原因是什么呢？loop 在 python 中是没有域的概念的，flist
在像列表中添加 func 的时候，并没有保存 i 的值，而是当执行 f(2)
的时候才去取，这时候循环已经结束，i 的值是 2，所以结果都是 4。</p>
<p>其实修改方案也挺简单的：</p>
<p><img
src="https://pic1.zhimg.com/b61fccab921e91f626fb0488a0bace5c_r.jpg" /></p>
<h2 id="闭包的作用">3. 闭包的作用</h2>
<p>闭包可以保存当前的运行环境，以一个类似棋盘游戏的例子来说明。假设棋盘大小为
50*50，左上角为坐标系原点 (0,0)，我需要一个函数，接收 2
个参数，分别为方向 (direction)，步长 (step)，该函数控制棋子的运动。
这里需要说明的是，每次运动的起点都是上次运动结束的终点。</p>
<p>参考代码：</p>
<p><img
src="https://pic3.zhimg.com/9ce54b9dd939bb31e18923e7b3618d42_b.png" /><img
src="https://pic3.zhimg.com/dcbee56a8bcc7d164dddd39d68ee80b6_b.png" /></p>
<p>当然，闭包在爬虫以及 web
应用中都有很广泛的应用，并且闭包也是装饰器的基础，这些内容笔者会在后续的文章中分别介绍，这里就不多谈了。理解了本文中的概念，你应该知道的关于闭包的知识也差不多了，请在自己的编程中尽情使用吧。</p>
<p><strong>参考连接</strong>：</p>
<ol type="1">
<li><p><a
href="https://link.zhihu.com/?target=https%3A//en.wikipedia.org/wiki/Closure_%28computer_programming%29">Closure
(computer programming)</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//stackoverflow.com/questions/11408515/about-python-closure">About
python closure</a></p></li>
<li><p><a
href="https://link.zhihu.com/?target=http%3A//www.jb51.net/article/54498.htm">Python
中的闭包实例详解_python_脚本之家</a></p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>N 常用命令</title>
    <url>/08b6858d1e7f950a80d08062a2a9e8c429243979/</url>
    <content><![CDATA[<p><strong>n 常用命令有哪些?</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 10.13.0 版本的 Node.js </span></span><br><span class="line">n 10.13.0                    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装稳定版 nodejs</span></span><br><span class="line">sudo n stable </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装最新版 nodejs</span></span><br><span class="line">sudo n latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除某个版本</span></span><br><span class="line">n <span class="built_in">rm</span> 10.13.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 n 切换版本</span></span><br><span class="line">n   --回车</span><br><span class="line">    node/10.13.0</span><br><span class="line">  ο node/10.15.3</span><br><span class="line">    node/11.0.0</span><br><span class="line">    node/11.8.0</span><br><span class="line">    node/12.2.0</span><br><span class="line"><span class="comment"># 按上下键选择版本后，回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nodejs 版本</span></span><br><span class="line">node -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以指定的版本来执行脚本</span></span><br><span class="line">n use 10.13.0  test.js</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<!--SR:!2023-04-13,175,252--></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>n</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 配置国内源</title>
    <url>/1147d6dfd41190e9c83dd723ff1803dc5516c66f/</url>
    <content><![CDATA[<p>刚安装的 npm
使用默认的源会感觉特别特别慢，所以，非常有必要使用国内的源，比如说众所周知的淘宝镜像源</p>
<ol type="1">
<li><strong>查看当前源</strong></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get registry</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li><strong>设置为淘宝源</strong></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><strong>还原默认源</strong></li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmjs.org/</span><br></pre></td></tr></table></figure>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>说说 Python 的命名规范</title>
    <url>/294569e1f86c7dd015c83e6c236fd191ef29e2ad/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://mp.weixin.qq.com/s?src=11×tamp=1658813253&amp;ver=3943&amp;signature=rCEdWJcul585rSrw*vj*31qqKuqpuyjfoKsndxF88l6GQJ2nYUFoeIaXuil-zzPuDJx1HpltWSNMqT0hSJRkWO4MvJTiW4uipN7*uN2rpgW2MPfTIMNuW4k2D0SeknEl&amp;new=1">mp.weixin.qq.com</a></p>
</blockquote>
<p>命名规范在编写代码中起到很重要的作用，虽然不遵循命名规范，程序可能也可以运行，但是使用命名规范可以更加直观地了解代码所代表的含义。</p>
<p>Python 的命名规范（其它编程语言也差不多）</p>
<ol type="1">
<li>不能以数字开头，不能出现中文。</li>
<li>命名以字母开头，包含数字，字母（区分大小写），下划线。</li>
<li>不能包含关键字。</li>
</ol>
<p>下面具体说说 Python 的命名规范:</p>
<h2 id="类">1.类</h2>
<p><strong>python 类命名规则?</strong> ??
<mark style="background: #be9affA6;">类</mark>
<mark style="background: #018bffA6;">项目</mark>
<mark style="background: #fefe00A6;">异常</mark>
的命名遵循<strong>大驼峰</strong>规则,
单词首字母总是大写，私有类可以下划线开头。如: <code>MyClass</code>。
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySchool</span>()：</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure> <!--SR:!2022-11-08,63,250--></p>
<h2 id="函数">2.函数</h2>
<p><strong>Python 函数命名规则?</strong> ??
函数名<strong>一律小写</strong>，<mark style="background: #fefe00A6;">若有多个单词用下划线隔开</mark>
。另外，<mark style="background: #fefe00A6;">私有函数下划线开头</mark>
。 <mark style="background: #be9affA6;">文件</mark>
<mark style="background: #018bffA6;">包</mark>
<mark style="background: #fefe00A6;">模块</mark>
<mark style="background: #57e8b8A6;">函数方法</mark>
<mark style="background: #83d98fA6;">变量</mark> 的命名规则是一样的:
<mark style="background: #83d98fA6;">全小写 + 下划线</mark> 如:
<code>this_is_var</code> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_private_func</span>(<span class="params">var1, var2</span>):</span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure> <!--SR:!2022-11-14,70,250--></p>
<h2 id="变量">3.变量</h2>
<p><strong>Python 变量命名规则?</strong> ?? -
<strong>变量</strong>名最好小写，若有多个使用下划线分开 。 -
<strong>常量</strong>使用<mark style="background: #fefe00A6;">全大写</mark>
，多个单词使用下划线隔开 。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">20</span></span><br><span class="line">this_is_a_variable = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">MAX_NUM = <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-11,68,250--></p>
<p><strong>Python 命名规约?</strong> ?? <img
src="https://mmbiz.qpic.cn/mmbiz_png/IibUVnJ665WriaXQa5CcJ1j5qgLSB3nsDEn4yWicaNcbcIiaicvN6nb3dCtx3sxVaddqBgNbr2mZ0SvSoWPBLhom7aw/640?wx_fmt=png" />
<!--SR:!2022-10-25,57,250--></p>
<p><strong>额外补充：</strong></p>
<p><strong>1. 缩写</strong></p>
<p>命名应当尽量使用全拼写的单词，缩写的情况有如下两种： 1.
常用的缩写，如 XML.ID 等，在命名时也应只大写首字母，如 XmlParser。 2.
命名中含有长单词，对某个单词进行缩写。这时应使用约定成俗的缩写方式。</p>
<p>例如： function 缩写为 fn text 缩写为 txt object 缩写为 obj count
缩写为 cnt number 缩写为 num，等。</p>
<p><strong>2. 下划线</strong></p>
<p>一个前导下划线：表示非公有。 一个后缀下划线：避免关键字冲突。</p>
<p>两个前导下划线：当命名一个类属性引起名称冲突时使用。
两个前导和后缀下划线：“magic”（有特殊用图）对象或者属性，例如__init__或者__file__。绝对不要创造这样的名字，而只是使用它们。</p>
<p>注意：关于下划线的使用存在一些争议。</p>
<p><strong>3. 特定命名方式</strong></p>
<p>主要是指 <code>__xxx__</code>
形式的系统保留字命名法。项目中也可以使用这种命名，它的意义在于这种形式的变量是只读的，这种形式的类成员函数尽量不要重载。如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">id</span>, parent = <span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">self.__id__ = <span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">self.__parent__ = parent</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__message__</span>(<span class="params">self, msgid</span>):</span><br></pre></td></tr></table></figure>
<p>其中 <strong>id</strong>.<code>__parent__</code> 和
<code>__message__</code> 都采用了系统保留字命名法。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>srcard</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim 常用命令</title>
    <url>/14dab12572d9fd706144fe09626534625a2a2eb8/</url>
    <content><![CDATA[<h2 id="安装">安装</h2>
<p><strong>怎么查看 vim 的 clipboard 功能是否开启</strong> ??
以下命令用来检查vim剪贴板的支持情况 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure> 如果结果中有这个<img
src="/images/Pasted%20image%2020220819181213.png" />,
前面是+号代表支持剪贴板操作, -号代表不支持。
<!--SR:!2022-11-01,44,251--></p>
<p>如果系统自带vim不支持剪贴板的话, 需要重新安装: 参考:<a
href="../6b3a3abf0a6c8711830275afbe228de56da9066d">vim
使用全局剪贴板</a></p>
<h2 id="移动光标">移动光标</h2>
<p><strong>Vim 上下左右移动光标</strong> ?? <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K</span><br><span class="line">H　　　　I</span><br><span class="line">　　J</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-04,45,251--></p>
<h2 id="模式切换">模式切换</h2>
<ul>
<li><p>进入默认是普通模式</p></li>
<li><p><strong>Vim 切换到插入模式</strong> ?? |按键|含义| |-|-|
|i|在光标的前边进入插入模式| |I|在光标所在行的行首进入插入模式|
|a|在光标的后面进入插入模式| |A|在光标所在行的行尾进入插入模式|
|o|在光标所在行的下方插入空行进入插入模式|
|O|在光标所在行的上方插入空行进入插入模式|
|s|删除光标指定的字符并进入插入模式| |S|将光标所在行清除并进入插入模式|
<!--SR:!2023-01-10,83,251--></p></li>
<li><p><strong>Vim 切换到选中模式</strong> ?? |按键|含义| |-|-|
|v|普通选中| |V|行选中| |ctrl+v|列选中|
<!--SR:!2022-12-06,66,251--></p></li>
<li><p><strong>Vim退出</strong> ?? |按键|含义| |-|-| |:q|未改动退出|
|:q!|改动后不保存强制退出| |:wq|:w表示保存,:q表示退出|
|shift+z+z|保存修改并退出| <!--SR:!2022-11-19,56,251--></p></li>
</ul>
<h2 id="编辑">编辑</h2>
<p><strong>Vim编辑常用命令</strong> ?? |按键|含义| |-|-| |y|复制|
|p|粘贴| |d|剪切| |u|撤销| |ctrl+r|重做| |r|替换单个| |shift+r|替换多个|
<!--SR:!2022-11-17,55,251--></p>
<p><strong>Vim 中有多少个剪贴板?</strong> ?? Vim
有12个粘贴板依次编号为：0、1、2、...、9、a、"、+，其中 +
号为系统粘贴板，”
为临时粘贴板。系统剪切板中的内容可在其他程序中使用。上面的复制指令都可以配合剪切板进行操作。
-
用<code>"+y</code> 代替<code>y</code>将选中的内容复制到系统剪贴板，效果和<code>ctrl-c</code>一致。
-
用<code>"+p</code>代替<code>p</code>将剪贴板内容复制到指定位置，也可以用<code>ctrl-v</code>。
<code>d</code>，<code>x</code>，<code>c</code>，<code>s</code>也一样，用之前前面加<code>"+</code>。
<!--SR:!2022-12-02,65,250--></p>
<h3 id="复制">复制</h3>
<ul>
<li><strong>单行复制</strong>：按esc键后, 然后<code>yy</code></li>
<li><strong>全部复制</strong>：按esc键后，然后<code>ggyG</code></li>
</ul>
<h3 id="粘贴">粘贴</h3>
<ul>
<li><strong>粘贴</strong>：按esc键后, 然后<code>p</code></li>
</ul>
<h3 id="剪切">剪切</h3>
<ul>
<li><strong>单行删除</strong>：按esc键后, 然后dd</li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code></li>
</ul>
<h3 id="撤销与恢复">撤销与恢复</h3>
<p><strong>vim 撤销和恢复快捷键?</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">u         撤销操作  </span><br><span class="line">Ctrl + r  恢复撤销的操作</span><br></pre></td></tr></table></figure>
<!--SR:!2022-12-31,86,270--></p>
<h2 id="选择">选择</h2>
<ul>
<li><strong>全选选择：</strong> 按esc后，然后<code>ggvG</code></li>
<li><strong>全部删除：</strong> 按esc后，然后<code>ggdG</code><br />
</li>
<li><strong>全部复制：</strong> 按esc后，然后<code>ggyG</code></li>
</ul>
<p>解析： <strong>gg：</strong>
是让光标移到首行，在<strong>vim</strong>才有效，vi中无效  <strong>G
：</strong> 光标移到最后一行  <strong>v
：</strong> 是进入Visual(可视）模式  <strong>d
：</strong>  删除选中内容 <br />
<strong>y ：</strong>  复制选中内容到0号寄存器 </p>
<h2 id="跳转">跳转</h2>
<p><strong>Vim 跳转常用命令</strong> ?? |按键|含义| |-|-| |^|光标到行首|
|$|光标到行尾| |w|光标到下个单词开头| |b|光标到所在单词开头|
|e|光标到所在单词结尾| |gg|光标到文件的开头| |G|光标到文件的结尾|
<!--SR:!2022-11-19,54,251--></p>
<ol type="1">
<li><p><strong>跳到第一行</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">gg</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-22,62,250--></p></li>
<li><p><strong>跳到第10行</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">10gg</span><br><span class="line">或10G</span><br></pre></td></tr></table></figure>
<!--SR:!2022-12-05,70,250--></p></li>
<li><p><strong>跳到最后一行</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">shift</span>]+g</span><br><span class="line">或G</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-23,69,270--></p></li>
</ol>
<h2 id="搜索">搜索</h2>
<h3 id="进入搜索模式">1. 进入搜索模式</h3>
<p>?? 1. <strong>打开文件后马上搜索</strong> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">按[/]</span><br></pre></td></tr></table></figure> 2.
在<strong>编辑模式</strong>切换到搜索 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">先按[Esc]退出编辑，再按[/]</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-23,41,250--></p>
<h3 id="搜索-1">2. 搜索</h3>
<ol type="1">
<li><p><strong>普通搜索</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">/关键字  </span><br><span class="line"><span class="comment"># 向下找（左斜杠+关键字）</span></span><br><span class="line"></span><br><span class="line">?关键字 </span><br><span class="line"> <span class="comment"># 向上找（逆向搜索）（问号+关键字）</span></span><br></pre></td></tr></table></figure>
<mark style="background: #fa518dA6;">注意</mark>
：搜索一些特殊的字符，例如：*、[、]、^、%、/、?、~、$ 等,
需要在它们的前面加上转义符号。 <!--SR:!2022-12-07,72,250--></p></li>
<li><p><strong>匹配搜索</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 匹配单词开头（右斜杠+小于号）</span></span><br><span class="line">/\&lt;关键字    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行末尾</span></span><br><span class="line">/^关键字   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配单词末尾（右斜杠+大于号）</span></span><br><span class="line">/关键字\&gt;   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配行开头</span></span><br><span class="line">/关键字$     </span><br><span class="line"></span><br><span class="line">/\&lt;关键字\&gt; </span><br><span class="line"><span class="comment"># 匹配单词全部（匹配开头和结尾的符号加起来）</span></span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-08,51,250--></p></li>
</ol>
<h3 id="搜索定位">3. 搜索定位</h3>
<p>输入搜索命令后按回车开始定位</p>
<ol type="1">
<li><p><strong>移动到下一个匹配处</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">按[n]</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-10,51,250--></p></li>
<li><p><strong>移动到上一个匹配处</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">按[N]或[<span class="built_in">shift</span>]+[n]</span><br></pre></td></tr></table></figure>
<!--SR:!2022-12-26,86,270--></p></li>
<li><p><strong>搜索当前光标所在单词</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">光标移动到关键字任意位置，按[*] 或 [<span class="comment">#] </span></span><br><span class="line"><span class="comment"># 如果当前光标位置单词为the，那么执行命令 * 相当于搜索命令 /the，命令 # 等同于命令 ?the</span></span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-08,51,250--></p></li>
</ol>
<h2 id="替换">替换</h2>
<p><strong>Vim 替换命令?</strong> ??
<code>:s</code>（substitute）命令用来查找和替换字符串。语法如下：
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure>
例如 <code>:%s/foo/bar/g</code> 会在全局范围(<code>%</code>)查找 <code>foo</code> 并替换为 <code>bar</code>，所有出现都会被替换（<code>g</code>）。
<!--SR:!2022-12-03,67,250--></p>
<h2 id="tab">Tab</h2>
<p><strong>Vim Tab切换快捷键</strong> ?? | 快捷键 | 说明 | |
------------ | ------------------------ | | ctrl + w + w |
光标自动在左右侧窗口切换 | <!--SR:!2022-11-12,39,232--></p>
<h2 id="配置">配置</h2>
<p>将配置粘贴到你的 <code>~/.vimrc</code>，重新打开 Vim 即可生效。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; ********************************* 插件 *********************************</span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">Plugins</span> will be downloaded under the specified directory.</span><br><span class="line">call plug#<span class="title function_">begin</span>(<span class="string">&#x27;~/.vim/plugged&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; Declare the list of plugins.</span></span><br><span class="line"><span class="string">Plug &#x27;matze/vim-move&#x27;       </span></span><br><span class="line"><span class="string">Plug &#x27;plasticboy/vim-markdown&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;luochen1990/rainbow&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;tpope/vim-fugitive&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;vim-syntastic/syntastic&#x27;</span></span><br><span class="line"><span class="string">Plug &#x27;scrooloose/nerdtree&#x27;, &#123; &#x27;on&#x27;:  &#x27;NERDTreeToggle&#x27; &#125; &quot;</span> 目录树插件</span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;kien/ctrlp.vim&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;Yggdroot/indentLine&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;honza/vim-snippets&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;vim-scripts/indentpython&#x27;</span></span><br><span class="line"><span class="title class_">Plug</span> <span class="string">&#x27;vim-python/python-syntax&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; List ends here. Plugins become visible to Vim after this call.</span></span><br><span class="line"><span class="string">call plug#end()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">NERDTree</span></span><br><span class="line">noremap &lt;C-n&gt; :<span class="title class_">NERDTreeToggle</span>&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; vim-move</span></span><br><span class="line"><span class="string">map &lt;ESC&gt;[1;5B &lt;A-Down&gt;</span></span><br><span class="line"><span class="string">map &lt;ESC&gt;[1;5A &lt;A-Up&gt;</span></span><br><span class="line"><span class="string">map! &lt;ESC&gt;[1;5B &lt;A-Down&gt;</span></span><br><span class="line"><span class="string">map! &lt;ESC&gt;[1;5A &lt;A-Up&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">let g:move_map_keys = 0</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">vmap &lt;A-Up&gt;   &lt;Plug&gt;MoveBlockUp</span></span><br><span class="line"><span class="string">vmap &lt;A-Down&gt; &lt;Plug&gt;MoveBlockDown</span></span><br><span class="line"><span class="string">nmap &lt;A-Up&gt;   &lt;Plug&gt;MoveLineUp</span></span><br><span class="line"><span class="string">nmap &lt;A-Down&gt; &lt;Plug&gt;MoveLineDown</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> <span class="title class_">YouCompleteMe</span></span><br><span class="line"><span class="string">&quot;打开vim时不再询问是否加载ycm_extra_conf.py配置&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_confirm_extra_conf=<span class="number">0</span></span><br><span class="line">set completeopt=longest,menu</span><br><span class="line"><span class="string">&quot;python解释器路径&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_path_to_python_interpreter=<span class="string">&#x27;/usr/bin/python3&#x27;</span></span><br><span class="line"><span class="string">&quot;是否开启语义补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_seed_identifiers_with_syntax=<span class="number">1</span></span><br><span class="line"><span class="string">&quot;是否在注释中也开启补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_complete_in_comments=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_collect_identifiers_from_comments_and_strings = <span class="number">0</span></span><br><span class="line"><span class="string">&quot;开始补全的字符数&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_min_num_of_chars_for_completion=<span class="number">2</span></span><br><span class="line"><span class="string">&quot;补全后自动关机预览窗口&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_autoclose_preview_window_after_completion=<span class="number">1</span></span><br><span class="line"><span class="string">&quot; 禁止缓存匹配项,每次都重新生成匹配项&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_cache_omnifunc=<span class="number">0</span></span><br><span class="line"><span class="string">&quot;字符串中也开启补全&quot;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">g</span>:ycm_complete_in_strings = <span class="number">1</span></span><br><span class="line"><span class="string">&quot;离开插入模式后自动关闭预览窗口&quot;</span></span><br><span class="line">autocmd <span class="title class_">InsertLeave</span> * <span class="keyword">if</span> <span class="title function_">pumvisible</span>() == <span class="number">0</span>|pclose|endif</span><br><span class="line"><span class="string">&quot;回车即选中当前项&quot;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="variable constant_">CR</span>&gt;       <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;&lt;C-y&gt;&#x27;</span> : <span class="string">&#x27;\&lt;CR&gt;&#x27;</span>     </span><br><span class="line"><span class="string">&quot;上下左右键行为&quot;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">Down</span>&gt;     <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;Down&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">Up</span>&gt;       <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;C-p&gt;&#x27;</span> : <span class="string">&#x27;\&lt;Up&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">PageDown</span>&gt; <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;PageDown&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;PageDown&gt;&#x27;</span></span><br><span class="line">inoremap &lt;expr&gt; &lt;<span class="title class_">PageUp</span>&gt;   <span class="title function_">pumvisible</span>() ? <span class="string">&#x27;\&lt;PageUp&gt;\&lt;C-p&gt;\&lt;C-n&gt;&#x27;</span> : <span class="string">&#x27;\&lt;PageUp&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; ********************************* 公共配置 ********************************* </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 基础  </span><br><span class="line">syntax on  <span class="string">&quot; 开启代码高亮  </span></span><br><span class="line"><span class="string">set number &quot;</span> 显示行号</span><br><span class="line">set ruler  <span class="string">&quot; 开启标尺  </span></span><br><span class="line"><span class="string">set cursorline &quot;</span> 开启高亮光标所在行  </span><br><span class="line">set showmatch <span class="string">&quot; 显示匹配括号</span></span><br><span class="line"><span class="string">set encoding=utf-8 &quot;</span>设置vim内部编码</span><br><span class="line">set history=<span class="number">1000</span> <span class="string">&quot;Vim 需要记住多少次历史操作。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 性能  </span><br><span class="line">set viminfo= <span class="string">&quot; 关闭 viminfo (用于加快 vim 启动速度)  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> 功能填补  </span><br><span class="line">set clipboard=unnamed <span class="string">&quot; 开启系统剪贴板支持</span></span><br><span class="line"><span class="string">set backspace=indent,eol,start &quot;</span> 开启 <span class="title class_">Backspace</span> 键支持(否则 <span class="title class_">Backspace</span> 无法删除字符)  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 鼠标支持  </span></span><br><span class="line"><span class="string">set mouse=a &quot;</span> 开启鼠标支持  </span><br><span class="line">set selection=inclusive <span class="string">&quot; 指定在选择文本时光标所在位置也属于被选中的范围  </span></span><br><span class="line"><span class="string">set selectmode=mouse,key &quot;</span> 使鼠标和键盘都可以控制光标选择文本  </span><br><span class="line"></span><br><span class="line"><span class="string">&quot; tab键  </span></span><br><span class="line"><span class="string">set ts=4 &quot;</span> 指定制表符(tab)等于的空格数  </span><br><span class="line">set tabstop=<span class="number">4</span> <span class="string">&quot; tab 键相当于 4 个空格 </span></span><br><span class="line"><span class="string">set softtabstop=4 &quot;</span> 开启软制表(如果这<span class="number">4</span>个空格是用tab键打出来的删除会一起删除)  </span><br><span class="line">set shiftwidth=<span class="number">4</span> <span class="string">&quot; 指定自动缩进时缩进4个空格  </span></span><br><span class="line"><span class="string">set smarttab &quot;</span> 开启智能 tab</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 缩进  </span></span><br><span class="line"><span class="string">set smartindent &quot;</span> 开启智能缩进  </span><br><span class="line">set autoindent <span class="string">&quot; 开启自动缩进  </span></span><br><span class="line"><span class="string">set cindent &quot;</span> 开启C缩进(对C、C++语言文件有效)  </span><br><span class="line">::</span><br><span class="line"><span class="string">&quot; 其它配置   </span></span><br><span class="line"><span class="string">set viminfo=&#x27;1000,&lt;500 &quot;</span> 复制粘贴扩大到<span class="number">500</span>行 </span><br><span class="line">set backupcopy=yes <span class="string">&quot; 开启备份时行为为覆盖  </span></span><br><span class="line"><span class="string">set cmdheight=1 &quot;</span> 设置命令行的高度为<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 代码</span></span><br><span class="line"><span class="string">set foldenable &quot;</span> 打开折叠</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; 搜索</span></span><br><span class="line"><span class="string">set ignorecase &quot;</span> 设置默认进行大小写不敏感查找</span><br><span class="line">set smartcase <span class="string">&quot; 如果有一个大写字母，则切换到大小写敏感查找 </span></span><br><span class="line"><span class="string">set hlsearch &quot;</span> 高亮搜索，如果需要清除屏幕搜索高亮，可以在<span class="title class_">Vim</span>命令行模式使用命令 :noh</span><br><span class="line">set incsearch <span class="string">&quot; 递进搜索</span></span><br><span class="line"><span class="string">set paste &quot;</span> 取消自动注释#后所有行</span><br><span class="line"></span><br><span class="line">noremap s :noh&lt;<span class="variable constant_">CR</span>&gt; <span class="string">&quot; 按下s取消高亮结果显示,本来按下s删除当前字符并进入插入模式</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>设置代码折叠,映射空格键来折叠和取消折叠</span><br><span class="line">set foldenable 		    <span class="string">&quot;开始折叠</span></span><br><span class="line"><span class="string">set foldmethod=indent   &quot;</span>设置indent折叠方式</span><br><span class="line">set foldcolumn=<span class="number">0</span>        <span class="string">&quot;设置折叠区域的宽度</span></span><br><span class="line"><span class="string">setlocal foldlevel=1    &quot;</span>设置折叠层数</span><br><span class="line">set foldlevelstart=<span class="number">99</span>   <span class="string">&quot;打开文件默认不折叠</span></span><br><span class="line"><span class="string">nnoremap &lt;space&gt; @=((foldclosed(line(&#x27;.&#x27;)) &lt; 0) ? &#x27;zc&#x27;: &#x27;zo&#x27;)&lt;CR&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span>map <span class="variable constant_">F5</span> to run files</span><br><span class="line">map &lt;<span class="variable constant_">F5</span>&gt; :call <span class="title class_">CompileRun</span>()&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line">func! <span class="title class_">CompileRun</span>()</span><br><span class="line">    exec <span class="string">&quot;w&quot;</span></span><br><span class="line">    <span class="keyword">if</span> &amp;filetype == <span class="string">&#x27;java&#x27;</span></span><br><span class="line">	exec <span class="string">&quot;!javac %&quot;</span></span><br><span class="line">	exec <span class="string">&quot;!java %&lt;&quot;</span></span><br><span class="line">    elseif &amp;filetype == <span class="string">&#x27;python&#x27;</span></span><br><span class="line">	exec <span class="string">&quot;!python3 %&quot;</span></span><br><span class="line">    endif</span><br><span class="line">endfunc</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;PEP8风格设置,python代码风格标准</span></span><br><span class="line"><span class="string">au BufNewFile,BufRead *.py</span></span><br><span class="line"><span class="string">	    \ set tabstop=4 |</span></span><br><span class="line"><span class="string">	    \ set softtabstop=4 |</span></span><br><span class="line"><span class="string">	    \ set shiftwidth=4 |</span></span><br><span class="line"><span class="string">	    \ set textwidth=79 |</span></span><br><span class="line"><span class="string">	    \ set expandtab |</span></span><br><span class="line"><span class="string">	    \ set autoindent |</span></span><br><span class="line"><span class="string">	    \ set fileformat=unix</span></span><br><span class="line"><span class="string">&quot;</span> ********************************* 快捷键 *********************************</span><br><span class="line"></span><br><span class="line"><span class="string">&quot; -- Control + a to select all file</span></span><br><span class="line"><span class="string">inoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">nnoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">vnoremap &lt;C-a&gt; ggVG </span></span><br><span class="line"><span class="string">			</span></span><br><span class="line"><span class="string">&quot;</span> -- <span class="title class_">Control</span> + s to save</span><br><span class="line">inoremap &lt;C-s&gt; &lt;<span class="title class_">Esc</span>&gt;:w&lt;<span class="variable constant_">CR</span>&gt;i</span><br><span class="line">nnoremap &lt;C-s&gt; :w&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line">vnoremap &lt;C-s&gt; :w&lt;<span class="variable constant_">CR</span>&gt;</span><br><span class="line"></span><br><span class="line">noremap R :source $MYVIMRC&lt;<span class="variable constant_">CR</span>&gt;    </span><br><span class="line"><span class="string">&quot; ********************************* 主题 *********************************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;</span> color schema</span><br><span class="line"><span class="string">&quot; 从 https://github.com/tomasr/molokai 获取molokai.vim 放到～/.vim/colors </span></span><br><span class="line"><span class="string">colorscheme molokai</span></span><br><span class="line"><span class="string">set t_Co=256</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>
<h3 id="安装语法补全插件-youcompleteme">安装语法补全插件
YouCompleteMe</h3>
<p>除了通过 Vundle 安装语法补全
YouCompleteMe，也可以自己手动编译安装，这里有另外一种更加简单的方法。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 试试这个命令，看是否已经安装 vim-addons</span></span><br><span class="line">$ vim-addons</span><br><span class="line"><span class="comment"># 如果没有安装 vim-addons，则需安装 vim-addon-manager</span></span><br><span class="line">$ sudo apt-get install vim-addon-manager</span><br><span class="line"><span class="comment"># 开始安装 YouCompleteMe</span></span><br><span class="line">$ sudo apt-get install vim-youcompleteme</span><br><span class="line"><span class="comment"># 将 YCM 加入 addons 管理器中</span></span><br><span class="line">$ vim-addons install youcompleteme</span><br></pre></td></tr></table></figure>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Import module from different directory</title>
    <url>/444fdbf98270c2b627e5837a41c9e9ed322c10b5/</url>
    <content><![CDATA[<h2
id="method-1-import-module-from-different-directory-by-append-sys.path">Method
1: Import module from different directory by append sys.path</h2>
<p>We can use <strong>sys.path</strong> to add the path of the new
different folder (the folder from where we want to import the modules)
to the system path so that Python can also look for the module in that
directory if it doesn’t find the module in its current directory.
As <strong>sys.path</strong> falls under the <strong>list type
class</strong> so, we can easily use the insert method to add the folder
path.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">import_root_path = os.path.abspath(<span class="string">&#x27;import/root/path/&#x27;</span>)  </span><br><span class="line">sys.path.append(import_root_path)</span><br></pre></td></tr></table></figure>
<h2 id="method-2-using-the-pythonpath-environment-variable">Method 2:
Using the PYTHONPATH environment variable</h2>
<p>if you don’t want to use the <strong>sys</strong> module to set the
path of the new directory. You can assign a directory path to the
PYTHONPATH variable and still get your program working.</p>
<ul>
<li>In Linux, we can use the following command in the terminal to set
the path:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=’path/to/directory’  </span><br></pre></td></tr></table></figure>
<ul>
<li>In the Windows system :</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">SET PYTHONPATH=”path/to/directory”  </span><br></pre></td></tr></table></figure>
<p>To see if the PYTHONPATH variable holds the path of the new folder,
we can use the following command:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$PYTHONPATH</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>把项目根目录加入环境变量(手动或通过脚本)<br />
</li>
<li>import 导入路径以项目根目录下的源码目录 src 为起始</li>
</ul>
<p><strong>参考:</strong></p>
<ul>
<li><a href="../7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f">Python import
导入其他脚本</a></li>
<li><a
href="https://www.geeksforgeeks.org/python-import-module-from-different-directory/">Python
– Import module from different directory - GeeksforGeeks</a></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f">Python import
导入其他脚本</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Npm 常用命令</title>
    <url>/3891bc44a6507d046fb5508c9955848ad90bf49c/</url>
    <content><![CDATA[<h3 id="安装模块">1. 安装模块</h3>
<p><strong>npm 安装命令?</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i/install moduleName    <span class="comment"># 安装模块；i 是 install 的缩写，两者功能是一样的</span></span><br><span class="line">npm i moduleName -g         <span class="comment"># 全局安装模块</span></span><br><span class="line">npm i moduleName@0.0.1      <span class="comment"># 安装模块的指定版本</span></span><br><span class="line"></span><br><span class="line">npm i moduleName --save     <span class="comment"># 安装并保存至 package.json 文件的 dependencies 中</span></span><br><span class="line">npm i moduleName --save-dev <span class="comment"># 安装并保存至 package.json 文件的 devDependencies 中</span></span><br></pre></td></tr></table></figure>
<!--SR:!2022-12-25,126,252--></p>
<p><strong>npm 直接从 github 安装 module</strong><br />
?? - <strong>命令行</strong><br />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install qiaogaojian/pouchdb-server  </span><br></pre></td></tr></table></figure> 或者<br />
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install git://github.com/qiaogaojian/pouchdb-server<span class="comment">#sqlite5  </span></span><br></pre></td></tr></table></figure> - <strong>package.json</strong><br />
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">  <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;git://github.com/user/project.git#commit-ish&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure> 或者<br />
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span>  </span><br><span class="line">   <span class="attr">&quot;moduleName&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;user/project#branch_name&quot;</span>  </span><br><span class="line"><span class="punctuation">&#125;</span>  </span><br></pre></td></tr></table></figure> <!--SR:!2022-10-20,22,252--></p>
<h3 id="查看已安装模块">2. 查看已安装模块</h3>
<p><strong>npm查看已安装模块命令?</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">ls</span>                       <span class="comment"># 查看所有局部安装的模块</span></span><br><span class="line">npm <span class="built_in">ls</span> -g                    <span class="comment"># 查看所有全局安装的模块</span></span><br><span class="line"></span><br><span class="line">npm <span class="built_in">ls</span> moduleName            <span class="comment"># 查看指定模块的局部安装情况</span></span><br><span class="line">npm <span class="built_in">ls</span> moduleName -g         <span class="comment"># 查看指定模块的全局安装情况</span></span><br><span class="line"></span><br><span class="line">npm view moduleName          <span class="comment"># 查看当前源中指定模块的信息</span></span><br><span class="line">npm view moduleName versions <span class="comment"># 查看当前源中指定模块的所有历史版本</span></span><br><span class="line">npm view moduleName version  <span class="comment"># 查看当前源中指定模块的最新版本</span></span><br></pre></td></tr></table></figure>
<!--SR:!2023-03-02,168,252--></p>
<h3 id="卸载模块">3. 卸载模块</h3>
<p>?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm uninstall moduleName</span><br></pre></td></tr></table></figure> <!--SR:!2023-02-03,150,252--></p>
<h3 id="更新模块">4. 更新模块</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按照 package.json 中的描述更新模块，且会在 package.json 文件中保存更新后的版本描述；</span></span><br><span class="line"><span class="comment"># ^a.b.c 更新至 a 下的最新版本</span></span><br><span class="line"><span class="comment"># ~a.b.c 更新至 a.b 下的最新版本</span></span><br><span class="line"><span class="comment"># a.b.c 不会做任何更新</span></span><br><span class="line">npm update </span><br><span class="line"></span><br><span class="line">npm update moduleName <span class="comment"># 更新指定模块</span></span><br></pre></td></tr></table></figure>
<h3 id="npm-源查看与修改">5. npm 源查看与修改</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm config get registry                                 <span class="comment"># 查看当前 npm 源地址</span></span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org <span class="comment"># 将 npm 源设置成相应的地址</span></span><br></pre></td></tr></table></figure>
<h3 id="万能的-help">6. 万能的 help</h3>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">help</span> <span class="comment"># 当忘记了相应命令后，查看帮助</span></span><br></pre></td></tr></table></figure>
<h3 id="npm-注意事项">npm 注意事项</h3>
<ol type="1">
<li><p>package-lock.json 需要提交 ?? npm 从 5.0 版本开始添加了
package-lock.json 文件 (下称 lock
文件)；用于保证再次安装模块时能安装同样的版本；如果未保存 lock 文件；npm
会安装符合描述规则的最新版本如 gulp 中的 ^3.0.0 会安装 3.9.1
版本；这就容易造成一些版本不兼容的问题；
<!--SR:!2022-11-25,108,252--></p></li>
<li><p>时间精力允许的情况下，可进一步了解 npm</p></li>
</ol>
<ul>
<li>packge.json 中各字段的意义</li>
<li>package-lock.json 的由来与作用 </li>
<li>npm 包的发布与更新 </li>
<li>npm 源的搭建</li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCode 使用 MSVC 编译器搭建 OpenGL 开发环境</title>
    <url>/2d4749c98b17ee629f8de0b700cf131d14544f51/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/qiaogaojian/cpp_learn-opengl">github.com</a></p>
</blockquote>
<p>因为 windows 环境下使用 g++ 编译器 assimp 库链接失败, 报错 "undefined
reference to'Assimp::Importer::Importer()", 后来发现使用 MSVC
编译器没有这个问题, 踩了几个坑终于搭建成功, 在此记录一下基于VSCode +
MSVC编译器的 OpenGL 开发环境配置.</p>
<p>另外, mingw/g++ 开发环境在 g++ 分支 visual studio 开发环境在 vs2019
分支.</p>
<h3 id="安装所需软件">1. 安装所需软件</h3>
<ul>
<li><p>VSCode 安装 C++ extension</p></li>
<li><p>下载安装 <a
href="https://github.com/assimp/assimp/releases/tag/v3.3.1/">assimp-sdk-3.3.1-setup_vs2017.exe</a></p></li>
<li><p>安装带 C++ build tools 的 Visual Studio, 下载独立的 <a
href="https://visualstudio.microsoft.com/zh-hant/visual-cpp-build-tools/">C++
build tools</a> 也可以.</p></li>
<li><p>其他所用的库在<a
href="https://github.com/qiaogaojian/learn-opengl.git">项目</a>中的
include 文件夹里</p></li>
</ul>
<h3 id="配置环境变量">2. 配置环境变量</h3>
<ul>
<li>Path 中添加 assimp 库</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\Opengl\Assimp\bin\x86  <span class="comment"># 这样就不需要把assimp.dll放到build目录了</span></span><br></pre></td></tr></table></figure>
<ul>
<li>新建 INCLUDE 环境变量, 添加以下目录</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\include</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\include</span><br><span class="line">D:\Program\VS2019\VS\Common7\Tools</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\ucrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\um</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\shared</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\winrt</span><br><span class="line">D:\Windows Kits\10\Include\10.0.19041.0\cppwinrt</span><br></pre></td></tr></table></figure>
<ul>
<li>新建 LIB 环境变量, 添加以下目录</li>
</ul>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Tools\MSVC\14.28.29333\atlmfc\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\lib\x86</span><br><span class="line">D:\Program\VS2019\VS\VC\Auxiliary\VS\UnitTest\lib</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\ucrt\x86</span><br><span class="line">D:\Windows Kits\10\lib\10.0.19041.0\um\x86</span><br></pre></td></tr></table></figure>
<h3 id="配置-vscode">3. 配置 vscode</h3>
<ul>
<li>新建目录 OpenGl 并使用 VSCode 打开, <code>.vscode</code> 目录下
(没有就新建) 创建 <code>settings.json</code>, 配置以下内容</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shell.windows&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;C:\\Windows\\Sysnative\\cmd.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;terminal.integrated.shellArgs.windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="string">&quot;/k&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="string">&quot;D:/Program Files/VS2019/VS/Common7/Tools/VsDevCmd.bat&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;*.json&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jsonc&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.cfg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.fsh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;glsl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;*.tcc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;cwctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;utility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;iomanip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>.vscode 下创建 <code>c_cpp_properties.json</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;gb2312&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_gb2312&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;msvc-x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;browse&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glm/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="string">&quot;$&#123;workspaceFolder&#125;/include/glad/include&quot;</span></span><br><span class="line">		<span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;limitSymbolsToIncludedHeaders&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;databaseFilename&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>.vscode 下创建 <code>tasks.json</code></li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">	<span class="punctuation">&#123;</span></span><br><span class="line">	  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl&quot;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="string">&quot;/Od&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Zi&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/EHsc&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/MD&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/W4&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fd:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fo:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Fe:&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;build/&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/shader_loader.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/utils/stb_image.cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/assimp/lib/assimp.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glfw/lib-vc2019/glfw3.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/glad/lib/glad.o&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/OpenGL32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/User32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/Gdi32.Lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;include/msvc/shell32.lib&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glfw/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glad/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/glm&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/utils&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Iinclude/assimp/include&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="string">&quot;/Link /NODEFAULTLIB:msvcrt.lib&quot;</span></span><br><span class="line">	  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$msCompile&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">		<span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">		<span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">	  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">	  <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cl.exe&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>.vscode 下创建 <code>launch.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">		<span class="punctuation">&#123;</span></span><br><span class="line">			<span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(Windows) Launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppvsdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\build\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">			<span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;compile&quot;</span></span><br><span class="line">		<span class="punctuation">&#125;</span></span><br><span class="line">	<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="注意事项">注意事项</h3>
<ol type="1">
<li><p>要确保环境变量和项目中的库保持一致 要么都是 x86 要么都是
x64</p></li>
<li><p>确保使用 vsdevcmd 进行编译</p></li>
<li><p>遇到 "undefined reference to xxx", 先检查 tasks.json
链接缺失的库, 再检查环境变量</p></li>
<li><p>编译时需要引用 build 文件夹, 但是 build 文件夹 git 已忽略,
因此需要自己提前新建好</p></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>3.理论</category>
        <category>计算机</category>
        <category>图形学</category>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>mscv</tag>
        <tag>开发环境</tag>
        <tag>cpp</tag>
        <tag>opengl</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 LaTeX 公式符号</title>
    <url>/3ce969880cd0098d1862a98866197846a8c24d92/</url>
    <content><![CDATA[<h2 id="希腊字符">希腊字符</h2>
<p><span class="math inline">\(\theta\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\theta</span><br></pre></td></tr></table></figure>
<h2 id="空格">空格</h2>
<p><span class="math inline">\(1 \ 2\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 \ 2</span><br></pre></td></tr></table></figure>
<h2 id="删除线">删除线</h2>
<p><del>abc</del></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\sout &#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>单斜线</p>
<p><span class="math inline">\(\cancel {abc}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\cancel &#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>反斜线 backslash</p>
<p><span class="math inline">\(\bcancel {abc}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\bcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure>
<p>双斜线</p>
<p><span class="math inline">\(\xcancel {abc}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\xcancel &#123;abc&#125;</span><br></pre></td></tr></table></figure>
<h2 id="乘号">乘号</h2>
<p><strong>Q: latex 点乘 表示?</strong> ?? <span class="math inline">\(1
\cdot 2\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 \cdot 2</span><br></pre></td></tr></table></figure> <!--SR:!2022-11-21,61,210--></p>
<p><strong>Q: latex 叉乘表示?</strong> ?? <span class="math inline">\(1
\times 2\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 \times 2</span><br></pre></td></tr></table></figure> <!--SR:!2023-02-21,129,230--></p>
<h2 id="除号-divide">除号 divide</h2>
<p><strong>Q: latex 除法表示?</strong> ?? <span class="math inline">\(1
\div 2\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 \div 2</span><br></pre></td></tr></table></figure> <!--SR:!2023-01-21,127,250--></p>
<h2 id="下标-上标">下标 上标</h2>
<p><strong>Q: latex 的下标表示?</strong> ?? <span
class="math inline">\(v_a\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v_a</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-15,88,270--></p>
<p><strong>Q: latex 的上标表示?</strong> ?? <span
class="math inline">\(v^{21}\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v^&#123;21&#125;</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-25,71,250--></p>
<h2 id="根号">根号</h2>
<p><span class="math inline">\(\sqrt{3}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt&#123;3&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\sqrt[3]{9}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\sqrt[3]&#123;9&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不等于-not-equal-to">不等于 not equal to</h2>
<p><span class="math inline">\(1\neq 0\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$$\neq 0$$</span><br></pre></td></tr></table></figure>
<h2 id="分号-fraction">分号 fraction</h2>
<p><strong>Q: latex 的分数表示?</strong> ?? <span
class="math inline">\(\frac{1}{2}\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\frac&#123;1&#125;&#123;2&#125;</span><br></pre></td></tr></table></figure>
<!--SR:!2022-12-12,76,246--></p>
<h2 id="省略号">省略号</h2>
<p>水平</p>
<p><span class="math inline">\(\cdots\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\cdots</span><br></pre></td></tr></table></figure>
<p>垂直</p>
<p><span class="math inline">\(\vdots\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vdots</span><br></pre></td></tr></table></figure>
<p>倾斜</p>
<p><span class="math inline">\(\ddots\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\ddots</span><br></pre></td></tr></table></figure>
<h2 id="约等于">约等于</h2>
<p><span class="math inline">\(\approx\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\approx</span><br></pre></td></tr></table></figure>
<h2 id="ln">ln</h2>
<p><span class="math inline">\(\ln n\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\ln n</span><br></pre></td></tr></table></figure>
<h2 id="大括号-brace">大括号 brace</h2>
<p><span class="math inline">\(\{ \}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\&#123; \&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\underbrace {123}_{456}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\underbrace &#123;123&#125;_&#123;456&#125;</span><br></pre></td></tr></table></figure>
<p><span class="math inline">\(\overbrace {123}^{456}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\overbrace &#123;123&#125;^&#123;456&#125;</span><br></pre></td></tr></table></figure>
<h2 id="矩阵">矩阵</h2>
<p><strong>Q: latex 的矩阵表示?</strong> ?? <span
class="math display">\[
\begin{vmatrix}
  1 &amp; 2 &amp; 3 \\
  4 &amp; 5 &amp; 6
\end{vmatrix}
\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 2 &amp; 3 \\</span><br><span class="line">  4 &amp; 5 &amp; 6</span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure> <!--SR:!2023-04-11,172,250--></p>
<p><span class="math display">\[
\begin{vmatrix}
  1 &amp; 4 \\
  2 &amp; 5 \\
  3 &amp; 6
\end{vmatrix}
\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;vmatrix&#125;</span><br><span class="line">  1 &amp; 4 \\</span><br><span class="line">  2 &amp; 5 \\</span><br><span class="line">  3 &amp; 6 </span><br><span class="line">\end&#123;vmatrix&#125;</span><br></pre></td></tr></table></figure> <strong>Q: latex 的矩阵表示?</strong> ?? 圆括号
(parentheses) <span class="math display">\[
\begin{pmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{pmatrix}
\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;pmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;pmatrix&#125;</span><br></pre></td></tr></table></figure> <!--SR:!2023-03-02,146,250--></p>
<p><strong>Q: latex 的矩阵表示?</strong> ?? 中括号 (square brackets)
<span class="math display">\[
\begin{bmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{bmatrix}
\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;bmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;bmatrix&#125;</span><br></pre></td></tr></table></figure> <!--SR:!2022-11-19,78,230--></p>
<p><strong>Q: latex 的矩阵表示?</strong> ?? 双竖线 (double vertical
lines) <span class="math display">\[
\begin{Vmatrix}
  1 &amp; 2 \\
  3 &amp; 4
\end{Vmatrix}
\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;Vmatrix&#125;</span><br><span class="line">  1 &amp; 2 \\</span><br><span class="line">  3 &amp; 4</span><br><span class="line">\end&#123;Vmatrix&#125;</span><br></pre></td></tr></table></figure> <!--SR:!2023-01-25,123,250--></p>
<h2 id="向量">向量</h2>
<p><strong>Q: latex 的向量表示?</strong> ?? <strong>单个字符</strong>
<span class="math display">\[\vec a\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\vec a</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-13,88,270--></p>
<p><strong>Q: latex 的向量表示?</strong> ?? <strong>多个字符</strong>
<span class="math display">\[\overrightarrow{ab}\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\overrightarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure>
<span class="math display">\[\overleftarrow{ab}\]</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\overleftarrow&#123;ab&#125;</span><br></pre></td></tr></table></figure>
<!--SR:!2023-02-19,130,230--></p>
<h2 id="单位向量">单位向量</h2>
<p><span class="math inline">\(\hat{ab}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\hat&#123;ab&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求和运算">求和运算</h2>
<p><strong>Q: latex 的求和符号表示?</strong> ?? <span
class="math inline">\(\sum_{i=1}^{n}\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\sum_&#123;i=1&#125;^&#123;n&#125;</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-28,73,250--></p>
<h2 id="对齐">对齐</h2>
<p><strong>Q: latex 的对齐符号?</strong> ?? <span
class="math display">\[\begin{aligned}
a &amp;= b + c &amp; = d \\
   &amp;= d &amp; = e    
\end{aligned}\]</span> &amp; 表示对齐位置, 同一行可以有多个 &amp;
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\begin&#123;aligned&#125;</span><br><span class="line">a &amp;= b + c &amp; = d \\</span><br><span class="line">   &amp;= d &amp; = e    </span><br><span class="line">\end&#123;aligned&#125;</span><br></pre></td></tr></table></figure> <!--SR:!2023-01-10,114,250--></p>
<h2 id="注释">注释</h2>
<p><span class="math inline">\(\text{注释}\)</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\text&#123;注释&#125;</span><br></pre></td></tr></table></figure>
<h2 id="箭头">箭头</h2>
<h3 id="右箭头">右箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xrightarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下： ?? <span
class="math inline">\(a \rightarrow b\)</span> <span
class="math inline">\(a \Rightarrow b\)</span> <span
class="math inline">\(\xrightarrow[下方公式]{上方公式}\)</span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ a \rightarrow b $</span><br><span class="line">$ a \Rightarrow b $</span><br><span class="line">$ \xrightarrow[下方公式]&#123;上方公式&#125; $</span><br></pre></td></tr></table></figure> <!--SR:!2022-10-26,14,247--></p>
<h3 id="左箭头">左箭头</h3>
<p>latex 中可以输入上下方文字的右箭头，用
<code>\xleftarrow[下方公式]&#123;上方公式&#125;</code> 写出，如下： ?? <span
class="math inline">\(a \leftarrow b\)</span> <span
class="math inline">\(a \Leftarrow b\)</span> <span
class="math inline">\(\xleftarrow[上方公式]{下方公式}\)</span><br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ a \leftarrow b $</span><br><span class="line">$ a \Leftarrow b $</span><br><span class="line">$ \xleftarrow[上方公式]&#123;下方公式&#125; $  </span><br></pre></td></tr></table></figure> <!--SR:!2022-10-27,14,247--></p>
<h3 id="双向箭头">双向箭头</h3>
<p>?? <span class="math inline">\(a \leftrightarrow b\)</span> <span
class="math inline">\(a \Leftrightarrow b\)</span> <span
class="math inline">\(a \xLeftrightarrow[下]{上} b\)</span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$a \leftrightarrow b$</span><br><span class="line">$a \Leftrightarrow b$</span><br><span class="line">$a \xLeftrightarrow[下]&#123;上&#125; b$</span><br></pre></td></tr></table></figure> <!--SR:!2022-10-28,15,247--></p>
<h2 id="加减-减加">加减 减加</h2>
<p>?? <span class="math inline">\(\pm\)</span> <span
class="math inline">\(\mp\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ \pm $</span><br><span class="line">$ \mp $</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-26,14,247--></p>
<h2 id="希腊字母">希腊字母</h2>
<p>?? <span class="math inline">\(\delta\)</span> <span
class="math inline">\(\Delta\)</span> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$\delta$</span><br><span class="line">$\Delta$</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-29,16,247--></p>
<h2 id="自动调整括号大小">自动调整括号大小</h2>
<p><span class="math display">\[\left \{  
  \frac{1}{2}
  \left [
    \left (
      a + b
    \right )
  \right ]
\right \}\]</span></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\left \&#123;  </span><br><span class="line">  \frac&#123;1&#125;&#123;2&#125;</span><br><span class="line">  \left [</span><br><span class="line">    \left (</span><br><span class="line">      a + b</span><br><span class="line">    \right )</span><br><span class="line">  \right ]</span><br><span class="line">\right \&#125;</span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2>
<p><a
href="https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX">https://www.quora.com/How-do-I-write-vectors-and-matrices-in-mathrm-LaTeX</a></p>
<p><a
href="https://tex.stackexchange.com/questions/28608/how-to-add-a-matrix-to-a-latex-document">math
mode - How to add a matrix to a LaTeX document - TeX - LaTeX Stack
Exchange</a></p>
<p><a
href="https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols">List of
LaTeX mathematical symbols - OeisWiki</a></p>
<p><a href="http://mohu.org/info/symbols/symbols.htm">常用数学符号的
LaTeX 表示方法</a></p>
<p><a
href="https://blog.csdn.net/foreverdengwei/article/details/8189243">latex
中括号大小控制_Cloud-Datacenter-Renewable Energy-Big Data-Model-CSDN
博客</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Obsidian</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>latex</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn 简介</title>
    <url>/696c5673813e9eac4d382ce511c432cd8c3dcc4f/</url>
    <content><![CDATA[<p>Yarn 是 Facebook 发布的新一代包管理工具，旨在解决以往使用 npm
作为包管理会遇到的一些问题。特点：<mark style="background: #83d98fA6;">快</mark>
、<mark style="background: #83d98fA6;">可靠</mark>
、<mark style="background: #83d98fA6;">安全</mark> 。</p>
<h2 id="yarn-的优点">Yarn 的优点？</h2>
<p>?? * <strong>速度快</strong> 。速度快主要来自以下两个方面： 　1.
并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm
是按照队列执行每个 package，也就是说必须要等到当前 package
安装完成之后，才能继续后面的安装。而 Yarn
是同步执行所有任务，提高了性能。 　2.
离线模式：如果之前已经安装过一个软件包，用 Yarn
再次安装时之间从缓存中获取，就不用像 npm 那样再从网络下载了。 *
<strong>安装版本统一</strong>：为了防止拉取到不同的版本，Yarn
有一个锁定文件 (lock file)
记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn
就会创建（或更新）yarn.lock
这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。npm
其实也有办法实现处处使用相同版本的 packages，但需要开发者执行 npm
shrinkwrap 命令。这个命令将会生成一个锁定文件，在执行 npm install
的时候，该锁定文件会先被读取，和 Yarn 读取 yarn.lock 文件一个道理。npm
和 Yarn 两者的不同之处在于，Yarn 默认会生成这样的锁定文件，而 npm 要通过
shrinkwrap 命令生成 npm-shrinkwrap.json
文件，只有当这个文件存在的时候，packages 版本信息才会被记录和更新。 *
<strong>更简洁的输出</strong>：npm 的输出信息比较冗长。在执行 npm
install 的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn
简洁太多：默认情况下，结合了 emoji
直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。
* <strong>多注册来源处理：</strong>
所有的依赖包，不管他被不同的库间接关联引用多少次，安装这个包时，只会从一个注册来源去装，要么是
npm 要么是 bower, 防止出现混乱不一致。 * <strong>更好的语义化</strong>：
yarn 改变了一些 npm 命令的名称，比如 yarn add/remove，感觉上比 npm
原本的 install/uninstall 要更清晰。 <!--SR:!2022-11-14,40,250--></p>
<h2 id="常用命令">常用命令</h2>
<p><strong>执行 <code>yarn / yarn install</code> 解析 package.json
时，分为 4 个步骤：</strong><br />
?? 1. <strong>依赖关系解析</strong>：yarn 在解析 package.json
文件时，会对其每个依赖包进行遍历分析生成 yarn.lock
文件。该文件描述了项目中每个包以及每个包中所依赖的包的版本信息。<br />
2.
<strong>包下载</strong>：根据第一步中解析的结果下载特定版本的包。如果该包曾经被下载过，则跳过此次的下载操作，直接使用本地缓存，即
yarn 的离线模式特性。<br />
3. <strong>包关联</strong>：关联拷贝下载或者缓存在全局的包到项目。<br />
4. <strong>包编译</strong>：编译项目中使用到的包。 <br />
<!--SR:!2022-10-23,3,250--></p>
<p>yarn.lock(该文件用于锁定包版本已保障每次编译的结果一致，也可通过 yarn
install --no-lockfile 命令设置不生成 yarn.lock 文件)</p>
<strong>yarn &amp; npm 常用命令对比</strong> Yarn 的命令基本跟 npm
的大同小异， 使用 <code>yarn init</code> 生成 package.json 文件， 用
<code>yarn add</code>和 <code>yarn add --dev</code> 分别替换
<code>npm install --save</code> 和<code>npm install --dev</code>
命令即可。 ??
<table width="825">
<thead>
<tr>
<th>
NPM
</th>
<th>
YARN
</th>
<th>
说明
</th>
</tr>
</thead>
<tbody>
<tr>
<td>
npm init
</td>
<td>
yarn init
</td>
<td>
初始化某个项目
</td>
</tr>
<tr>
<td>
npm install/link
</td>
<td>
yarn install/link
</td>
<td>
默认的安装依赖操作
</td>
</tr>
<tr>
<td>
npm install taco —save
</td>
<td>
yarn add taco
</td>
<td>
安装某个依赖，并且默认保存到 package.
</td>
</tr>
<tr>
<td>
npm uninstall taco —save
</td>
<td>
yarn remove taco
</td>
<td>
移除某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco —save-dev
</td>
<td>
yarn add taco —dev
</td>
<td>
安装某个开发时依赖项目
</td>
</tr>
<tr>
<td>
npm update taco —save
</td>
<td>
yarn upgrade taco
</td>
<td>
更新某个依赖项目
</td>
</tr>
<tr>
<td>
npm install taco --global
</td>
<td>
yarn global add taco
</td>
<td>
安装某个全局依赖项目
</td>
</tr>
<tr>
<td>
npm publish/login/logout
</td>
<td>
yarn publish/login/logout
</td>
<td>
发布 / 登录 / 登出，一系列 NPM Registry 操作
</td>
</tr>
<tr>
<td>
npm run/test
</td>
<td>
yarn run/test
</td>
<td>
运行某个命令
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-11-25,54,250-->
<h2 id="设置国内源">设置国内源</h2>
<p>yarn 原仓库包下载不稳定时需要设置国内源</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npm.taobao.org&quot;</span></span><br></pre></td></tr></table></figure>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>Server</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 使用全局剪贴板</title>
    <url>/6b3a3abf0a6c8711830275afbe228de56da9066d/</url>
    <content><![CDATA[<p>查看 vim 的 clipboard 功能是否开启</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure>
<p><img src="/images/2325099-c78cfca714ce958a.png" /> 没有开启是减号</p>
<p>如果不支持 clipboard 功能, 需要安装支持 clipboard 的 vim 版本</p>
<h3 id="ubuntu">ubuntu</h3>
<p>安装 vim-gtk</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install vim-gtk</span><br></pre></td></tr></table></figure>
<h3 id="centos">centos</h3>
<p>安装 vim-x11 和 vim-enhanced</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">yum install vim*</span><br></pre></td></tr></table></figure>
<p>使用 vimx 代替 vim<br />
编辑 <code>~/.zshrc</code> 添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alias vi=&#x27;vimx&#x27;</span><br><span class="line">alias vim=&#x27;vimx&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li>Debian &amp; Ubuntu: Install <code>vim-gtk</code> or
<code>vim-gnome</code>.</li>
<li>Fedora: install <code>vim-X11</code>, and run <code>vimx</code>
instead of <code>vim</code> (<a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fq%2F2063%2F51">more
info</a>).</li>
<li>Arch Linux: install <code>gvim</code> (this will enable
<code>+clipboard</code> for normal <code>vim</code> as well).</li>
</ul>
<p><strong>参考：</strong></p>
<ul>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F84%2Fhow-can-i-copy-text-to-the-system-clipboard-from-vim">how-can-i-copy-text-to-the-system-clipboard-from-vim</a></p></li>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fvi.stackexchange.com%2Fquestions%2F2063%2Fhow-do-i-get-clipboard-support-in-fedora-20">how-do-i-get-clipboard-support-in-fedora-20</a></p></li>
<li><p><a
href="https://link.jianshu.com?t=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F19863631">如何将
Vim 剪贴板里面的东西粘贴到 Vim 之外的地方？</a></p></li>
</ul>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../14dab12572d9fd706144fe09626534625a2a2eb8">Vim
常用命令</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Deepin 的 Linux 开发环境搭建</title>
    <url>/546aa018dacb833edff629600f56879bc2370906/</url>
    <content><![CDATA[<h2 id="sdk">SDK</h2>
<ul>
<li>Go</li>
<li>Lua</li>
<li>Rust</li>
<li>Node <a href="../7962ceea5a61f0bcef11f8d9abf63940e874942b">Node
开发环境搭建 Deepin</a></li>
<li>Python3</li>
<li>NetCore</li>
<li>SDKMan</li>
</ul>
<h2 id="系统">系统</h2>
<ul>
<li>Git</li>
<li>Rime</li>
<li>Fish</li>
<li>Vimx</li>
<li>Htop</li>
<li>ScreenFetch</li>
</ul>
<h2 id="服务">服务</h2>
<ul>
<li>Nginx</li>
<li>Docker</li>
</ul>
<h2 id="数据库">数据库</h2>
<ul>
<li>MySQL</li>
<li>MongoDB</li>
<li>Redis</li>
<li>Kafka</li>
</ul>
<h2 id="后端框架">后端框架</h2>
<ul>
<li>Egg</li>
<li>Flask</li>
<li>Django</li>
<li>Spring Cloud</li>
</ul>
<h2 id="前端框架">前端框架</h2>
<ul>
<li>Vue</li>
<li>React</li>
</ul>
<h2 id="区块链">区块链</h2>
<ul>
<li>geth</li>
<li>Truffle</li>
<li>Hardhat</li>
<li>Brownie</li>
<li>Ganache</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>VSCode</li>
<li>Chrome</li>
<li>SmartGit</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>2.工作</category>
        <category>环境</category>
      </categories>
      <tags>
        <tag>开发环境</tag>
        <tag>linux</tag>
        <tag>deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 开发环境搭建 Deepin</title>
    <url>/7962ceea5a61f0bcef11f8d9abf63940e874942b/</url>
    <content><![CDATA[<h2 id="安装">1. 安装</h2>
<p><strong>使用 n 安装和管理 Node</strong></p>
<p>安装命令: <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 npm</span></span><br><span class="line">sudo apt-get install npm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 yarn</span></span><br><span class="line">sudo npm i -g yarn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 n, n 模块是管理 nodejs 版本的</span></span><br><span class="line">sudo npm i -g n</span><br><span class="line"></span><br></pre></td></tr></table></figure> ## 2.配置</p>
<p><a href="../1147d6dfd41190e9c83dd723ff1803dc5516c66f">Npm
配置国内源</a> <a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#设置国内源">Yarn
简介</a></p>
<h2 id="常用命令">3. 常用命令</h2>
<p><a href="../3891bc44a6507d046fb5508c9955848ad90bf49c">Npm
常用命令</a> <a href="../08b6858d1e7f950a80d08062a2a9e8c429243979">N
常用命令</a> <a
href="../696c5673813e9eac4d382ce511c432cd8c3dcc4f/#常用命令">Yarn
简介</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../546aa018dacb833edff629600f56879bc2370906">基于 Deepin 的
Linux 开发环境搭建</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>开发环境</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>Deepin</tag>
      </tags>
  </entry>
  <entry>
    <title>JS == 和 === 的区别</title>
    <url>/894af26ddcc518ccc45e0f52fd57df311958d1c0/</url>
    <content><![CDATA[<h2 id="区别">区别</h2>
<p>在 JS 项目里，除了能看到 ==
操作符来判断两个变量是否相等外，我们还会看到 ===
操作符，这两者有什么区别？ ?? * 对于 String, number
这些<strong>值类型</strong>，<code>==</code>
操作符会先把两边的变量<mark style="background: #fefe00A6;">进行类型强制转换成相同的类型再比较是否相等</mark>
；<code>===</code> 操作符则不会进行类型转换，而是直接进行比较。 * 对于
array, object 这些<strong>引用类型</strong>，<code>==</code> 和
<code>===</code>
是没有区别的，因为它们<mark style="background: #fefe00A6;">比较的是
“指针地址</mark> ” 。 *
<strong>值类型和引用类型之间</strong>比较，<code>==</code> 和
<code>===</code>
是有区别的；<code>==</code>操作符会<mark style="background: #fefe00A6;">先把高级类型转换为基础类型</mark>
之后，进行值的比较；<code>===</code>
操作符则不会进行转换，类型不同，直接返回 false</p>
<p>也就是说，<code>==</code>
操作符只要求比较<mark style="background: #83d98fA6;">两个变量的值是否相等</mark>
，<code>===</code>
操作符则是要求<mark style="background: #83d98fA6;">两个变量的值和类型都要相同</mark>
；类似地，<code>!=</code> 操作符会去做类型强制转换，<code>!==</code>
操作符则不会转换类型。</p>
<p><strong>值类型</strong> <figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a == b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b);</span><br><span class="line"></span><br></pre></td></tr></table></figure> <strong>引用类型</strong>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> a = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">val</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===b);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;*********************************&quot;</span>);</span><br><span class="line">c = a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a==c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a===c);</span><br><span class="line"></span><br></pre></td></tr></table></figure> <!--SR:!2022-10-31,22,250--></p>
<h2 id="注意事项">注意事项</h2>
<p><mark style="background: #fa518dA6;">JS == / ===注意事项: </mark> ??
- 对于特殊值 NaN（Not a Number）表示非数字，NaN
和任何数（包括它自己）做相等比较，都会返回
false，所以<mark style="background: #83d98fA6;">判断 NaN 最好用 isNaN()
函数</mark> - undefined 和 null，两者的值相比较，会返回 true。
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>==<span class="literal">null</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">undefined</span>===<span class="literal">null</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure> - 由于 == 和!=
操作符带来的类型隐式转换规则非常繁琐，还有为了避免数据类型混淆导致出现
bug，还是推荐使用 <code>===</code> 操作符和<code>!==</code> 操作符。
<!--SR:!2022-11-05,27,250--></p>
<h2 id="stack-overflow-相关">Stack Overflow 相关</h2>
<p>So there you have the two common sources of errors in Javascript
comparisons: 1. comparing different types with == can lead to
==unexpected type conversions.== 2. comparing objects and arrays is
based on ==references not values stored inside==.</p>
<p>As the existing answer already says, Typescript is designed as a
superset of Javascript. So it doesn't change the behaviour of these
comparison operators. If you write <code>==</code> in Typescript, you
get type conversions.</p>
<p>So how is this fixed? ==With the compiler. ==If you actually do write
code that compares incompatible types with <code>==</code> it's a
compiler error. Try compiling the following sample:<br />
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str==num);</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-02,24,250!2022-11-03,25,250!2022-11-06,28,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://nowjava.com/article/44330">nowjava.com</a></p>
<p><a
href="https://stackoverflow.com/questions/57125700/why-use-triple-equal-in-typescript">javascript
- Why use triple-equal (<code>===</code>) in TypeScript? - Stack
Overflow</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Python import 导入其他脚本</title>
    <url>/7d70c8c862ee464cdda08e0ac33aa03ca9de8d6f/</url>
    <content><![CDATA[<p>假设有如下目录结构：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure>
<p><mark style="background: #be9affA6;">dir0</mark> 文件夹下有
<mark style="background: #fefe00A6;">file1.py</mark>
、<mark style="background: #fefe00A6;">file2.py</mark> 两个文件 和
<mark style="background: #018bffA6;">dir3</mark>
、<mark style="background: #018bffA6;">dir4</mark>
两个子文件夹，<mark style="background: #018bffA6;">dir3</mark> 中有
<mark style="background: #fefe00A6;">file3.py</mark>
文件，<mark style="background: #018bffA6;">dir4</mark> 中有
<mark style="background: #fefe00A6;">file4.py</mark> 文件。</p>
<h2 id="导入同级模块">1. 导入同级模块</h2>
<p>python 导入同级模块（在同一个文件夹中的 py 文件）直接导入即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure>
<p>如在 file1.py 中想导入 file2.py，注意无需加后缀 ".py"：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> file2</span><br><span class="line"><span class="comment"># 使用file2中函数时需加上前缀&quot;file2.&quot;，即：</span></span><br><span class="line"><span class="comment"># file2.fuction_name()</span></span><br></pre></td></tr></table></figure>
<h2 id="导入下级模块">2. 导入下级模块</h2>
<p>导入下级目录模块也很容易，<mark style="background: #fbab4bA6;">需在下级目录中新建一个空白的__init__.py
文件再导入</mark> ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> dirname <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure>
<p>如在 file1.py 中想导入 dir3 下的 file3.py，首先要在 dir3
中新建一个空白的_<em>init</em>___.py 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- dir0</span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　| __init__.py</span><br><span class="line">　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　| file4.py</span><br></pre></td></tr></table></figure>
<p>再使用如下语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan A</span></span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure>
<p>或是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># plan B</span></span><br><span class="line"><span class="keyword">import</span> dir3.file3</span><br><span class="line"><span class="comment"># import dir3.file3 as df3</span></span><br></pre></td></tr></table></figure>
<p>但使用第二种方式则下文需要一直带着路径 dir3
书写，较为累赘，建议可以另起一个别名。</p>
<h2 id="导入上级模块">3. 导入上级模块</h2>
<p>要导入上级目录下模块，可以使用 sys.path： 　</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure>
<p>如在 <code>file4.py</code> 中想引入 import 上级目录下的 file1.py：
<strong>file4.py</strong> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>) </span><br><span class="line"><span class="keyword">import</span> file1</span><br></pre></td></tr></table></figure> <strong>python 中 sys.path
的作用?</strong> ?? 当使用 import
语句<mark style="background: #018bffA6;">导入模块</mark>
时，解释器会搜索<mark style="background: #fefe00A6;">当前模块所在目录</mark>
以及 <mark style="background: #fefe00A6;">sys.path 指定的路径</mark>
去找需要 import 的模块，所以这里是直接把上级目录加到了 sys.path 里。
<!--SR:!2022-12-01,56,250--></p>
<p><strong>“..” 的含义：</strong> 等同于 linux
里的‘..’，表示当前工作目录的上级目录。实际上 python 中的‘.’也和 linux
中一致，表示当前目录。</p>
<h2 id="导入隔壁文件夹下的模块">4. 导入隔壁文件夹下的模块</h2>
<p>如在 <code>file4.py</code> 中想引入 import 在 dir3 目录下的
file3.py。</p>
<p>这其实是前面两个操作的组合，其思路本质上是将上级目录加到 sys.path
里，再按照对下级目录模块的方式导入。</p>
<p>同样需要被引文件夹也就是 dir3 下有空的__init__.py 文件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">-- <span class="built_in">dir</span></span><br><span class="line">　　| file1.py</span><br><span class="line">　　| file2.py</span><br><span class="line">　　| dir3</span><br><span class="line">　　　　| __init__.py</span><br><span class="line">　　　　| file3.py</span><br><span class="line">　　| dir4</span><br><span class="line">　　　　| file4.py</span><br></pre></td></tr></table></figure>
<p>同时也要将上级目录加到 sys.path 里： <strong>file4.py</strong>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.path.append(<span class="string">&quot;..&quot;</span>)</span><br><span class="line"><span class="keyword">from</span> dir3 <span class="keyword">import</span> file3</span><br></pre></td></tr></table></figure> ## 5. 常见错误及 import 原理：</p>
<p>在使用直接从上级目录引入模块的操作时：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .. <span class="keyword">import</span> xxx</span><br></pre></td></tr></table></figure>
<p>经常会报错:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ValueError: attempted relative import beyond top-level package</span><br></pre></td></tr></table></figure>
<p>这是由于相对导入时，文件夹实质上充当的是
package，也就是包的角色（比如我们常用的 numpy、pandas 都是包）。如果
python 解释器没有认同该文件夹是
package，那么这就是一个普通的文件夹，无法实现相对导入。</p>
<p><strong>python 中文件夹作为 package 需要满足的条件?</strong> ?? 1.
文件夹中<mark style="background: #fefe00A6;">必须</mark>
存在有<code>__init__.py</code> 文件，可以为空。 2.
不能作为顶层模块来执行该文件夹中的 py 文件。
<!--SR:!2022-11-30,54,250--></p>
<h2 id="导入最佳实践">6. 导入最佳实践</h2>
<p>?? - 把项目根目录加入环境变量(手动或通过脚本)<br />
- import 导入路径以项目根目录下的源码目录 src 为起始, 如下:<br />
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> src.core.logger_class <span class="keyword">import</span> Logger  </span><br><span class="line"><span class="keyword">from</span> src.core.config_class <span class="keyword">import</span> LoadConfig  </span><br><span class="line"><span class="keyword">from</span> src.core.db_class <span class="keyword">import</span> MySql, Mongo, Redis, Kafka  </span><br></pre></td></tr></table></figure> 参考:<a
href="../444fdbf98270c2b627e5837a41c9e9ed322c10b5">Python Import module
from different directory</a></p>
<h2 id="各种导入示例">各种导入示例</h2>
<p>?? <img src="/images/Pasted%20image%2020220904222845.png" />
<!--SR:!2022-11-28,54,250--></p>
<p><strong>参考</strong></p>
<p><a
href="https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time">python
- Relative imports for the billionth time - Stack Overflow</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a href="../444fdbf98270c2b627e5837a41c9e9ed322c10b5">Python Import
module from different directory</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>srcard</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn Regex the Easy Way</title>
    <url>/89523a1718574a14da66ca44dd69b04b7459a0fa/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/ziishaned/learn-regex/blob/master/translations/README-cn.md">github.com</a></p>
</blockquote>
<p><img
src="/images/68747470733a2f2f692e696d6775722e636f6d2f6259776c3756662e706e67.png" /></p>
<h2 id="什么是正则表达式">什么是正则表达式？</h2>
<p>?? &gt;
正则表达式是一组由字母和符号组成的特殊文本，它可以用来从文本中找出满足你想要的格式的句子。
<!--SR:!2022-10-22,3,250--></p>
<p>一个正则表达式是一种从左到右匹配主体字符串的模式。 “Regular
expression”这个词比较拗口，我们常使用缩写的术语 “regex” 或“regexp”。
正则表达式可以从一个基础字符串中根据一定的匹配模式替换文本中的字符串、验证表单、提取字符串等等。</p>
<p>想象你正在写一个应用，然后你想设定一个用户命名的规则，让用户名包含字符、数字、下划线和连字符，以及限制字符的个数，好让名字看起来没那么丑。
我们使用以下正则表达式来验证一个用户名：</p>
<p><img src="/images/regexp-cn.png" /></p>
<p>以上的正则表达式可以接受
<code>john_doe</code>、<code>jo-hn_doe</code>、<code>john12_as</code>。
但不匹配<code>Jo</code>，因为它包含了大写的字母而且太短了。</p>
<h2 id="基本匹配">1. 基本匹配</h2>
<p>正则表达式其实就是在执行搜索时的格式，它由一些字母和数字组合而成。
例如：一个正则表达式
<code>the</code>，它表示一个规则：由字母<code>t</code>开始，接着是<code>h</code>，再接着是<code>e</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;the&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/dmRygT/1">在线练习</a></p>
<p>正则表达式<code>123</code>匹配字符串<code>123</code>。它逐个字符的与输入的正则表达式做比较。</p>
<p>==正则表达式是大小写敏感的==
，所以<code>The</code>不会匹配<code>the</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<!--SR:!2022-10-22,3,250-->
<p><a href="https://regex101.com/r/1paXsy/1">在线练习</a></p>
<h2 id="元字符">2. 元字符</h2>
正则表达式主要依赖于元字符。
元字符不代表他们本身的字面意思，他们都有特殊的含义。一些元字符写在方括号中的时候有一些特殊的意思。以下是一些元字符的介绍：
??
<table>
<thead>
<tr>
<th align="center">
元字符
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
.
</td>
<td>
句号匹配任意单个字符除了换行符。
</td>
</tr>
<tr>
<td align="center">
[ ]
</td>
<td>
字符种类。匹配方括号内的任意字符。
</td>
</tr>
<tr>
<td align="center">
[^]
</td>
<td>
否定的字符种类。匹配除了方括号里的任意字符
</td>
</tr>
<tr>
<td align="center">
*
</td>
<td>
匹配 &gt;=0 个重复的在 * 号之前的字符。
</td>
</tr>
<tr>
<td align="center">
+
</td>
<td>
匹配 &gt;=1 个重复的 + 号前的字符。
</td>
</tr>
<tr>
<td align="center">
?
</td>
<td>
标记? 之前的字符为可选.
</td>
</tr>
<tr>
<td align="center">
{n,m}
</td>
<td>
匹配 num 个大括号之前的字符或字符集 (n &lt;= num &lt;= m).
</td>
</tr>
<tr>
<td align="center">
(xyz)
</td>
<td>
字符集，匹配与 xyz 完全相等的字符串.
</td>
</tr>
<tr>
<td align="center">
|
</td>
<td>
或运算符，匹配符号前或后的字符.
</td>
</tr>
<tr>
<td align="center">
&lt;/td&gt;
<td>
转义字符, 用于匹配一些保留的字符 <code>[ ] ( ) &#123; &#125; . * + ? ^ $  |</code>
</td>
</tr>
<tr>
<td align="center">
^
</td>
<td>
从开始行开始匹配.
</td>
</tr>
<tr>
<td align="center">
$
</td>
<td>
从末端开始匹配.
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-10-22,3,250-->
<h3 id="点运算符-.">2.1 点运算符 <code>.</code></h3>
<p><code>.</code>是元字符中最简单的例子。
<code>.</code>匹配任意单个字符，但不匹配==换行符==。
例如，表达式<code>.ar</code>匹配一个任意字符后面跟着是<code>a</code>和<code>r</code>的字符串。
<!--SR:!2022-10-31,10,250--></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;.ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/xc9GkU/1">在线练习</a></p>
<h3 id="字符集">2.2 字符集</h3>
<p>?? 字符集也叫做字符类。 方括号用来指定一个字符集。
在方括号中使用连字符来指定字符集的范围。 在方括号中的字符集不关心顺序。
例如，表达式<code>[Tt]he</code> 匹配 <code>the</code> 和
<code>The</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[Tt]he&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/2ITLQ4/1">在线练习</a></p>
<p>方括号的句号就表示句号。 表达式 <code>ar[.]</code> 匹配
<code>ar.</code>字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;ar[.]&quot; =&gt; A garage is a good place to park a car.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/wL3xtE/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<p><strong>2.2.1 否定字符集</strong> ?? 一般来说 <code>^</code>
表示一个字符串的<strong>开头</strong>，但它用在一个方括号的开头的时候，它表示这个字符集是否定的。
例如，表达式<code>[^c]ar</code>
匹配一个后面跟着<code>ar</code>的除了<code>c</code>的任意字符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[^c]ar&quot; =&gt; The car parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/nNNlq3/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h3 id="重复次数">2.3 重复次数</h3>
<p>后面跟着元字符 <code>+</code>，<code>*</code> or <code>?</code>
的，用来指定匹配子模式的次数。
这些元字符在不同的情况下有着不同的意思。</p>
<p><strong>2.3.1 <code>*</code> 号</strong> ?? <code>*</code>号匹配
在<code>*</code>之前的字符出现<code>大于等于0</code>次。 例如，表达式
<code>a*</code> 匹配 0 或更多个以 a
开头的字符。表达式<code>[a-z]*</code>
匹配一个行中所有以小写字母开头的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[a-z]*&quot; =&gt; The car parked in the garage #21.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/7m8me5/1">在线练习</a></p>
<p><code>*</code>字符和<code>.</code>字符搭配可以匹配所有的字符<code>.*</code>。
<code>*</code>和表示匹配空格的符号<code>\s</code>连起来用，如表达式<code>\s*cat\s*</code>匹配
0 或更多个空格开头和 0 或更多个空格结尾的 cat 字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;\s*cat\s*&quot; =&gt; The fat cat sat on the concatenation.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/gGrwuz/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<p><strong>2.3.2 <code>+</code> 号</strong> ??
<code>+</code>号匹配<code>+</code>号之前的字符出现 &gt;=1 次。
例如表达式<code>c.+t</code>
匹配以首字母<code>c</code>开头以<code>t</code>结尾，中间跟着至少一个字符的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;c.+t&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/Dzf9Aa/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<p><strong>2.3.3 <code>?</code> 号</strong> ?? 在正则表达式中元字符
<code>?</code> 标记在符号前面的字符为可选，即出现 0 或 1 次。
例如，表达式 <code>[T]?he</code> 匹配字符串 <code>he</code> 和
<code>The</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/cIg9zm/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[T]?he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/kPpO2x/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="号">2.4 <code>&#123;&#125;</code> 号</h3>
<p>?? 在正则表达式中 <code>&#123;&#125;</code>
是一个量词，常用来限定一个或一组字符可以重复出现的次数。 例如， 表达式
<code>[0-9]&#123;2,3&#125;</code> 匹配最少 2 位最多 3 位 0~9 的数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/juM86s/1">在线练习</a></p>
<p>我们可以省略第二个参数。 例如，<code>[0-9]&#123;2,&#125;</code> 匹配至少两位
0~9 的数字。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;2,&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/Gdy4w5/1">在线练习</a></p>
<p>如果逗号也省略掉则表示重复固定的次数。 例如，<code>[0-9]&#123;3&#125;</code>
匹配 3 位数字</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;[0-9]&#123;3&#125;&quot; =&gt; The number was 9.9997 but we rounded it off to 10.0.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/Sivu30/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="特征标群">2.5 <code>(...)</code> 特征标群</h3>
<p>?? 特征标群是一组写在 <code>(...)</code>
中的子模式。<code>(...)</code>
中包含的内容将会被看成一个整体，和数学中小括号（ ）的作用相同。例如,
表达式 <code>(ab)*</code> 匹配连续出现 0 或更多个
<code>ab</code>。如果没有使用 <code>(...)</code> ，那么表达式
<code>ab*</code> 将匹配连续出现 0 或更多个 <code>b</code>
。再比如之前说的 <code>&#123;&#125;</code>
是用来表示前面一个字符出现指定次数。但如果在 <code>&#123;&#125;</code>
前加上特征标群 <code>(...)</code> 则表示整个标群内的字符重复 N 次。</p>
<p>我们还可以在 <code>()</code> 中用或字符 <code>|</code>
表示或。例如，<code>(c|g|p)ar</code> 匹配 <code>car</code> 或
<code>gar</code> 或 <code>par</code>.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(c|g|p)ar&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/tUxrBG/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h3 id="或运算符">2.6 <code>|</code> 或运算符</h3>
<p>?? 或运算符就表示或，用作判断条件。</p>
<p>例如 <code>(T|t)he|car</code> 匹配 <code>(T|t)he</code> 或
<code>car</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he|car&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/fBXyX0/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="转码特殊字符">2.7 转码特殊字符</h3>
<p>?? 反斜线 <code>\</code> 在表达式中用于转码紧跟其后的字符。用于指定
<code>&#123; &#125; [ ] / \ + * . $ ^ | ?</code>
这些特殊字符。如果想要匹配这些特殊字符则要在其前面加上反斜线
<code>\</code>。</p>
<p>例如 <code>.</code>
是用来匹配除换行符外的所有字符的。如果想要匹配句子中的 <code>.</code>
则要写成 <code>\.</code> 以下这个例子
<code>\.?</code>是选择性匹配<code>.</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(f|c|m)at\.?&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/DOc5Nu/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="锚点">2.8 锚点</h3>
<p>在正则表达式中，想要匹配指定开头或结尾的字符串就要使用到锚点。<code>^</code>
指定开头，<code>$</code> 指定结尾。</p>
<p><strong>2.8.1 <code>^</code> 号</strong> ?? <code>^</code>
用来检查匹配的字符串是否在所匹配字符串的开头。</p>
<p>例如，在 <code>abc</code> 中使用表达式 <code>^a</code> 会得到结果
<code>a</code>。但如果使用 <code>^b</code>
将匹配不到任何结果。因为在字符串 <code>abc</code> 中并不是以
<code>b</code> 开头。</p>
<p>例如，<code>^(T|t)he</code> 匹配以 <code>The</code> 或
<code>the</code> 开头的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/5ljjgB/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;^(T|t)he&quot; =&gt; The car is parked in the garage.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/jXrKne/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<p><strong>2.8.2 <code>$</code> 号</strong> ?? 同理于 <code>^</code>
号，<code>$</code> 号用来匹配字符是否是最后一个。</p>
<p>例如，<code>(at\.)$</code> 匹配以 <code>at.</code> 结尾的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/y4Au4D/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(at\.)$&quot; =&gt; The fat cat. sat. on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/t0AkOd/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h2 id="简写字符集">3. 简写字符集</h2>
正则表达式提供一些常用的字符集简写。如下: ??
<table>
<thead>
<tr>
<th align="center">
简写
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
<code>.</code>
</td>
<td>
除换行符外的所有字符
</td>
</tr>
<tr>
<td align="center">
<code>\w</code>
</td>
<td>
匹配所有字母数字，等同于 <code><code>[a-zA-Z0-9_]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\W</code>
</td>
<td>
匹配所有非字母数字，即符号，等同于： <code><code>[^\w]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\d</code>
</td>
<td>
匹配数字： <code><code>[0-9]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\D</code>
</td>
<td>
匹配非数字： <code><code>[^\d]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\s</code>
</td>
<td>
匹配所有空格字符，等同于： <code><code>[\t\n\f\r\p&#123;Z&#125;]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\S</code>
</td>
<td>
匹配所有非空格字符： <code><code>[^\s]</code></code>
</td>
</tr>
<tr>
<td align="center">
<code>\f</code>
</td>
<td>
匹配一个换页符
</td>
</tr>
<tr>
<td align="center">
<code>\n</code>
</td>
<td>
匹配一个换行符
</td>
</tr>
<tr>
<td align="center">
<code>\r</code>
</td>
<td>
匹配一个回车符
</td>
</tr>
<tr>
<td align="center">
<code>\t</code>
</td>
<td>
匹配一个制表符
</td>
</tr>
<tr>
<td align="center">
<code>\v</code>
</td>
<td>
匹配一个垂直制表符
</td>
</tr>
<tr>
<td align="center">
<code>\p</code>
</td>
<td>
匹配 CR/LF（等同于 <code><code>\r\n</code></code>），用来匹配 DOS
行终止符
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-10-31,10,250-->
<h2 id="零宽度断言前后预查">4. 零宽度断言（前后预查）</h2>
<p><strong>先行断言和后发断言</strong>（合称
lookaround）都属于<strong>非捕获组</strong>（用于匹配模式，但==不包括在匹配列表中==）。当我们需要一个模式的前面或后面有另一个特定的模式时，就可以使用它们。</p>
<p>例如，我们希望从下面的输入字符串 <code>$4.44</code> 和
<code>$10.88</code> 中获得所有以 <code>$</code>
字符开头的数字，我们将使用以下的正则表达式
<code>(?&lt;=\$)[0-9\.]*</code>。意思是：获取所有包含 <code>.</code>
并且前面是 <code>$</code> 的数字。</p>
<p>零宽度断言如下：</p>
<table>
<thead>
<tr>
<th align="center">
符号
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
?=
</td>
<td>
正先行断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?!
</td>
<td>
负先行断言 - 排除
</td>
</tr>
<tr>
<td align="center">
?&lt;=
</td>
<td>
正后发断言 - 存在
</td>
</tr>
<tr>
<td align="center">
?&lt;!
</td>
<td>
负后发断言 - 排除
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-10-22,3,250-->
<h3 id="正先行断言">4.1 <code>?=...</code> 正先行断言</h3>
<p>?? <code>?=...</code> 正先行断言，表示第一部分表达式之后必须跟着
<code>?=...</code>定义的表达式。</p>
<p>返回结果只包含满足匹配条件的第一部分表达式。 定义一个正先行断言要使用
<code>()</code>。在括号内部使用一个问号和等号：
<code>(?=...)</code>。</p>
<p>正先行断言的内容写在括号中的等号后面。 例如，表达式
<code>(T|t)he(?=\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，在括号中我们又定义了正先行断言 <code>(?=\sfat)</code>
，即 <code>The</code> 和 <code>the</code> 后面紧跟着
<code>(空格)fat</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?=\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/IDDARt/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="负先行断言">4.2 <code>?!...</code> 负先行断言</h3>
<p>?? 负先行断言 <code>?!</code> 用于筛选所有匹配结果，筛选条件为
其后不跟随着断言中定义的格式。 <code>正先行断言</code> 定义和
<code>负先行断言</code> 一样，区别就是 <code>=</code> 替换成
<code>!</code> 也就是 <code>(?!...)</code>。</p>
<p>表达式 <code>(T|t)he(?!\sfat)</code> 匹配 <code>The</code> 和
<code>the</code>，且其后不跟着 <code>(空格)fat</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(T|t)he(?!\sfat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/V32Npg/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="正后发断言">4.3 <code>?&lt;= ...</code> 正后发断言</h3>
<p>?? 正后发断言 记作<code>(?&lt;=...)</code>
用于筛选所有匹配结果，筛选条件为 其前跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;=(T|t)he\s)(fat|mat)</code> 匹配
<code>fat</code> 和 <code>mat</code>，且其前跟着 <code>The</code> 或
<code>the</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;=(T|t)he\s)(fat|mat)&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/avH165/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h3 id="负后发断言">4.4 <code>?&lt;!...</code> 负后发断言</h3>
<p>?? 负后发断言 记作 <code>(?&lt;!...)</code>
用于筛选所有匹配结果，筛选条件为 其前不跟随着断言中定义的格式。
例如，表达式 <code>(?&lt;!(T|t)he\s)(cat)</code> 匹配
<code>cat</code>，且其前不跟着 <code>The</code> 或
<code>the</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;(?&lt;!(T|t)he\s)(cat)&quot; =&gt; The cat sat on cat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/8Efx5G/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h2 id="标志">5. 标志</h2>
<p>标志也叫模式修正符，因为它可以用来==修改表达式的搜索结果==。
这些标志可以任意的组合使用，它也是整个正则表达式的一部分。</p>
<table>
<thead>
<tr>
<th align="center">
标志
</th>
<th>
描述
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">
i
</td>
<td>
忽略大小写。
</td>
</tr>
<tr>
<td align="center">
g
</td>
<td>
全局搜索。
</td>
</tr>
<tr>
<td align="center">
m
</td>
<td>
多行修饰符：锚点元字符 <code>^</code> <code>$</code>
工作范围在每行的起始。
</td>
</tr>
</tbody>
</table>
<!--SR:!2022-10-31,10,250-->
<h3 id="忽略大小写-case-insensitive">5.1 忽略大小写 (Case
Insensitive)</h3>
<p>?? 修饰语 <code>i</code> 用于忽略大小写。 例如，表达式
<code>/The/gi</code> 表示在全局搜索 <code>The</code>，在后面的
<code>i</code> 将其条件修改为忽略大小写，则变成搜索 <code>the</code> 和
<code>The</code>，<code>g</code> 表示全局搜索。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;The&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/dpQyf9/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/The/gi&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/ahfiuh/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="全局搜索-global-search">5.2 全局搜索 (Global search)</h3>
<p>?? 修饰符 <code>g</code>
常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）。
例如，表达式 <code>/.(at)/g</code> 表示搜索 任意字符（除了换行）+
<code>at</code>，并返回全部结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/jnk6gM/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.(at)/g&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/dO1nef/1">在线练习</a>
<!--SR:!2022-10-22,3,250--></p>
<h3 id="多行修饰符-multiline">5.3 多行修饰符 (Multiline)</h3>
<p>?? 多行修饰符 <code>m</code> 常用于执行一个多行匹配。</p>
<p>像之前介绍的 <code>(^,$)</code>
用于检查格式是否是在待检测字符串的开头或结尾。但我们如果想要它在每行的开头和结尾生效，我们需要用到多行修饰符
<code>m</code>。</p>
<p>例如，表达式 <code>/at(.)?$/gm</code> 表示小写字符 <code>a</code>
后跟小写字符 <code>t</code> ，末尾可选除换行符外任意字符。根据
<code>m</code> 修饰符，现在表达式匹配每行的结尾。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/&quot; =&gt; The fat</span><br><span class="line">                cat sat</span><br><span class="line">                on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/hoGMkP/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/.at(.)?$/gm&quot; =&gt; The fat</span><br><span class="line">                  cat sat</span><br><span class="line">                  on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/E88WE2/1">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<h3 id="贪婪匹配与惰性匹配-greedy-vs-lazy-matching">6.
贪婪匹配与惰性匹配 (Greedy vs lazy matching)</h3>
<p>??
正则表达式默认采用贪婪匹配模式，在该模式下意味着会匹配尽可能长的子串。我们可以使用
<code>?</code> 将贪婪匹配模式转化为惰性匹配模式。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/AyAdgJ/1">在线练习</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;/(.*?at)/&quot; =&gt; The fat cat sat on the mat.</span><br></pre></td></tr></table></figure>
<p><a href="https://regex101.com/r/AyAdgJ/2">在线练习</a>
<!--SR:!2022-10-31,10,250--></p>
<p><strong>参考:</strong></p>
<p><a href="https://zhuanlan.zhihu.com/p/491620052">滚蛋吧，正则表达式！
- 知乎</a></p>
<p><a href="https://regex-vis.com/">Regex Vis</a></p>
<p><a href="https://regexlearn.com/zh-cn">Regex Learn -
逐步从零基础到高阶。</a></p>
<p><a href="https://regex101.com/">regex101: build, test, and debug
regex</a></p>
<p><a href="https://ihateregex.io/">i Hate Regex - The Regex Cheat
Sheet</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>开发</category>
        <category>Regex</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/8f6545d7e67011208be5a476458127a9efcf702f/</url>
    <content><![CDATA[<h1 id="双链测试笔记-3">双链测试笔记 3</h1>
<p>双链测试笔记 3 和 双链测试笔记 2 同名, 用于测试同名笔记的双链解析</p>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#链接">Obsidian+Hexo
Markdown 测试</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66/#Branch%202">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
        <category>deep</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>test</tag>
        <tag>hexo</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note1</title>
    <url>/a58ee0e911c1ffedefc347d0eac29b0f5fae0d41/</url>
    <content><![CDATA[<h1 id="双链测试笔记-1">双链测试笔记 1</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#公式">Obsidian+Hexo
Markdown 测试</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66/#Branch%202">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>test</tag>
        <tag>hexo</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>test_note2</title>
    <url>/a1051e510da0bf87d685c05b40001b7020d14a66/</url>
    <content><![CDATA[<h1 id="双链测试笔记-2">双链测试笔记 2</h1>
<p><a
href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/#图表">Obsidian+Hexo
Markdown 测试</a></p>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a href="../cf5e875dd18a1a28fcad3f7d9ef0f7f956287483">Obsidian+Hexo
Markdown 测试</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>test</tag>
        <tag>hexo</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>syncthing 如何移动同步仓库位置</title>
    <url>/93b271a4b50fa0d57f5c4585e735dc462fa40798/</url>
    <content><![CDATA[<p><strong>how to move syncthing folder position?</strong> ?? 1. Make
sure the folder is <mark style="background: #018bffA6;">up to
date</mark> with the remote. (probably not strictly necessary) 2.
<mark style="background: #018bffA6;">Stop Syncthing</mark> (Pausing the
folder could be enough) 3. <mark style="background: #018bffA6;">Copy the
folder</mark> to the external drive (e.g. using rsync or equivalent). 4.
<mark style="background: #018bffA6;">Edit the path in syncthing config
file</mark> (C:/Users/Administrator/AppData/Local/Syncthing/config.xml )
5. <mark style="background: #018bffA6;">Restart syncthing</mark> 6. Wait
for scanning and initial sync (exchanging and comparing metadata to be
sure the contents are the same as on remote) to finish. 7. if everything
works ok, delete the original folder <!--SR:!2022-10-24,21,250--></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Syncthing</category>
      </categories>
      <tags>
        <tag>srcard</tag>
        <tag>syncthing</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 参数传递的4种方式</title>
    <url>/dbf16f0359b132fca77e8472b47d86ac9249e5ef/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="http://h3blog.com/article/flask-params/">h3blog.com</a></p>
</blockquote>
<h2 id="get-方式传参">get 方式传参</h2>
<p>?? 代码： <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    </span><br></pre></td></tr></table></figure> 测试 curl
http://127.0.0.1:5000/name?name=www.h3blog.com <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -i -X GET http://127.0.0.1:5000/name?name=www.h3blog.com</span><br></pre></td></tr></table></figure> response:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure> <!--SR:!2022-11-24,51,250--></p>
<h2 id="post-方式传参">post 方式传参</h2>
<p>?? 代码 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/post_address_nft&quot;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)  </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">post_address_nft</span>():  </span><br><span class="line">	addresses = flask.request.values.get(<span class="string">&#x27;address_list&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">	</span><br></pre></td></tr></table></figure> 测试 curl http://127.0.0.1:5000/name
<strong>-d</strong> 'name=www.h3blog.com' <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST http://127.0.0.1:5000/name -d <span class="string">&#x27;name=www.h3blog.com&#x27;</span> -i</span><br></pre></td></tr></table></figure> response:
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure> <!--SR:!2022-11-28,54,250--></p>
<h2 id="url-路径传参">url 路径传参</h2>
<p>?? 代码 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br></pre></td></tr></table></figure> 测试 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -X GET http://127.0.0.1:5000/name/www.h3blog.com -i</span><br></pre></td></tr></table></figure> response: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello,www.h3blog.com</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-14,42,250--></p>
<h2 id="json-body-传参">json body 传参</h2>
<p>?? 代码 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = request.get_data(as_text=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure> 测试 curl <code>url</code> <strong>-H</strong>
<code>'Content-Type:application/json'</code> <strong>-d</strong>
<code>'json_string'</code> <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -X POST -H <span class="string">&#x27;Content-Type:application/json&#x27;</span> http://127.0.0.1:5000/json -d <span class="string">&#x27;&#123;&quot;name&quot;:&quot;www.h3blog.com&quot;&#125;&#x27;</span> -i</span><br></pre></td></tr></table></figure> response: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;www.h3blog.com&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-28,54,250--></p>
<h2 id="flask-传参汇总">Flask 传参汇总</h2>
<p>?? <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getName</span>():</span><br><span class="line">    name = request.args.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post方式传参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">postName</span>():</span><br><span class="line">    name = request.form.get(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># url路径参数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/name/&lt;name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">urlName</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello,&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ajax body json</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/json&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">json_body</span>():</span><br><span class="line">    data = flask.request.get_json()</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    jsonObj = json.loads(data)</span><br><span class="line">    <span class="keyword">return</span> jsonify(jsonObj)</span><br></pre></td></tr></table></figure> <!--SR:!2022-11-28,54,250--></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>srcard</tag>
      </tags>
  </entry>
  <entry>
    <title>Obsidian+Hexo Markdown 测试</title>
    <url>/cf5e875dd18a1a28fcad3f7d9ef0f7f956287483/</url>
    <content><![CDATA[<h1 id="双链测试">双链测试</h1>
<p><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></p>
<p><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></p>
<p><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></p>
<h1 id="markdown-示例">Markdown 示例</h1>
<p>Markdown简易入门教程<br />
使用方式：打开 Source Mode 就可以看到所有markdown格式，照着来用就行了  
 </p>
<h2 id="标题">标题</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 标题一</span><br><span class="line">## 标题二</span><br><span class="line">### 标题三</span><br><span class="line">#### 标题四</span><br><span class="line">##### 标题五</span><br><span class="line">###### 标题六</span><br></pre></td></tr></table></figure>
<h2 id="文本">文本</h2>
<p><strong>粗体</strong></p>
<blockquote>
<p>引用</p>
</blockquote>
<p><del>中划线</del></p>
<p><u>下划线</u></p>
<hr />
<p><mark style="background: #fefe00A6;">三空格+换行＝换行</mark>  </p>
<p><em>斜体</em></p>
<p><strong><em>斜体加粗体</em></strong></p>
<p><strong>常用markdown标记?</strong> ?? <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">**粗体**   </span><br><span class="line"></span><br><span class="line">&gt; 引用   </span><br><span class="line"></span><br><span class="line">~~中划线~~   </span><br><span class="line"></span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt; </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">三空格+换行＝换行   </span><br><span class="line"></span><br><span class="line">*斜体*   </span><br><span class="line"></span><br><span class="line">***斜体加粗体***   </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<!--SR:!2022-11-16,64,250--></p>
<h2 id="段落">段落</h2>
<h3 id="链接">链接</h3>
<p><a href="https://gitee.com/qiaogaojian">链接</a><br />
<a href="/download/ide-eval-resetter.zip">ide-eval-resetter.zip</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[链接](链接地址)  </span><br><span class="line">[[obsidian双链]]</span><br></pre></td></tr></table></figure>
<h3 id="图片">图片</h3>
<p><img src="/images/Pasted%20image%2020221009213236.png" /> <img
src="/images/0-2.png" /> <img
src="https://upload-images.jianshu.io/upload_images/3947109-1c9256e2c1f95874.png"
alt="image.png" /> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">![](远程图片地址)</span><br><span class="line">![[obsidian 图片]]</span><br><span class="line">![](obsidian 本地图片名字)</span><br></pre></td></tr></table></figure> ### 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWord</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;HelloWord&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="表格">表格</h3>
<table>
<thead>
<tr class="header">
<th>标题1</th>
<th>标题2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>行 1 列 1</td>
<td>行 1 列 2</td>
</tr>
<tr class="even">
<td>行 2 列 1</td>
<td>行 2 列 2</td>
</tr>
</tbody>
</table>
<p><strong>markdown 表格标记</strong><br />
?? <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| 标题1     | 标题2     |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 行 1 列 1 | 行 1 列 2 |</span><br><span class="line">| 行 2 列 1 | 行 2 列 2 |</span><br></pre></td></tr></table></figure> <!--SR:!2022-08-19,10,250--></p>
<h3 id="公式">公式</h3>
<p><strong>数学公式</strong><br />
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="built_in">$</span>y = x<span class="built_in">^</span>2<span class="built_in">$</span></span><br></pre></td></tr></table></figure> <span class="math inline">\(y=x^2\)</span></p>
<blockquote>
<p>注: Latex语法参考<a
href="../3ce969880cd0098d1862a98866197846a8c24d92">常用 LaTeX
公式符号</a></p>
</blockquote>
<h2 id="列表">列表</h2>
<h3 id="无序">无序</h3>
<ul>
<li>普通序列
<ul>
<li>1
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul></li>
<li>2</li>
<li>3</li>
</ul></li>
<li>普通序列</li>
<li>普通序列</li>
<li>普通序列</li>
</ul>
<h3 id="有序">有序</h3>
<ol type="1">
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
<li>数字序列</li>
</ol>
<h3 id="混合">混合</h3>
<ul>
<li>混合序列
<ul>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ul></li>
<li>混合序列</li>
<li>混合序列
<ol type="1">
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
<li>混合序列</li>
</ol></li>
<li>混合序列</li>
</ul>
<h3 id="任务">任务</h3>
<p><strong>任务列表</strong><br />
?? - [ ] 未完成<br />
- [x] 已完成<br />
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- [ ] 未完成   </span><br><span class="line">- [x] 已完成   </span><br></pre></td></tr></table></figure> <!--SR:!2022-08-16,7,250--></p>
<h2 id="图表">图表</h2>
<strong>mermaid 流程图</strong><br />
?? <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A--&gt;B</span><br><span class="line">B--&gt;c</span><br></pre></td></tr></table></figure>
<pre class="mermaid">graph LR
A-->B
B-->c</pre>
<!--SR:!2022-11-07,57,250-->
<strong>mermaid 顺序图</strong><br />
?? <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">A-&gt;&gt;B: How are you?</span><br><span class="line">B-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure>
<pre class="mermaid">sequenceDiagram
A->>B: How are you?
B->>A: Great!</pre>
<!--SR:!2022-11-15,64,250-->
<strong>mermaid 甘特图</strong><br />
?? <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">dateFormat YYYY-MM-DD</span><br><span class="line"></span><br><span class="line">section S1</span><br><span class="line">T1: 2014-01-01, 3d</span><br><span class="line"></span><br><span class="line">section S2</span><br><span class="line">T2: 2014-01-11, 6d</span><br><span class="line"></span><br><span class="line">section S3</span><br><span class="line">T3: 2014-01-02, 9d</span><br></pre></td></tr></table></figure>
<pre class="mermaid">gantt
dateFormat YYYY-MM-DD

section S1
T1: 2014-01-01, 3d

section S2
T2: 2014-01-11, 6d

section S3
T3: 2014-01-02, 9d</pre>
<!--SR:!2022-10-11,40,250-->
<h2 id="注脚">注脚</h2>
<p>Here is a simple footnote<a href="#fn1" class="footnote-ref"
id="fnref1" role="doc-noteref"><sup>1</sup></a>.</p>
<p>A footnote can also have multiple lines<a href="#fn2"
class="footnote-ref" id="fnref2"
role="doc-noteref"><sup>2</sup></a>.</p>
<p>You can also use words, to fit your writing style more closely<a
href="#fn3" class="footnote-ref" id="fnref3"
role="doc-noteref"><sup>3</sup></a>.</p>
<p><strong>Backlinks:</strong></p>
<ul>
<li><a
href="../a58ee0e911c1ffedefc347d0eac29b0f5fae0d41">test_note1</a></li>
<li><a
href="../a1051e510da0bf87d685c05b40001b7020d14a66">test_note2</a></li>
<li><a
href="../8f6545d7e67011208be5a476458127a9efcf702f">test_note2</a></li>
</ul>
<section class="footnotes footnotes-end-of-document"
role="doc-endnotes">
<hr />
<ol>
<li id="fn1" role="doc-endnote"><p>My reference.<a href="#fnref1"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn2" role="doc-endnote"><p>Every new line should be prefixed
with 2 spaces.<br />
This allows you to have a footnote with multiple lines.<a href="#fnref2"
class="footnote-back" role="doc-backlink">↩︎</a></p></li>
<li id="fn3" role="doc-endnote"><p>Named footnotes will still render
with numbers instead of the text but allow easier identification and
linking.<br />
This footnote also has been made with a different syntax using 4 spaces
for new lines.<a href="#fnref3" class="footnote-back"
role="doc-backlink">↩︎</a></p></li>
</ol>
</section>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>9.输出</category>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>test</tag>
        <tag>hexo</tag>
        <tag>obsidian</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Next主题添加访问量统计功能</title>
    <url>/f25ed57e4b953e28746c6650d2c02252af68ae66/</url>
    <content><![CDATA[<h2 id="开启不蒜子访问量统计功能">1. 开启不蒜子访问量统计功能</h2>
<p>在<code>themes/next/_config.yml</code> 添加属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 是否开启访问量统计功能(不蒜子)</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h2 id="解决live2d冲突问题">2、解决live2d冲突问题</h2>
<p>在<code>themes/next/layout/_partial/footer.njk</code>中隐藏busuanzi组件的外层span
<img src="/images/Pasted%20image%2020221017182619.png" /></p>
<p><strong>参考:</strong></p>
<p><a
href="https://www.jianshu.com/p/c9f83d5b893a">Hexo博客添加访问量统计 -
简书</a></p>
<p><a
href="https://moguangpeng998.github.io/2020/06/13/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%8D%E8%92%9C%E5%AD%90%E5%92%8Clive2d%E7%9C%8B%E6%9D%BF%E5%A8%98%E5%86%B2%E7%AA%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">Hexo博客不蒜子和live2d看板娘冲突问题解决方案
| MoonBird博客</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>5.工具</category>
        <category>效率</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Comprehensive Python Cheatsheet</title>
    <url>/9c826b624344960b78729fb44cbb2bc900da255b/</url>
    <content><![CDATA[<blockquote>
<p>原文地址 <a
href="https://github.com/gto76/python-cheatsheet">github.com</a></p>
</blockquote>
<blockquote>
<p>Comprehensive Python Cheatsheet. Contribute to
gto76/python-cheatsheet development by creating an acc......</p>
</blockquote>
<h1 id="comprehensive-python-cheatsheet">Comprehensive Python
Cheatsheet</h1>
<p><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/image_888.jpeg" /></p>
<h2 id="contents">Contents</h2>
<p><strong>1. Collections:</strong> <strong><a
href="#list"><code>List</code></a>,</strong> <strong><a
href="#dictionary"><code>Dictionary</code></a>,</strong> <strong><a
href="#set"><code>Set</code></a>,</strong> <strong><a
href="#tuple"><code>Tuple</code></a>,</strong> <strong><a
href="#range"><code>Range</code></a>,</strong> <strong><a
href="#enumerate"><code>Enumerate</code></a>,</strong> <strong><a
href="#iterator"><code>Iterator</code></a>,</strong> <strong><a
href="#generator"><code>Generator</code></a>.</strong><br />
<strong>2. Types:</strong> <strong><a
href="#type"><code>Type</code></a>,</strong> <strong><a
href="#string"><code>String</code></a>,</strong> <strong><a
href="#regex"><code>Regular_Exp</code></a>,</strong> <strong><a
href="#format"><code>Format</code></a>,</strong> <strong><a
href="#numbers-1"><code>Numbers</code></a>,</strong> <strong><a
href="#combinatorics"><code>Combinatorics</code></a>,</strong>
<strong><a href="#datetime"><code>Datetime</code></a>.</strong><br />
<strong>3. Syntax:</strong> <strong><a
href="#arguments"><code>Args</code></a>,</strong> <strong><a
href="#inline"><code>Inline</code></a>,</strong> <strong><a
href="#imports"><code>Import</code></a>,</strong> <strong><a
href="#decorator"><code>Decorator</code></a>,</strong> <strong><a
href="#class"><code>Class</code></a>,</strong> <strong><a
href="#duck-types"><code>Duck_Types</code></a>,</strong> <strong><a
href="#enum"><code>Enum</code></a>,</strong> <strong><a
href="#exceptions"><code>Exception</code></a>.</strong><br />
<strong>4. System:</strong> <strong><a
href="#exit"><code>Exit</code></a>,</strong> <strong><a
href="#print"><code>Print</code></a>,</strong> <strong><a
href="#input"><code>Input</code></a>,</strong> <strong><a
href="#command-line-arguments"><code>Command_Line_Arguments</code></a>,</strong>
<strong><a href="#open"><code>Open</code></a>,</strong> <strong><a
href="#paths"><code>Path</code></a>,</strong> <strong><a
href="#os-commands"><code>OS_Commands</code></a>.</strong><br />
<strong>5. Data:</strong> <strong><a
href="#json"><code>JSON</code></a>,</strong> <strong><a
href="#pickle"><code>Pickle</code></a>,</strong> <strong><a
href="#csv"><code>CSV</code></a>,</strong> <strong><a
href="#sqlite"><code>SQLite</code></a>,</strong> <strong><a
href="#bytes"><code>Bytes</code></a>,</strong> <strong><a
href="#struct"><code>Struct</code></a>,</strong> <strong><a
href="#array"><code>Array</code></a>,</strong> <strong><a
href="#memory-view"><code>Memory_View</code></a>,</strong> <strong><a
href="#deque"><code>Deque</code></a>.</strong><br />
<strong>6. Advanced:</strong> <strong><a
href="#threading"><code>Threading</code></a>,</strong> <strong><a
href="#operator"><code>Operator</code></a>,</strong> <strong><a
href="#introspection"><code>Introspection</code></a>,</strong>
<strong><a
href="#metaprogramming"><code>Metaprograming</code></a>,</strong>
<strong><a href="#eval"><code>Eval</code></a>,</strong> <strong><a
href="#coroutines"><code>Coroutines</code></a>.</strong><br />
<strong>7. Libraries:</strong> <strong><a
href="#progress-bar"><code>Progress_Bar</code></a>,</strong> <strong><a
href="#plot"><code>Plot</code></a>,</strong> <strong><a
href="#table"><code>Table</code></a>,</strong> <strong><a
href="#curses"><code>Curses</code></a>,</strong> <strong><a
href="#logging"><code>Logging</code></a>,</strong> <strong><a
href="#scraping"><code>Scraping</code></a>,</strong> <strong><a
href="#web"><code>Web</code></a>,</strong> <strong><a
href="#profiling"><code>Profile</code></a>,</strong><br />
<strong><a href="#numpy"><code>NumPy</code></a>,</strong> <strong><a
href="#image"><code>Image</code></a>,</strong> <strong><a
href="#audio"><code>Audio</code></a>,</strong> <strong><a
href="#pygame"><code>Games</code></a>,</strong> <strong><a
href="#pandas"><code>Data</code></a>.</strong></p>
<h2 id="main"><a href="#main"></a>Main</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if __name__ == &#x27;__main__&#x27;:     # Runs main() if file wasn&#x27;t imported.</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="list"><a href="#list"></a>List</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;list&gt;[&lt;slice&gt;]       # Or: &lt;list&gt;[from_inclusive : to_exclusive : ±step]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.append(&lt;el&gt;)            # Or: &lt;list&gt; += [&lt;el&gt;]</span><br><span class="line">&lt;list&gt;.extend(&lt;collection&gt;)    # Or: &lt;list&gt; += &lt;collection&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.sort()                  # Sorts in ascending order.</span><br><span class="line">&lt;list&gt;.reverse()               # Reverses the list in-place.</span><br><span class="line">&lt;list&gt; = sorted(&lt;collection&gt;)  # Returns a new sorted list.</span><br><span class="line">&lt;iter&gt; = reversed(&lt;list&gt;)      # Returns reversed iterator.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum_of_elements  = sum(&lt;collection&gt;)</span><br><span class="line">elementwise_sum  = [sum(pair) for pair in zip(list_a, list_b)]</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=lambda el: el[1])</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=lambda el: (el[1], el[0]))</span><br><span class="line">flatter_list     = list(itertools.chain.from_iterable(&lt;list&gt;))</span><br><span class="line">product_of_elems = functools.reduce(lambda out, el: out * el, &lt;collection&gt;)</span><br><span class="line">list_of_chars    = list(&lt;str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>For details about sorted(), min() and max() see <a
href="#sortable">sortable</a>.</strong></li>
<li><strong>Module <a href="#operator">operator</a> provides functions
itemgetter() and mul() that offer the same functionality as <a
href="#lambda">lambda</a> expressions above.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;.insert(&lt;int&gt;, &lt;el&gt;)     # Inserts item at index and moves the rest to the right.</span><br><span class="line">&lt;el&gt;  = &lt;list&gt;.pop([&lt;int&gt;])    # Removes and returns item at index or from the end.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.count(&lt;el&gt;)     # Returns number of occurrences. Also works on strings.</span><br><span class="line">&lt;int&gt; = &lt;list&gt;.index(&lt;el&gt;)     # Returns index of the first occurrence or raises ValueError.</span><br><span class="line">&lt;list&gt;.remove(&lt;el&gt;)            # Removes first occurrence of the item or raises ValueError.</span><br><span class="line">&lt;list&gt;.clear()                 # Removes all items. Also works on dictionary and set.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="dictionary"><a href="#dictionary"></a>Dictionary</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt; = &lt;dict&gt;.keys()                          # Coll. of keys that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.values()                        # Coll. of values that reflects changes.</span><br><span class="line">&lt;view&gt; = &lt;dict&gt;.items()                         # Coll. of key-value tuples that reflects chgs.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">value  = &lt;dict&gt;.get(key, default=None)          # Returns default if key is missing.</span><br><span class="line">value  = &lt;dict&gt;.setdefault(key, default=None)   # Returns and writes default if key is missing.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(&lt;type&gt;)        # Returns a dict with default value of type.</span><br><span class="line">&lt;dict&gt; = collections.defaultdict(lambda: 1)     # Returns a dict with default value 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = dict(&lt;collection&gt;)                     # Creates a dict from coll. of key-value pairs.</span><br><span class="line">&lt;dict&gt; = dict(zip(keys, values))                # Creates a dict from two collections.</span><br><span class="line">&lt;dict&gt; = dict.fromkeys(keys [, value])          # Creates a dict from collection of keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt;.update(&lt;dict&gt;)                           # Adds items. Replaces ones with matching keys.</span><br><span class="line">value = &lt;dict&gt;.pop(key)                         # Removes item or raises KeyError.</span><br><span class="line">&#123;k for k, v in &lt;dict&gt;.items() if v == value&#125;    # Returns set of keys that point to the value.</span><br><span class="line">&#123;k: v for k, v in &lt;dict&gt;.items() if k in keys&#125;  # Returns a dictionary, filtered by keys.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="counter"><a href="#counter"></a>Counter</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import Counter</span><br><span class="line">&gt;&gt;&gt; colors = [&#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;blue&#x27;, &#x27;red&#x27;, &#x27;red&#x27;]</span><br><span class="line">&gt;&gt;&gt; counter = Counter(colors)</span><br><span class="line">&gt;&gt;&gt; counter[&#x27;yellow&#x27;] += 1</span><br><span class="line">Counter(&#123;&#x27;blue&#x27;: 3, &#x27;red&#x27;: 2, &#x27;yellow&#x27;: 1&#125;)</span><br><span class="line">&gt;&gt;&gt; counter.most_common()[0]</span><br><span class="line">(&#x27;blue&#x27;, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="set"><a href="#set"></a>Set</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt; = set()                                   # `&#123;&#125;` returns a dictionary.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;.add(&lt;el&gt;)                                 # Or: &lt;set&gt; |= &#123;&lt;el&gt;&#125;</span><br><span class="line">&lt;set&gt;.update(&lt;collection&gt; [, ...])              # Or: &lt;set&gt; |= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;set&gt;  = &lt;set&gt;.union(&lt;coll.&gt;)                   # Or: &lt;set&gt; | &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.intersection(&lt;coll.&gt;)            # Or: &lt;set&gt; &amp; &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.difference(&lt;coll.&gt;)              # Or: &lt;set&gt; - &lt;set&gt;</span><br><span class="line">&lt;set&gt;  = &lt;set&gt;.symmetric_difference(&lt;coll.&gt;)    # Or: &lt;set&gt; ^ &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issubset(&lt;coll.&gt;)                # Or: &lt;set&gt; &lt;= &lt;set&gt;</span><br><span class="line">&lt;bool&gt; = &lt;set&gt;.issuperset(&lt;coll.&gt;)              # Or: &lt;set&gt; &gt;= &lt;set&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;set&gt;.pop()                              # Raises KeyError if empty.</span><br><span class="line">&lt;set&gt;.remove(&lt;el&gt;)                              # Raises KeyError if missing.</span><br><span class="line">&lt;set&gt;.discard(&lt;el&gt;)                             # Doesn&#x27;t raise an error.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="frozen-set"><a href="#frozen-set"></a>Frozen Set</h3>
<ul>
<li><strong>Is immutable and hashable.</strong></li>
<li><strong>That means it can be used as a key in a dictionary or as an
element in a set.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;frozenset&gt; = frozenset(&lt;collection&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="tuple"><a href="#tuple"></a>Tuple</h2>
<p><strong>Tuple is an immutable and hashable list.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tuple&gt; = ()                                # Empty tuple.</span><br><span class="line">&lt;tuple&gt; = (&lt;el&gt;,)                           # Or: &lt;el&gt;,</span><br><span class="line">&lt;tuple&gt; = (&lt;el_1&gt;, &lt;el_2&gt; [, ...])          # Or: &lt;el_1&gt;, &lt;el_2&gt; [, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="named-tuple"><a href="#named-tuple"></a>Named Tuple</h3>
<p><strong>Tuple's subclass with named elements.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import namedtuple</span><br><span class="line">&gt;&gt;&gt; Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)</span><br><span class="line">&gt;&gt;&gt; p = Point(1, y=2)</span><br><span class="line">Point(x=1, y=2)</span><br><span class="line">&gt;&gt;&gt; p[0]</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; p.x</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; getattr(p, &#x27;y&#x27;)</span><br><span class="line">2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="range"><a href="#range"></a>Range</h2>
<p><strong>Immutable and hashable sequence of integers.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;range&gt; = range(stop)                       # range(to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop)                # range(from_inclusive, to_exclusive)</span><br><span class="line">&lt;range&gt; = range(start, stop, ±step)         # range(from_inclusive, to_exclusive, ±step_size)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [i for i in range(3)]</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="enumerate"><a href="#enumerate"></a>Enumerate</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for i, el in enumerate(&lt;collection&gt; [, i_start]):</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="iterator"><a href="#iterator"></a>Iterator</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = iter(&lt;collection&gt;)                 # `iter(&lt;iter&gt;)` returns unmodified iterator.</span><br><span class="line">&lt;iter&gt; = iter(&lt;function&gt;, to_exclusive)     # A sequence of return values until &#x27;to_exclusive&#x27;.</span><br><span class="line">&lt;el&gt;   = next(&lt;iter&gt; [, default])           # Raises StopIteration or returns &#x27;default&#x27; on end.</span><br><span class="line">&lt;list&gt; = list(&lt;iter&gt;)                       # Returns a list of iterator&#x27;s remaining elements.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="itertools"><a href="#itertools"></a>Itertools</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.count(start=0, step=1)          # Returns updated value endlessly. Accepts floats.</span><br><span class="line">&lt;iter&gt; = it.repeat(&lt;el&gt; [, times])          # Returns element endlessly or &#x27;times&#x27; times.</span><br><span class="line">&lt;iter&gt; = it.cycle(&lt;collection&gt;)             # Repeats the sequence endlessly.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.chain(&lt;coll&gt;, &lt;coll&gt; [, ...])   # Empties collections in order (figuratively).</span><br><span class="line">&lt;iter&gt; = it.chain.from_iterable(&lt;coll&gt;)     # Empties collections inside a collection in order.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, to_exclusive)    # Only returns first &#x27;to_exclusive&#x27; elements.</span><br><span class="line">&lt;iter&gt; = it.islice(&lt;coll&gt;, from_inc, …)     # `to_exclusive, +step_size`. Indices can be None.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="generator"><a href="#generator"></a>Generator</h2>
<ul>
<li><strong>Any function that contains a yield statement returns a
generator.</strong></li>
<li><strong>Generators and iterators are interchangeable.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def count(start, step):</span><br><span class="line">    while True:</span><br><span class="line">        yield start</span><br><span class="line">        start += step</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = count(10, 2)</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(10, 12, 14)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="type"><a href="#type"></a>Type</h2>
<ul>
<li><strong>Everything is an object.</strong></li>
<li><strong>Every object has a type.</strong></li>
<li><strong>Type and class are synonymous.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;type&gt; = type(&lt;el&gt;)                          # Or: &lt;el&gt;.__class__</span><br><span class="line">&lt;bool&gt; = isinstance(&lt;el&gt;, &lt;type&gt;)            # Or: issubclass(type(&lt;el&gt;), &lt;type&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; type(&#x27;a&#x27;), &#x27;a&#x27;.__class__, str</span><br><span class="line">(&lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;, &lt;class &#x27;str&#x27;&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="some-types-do-not-have-built-in-names-so-they-must-be-imported"><a
href="#some-types-do-not-have-built-in-names-so-they-must-be-imported"></a>Some
types do not have built-in names, so they must be imported:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from types import FunctionType, MethodType, LambdaType, GeneratorType, ModuleType</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="abstract-base-classes"><a
href="#abstract-base-classes"></a>Abstract Base Classes</h3>
<p><strong>Each abstract base class specifies a set of virtual
subclasses. These classes are then recognized by isinstance() and
issubclass() as subclasses of the ABC, although they are really not. ABC
can also manually decide whether or not a specific class is its virtual
subclass, usually based on which methods the class has implemented. For
instance, Iterable ABC looks for method iter(), while Collection ABC
looks for iter(), contains() and len().</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections.abc import Iterable, Collection, Sequence</span><br><span class="line">&gt;&gt;&gt; isinstance([1, 2, 3], Iterable)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">|                  |  Iterable  | Collection |  Sequence  |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line">| list, range, str |    yes     |    yes     |    yes     |</span><br><span class="line">| dict, set        |    yes     |    yes     |            |</span><br><span class="line">| iter             |    yes     |            |            |</span><br><span class="line">+------------------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from numbers import Number, Complex, Real, Rational, Integral</span><br><span class="line">&gt;&gt;&gt; isinstance(123, Number)</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">|                    |  Number  |  Complex |   Real   | Rational | Integral |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line">| int                |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| fractions.Fraction |   yes    |   yes    |   yes    |   yes    |          |</span><br><span class="line">| float              |   yes    |   yes    |   yes    |          |          |</span><br><span class="line">| complex            |   yes    |   yes    |          |          |          |</span><br><span class="line">| decimal.Decimal    |   yes    |          |          |          |          |</span><br><span class="line">+--------------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="string"><a href="#string"></a>String</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.strip()                       # Strips all whitespace characters from both ends.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.strip(&#x27;&lt;chars&gt;&#x27;)              # Strips all passed characters from both ends.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = &lt;str&gt;.split()                       # Splits on one or more whitespace characters.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.split(sep=None, maxsplit=-1)  # Splits on &#x27;sep&#x27; str at most &#x27;maxsplit&#x27; times.</span><br><span class="line">&lt;list&gt; = &lt;str&gt;.splitlines(keepends=False)    # On [\n\r\f\v\x1c-\x1e\x85\u2028\u2029] and \r\n.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.join(&lt;coll_of_strings&gt;)       # Joins elements using string as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;sub_str&gt; in &lt;str&gt;                  # Checks if string contains a substring.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.startswith(&lt;sub_str&gt;)         # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;bool&gt; = &lt;str&gt;.endswith(&lt;sub_str&gt;)           # Pass tuple of strings for multiple options.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.find(&lt;sub_str&gt;)               # Returns start index of the first match or -1.</span><br><span class="line">&lt;int&gt;  = &lt;str&gt;.index(&lt;sub_str&gt;)              # Same, but raises ValueError if missing.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = &lt;str&gt;.replace(old, new [, count])   # Replaces &#x27;old&#x27; with &#x27;new&#x27; at most &#x27;count&#x27; times.</span><br><span class="line">&lt;str&gt;  = &lt;str&gt;.translate(&lt;table&gt;)            # Use `str.maketrans(&lt;dict&gt;)` to generate table.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = chr(&lt;int&gt;)                          # Converts int to Unicode character.</span><br><span class="line">&lt;int&gt;  = ord(&lt;str&gt;)                          # Converts Unicode character to int.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Also: <code>'lstrip()'</code>, <code>'rstrip()'</code> and
<code>'rsplit()'</code>.</strong></li>
<li><strong>Also: <code>'lower()'</code>, <code>'upper()'</code>,
<code>'capitalize()'</code> and <code>'title()'</code>.</strong></li>
</ul>
<h3 id="property-methods"><a href="#property-methods"></a>Property
Methods</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">|               | [ !#$%…] | [a-zA-Z] |  [¼½¾]   |  [²³¹]   |  [0-9]   |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line">| isprintable() |   yes    |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isalnum()     |          |   yes    |   yes    |   yes    |   yes    |</span><br><span class="line">| isnumeric()   |          |          |   yes    |   yes    |   yes    |</span><br><span class="line">| isdigit()     |          |          |          |   yes    |   yes    |</span><br><span class="line">| isdecimal()   |          |          |          |          |   yes    |</span><br><span class="line">+---------------+----------+----------+----------+----------+----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Also: <code>'isspace()'</code> checks for
<code>'[ \t\n\r\f\v\x1c-\x1f\x85\u2000…]'</code>.</strong></li>
</ul>
<h2 id="regex"><a href="#regex"></a>Regex</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">&lt;str&gt;   = re.sub(&lt;regex&gt;, new, text, count=0)  # Substitutes all occurrences with &#x27;new&#x27;.</span><br><span class="line">&lt;list&gt;  = re.findall(&lt;regex&gt;, text)            # Returns all occurrences as strings.</span><br><span class="line">&lt;list&gt;  = re.split(&lt;regex&gt;, text, maxsplit=0)  # Use brackets in regex to include the matches.</span><br><span class="line">&lt;Match&gt; = re.search(&lt;regex&gt;, text)             # Searches for first occurrence of the pattern.</span><br><span class="line">&lt;Match&gt; = re.match(&lt;regex&gt;, text)              # Searches only at the beginning of the text.</span><br><span class="line">&lt;iter&gt;  = re.finditer(&lt;regex&gt;, text)           # Returns all occurrences as Match objects.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Argument 'new' can be a function that accepts a Match object
and returns a string.</strong></li>
<li><strong>Search() and match() return None if they can't find a
match.</strong></li>
<li><strong>Argument <code>'flags=re.IGNORECASE'</code> can be used with
all functions.</strong></li>
<li><strong>Argument <code>'flags=re.MULTILINE'</code> makes
<code>'^'</code> and <code>'$'</code> match the start/end of each
line.</strong></li>
<li><strong>Argument <code>'flags=re.DOTALL'</code> makes dot also
accept the <code>'\n'</code>.</strong></li>
<li><strong>Use <code>r'\1'</code> or <code>'\\1'</code> for
backreference (<code>'\1'</code> returns a character with octal code
1).</strong></li>
<li><strong>Add <code>'?'</code> after <code>'*'</code> and
<code>'+'</code> to make them non-greedy.</strong></li>
</ul>
<h3 id="match-object"><a href="#match-object"></a>Match Object</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;   = &lt;Match&gt;.group()                      # Returns the whole match. Also group(0).</span><br><span class="line">&lt;str&gt;   = &lt;Match&gt;.group(1)                     # Returns part in the first bracket.</span><br><span class="line">&lt;tuple&gt; = &lt;Match&gt;.groups()                     # Returns all bracketed parts.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.start()                      # Returns start index of the match.</span><br><span class="line">&lt;int&gt;   = &lt;Match&gt;.end()                        # Returns exclusive end index of the match.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="special-sequences"><a href="#special-sequences"></a>Special
Sequences</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;\d&#x27; == &#x27;[0-9]&#x27;                                # Matches decimal characters.</span><br><span class="line">&#x27;\w&#x27; == &#x27;[a-zA-Z0-9_]&#x27;                         # Matches alphanumerics and underscore.</span><br><span class="line">&#x27;\s&#x27; == &#x27;[ \t\n\r\f\v]&#x27;                        # Matches whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>By default, decimal characters, alphanumerics and
whitespaces from all alphabets are matched unless
<code>'flags=re.ASCII'</code> argument is used.</strong></li>
<li><strong>As shown above, it restricts all special sequence matches to
the first 128 characters and prevents <code>'\s'</code> from accepting
<code>'[\x1c-\x1f]'</code> (the so-called separator
characters).</strong></li>
<li><strong>Use a capital letter for negation (all non-ASCII characters
will be matched when used in combination with ASCII flag).</strong></li>
</ul>
<h2 id="format"><a href="#format"></a>Format</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = f&#x27;&#123;&lt;el_1&gt;&#125;, &#123;&lt;el_2&gt;&#125;&#x27;            # Curly brackets can also contain expressions.</span><br><span class="line">&lt;str&gt; = &#x27;&#123;&#125;, &#123;&#125;&#x27;.format(&lt;el_1&gt;, &lt;el_2&gt;)  # Or: &#x27;&#123;0&#125;, &#123;a&#125;&#x27;.format(&lt;el_1&gt;, a=&lt;el_2&gt;)</span><br><span class="line">&lt;str&gt; = &#x27;%s, %s&#x27; % (&lt;el_1&gt;, &lt;el_2&gt;)      # Redundant and inferior C style formatting.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="attributes"><a href="#attributes"></a>Attributes</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Person = collections.namedtuple(&#x27;Person&#x27;, &#x27;name height&#x27;)</span><br><span class="line">&gt;&gt;&gt; person = Person(&#x27;Jean-Luc&#x27;, 187)</span><br><span class="line">&gt;&gt;&gt; f&#x27;&#123;person.height&#125;&#x27;</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line">&gt;&gt;&gt; &#x27;&#123;p.height&#125;&#x27;.format(p=person)</span><br><span class="line">&#x27;187&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="general-options"><a href="#general-options"></a>General
Options</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&lt;el&gt;:&lt;10&#125;                               # &#x27;&lt;el&gt;      &#x27;</span><br><span class="line">&#123;&lt;el&gt;:^10&#125;                               # &#x27;   &lt;el&gt;   &#x27;</span><br><span class="line">&#123;&lt;el&gt;:&gt;10&#125;                               # &#x27;      &lt;el&gt;&#x27;</span><br><span class="line">&#123;&lt;el&gt;:.&lt;10&#125;                              # &#x27;&lt;el&gt;......&#x27;</span><br><span class="line">&#123;&lt;el&gt;:0&#125;                                 # &#x27;&lt;el&gt;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Options can be generated dynamically:
<code>f'&#123;&lt;el&gt;:&#123;&lt;str/int&gt;&#125;[…]&#125;'</code>.</strong></li>
<li><strong>Adding <code>'!r'</code> before the colon converts object to
string by calling its <a href="#class">repr()</a> method.</strong></li>
</ul>
<h3 id="strings"><a href="#strings"></a>Strings</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;abcde&#x27;:10&#125;                             # &#x27;abcde     &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:10.3&#125;                           # &#x27;abc       &#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;:.3&#125;                             # &#x27;abc&#x27;</span><br><span class="line">&#123;&#x27;abcde&#x27;!r:10&#125;                           # &quot;&#x27;abcde&#x27;   &quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="numbers"><a href="#numbers"></a>Numbers</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;123456:10&#125;                              # &#x27;    123456&#x27;</span><br><span class="line">&#123;123456:10,&#125;                             # &#x27;   123,456&#x27;</span><br><span class="line">&#123;123456:10_&#125;                             # &#x27;   123_456&#x27;</span><br><span class="line">&#123;123456:+10&#125;                             # &#x27;   +123456&#x27;</span><br><span class="line">&#123;123456:=+10&#125;                            # &#x27;+   123456&#x27;</span><br><span class="line">&#123;123456: &#125;                               # &#x27; 123456&#x27;</span><br><span class="line">&#123;-123456: &#125;                              # &#x27;-123456&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="floats"><a href="#floats"></a>Floats</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;1.23456:10.3&#125;                           # &#x27;      1.23&#x27;</span><br><span class="line">&#123;1.23456:10.3f&#125;                          # &#x27;     1.235&#x27;</span><br><span class="line">&#123;1.23456:10.3e&#125;                          # &#x27; 1.235e+00&#x27;</span><br><span class="line">&#123;1.23456:10.3%&#125;                          # &#x27;  123.456%&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="comparison-of-presentation-types"><a
href="#comparison-of-presentation-types"></a>Comparison of presentation
types:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |    &#123;&lt;float&gt;&#125;   |   &#123;&lt;float&gt;:f&#125;  |   &#123;&lt;float&gt;:e&#125;  |   &#123;&lt;float&gt;:%&#125;  |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |   &#x27;5.6789e-05&#x27; |    &#x27;0.000057&#x27;  | &#x27;5.678900e-05&#x27; |    &#x27;0.005679%&#x27; |</span><br><span class="line">|  0.00056789  |   &#x27;0.00056789&#x27; |    &#x27;0.000568&#x27;  | &#x27;5.678900e-04&#x27; |    &#x27;0.056789%&#x27; |</span><br><span class="line">|  0.0056789   |   &#x27;0.0056789&#x27;  |    &#x27;0.005679&#x27;  | &#x27;5.678900e-03&#x27; |    &#x27;0.567890%&#x27; |</span><br><span class="line">|  0.056789    |   &#x27;0.056789&#x27;   |    &#x27;0.056789&#x27;  | &#x27;5.678900e-02&#x27; |    &#x27;5.678900%&#x27; |</span><br><span class="line">|  0.56789     |   &#x27;0.56789&#x27;    |    &#x27;0.567890&#x27;  | &#x27;5.678900e-01&#x27; |   &#x27;56.789000%&#x27; |</span><br><span class="line">|  5.6789      |   &#x27;5.6789&#x27;     |    &#x27;5.678900&#x27;  | &#x27;5.678900e+00&#x27; |  &#x27;567.890000%&#x27; |</span><br><span class="line">| 56.789       |  &#x27;56.789&#x27;      |   &#x27;56.789000&#x27;  | &#x27;5.678900e+01&#x27; | &#x27;5678.900000%&#x27; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|              |  &#123;&lt;float&gt;:.2&#125;  |  &#123;&lt;float&gt;:.2f&#125; |  &#123;&lt;float&gt;:.2e&#125; |  &#123;&lt;float&gt;:.2%&#125; |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line">|  0.000056789 |    &#x27;5.7e-05&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-05&#x27;   |      &#x27;0.01%&#x27;   |</span><br><span class="line">|  0.00056789  |    &#x27;0.00057&#x27;   |      &#x27;0.00&#x27;    |   &#x27;5.68e-04&#x27;   |      &#x27;0.06%&#x27;   |</span><br><span class="line">|  0.0056789   |    &#x27;0.0057&#x27;    |      &#x27;0.01&#x27;    |   &#x27;5.68e-03&#x27;   |      &#x27;0.57%&#x27;   |</span><br><span class="line">|  0.056789    |    &#x27;0.057&#x27;     |      &#x27;0.06&#x27;    |   &#x27;5.68e-02&#x27;   |      &#x27;5.68%&#x27;   |</span><br><span class="line">|  0.56789     |    &#x27;0.57&#x27;      |      &#x27;0.57&#x27;    |   &#x27;5.68e-01&#x27;   |     &#x27;56.79%&#x27;   |</span><br><span class="line">|  5.6789      |    &#x27;5.7&#x27;       |      &#x27;5.68&#x27;    |   &#x27;5.68e+00&#x27;   |    &#x27;567.89%&#x27;   |</span><br><span class="line">| 56.789       |    &#x27;5.7e+01&#x27;   |     &#x27;56.79&#x27;    |   &#x27;5.68e+01&#x27;   |   &#x27;5678.90%&#x27;   |</span><br><span class="line">+--------------+----------------+----------------+----------------+----------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>When both rounding up and rounding down are possible, the
one that returns result with even last digit is chosen. That makes
<code>'&#123;6.5:.0f&#125;'</code> a <code>'6'</code> and <code>'&#123;7.5:.0f&#125;'</code>
an <code>'8'</code>.</strong></li>
<li><strong>This rule only effects numbers that can be represented
exactly by a float (<code>.5</code>, <code>.25</code>, …).</strong></li>
</ul>
<h3 id="ints"><a href="#ints"></a>Ints</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;90:c&#125;                                   # &#x27;Z&#x27;</span><br><span class="line">&#123;90:b&#125;                                   # &#x27;1011010&#x27;</span><br><span class="line">&#123;90:X&#125;                                   # &#x27;5A&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="numbers-1"><a href="#numbers-1"></a>Numbers</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt;      = int(&lt;float/str/bool&gt;)                # Or: math.floor(&lt;float&gt;)</span><br><span class="line">&lt;float&gt;    = float(&lt;int/str/bool&gt;)                # Or: &lt;real&gt;e±&lt;int&gt;</span><br><span class="line">&lt;complex&gt;  = complex(real=0, imag=0)              # Or: &lt;real&gt; ± &lt;real&gt;j</span><br><span class="line">&lt;Fraction&gt; = fractions.Fraction(0, 1)             # Or: Fraction(numerator=0, denominator=1)</span><br><span class="line">&lt;Decimal&gt;  = decimal.Decimal(&lt;str/int&gt;)           # Or: Decimal((sign, digits, exponent))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>'int(&lt;str&gt;)'</code> and
<code>'float(&lt;str&gt;)'</code> raise ValueError on malformed
strings.</strong></li>
<li><strong>Decimal numbers are stored exactly, unlike most floats where
<code>'1.1 + 2.2 != 3.3'</code>.</strong></li>
<li><strong>Floats can be compared with:
<code>'math.isclose(&lt;float&gt;, &lt;float&gt;)'</code>.</strong></li>
<li><strong>Precision of decimal operations is set with:
<code>'decimal.getcontext().prec = &lt;int&gt;'</code>.</strong></li>
</ul>
<h3 id="basic-functions"><a href="#basic-functions"></a>Basic
Functions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;num&gt; = pow(&lt;num&gt;, &lt;num&gt;)                         # Or: &lt;num&gt; ** &lt;num&gt;</span><br><span class="line">&lt;num&gt; = abs(&lt;num&gt;)                                # &lt;float&gt; = abs(&lt;complex&gt;)</span><br><span class="line">&lt;num&gt; = round(&lt;num&gt; [, ±ndigits])                 # `round(126, -1) == 130`</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="math"><a href="#math"></a>Math</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from math import e, pi, inf, nan, isinf, isnan    # `&lt;el&gt; == nan` is always False.</span><br><span class="line">from math import sin, cos, tan, asin, acos, atan  # Also: degrees, radians.</span><br><span class="line">from math import log, log10, log2                 # Log can accept base as second arg.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="statistics"><a href="#statistics"></a>Statistics</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from statistics import mean, median, variance     # Also: stdev, quantiles, groupby.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="random"><a href="#random"></a>Random</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from random import random, randint, choice        # Also shuffle, gauss, triangular, seed.</span><br><span class="line">&lt;float&gt; = random()                                # A float inside [0, 1).</span><br><span class="line">&lt;int&gt;   = randint(from_inc, to_inc)               # An int inside [from_inc, to_inc].</span><br><span class="line">&lt;el&gt;    = choice(&lt;sequence&gt;)                      # Keeps the sequence intact.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="bin-hex"><a href="#bin-hex"></a>Bin, Hex</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = ±0b&lt;bin&gt;                                  # Or: ±0x&lt;hex&gt;</span><br><span class="line">&lt;int&gt; = int(&#x27;±&lt;bin&gt;&#x27;, 2)                          # Or: int(&#x27;±&lt;hex&gt;&#x27;, 16)</span><br><span class="line">&lt;int&gt; = int(&#x27;±0b&lt;bin&gt;&#x27;, 0)                        # Or: int(&#x27;±0x&lt;hex&gt;&#x27;, 0)</span><br><span class="line">&lt;str&gt; = bin(&lt;int&gt;)                                # Returns &#x27;[-]0b&lt;bin&gt;&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="bitwise-operators"><a href="#bitwise-operators"></a>Bitwise
Operators</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int&gt; = &lt;int&gt; &amp; &lt;int&gt;                             # And (0b1100 &amp; 0b1010 == 0b1000).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; | &lt;int&gt;                             # Or  (0b1100 | 0b1010 == 0b1110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; ^ &lt;int&gt;                             # Xor (0b1100 ^ 0b1010 == 0b0110).</span><br><span class="line">&lt;int&gt; = &lt;int&gt; &lt;&lt; n_bits                           # Left shift. Use &gt;&gt; for right.</span><br><span class="line">&lt;int&gt; = ~&lt;int&gt;                                    # Not. Also -&lt;int&gt; - 1.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="combinatorics"><a href="#combinatorics"></a>Combinatorics</h2>
<ul>
<li><strong>Every function returns an iterator.</strong></li>
<li><strong>If you want to print the iterator, you need to pass it to
the list() function first!</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import itertools as it</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product([0, 1], repeat=3)</span><br><span class="line">[(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1),</span><br><span class="line"> (1, 0, 0), (1, 0, 1), (1, 1, 0), (1, 1, 1)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.product(&#x27;abc&#x27;, &#x27;abc&#x27;)                      #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),              # b x  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;), (&#x27;c&#x27;, &#x27;c&#x27;)]              # c x  x  x</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;c&#x27;)]                                      # b .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.combinations_with_replacement(&#x27;abc&#x27;, 2)    #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;a&#x27;), (&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),              # a x  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;b&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b .  x  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;c&#x27;)]                                      # c .  .  x</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; it.permutations(&#x27;abc&#x27;, 2)                     #   a  b  c</span><br><span class="line">[(&#x27;a&#x27;, &#x27;b&#x27;), (&#x27;a&#x27;, &#x27;c&#x27;),                          # a .  x  x</span><br><span class="line"> (&#x27;b&#x27;, &#x27;a&#x27;), (&#x27;b&#x27;, &#x27;c&#x27;),                          # b x  .  x</span><br><span class="line"> (&#x27;c&#x27;, &#x27;a&#x27;), (&#x27;c&#x27;, &#x27;b&#x27;)]                          # c x  x  .</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="datetime"><a href="#datetime"></a>Datetime</h2>
<ul>
<li><strong>Module 'datetime' provides 'date' <code>&lt;D&gt;</code>,
'time' <code>&lt;T&gt;</code>, 'datetime' <code>&lt;DT&gt;</code> and
'timedelta' <code>&lt;TD&gt;</code> classes. All are immutable and
hashable.</strong></li>
<li><strong>Time and datetime objects can be 'aware'
<code>&lt;a&gt;</code>, meaning they have defined timezone, or 'naive'
<code>&lt;n&gt;</code>, meaning they don't.</strong></li>
<li><strong>If object is naive, it is presumed to be in the system's
timezone.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from datetime import date, time, datetime, timedelta</span><br><span class="line">from dateutil.tz import UTC, tzlocal, gettz, datetime_exists, resolve_imaginary</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="constructors"><a href="#constructors"></a>Constructors</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D&gt;  = date(year, month, day)               # Only accepts valid dates from 1 to 9999 AD.</span><br><span class="line">&lt;T&gt;  = time(hour=0, minute=0, second=0)     # Also: `microsecond=0, tzinfo=None, fold=0`.</span><br><span class="line">&lt;DT&gt; = datetime(year, month, day, hour=0)   # Also: `minute=0, second=0, microsecond=0, …`.</span><br><span class="line">&lt;TD&gt; = timedelta(weeks=0, days=0, hours=0)  # Also: `minutes=0, seconds=0, microsecond=0`.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'&lt;D/DT&gt;.weekday()'</code> to get the day of
the week as an int, with Monday being 0.</strong></li>
<li><strong><code>'fold=1'</code> means the second pass in case of time
jumping back for one hour.</strong></li>
<li><strong>Timedelta normalizes arguments to ±days, seconds
(&lt;86 400) and microseconds (&lt; 1M).</strong></li>
</ul>
<h3 id="now"><a href="#now"></a>Now</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DTn&gt;  = D/DT.today()                     # Current local date or naive datetime.</span><br><span class="line">&lt;DTn&gt;    = DT.utcnow()                      # Naive datetime from current UTC time.</span><br><span class="line">&lt;DTa&gt;    = DT.now(&lt;tzinfo&gt;)                 # Aware datetime from current tz time.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>To extract time use <code>'&lt;DTn&gt;.time()'</code>,
<code>'&lt;DTa&gt;.time()'</code> or
<code>'&lt;DTa&gt;.timetz()'</code>.</strong></li>
</ul>
<h3 id="timezone"><a href="#timezone"></a>Timezone</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;tzinfo&gt; = UTC                              # UTC timezone. London without DST.</span><br><span class="line">&lt;tzinfo&gt; = tzlocal()                        # Local timezone. Also gettz().</span><br><span class="line">&lt;tzinfo&gt; = gettz(&#x27;&lt;Continent&gt;/&lt;City&gt;&#x27;)      # &#x27;Continent/City_Name&#x27; timezone or None.</span><br><span class="line">&lt;DTa&gt;    = &lt;DT&gt;.astimezone(&lt;tzinfo&gt;)        # Datetime, converted to the passed timezone.</span><br><span class="line">&lt;Ta/DTa&gt; = &lt;T/DT&gt;.replace(tzinfo=&lt;tzinfo&gt;)  # Unconverted object with a new timezone.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="encode"><a href="#encode"></a>Encode</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/T/DT&gt; = D/T/DT.fromisoformat(&#x27;&lt;iso&gt;&#x27;)    # Object from ISO string. Raises ValueError.</span><br><span class="line">&lt;DT&gt;     = DT.strptime(&lt;str&gt;, &#x27;&lt;format&gt;&#x27;)   # Datetime from str, according to format.</span><br><span class="line">&lt;D/DTn&gt;  = D/DT.fromordinal(&lt;int&gt;)          # D/DTn from days since the Gregorian NYE 1.</span><br><span class="line">&lt;DTn&gt;    = DT.fromtimestamp(&lt;real&gt;)         # Local time DTn from seconds since the Epoch.</span><br><span class="line">&lt;DTa&gt;    = DT.fromtimestamp(&lt;real&gt;, &lt;tz.&gt;)  # Aware datetime from seconds since the Epoch.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>ISO strings come in following forms:
<code>'YYYY-MM-DD'</code>, <code>'HH:MM:SS.mmmuuu[±HH:MM]'</code>, or
both separated by an arbitrary character. All parts following hours are
optional.</strong></li>
<li><strong>Python uses the Unix Epoch:
<code>'1970-01-01 00:00 UTC'</code>,
<code>'1970-01-01 01:00 CET'</code>, ...</strong></li>
</ul>
<h3 id="decode"><a href="#decode"></a>Decode</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.isoformat(sep=&#x27;T&#x27;)      # Also: `timespec=&#x27;auto/hours/minutes/seconds/…&#x27;`.</span><br><span class="line">&lt;str&gt;    = &lt;D/T/DT&gt;.strftime(&#x27;&lt;format&gt;&#x27;)    # Custom string representation.</span><br><span class="line">&lt;int&gt;    = &lt;D/DT&gt;.toordinal()               # Days since Gregorian NYE 1, ignoring time and tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTn&gt;.timestamp()                # Seconds since the Epoch, from DTn in local tz.</span><br><span class="line">&lt;float&gt;  = &lt;DTa&gt;.timestamp()                # Seconds since the Epoch, from aware datetime.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="format-1"><a href="#format-1"></a>Format</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; dt = datetime.strptime(&#x27;2015-05-14 23:39:00.00 +2000&#x27;, &#x27;%Y-%m-%d %H:%M:%S.%f %z&#x27;)</span><br><span class="line">&gt;&gt;&gt; dt.strftime(&quot;%A, %dth of %B &#x27;%y, %I:%M%p %Z&quot;)</span><br><span class="line">&quot;Thursday, 14th of May &#x27;15, 11:39PM UTC+02:00&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>'%Z'</code> only accepts <code>'UTC/GMT'</code> and
local timezone's code. <code>'%z'</code> also accepts
<code>'±HH:MM'</code>.</strong></li>
<li><strong>For abbreviated weekday and month use <code>'%a'</code> and
<code>'%b'</code>.</strong></li>
</ul>
<h3 id="arithmetics"><a href="#arithmetics"></a>Arithmetics</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;D/DT&gt;   = &lt;D/DT&gt;  ± &lt;TD&gt;                   # Returned datetime can fall into missing hour.</span><br><span class="line">&lt;TD&gt;     = &lt;D/DTn&gt; - &lt;D/DTn&gt;                # Returns the difference, ignoring time jumps.</span><br><span class="line">&lt;TD&gt;     = &lt;DTa&gt;   - &lt;DTa&gt;                  # Ignores time jumps if they share tzinfo object.</span><br><span class="line">&lt;TD&gt;     = &lt;TD&gt;    * &lt;real&gt;                 # Also: &lt;TD&gt; = abs(&lt;TD&gt;) and &lt;TD&gt; = &lt;TD&gt; ±% &lt;TD&gt;.</span><br><span class="line">&lt;float&gt;  = &lt;TD&gt;    / &lt;TD&gt;                   # How many weeks/years there are in TD. Also //.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="arguments"><a href="#arguments"></a>Arguments</h2>
<h3 id="inside-function-call"><a href="#inside-function-call"></a>Inside
Function Call</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func(&lt;positional_args&gt;)                           # func(0, 0)</span><br><span class="line">func(&lt;keyword_args&gt;)                              # func(x=0, y=0)</span><br><span class="line">func(&lt;positional_args&gt;, &lt;keyword_args&gt;)           # func(0, y=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="inside-function-definition"><a
href="#inside-function-definition"></a>Inside Function Definition</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;nondefault_args&gt;): ...                  # def func(x, y): ...</span><br><span class="line">def func(&lt;default_args&gt;): ...                     # def func(x=0, y=0): ...</span><br><span class="line">def func(&lt;nondefault_args&gt;, &lt;default_args&gt;): ...  # def func(x, y=0): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Default values are evaluated when function is first
encountered in the scope.</strong></li>
<li><strong>Any mutation of a mutable default value will persist between
invocations.</strong></li>
</ul>
<h2 id="splat-operator"><a href="#splat-operator"></a>Splat
Operator</h2>
<h3 id="inside-function-call-1"><a
href="#inside-function-call-1"></a>Inside Function Call</h3>
<p><strong>Splat expands a collection into positional arguments, while
splatty-splat expands a dictionary into keyword arguments.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">args   = (1, 2)</span><br><span class="line">kwargs = &#123;&#x27;x&#x27;: 3, &#x27;y&#x27;: 4, &#x27;z&#x27;: 5&#125;</span><br><span class="line">func(*args, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="is-the-same-as"><a href="#is-the-same-as"></a>Is the same
as:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func(1, 2, x=3, y=4, z=5)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="inside-function-definition-1"><a
href="#inside-function-definition-1"></a>Inside Function Definition</h3>
<p><strong>Splat combines zero or more positional arguments into a
tuple, while splatty-splat combines zero or more keyword arguments into
a dictionary.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def add(*a):</span><br><span class="line">    return sum(a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; add(1, 2, 3)</span><br><span class="line">6</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="legal-argument-combinations"><a
href="#legal-argument-combinations"></a>Legal argument
combinations:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args): ...               # f(1, 2, 3)</span><br><span class="line">def f(x, *args): ...            # f(1, 2, 3)</span><br><span class="line">def f(*args, z): ...            # f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(**kwargs): ...            # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, **kwargs): ...         # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(*args, **kwargs): ...     # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(x, *args, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3) | f(1, 2, 3)</span><br><span class="line">def f(*args, y, **kwargs): ...  # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def f(*, x, y, z): ...          # f(x=1, y=2, z=3)</span><br><span class="line">def f(x, *, y, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3)</span><br><span class="line">def f(x, y, *, z): ...          # f(x=1, y=2, z=3) | f(1, y=2, z=3) | f(1, 2, z=3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="other-uses"><a href="#other-uses"></a>Other Uses</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = [*&lt;coll.&gt; [, ...]]    # Or: list(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;tuple&gt; = (*&lt;coll.&gt;, [...])     # Or: tuple(&lt;collection&gt;) [+ ...]</span><br><span class="line">&lt;set&gt;   = &#123;*&lt;coll.&gt; [, ...]&#125;    # Or: set(&lt;collection&gt;) [| ...]</span><br><span class="line">&lt;dict&gt;  = &#123;**&lt;dict&gt; [, ...]&#125;    # Or: dict(**&lt;dict&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head, *body, tail = &lt;coll.&gt;     # Head or tail can be omitted.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="inline"><a href="#inline"></a>Inline</h2>
<h3 id="lambda"><a href="#lambda"></a>Lambda</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;func&gt; = lambda: &lt;return_value&gt;                     # A single statement function.</span><br><span class="line">&lt;func&gt; = lambda &lt;arg_1&gt;, &lt;arg_2&gt;: &lt;return_value&gt;    # Also accepts default arguments.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="comprehensions"><a
href="#comprehensions"></a>Comprehensions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = [i+1 for i in range(10)]                   # Or: [1, 2, ..., 10]</span><br><span class="line">&lt;iter&gt; = (i for i in range(10) if i &gt; 5)            # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;set&gt;  = &#123;i+5 for i in range(10)&#125;                   # Or: &#123;5, 6, ..., 14&#125;</span><br><span class="line">&lt;dict&gt; = &#123;i: i*2 for i in range(10)&#125;                # Or: &#123;0: 0, 1: 2, ..., 9: 18&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [l+r for l in &#x27;abc&#x27; for r in &#x27;abc&#x27;]</span><br><span class="line">[&#x27;aa&#x27;, &#x27;ab&#x27;, &#x27;ac&#x27;, ..., &#x27;cc&#x27;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="map-filter-reduce"><a href="#map-filter-reduce"></a>Map, Filter,
Reduce</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = map(lambda x: x + 1, range(10))            # Or: iter([1, 2, ..., 10])</span><br><span class="line">&lt;iter&gt; = filter(lambda x: x &gt; 5, range(10))         # Or: iter([6, 7, 8, 9])</span><br><span class="line">&lt;obj&gt;  = reduce(lambda out, x: out + x, range(10))  # Or: 45</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Reduce must be imported from the functools
module.</strong></li>
</ul>
<h3 id="any-all"><a href="#any-all"></a>Any, All</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = any(&lt;collection&gt;)                          # Is `bool(el)` True for any element.</span><br><span class="line">&lt;bool&gt; = all(&lt;collection&gt;)                          # Is True for all elements or empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="conditional-expression"><a
href="#conditional-expression"></a>Conditional Expression</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;obj&gt; = &lt;exp&gt; if &lt;condition&gt; else &lt;exp&gt;             # Only one expression gets evaluated.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; [a if a else &#x27;zero&#x27; for a in (0, 1, 2, 3)]</span><br><span class="line">[&#x27;zero&#x27;, 1, 2, 3]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="named-tuple-enum-dataclass"><a
href="#named-tuple-enum-dataclass"></a>Named Tuple, Enum, Dataclass</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import namedtuple</span><br><span class="line">Point = namedtuple(&#x27;Point&#x27;, &#x27;x y&#x27;)                  # Creates a tuple&#x27;s subclass.</span><br><span class="line">point = Point(0, 0)                                 # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum</span><br><span class="line">Direction = Enum(&#x27;Direction&#x27;, &#x27;n e s w&#x27;)            # Creates an enum.</span><br><span class="line">direction = Direction.n                             # Returns its member.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">Player = make_dataclass(&#x27;Player&#x27;, [&#x27;loc&#x27;, &#x27;dir&#x27;])   # Creates a class.</span><br><span class="line">player = Player(point, direction)                   # Returns its instance.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="imports"><a href="#imports"></a>Imports</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &lt;module&gt;            # Imports a built-in or &#x27;&lt;module&gt;.py&#x27;.</span><br><span class="line">import &lt;package&gt;           # Imports a built-in or &#x27;&lt;package&gt;/__init__.py&#x27;.</span><br><span class="line">import &lt;package&gt;.&lt;module&gt;  # Imports a built-in or &#x27;&lt;package&gt;/&lt;module&gt;.py&#x27;.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Package is a collection of modules, but it can also define
its own objects.</strong></li>
<li><strong>On a filesystem this corresponds to a directory of Python
files with an optional init script.</strong></li>
<li><strong>Running <code>'import &lt;package&gt;'</code> does not
automatically provide access to the package's modules unless they are
explicitly imported in its init script.</strong></li>
</ul>
<h2 id="closure"><a href="#closure"></a>Closure</h2>
<p><strong>We have/get a closure in Python when:</strong></p>
<ul>
<li><strong>A nested function references a value of its enclosing
function and then</strong></li>
<li><strong>the enclosing function returns the nested
function.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_multiplier(a):</span><br><span class="line">    def out(b):</span><br><span class="line">        return a * b</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; multiply_by_3 = get_multiplier(3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>If multiple nested functions within enclosing function
reference the same value, that value gets shared.</strong></li>
<li><strong>To dynamically access function's first free variable use
<code>'&lt;function&gt;.__closure__[0].cell_contents'</code>.</strong></li>
</ul>
<h3 id="partial"><a href="#partial"></a>Partial</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">&lt;function&gt; = partial(&lt;function&gt; [, &lt;arg_1&gt;, &lt;arg_2&gt;, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import operator as op</span><br><span class="line">&gt;&gt;&gt; multiply_by_3 = partial(op.mul, 3)</span><br><span class="line">&gt;&gt;&gt; multiply_by_3(10)</span><br><span class="line">30</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Partial is also useful in cases when function needs to be
passed as an argument because it enables us to set its arguments
beforehand.</strong></li>
<li><strong>A few examples being:
<code>'defaultdict(&lt;function&gt;)'</code>,
<code>'iter(&lt;function&gt;, to_exclusive)'</code> and dataclass's
<code>'field(default_factory=&lt;function&gt;)'</code>.</strong></li>
</ul>
<h3 id="non-local"><a href="#non-local"></a>Non-Local</h3>
<p><strong>If variable is being assigned to anywhere in the scope, it is
regarded as a local variable, unless it is declared as a 'global' or a
'nonlocal'.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_counter():</span><br><span class="line">    i = 0</span><br><span class="line">    def out():</span><br><span class="line">        nonlocal i</span><br><span class="line">        i += 1</span><br><span class="line">        return i</span><br><span class="line">    return out</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = get_counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="decorator"><a href="#decorator"></a>Decorator</h2>
<ul>
<li><strong>A decorator takes a function, adds some functionality and
returns it.</strong></li>
<li><strong>It can be any <a href="#callable">callable</a>, but is
usually implemented as a function that returns a <a
href="#closure">closure</a>.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@decorator_name</span><br><span class="line">def function_that_gets_passed_to_decorator():</span><br><span class="line">    ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="debugger-example"><a href="#debugger-example"></a>Debugger
Example</h3>
<p><strong>Decorator that prints function's name every time the function
is called.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(func):</span><br><span class="line">    @wraps(func)</span><br><span class="line">    def out(*args, **kwargs):</span><br><span class="line">        print(func.__name__)</span><br><span class="line">        return func(*args, **kwargs)</span><br><span class="line">    return out</span><br><span class="line"></span><br><span class="line">@debug</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Wraps is a helper decorator that copies the metadata of the
passed function (func) to the function it is wrapping
(out).</strong></li>
<li><strong>Without it <code>'add.__name__'</code> would return
<code>'out'</code>.</strong></li>
</ul>
<h3 id="lru-cache"><a href="#lru-cache"></a>LRU Cache</h3>
<p><strong>Decorator that caches function's return values. All
function's arguments must be hashable.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import lru_cache</span><br><span class="line"></span><br><span class="line">@lru_cache(maxsize=None)</span><br><span class="line">def fib(n):</span><br><span class="line">    return n if n &lt; 2 else fib(n-2) + fib(n-1)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Default size of the cache is 128 values. Passing
<code>'maxsize=None'</code> makes it unbounded.</strong></li>
<li><strong>CPython interpreter limits recursion depth to 1000 by
default. To increase it use
<code>'sys.setrecursionlimit(&lt;depth&gt;)'</code>.</strong></li>
</ul>
<h3 id="parametrized-decorator"><a
href="#parametrized-decorator"></a>Parametrized Decorator</h3>
<p><strong>A decorator that accepts arguments and returns a normal
decorator that accepts a function.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import wraps</span><br><span class="line"></span><br><span class="line">def debug(print_result=False):</span><br><span class="line">    def decorator(func):</span><br><span class="line">        @wraps(func)</span><br><span class="line">        def out(*args, **kwargs):</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">            print(func.__name__, result if print_result else &#x27;&#x27;)</span><br><span class="line">            return result</span><br><span class="line">        return out</span><br><span class="line">    return decorator</span><br><span class="line"></span><br><span class="line">@debug(print_result=True)</span><br><span class="line">def add(x, y):</span><br><span class="line">    return x + y</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Using only <code>'@debug'</code> to decorate the add()
function would not work here, because debug would then receive the add()
function as a 'print_result' argument. Decorators can however manually
check if the argument they received is a function and act
accordingly.</strong></li>
</ul>
<h2 id="class"><a href="#class"></a>Class</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        class_name = self.__class__.__name__</span><br><span class="line">        return f&#x27;&#123;class_name&#125;(&#123;self.a!r&#125;)&#x27;</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return str(self.a)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def get_class_name(cls):</span><br><span class="line">        return cls.__name__</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Return value of repr() should be unambiguous and of str()
readable.</strong></li>
<li><strong>If only repr() is defined, it will also be used for
str().</strong></li>
<li><strong>Methods decorated with <code>'@staticmethod'</code> do not
receive 'self' nor 'cls' as their first arg.</strong></li>
</ul>
<h4 id="str-use-cases"><a href="#str-use-cases"></a>Str() use
cases:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el&gt;)</span><br><span class="line">f&#x27;&#123;&lt;el&gt;&#125;&#x27;</span><br><span class="line">logging.warning(&lt;el&gt;)</span><br><span class="line">csv.writer(&lt;file&gt;).writerow([&lt;el&gt;])</span><br><span class="line">raise Exception(&lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="repr-use-cases"><a href="#repr-use-cases"></a>Repr() use
cases:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print/str/repr([&lt;el&gt;])</span><br><span class="line">f&#x27;&#123;&lt;el&gt;!r&#125;&#x27;</span><br><span class="line">Z = dataclasses.make_dataclass(&#x27;Z&#x27;, [&#x27;a&#x27;]); print/str/repr(Z(&lt;el&gt;))</span><br><span class="line">&gt;&gt;&gt; &lt;el&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="constructor-overloading"><a
href="#constructor-overloading"></a>Constructor Overloading</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;name&gt;:</span><br><span class="line">    def __init__(self, a=None):</span><br><span class="line">        self.a = a</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="inheritance"><a href="#inheritance"></a>Inheritance</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age  = age</span><br><span class="line"></span><br><span class="line">class Employee(Person):</span><br><span class="line">    def __init__(self, name, age, staff_num):</span><br><span class="line">        super().__init__(name, age)</span><br><span class="line">        self.staff_num = staff_num</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="multiple-inheritance"><a
href="#multiple-inheritance"></a>Multiple Inheritance</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class A: pass</span><br><span class="line">class B: pass</span><br><span class="line">class C(A, B): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>MRO determines the order in which parent classes are
traversed when searching for a method or an attribute:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; C.mro()</span><br><span class="line">[&lt;class &#x27;C&#x27;&gt;, &lt;class &#x27;A&#x27;&gt;, &lt;class &#x27;B&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="property"><a href="#property"></a>Property</h3>
<p><strong>Pythonic way of implementing getters and
setters.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    @property</span><br><span class="line">    def name(self):</span><br><span class="line">        return &#x27; &#x27;.join(self._name)</span><br><span class="line"></span><br><span class="line">    @name.setter</span><br><span class="line">    def name(self, value):</span><br><span class="line">        self._name = value.split()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person = Person()</span><br><span class="line">&gt;&gt;&gt; person.name = &#x27;\t Guido  van Rossum \n&#x27;</span><br><span class="line">&gt;&gt;&gt; person.name</span><br><span class="line">&#x27;Guido van Rossum&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="dataclass"><a href="#dataclass"></a>Dataclass</h3>
<p><strong>Decorator that automatically generates init(), repr() and
eq() special methods.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import dataclass, field</span><br><span class="line"></span><br><span class="line">@dataclass(order=False, frozen=False)</span><br><span class="line">class &lt;class_name&gt;:</span><br><span class="line">    &lt;attr_name_1&gt;: &lt;type&gt;</span><br><span class="line">    &lt;attr_name_2&gt;: &lt;type&gt; = &lt;default_value&gt;</span><br><span class="line">    &lt;attr_name_3&gt;: list/dict/set = field(default_factory=list/dict/set)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Objects can be made sortable with <code>'order=True'</code>
and immutable with <code>'frozen=True'</code>.</strong></li>
<li><strong>For object to be hashable, all attributes must be hashable
and 'frozen' must be True.</strong></li>
<li><strong>Function field() is needed because
<code>'&lt;attr_name&gt;: list = []'</code> would make a list that is
shared among all instances. Its 'default_factory' argument can be any <a
href="#callable">callable</a>.</strong></li>
<li><strong>For attributes of arbitrary type use
<code>'typing.Any'</code>.</strong></li>
</ul>
<h4 id="inline-1"><a href="#inline-1"></a>Inline:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from dataclasses import make_dataclass</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_attribute_names&gt;)</span><br><span class="line">&lt;class&gt; = make_dataclass(&#x27;&lt;class_name&gt;&#x27;, &lt;coll_of_tuples&gt;)</span><br><span class="line">&lt;tuple&gt; = (&#x27;&lt;attr_name&gt;&#x27;, &lt;type&gt; [, &lt;default_value&gt;])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="rest-of-type-annotations-cpython-interpreter-ignores-them-all"><a
href="#rest-of-type-annotations-cpython-interpreter-ignores-them-all"></a>Rest
of type annotations (CPython interpreter ignores them all):</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def func(&lt;arg_name&gt;: &lt;type&gt; [= &lt;obj&gt;]) -&gt; &lt;type&gt;: ...</span><br><span class="line">&lt;var_name&gt;: typing.List/Set/Iterable/Sequence/Optional[&lt;type&gt;]</span><br><span class="line">&lt;var_name&gt;: typing.Dict/Tuple/Union[&lt;type&gt;, ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="slots"><a href="#slots"></a>Slots</h3>
<p><strong>Mechanism that restricts objects to attributes listed in
'slots' and significantly reduces their memory footprint.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyClassWithSlots:</span><br><span class="line">    __slots__ = [&#x27;a&#x27;]</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.a = 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="copy"><a href="#copy"></a>Copy</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from copy import copy, deepcopy</span><br><span class="line">&lt;object&gt; = copy(&lt;object&gt;)</span><br><span class="line">&lt;object&gt; = deepcopy(&lt;object&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="duck-types"><a href="#duck-types"></a>Duck Types</h2>
<p><strong>A duck type is an implicit type that prescribes a set of
special methods. Any object that has those methods defined is considered
a member of that duck type.</strong></p>
<h3 id="comparable"><a href="#comparable"></a>Comparable</h3>
<ul>
<li><strong>If eq() method is not overridden, it returns
<code>'id(self) == id(other)'</code>, which is the same as
<code>'self is other'</code>.</strong></li>
<li><strong>That means all objects compare not equal by
default.</strong></li>
<li><strong>Only the left side object has eq() method called, unless it
returns NotImplemented, in which case the right object is consulted.
False is returned if both return NotImplemented.</strong></li>
<li><strong>Ne() automatically works on any object that has eq()
defined.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyComparable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="hashable"><a href="#hashable"></a>Hashable</h3>
<ul>
<li><strong>Hashable object needs both hash() and eq() methods and its
hash value should never change.</strong></li>
<li><strong>Hashable objects that compare equal must have the same hash
value, meaning default hash() that returns <code>'id(self)'</code> will
not do.</strong></li>
<li><strong>That is why Python automatically makes classes unhashable if
you only implement eq().</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyHashable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self._a = a</span><br><span class="line">    @property</span><br><span class="line">    def a(self):</span><br><span class="line">        return self._a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="sortable"><a href="#sortable"></a>Sortable</h3>
<ul>
<li><strong>With 'total_ordering' decorator, you only need to provide
eq() and one of lt(), gt(), le() or ge() special methods and the rest
will be automatically generated.</strong></li>
<li><strong>Functions sorted() and min() only require lt() method, while
max() only requires gt(). However, it is best to define them all so that
confusion doesn't arise in other contexts.</strong></li>
<li><strong>When two lists, strings or dataclasses are compared, their
values get compared in order until a pair of unequal values is found.
The comparison of this two values is then returned. The shorter sequence
is considered smaller in case of all values being equal.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import total_ordering</span><br><span class="line"></span><br><span class="line">@total_ordering</span><br><span class="line">class MySortable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a == other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        if isinstance(other, type(self)):</span><br><span class="line">            return self.a &lt; other.a</span><br><span class="line">        return NotImplemented</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="iterator-1"><a href="#iterator-1"></a>Iterator</h3>
<ul>
<li><strong>Any object that has methods next() and iter() is an
iterator.</strong></li>
<li><strong>Next() should return next item or raise
StopIteration.</strong></li>
<li><strong>Iter() should return 'self'.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __next__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return self</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; next(counter), next(counter), next(counter)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="python-has-many-different-iterator-objects"><a
href="#python-has-many-different-iterator-objects"></a>Python has many
different iterator objects:</h4>
<ul>
<li><strong>Sequence iterators returned by the <a
href="#iterator">iter()</a> function, such as list_iterator and
set_iterator.</strong></li>
<li><strong>Objects returned by the <a href="#itertools">itertools</a>
module, such as count, repeat and cycle.</strong></li>
<li><strong>Generators returned by the <a href="#generator">generator
functions</a> and <a href="#comprehensions">generator
expressions</a>.</strong></li>
<li><strong>File objects returned by the <a href="#open">open()</a>
function, etc.</strong></li>
</ul>
<h3 id="callable"><a href="#callable"></a>Callable</h3>
<ul>
<li><strong>All functions and classes have a call() method, hence are
callable.</strong></li>
<li><strong>When this cheatsheet uses <code>'&lt;function&gt;'</code> as
an argument, it actually means
<code>'&lt;callable&gt;'</code>.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Counter:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.i = 0</span><br><span class="line">    def __call__(self):</span><br><span class="line">        self.i += 1</span><br><span class="line">        return self.i</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; counter = Counter()</span><br><span class="line">&gt;&gt;&gt; counter(), counter(), counter()</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="context-manager"><a href="#context-manager"></a>Context
Manager</h3>
<ul>
<li><strong>Enter() should lock the resources and optionally return an
object.</strong></li>
<li><strong>Exit() should release the resources.</strong></li>
<li><strong>Any exception that happens inside the with block is passed
to the exit() method.</strong></li>
<li><strong>If it wishes to suppress the exception it must return a true
value.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyOpen:</span><br><span class="line">    def __init__(self, filename):</span><br><span class="line">        self.filename = filename</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        self.file = open(self.filename)</span><br><span class="line">        return self.file</span><br><span class="line">    def __exit__(self, exc_type, exception, traceback):</span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; with open(&#x27;test.txt&#x27;, &#x27;w&#x27;) as file:</span><br><span class="line">...     file.write(&#x27;Hello World!&#x27;)</span><br><span class="line">&gt;&gt;&gt; with MyOpen(&#x27;test.txt&#x27;) as file:</span><br><span class="line">...     print(file.read())</span><br><span class="line">Hello World!</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="iterable-duck-types"><a href="#iterable-duck-types"></a>Iterable
Duck Types</h2>
<h3 id="iterable"><a href="#iterable"></a>Iterable</h3>
<ul>
<li><strong>Only required method is iter(). It should return an iterator
of object's items.</strong></li>
<li><strong>Contains() automatically works on any object that has iter()
defined.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyIterable:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; obj = MyIterable([1, 2, 3])</span><br><span class="line">&gt;&gt;&gt; [el for el in obj]</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; 1 in obj</span><br><span class="line">True</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="collection"><a href="#collection"></a>Collection</h3>
<ul>
<li><strong>Only required methods are iter() and len(). Len() should
return the number of items.</strong></li>
<li><strong>This cheatsheet actually means
<code>'&lt;iterable&gt;'</code> when it uses
<code>'&lt;collection&gt;'</code>.</strong></li>
<li><strong>I chose not to use the name 'iterable' because it sounds
scarier and more vague than 'collection'. The only drawback of this
decision is that a reader could think a certain function doesn't accept
iterators when it does, since iterators are the only built-in objects
that are iterable but are not collections.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyCollection:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="sequence"><a href="#sequence"></a>Sequence</h3>
<ul>
<li><strong>Only required methods are len() and getitem().</strong></li>
<li><strong>Getitem() should return an item at the passed index or raise
IndexError.</strong></li>
<li><strong>Iter() and contains() automatically work on any object that
has getitem() defined.</strong></li>
<li><strong>Reversed() automatically works on any object that has len()
and getitem() defined.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MySequence:</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.a)</span><br><span class="line">    def __contains__(self, el):</span><br><span class="line">        return el in self.a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line">    def __reversed__(self):</span><br><span class="line">        return reversed(self.a)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="discrepancies-between-glossary-definitions-and-abstract-base-classes"><a
href="#discrepancies-between-glossary-definitions-and-abstract-base-classes"></a>Discrepancies
between glossary definitions and abstract base classes:</h4>
<ul>
<li><strong>Glossary defines iterable as any object with iter() or
getitem() and sequence as any object with getitem() and len(). It does
not define collection.</strong></li>
<li><strong>Passing ABC Iterable to isinstance() or issubclass() checks
whether object/class has method iter(), while ABC Collection checks for
iter(), contains() and len().</strong></li>
</ul>
<h3 id="abc-sequence"><a href="#abc-sequence"></a>ABC Sequence</h3>
<ul>
<li><strong>It's a richer interface than the basic
sequence.</strong></li>
<li><strong>Extending it generates iter(), contains(), reversed(),
index() and count().</strong></li>
<li><strong>Unlike <code>'abc.Iterable'</code> and
<code>'abc.Collection'</code>, it is not a duck type. That is why
<code>'issubclass(MySequence, abc.Sequence)'</code> would return False
even if MySequence had all the methods defined. It however recognizes
list, tuple, range, str, bytes, bytearray, memoryview and deque, because
they are registered as Sequence's virtual subclasses.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import abc</span><br><span class="line"></span><br><span class="line">class MyAbcSequence(abc.Sequence):</span><br><span class="line">    def __init__(self, a):</span><br><span class="line">        self.a = a</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.a)</span><br><span class="line">    def __getitem__(self, i):</span><br><span class="line">        return self.a[i]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="table-of-required-and-automatically-available-special-methods"><a
href="#table-of-required-and-automatically-available-special-methods"></a>Table
of required and automatically available special methods:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">|            |  Iterable  | Collection |  Sequence  | abc.Sequence |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line">| iter()     |    REQ     |    REQ     |    Yes     |     Yes      |</span><br><span class="line">| contains() |    Yes     |    Yes     |    Yes     |     Yes      |</span><br><span class="line">| len()      |            |    REQ     |    REQ     |     REQ      |</span><br><span class="line">| getitem()  |            |            |    REQ     |     REQ      |</span><br><span class="line">| reversed() |            |            |    Yes     |     Yes      |</span><br><span class="line">| index()    |            |            |            |     Yes      |</span><br><span class="line">| count()    |            |            |            |     Yes      |</span><br><span class="line">+------------+------------+------------+------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Other ABCs that generate missing methods are:
MutableSequence, Set, MutableSet, Mapping and
MutableMapping.</strong></li>
<li><strong>Names of their required methods are stored in
<code>'&lt;abc&gt;.__abstractmethods__'</code>.</strong></li>
</ul>
<h2 id="enum"><a href="#enum"></a>Enum</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from enum import Enum, auto</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class &lt;enum_name&gt;(Enum):</span><br><span class="line">    &lt;member_name_1&gt; = &lt;value_1&gt;</span><br><span class="line">    &lt;member_name_2&gt; = &lt;value_2_a&gt;, &lt;value_2_b&gt;</span><br><span class="line">    &lt;member_name_3&gt; = auto()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>If there are no numeric values before auto(), it returns
1.</strong></li>
<li><strong>Otherwise it returns an increment of the last numeric
value.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;member&gt; = &lt;enum&gt;.&lt;member_name&gt;                 # Returns a member.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;[&#x27;&lt;member_name&gt;&#x27;]              # Returns a member or raises KeyError.</span><br><span class="line">&lt;member&gt; = &lt;enum&gt;(&lt;value&gt;)                      # Returns a member or raises ValueError.</span><br><span class="line">&lt;str&gt;    = &lt;member&gt;.name                        # Returns member&#x27;s name.</span><br><span class="line">&lt;obj&gt;    = &lt;member&gt;.value                       # Returns member&#x27;s value.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list_of_members = list(&lt;enum&gt;)</span><br><span class="line">member_names    = [a.name for a in &lt;enum&gt;]</span><br><span class="line">member_values   = [a.value for a in &lt;enum&gt;]</span><br><span class="line">random_member   = random.choice(list(&lt;enum&gt;))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def get_next_member(member):</span><br><span class="line">    members = list(member.__class__)</span><br><span class="line">    index   = (members.index(member) + 1) % len(members)</span><br><span class="line">    return members[index]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="inline-2"><a href="#inline-2"></a>Inline</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#x27;fork knife spoon&#x27;)</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, [&#x27;fork&#x27;, &#x27;knife&#x27;, &#x27;spoon&#x27;])</span><br><span class="line">Cutlery = Enum(&#x27;Cutlery&#x27;, &#123;&#x27;fork&#x27;: 1, &#x27;knife&#x27;: 2, &#x27;spoon&#x27;: 3&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="user-defined-functions-cannot-be-values-so-they-must-be-wrapped"><a
href="#user-defined-functions-cannot-be-values-so-they-must-be-wrapped"></a>User-defined
functions cannot be values, so they must be wrapped:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from functools import partial</span><br><span class="line">LogicOp = Enum(&#x27;LogicOp&#x27;, &#123;&#x27;AND&#x27;: partial(lambda l, r: l and r),</span><br><span class="line">                           &#x27;OR&#x27;:  partial(lambda l, r: l or r)&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Member names are in all caps because trying to access a
member that is named after a reserved keyword raises
SyntaxError.</strong></li>
</ul>
<h2 id="exceptions"><a href="#exceptions"></a>Exceptions</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    &lt;code&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="complex-example"><a href="#complex-example"></a>Complex
Example</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    &lt;code_1&gt;</span><br><span class="line">except &lt;exception_a&gt;:</span><br><span class="line">    &lt;code_2_a&gt;</span><br><span class="line">except &lt;exception_b&gt;:</span><br><span class="line">    &lt;code_2_b&gt;</span><br><span class="line">else:</span><br><span class="line">    &lt;code_2_c&gt;</span><br><span class="line">finally:</span><br><span class="line">    &lt;code_3&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Code inside the <code>'else'</code> block will only be
executed if <code>'try'</code> block had no exceptions.</strong></li>
<li><strong>Code inside the <code>'finally'</code> block will always be
executed (unless a signal is received).</strong></li>
</ul>
<h3 id="catching-exceptions"><a href="#catching-exceptions"></a>Catching
Exceptions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt;: ...</span><br><span class="line">except &lt;exception&gt; as &lt;name&gt;: ...</span><br><span class="line">except (&lt;exception&gt;, [...]): ...</span><br><span class="line">except (&lt;exception&gt;, [...]) as &lt;name&gt;: ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Also catches subclasses of the exception.</strong></li>
<li><strong>Use <code>'traceback.print_exc()'</code> to print the error
message to stderr.</strong></li>
<li><strong>Use <code>'print(&lt;name&gt;)'</code> to print just the
cause of the exception (its arguments).</strong></li>
<li><strong>Use <code>'logging.exception(&lt;message&gt;)'</code> to log
the exception.</strong></li>
</ul>
<h3 id="raising-exceptions"><a href="#raising-exceptions"></a>Raising
Exceptions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raise &lt;exception&gt;</span><br><span class="line">raise &lt;exception&gt;()</span><br><span class="line">raise &lt;exception&gt;(&lt;el&gt; [, ...])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="re-raising-caught-exception"><a
href="#re-raising-caught-exception"></a>Re-raising caught
exception:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">except &lt;exception&gt; as &lt;name&gt;:</span><br><span class="line">    ...</span><br><span class="line">    raise</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="exception-object"><a href="#exception-object"></a>Exception
Object</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arguments = &lt;name&gt;.args</span><br><span class="line">exc_type  = &lt;name&gt;.__class__</span><br><span class="line">filename  = &lt;name&gt;.__traceback__.tb_frame.f_code.co_filename</span><br><span class="line">func_name = &lt;name&gt;.__traceback__.tb_frame.f_code.co_name</span><br><span class="line">line      = linecache.getline(filename, &lt;name&gt;.__traceback__.tb_lineno)</span><br><span class="line">traceback = &#x27;&#x27;.join(traceback.format_tb(&lt;name&gt;.__traceback__))</span><br><span class="line">error_msg = &#x27;&#x27;.join(traceback.format_exception(exc_type, &lt;name&gt;, &lt;name&gt;.__traceback__))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="built-in-exceptions"><a href="#built-in-exceptions"></a>Built-in
Exceptions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit                   # Raised by the sys.exit() function.</span><br><span class="line"> +-- KeyboardInterrupt            # Raised when the user hits the interrupt key (ctrl-c).</span><br><span class="line"> +-- Exception                    # User-defined exceptions should be derived from this class.</span><br><span class="line">      +-- ArithmeticError         # Base class for arithmetic errors.</span><br><span class="line">      |    +-- ZeroDivisionError  # Raised when dividing by zero.</span><br><span class="line">      +-- AssertionError          # Raised by `assert &lt;exp&gt;` if expression returns false value.</span><br><span class="line">      +-- AttributeError          # Raised when an attribute is missing.</span><br><span class="line">      +-- EOFError                # Raised by input() when it hits end-of-file condition.</span><br><span class="line">      +-- LookupError             # Raised when a look-up on a collection fails.</span><br><span class="line">      |    +-- IndexError         # Raised when a sequence index is out of range.</span><br><span class="line">      |    +-- KeyError           # Raised when a dictionary key or set element is missing.</span><br><span class="line">      +-- MemoryError             # Out of memory. Could be too late to start deleting vars.</span><br><span class="line">      +-- NameError               # Raised when an object is missing.</span><br><span class="line">      +-- OSError                 # Errors such as “file not found” or “disk full” (see Open).</span><br><span class="line">      |    +-- FileNotFoundError  # When a file or directory is requested but doesn&#x27;t exist.</span><br><span class="line">      +-- RuntimeError            # Raised by errors that don&#x27;t fall into other categories.</span><br><span class="line">      |    +-- RecursionError     # Raised when the maximum recursion depth is exceeded.</span><br><span class="line">      +-- StopIteration           # Raised by next() when run on an empty iterator.</span><br><span class="line">      +-- TypeError               # Raised when an argument is of wrong type.</span><br><span class="line">      +-- ValueError              # When an argument is of right type but inappropriate value.</span><br><span class="line">           +-- UnicodeError       # Raised when encoding/decoding strings to/from bytes fails.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="collections-and-their-exceptions"><a
href="#collections-and-their-exceptions"></a>Collections and their
exceptions:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">|           |    List    |    Set     |    Dict    |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line">| getitem() | IndexError |            |  KeyError  |</span><br><span class="line">| pop()     | IndexError |  KeyError  |  KeyError  |</span><br><span class="line">| remove()  | ValueError |  KeyError  |            |</span><br><span class="line">| index()   | ValueError |            |            |</span><br><span class="line">+-----------+------------+------------+------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="useful-built-in-exceptions"><a
href="#useful-built-in-exceptions"></a>Useful built-in exceptions:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raise TypeError(&#x27;Argument is of wrong type!&#x27;)</span><br><span class="line">raise ValueError(&#x27;Argument is of right type but inappropriate value!&#x27;)</span><br><span class="line">raise RuntimeError(&#x27;None of above!&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="user-defined-exceptions"><a
href="#user-defined-exceptions"></a>User-defined Exceptions</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyError(Exception): pass</span><br><span class="line">class MyInputError(MyError): pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="exit"><a href="#exit"></a>Exit</h2>
<p><strong>Exits the interpreter by raising SystemExit
exception.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">sys.exit()                        # Exits with exit code 0 (success).</span><br><span class="line">sys.exit(&lt;el&gt;)                    # Prints to stderr and exits with 1.</span><br><span class="line">sys.exit(&lt;int&gt;)                   # Exits with passed exit code.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="print"><a href="#print"></a>Print</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&lt;el_1&gt;, ..., sep=&#x27; &#x27;, end=&#x27;\n&#x27;, file=sys.stdout, flush=False)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'file=sys.stderr'</code> for messages about
errors.</strong></li>
<li><strong>Use <code>'flush=True'</code> to forcibly flush the
stream.</strong></li>
</ul>
<h3 id="pretty-print"><a href="#pretty-print"></a>Pretty Print</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pprint import pprint</span><br><span class="line">pprint(&lt;collection&gt;, width=80, depth=None, compact=False, sort_dicts=True)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Levels deeper than 'depth' get replaced by
'...'.</strong></li>
</ul>
<h2 id="input"><a href="#input"></a>Input</h2>
<p><strong>Reads a line from user input or pipe if present.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt; = input(prompt=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Trailing newline gets stripped.</strong></li>
<li><strong>Prompt string is printed to the standard output before
reading input.</strong></li>
<li><strong>Raises EOFError when user hits EOF (ctrl-d/ctrl-z⏎) or input
stream gets exhausted.</strong></li>
</ul>
<h2 id="command-line-arguments"><a
href="#command-line-arguments"></a>Command Line Arguments</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sys</span><br><span class="line">scripts_path = sys.argv[0]</span><br><span class="line">arguments    = sys.argv[1:]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="argument-parser"><a href="#argument-parser"></a>Argument
Parser</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from argparse import ArgumentParser, FileType</span><br><span class="line">p = ArgumentParser(description=&lt;str&gt;)</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, action=&#x27;store_true&#x27;)  # Flag.</span><br><span class="line">p.add_argument(&#x27;-&lt;short_name&gt;&#x27;, &#x27;--&lt;name&gt;&#x27;, type=&lt;type&gt;)          # Option.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=1)                    # First argument.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;+&#x27;)                  # Remaining arguments.</span><br><span class="line">p.add_argument(&#x27;&lt;name&gt;&#x27;, type=&lt;type&gt;, nargs=&#x27;*&#x27;)                  # Optional arguments.</span><br><span class="line">args  = p.parse_args()                                            # Exits on error.</span><br><span class="line">value = args.&lt;name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'help=&lt;str&gt;'</code> to set argument
description that will be displayed in help message.</strong></li>
<li><strong>Use <code>'default=&lt;el&gt;'</code> to set the default
value.</strong></li>
<li><strong>Use <code>'type=FileType(&lt;mode&gt;)'</code> for files.
Accepts 'encoding', but 'newline' is None.</strong></li>
</ul>
<h2 id="open"><a href="#open"></a>Open</h2>
<p><strong>Opens the file and returns a corresponding file
object.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt; = open(&lt;path&gt;, mode=&#x27;r&#x27;, encoding=None, newline=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>'encoding=None'</code> means that the default encoding
is used, which is platform dependent. Best practice is to use
<code>'encoding="utf-8"'</code> whenever possible.</strong></li>
<li><strong><code>'newline=None'</code> means all different end of line
combinations are converted to '' on read, while on write all ''
characters are converted to system's default line
separator.</strong></li>
<li><strong><code>'newline=""'</code> means no conversions take place,
but input is still broken into chunks by readline() and readlines() on
every '', ' and ''.</strong></li>
</ul>
<h3 id="modes"><a href="#modes"></a>Modes</h3>
<ul>
<li><strong><code>'r'</code> - Read (default).</strong></li>
<li><strong><code>'w'</code> - Write (truncate).</strong></li>
<li><strong><code>'x'</code> - Write or fail if the file already
exists.</strong></li>
<li><strong><code>'a'</code> - Append.</strong></li>
<li><strong><code>'w+'</code> - Read and write (truncate).</strong></li>
<li><strong><code>'r+'</code> - Read and write from the
start.</strong></li>
<li><strong><code>'a+'</code> - Read and write from the
end.</strong></li>
<li><strong><code>'t'</code> - Text mode (default).</strong></li>
<li><strong><code>'b'</code> - Binary mode (<code>'br'</code>,
<code>'bw'</code>, <code>'bx'</code>, …).</strong></li>
</ul>
<h3 id="exceptions-1"><a href="#exceptions-1"></a>Exceptions</h3>
<ul>
<li><strong><code>'FileNotFoundError'</code> can be raised when reading
with <code>'r'</code> or <code>'r+'</code>.</strong></li>
<li><strong><code>'FileExistsError'</code> can be raised when writing
with <code>'x'</code>.</strong></li>
<li><strong><code>'IsADirectoryError'</code> and
<code>'PermissionError'</code> can be raised by any.</strong></li>
<li><strong><code>'OSError'</code> is the parent class of all listed
exceptions.</strong></li>
</ul>
<h3 id="file-object"><a href="#file-object"></a>File Object</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.seek(0)                      # Moves to the start of the file.</span><br><span class="line">&lt;file&gt;.seek(offset)                 # Moves &#x27;offset&#x27; chars/bytes from the start.</span><br><span class="line">&lt;file&gt;.seek(0, 2)                   # Moves to the end of the file.</span><br><span class="line">&lt;bin_file&gt;.seek(±offset, &lt;anchor&gt;)  # Anchor: 0 start, 1 current position, 2 end.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.read(size=-1)  # Reads &#x27;size&#x27; chars/bytes or until EOF.</span><br><span class="line">&lt;str/bytes&gt; = &lt;file&gt;.readline()     # Returns a line or empty string/bytes on EOF.</span><br><span class="line">&lt;list&gt;      = &lt;file&gt;.readlines()    # Returns a list of remaining lines.</span><br><span class="line">&lt;str/bytes&gt; = next(&lt;file&gt;)          # Returns a line using buffer. Do not mix.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;file&gt;.write(&lt;str/bytes&gt;)           # Writes a string or bytes object.</span><br><span class="line">&lt;file&gt;.writelines(&lt;collection&gt;)     # Writes a coll. of strings or bytes objects.</span><br><span class="line">&lt;file&gt;.flush()                      # Flushes write buffer. Runs every 4096/8192 B.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Methods do not add or strip trailing newlines, even
writelines().</strong></li>
</ul>
<h3 id="read-text-from-file"><a href="#read-text-from-file"></a>Read
Text from File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-text-to-file"><a href="#write-text-to-file"></a>Write Text
to File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_file(filename, text):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        file.write(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="paths"><a href="#paths"></a>Paths</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from os import getcwd, path, listdir, scandir</span><br><span class="line">from glob import glob</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = getcwd()                   # Returns the current working directory.</span><br><span class="line">&lt;str&gt;  = path.join(&lt;path&gt;, ...)     # Joins two or more pathname components.</span><br><span class="line">&lt;str&gt;  = path.abspath(&lt;path&gt;)       # Returns absolute path.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = path.basename(&lt;path&gt;)      # Returns final component of the path.</span><br><span class="line">&lt;str&gt;  = path.dirname(&lt;path&gt;)       # Returns path without the final component.</span><br><span class="line">&lt;tup.&gt; = path.splitext(&lt;path&gt;)      # Splits on last period of the final component.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = listdir(path=&#x27;.&#x27;)          # Returns filenames located at path.</span><br><span class="line">&lt;list&gt; = glob(&#x27;&lt;pattern&gt;&#x27;)          # Returns paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = path.exists(&lt;path&gt;)        # Or: &lt;Path&gt;.exists()</span><br><span class="line">&lt;bool&gt; = path.isfile(&lt;path&gt;)        # Or: &lt;DirEntry/Path&gt;.is_file()</span><br><span class="line">&lt;bool&gt; = path.isdir(&lt;path&gt;)         # Or: &lt;DirEntry/Path&gt;.is_dir()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;stat&gt; = os.stat(&lt;path&gt;)            # Or: &lt;DirEntry/Path&gt;.stat()</span><br><span class="line">&lt;real&gt; = &lt;stat&gt;.st_mtime/st_size/…  # Modification time, size in bytes, …</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="direntry"><a href="#direntry"></a>DirEntry</h3>
<p><strong>Unlike listdir(), scandir() returns DirEntry objects that
cache isfile, isdir and on Windows also stat information, thus
significantly increasing the performance of code that requires
it.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = scandir(path=&#x27;.&#x27;)          # Returns DirEntry objects located at path.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.path            # Returns whole path as a string.</span><br><span class="line">&lt;str&gt;  = &lt;DirEntry&gt;.name            # Returns final component as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;DirEntry&gt;)           # Opens the file and returns a file object.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="path-object"><a href="#path-object"></a>Path Object</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pathlib import Path</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path(&lt;path&gt; [, ...])       # Accepts strings, Paths and DirEntry objects.</span><br><span class="line">&lt;Path&gt; = &lt;path&gt; / &lt;path&gt; [/ ...]    # First or second path must be a Path object.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = Path()                     # Returns relative cwd. Also Path(&#x27;.&#x27;).</span><br><span class="line">&lt;Path&gt; = Path.cwd()                 # Returns absolute cwd. Also Path().resolve().</span><br><span class="line">&lt;Path&gt; = Path.home()                # Returns user&#x27;s home directory (absolute).</span><br><span class="line">&lt;Path&gt; = Path(__file__).resolve()   # Returns script&#x27;s path if cwd wasn&#x27;t changed.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Path&gt; = &lt;Path&gt;.parent              # Returns Path without the final component.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.name                # Returns final component as a string.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.stem                # Returns final component without extension.</span><br><span class="line">&lt;str&gt;  = &lt;Path&gt;.suffix              # Returns final component&#x27;s extension.</span><br><span class="line">&lt;tup.&gt; = &lt;Path&gt;.parts               # Returns all components as strings.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Path&gt;.iterdir()           # Returns directory contents as Path objects.</span><br><span class="line">&lt;iter&gt; = &lt;Path&gt;.glob(&#x27;&lt;pattern&gt;&#x27;)   # Returns Paths matching the wildcard pattern.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;str&gt;  = str(&lt;Path&gt;)                # Returns path as a string.</span><br><span class="line">&lt;file&gt; = open(&lt;Path&gt;)               # Also &lt;Path&gt;.read/write_text/bytes().</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="os-commands"><a href="#os-commands"></a>OS Commands</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import os, shutil, subprocess</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.chdir(&lt;path&gt;)                    # Changes the current working directory.</span><br><span class="line">os.mkdir(&lt;path&gt;, mode=0o777)        # Creates a directory. Permissions are in octal.</span><br><span class="line">os.makedirs(&lt;path&gt;, mode=0o777)     # Creates all path&#x27;s dirs. Also: `exist_ok=False`.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shutil.copy(from, to)               # Copies the file. &#x27;to&#x27; can exist or be a dir.</span><br><span class="line">shutil.copytree(from, to)           # Copies the directory. &#x27;to&#x27; must not exist.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.rename(from, to)                 # Renames/moves the file or directory.</span><br><span class="line">os.replace(from, to)                # Same, but overwrites &#x27;to&#x27; if it exists.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove(&lt;path&gt;)                   # Deletes the file.</span><br><span class="line">os.rmdir(&lt;path&gt;)                    # Deletes the empty directory.</span><br><span class="line">shutil.rmtree(&lt;path&gt;)               # Deletes the directory.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Paths can be either strings, Paths or DirEntry
objects.</strong></li>
<li><strong>Functions report OS related errors by raising either OSError
or one of its <a href="#exceptions-1">subclasses</a>.</strong></li>
</ul>
<h3 id="shell-commands"><a href="#shell-commands"></a>Shell
Commands</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;pipe&gt; = os.popen(&#x27;&lt;command&gt;&#x27;)      # Executes command in sh/cmd. Returns its stdout pipe.</span><br><span class="line">&lt;str&gt;  = &lt;pipe&gt;.read(size=-1)       # Reads &#x27;size&#x27; chars or until EOF. Also readline/s().</span><br><span class="line">&lt;int&gt;  = &lt;pipe&gt;.close()             # Closes the pipe. Returns None on success.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="sends-1-1-to-the-basic-calculator-and-captures-its-output"><a
href="#sends-1--1-to-the-basic-calculator-and-captures-its-output"></a>Sends
'1 + 1' to the basic calculator and captures its output:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; subprocess.run(&#x27;bc&#x27;, input=&#x27;1 + 1\n&#x27;, capture_output=True, text=True)</span><br><span class="line">CompletedProcess(args=&#x27;bc&#x27;, returncode=0, stdout=&#x27;2\n&#x27;, stderr=&#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="sends-test.in-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-test.out"><a
href="#sends-testin-to-the-basic-calculator-running-in-standard-mode-and-saves-its-output-to-testout"></a>Sends
test.in to the basic calculator running in standard mode and saves its
output to test.out:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from shlex import split</span><br><span class="line">&gt;&gt;&gt; os.popen(&#x27;echo 1 + 1 &gt; test.in&#x27;)</span><br><span class="line">&gt;&gt;&gt; subprocess.run(split(&#x27;bc -s&#x27;), stdin=open(&#x27;test.in&#x27;), stdout=open(&#x27;test.out&#x27;, &#x27;w&#x27;))</span><br><span class="line">CompletedProcess(args=[&#x27;bc&#x27;, &#x27;-s&#x27;], returncode=0)</span><br><span class="line">&gt;&gt;&gt; open(&#x27;test.out&#x27;).read()</span><br><span class="line">&#x27;2\n&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="json"><a href="#json"></a>JSON</h2>
<p><strong>Text file format for storing collections of strings and
numbers.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">&lt;str&gt;    = json.dumps(&lt;object&gt;)     # Converts object to JSON string.</span><br><span class="line">&lt;object&gt; = json.loads(&lt;str&gt;)        # Converts JSON string to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-object-from-json-file"><a
href="#read-object-from-json-file"></a>Read Object from JSON File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_json_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return json.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-object-to-json-file"><a
href="#write-object-to-json-file"></a>Write Object to JSON File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_json_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        json.dump(an_object, file, ensure_ascii=False, indent=2)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pickle"><a href="#pickle"></a>Pickle</h2>
<p><strong>Binary file format for storing Python objects.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pickle</span><br><span class="line">&lt;bytes&gt;  = pickle.dumps(&lt;object&gt;)   # Converts object to bytes object.</span><br><span class="line">&lt;object&gt; = pickle.loads(&lt;bytes&gt;)    # Converts bytes object to object.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-object-from-file"><a href="#read-object-from-file"></a>Read
Object from File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_pickle_file(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return pickle.load(file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-object-to-file"><a href="#write-object-to-file"></a>Write
Object to File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_pickle_file(filename, an_object):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        pickle.dump(an_object, file)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="csv"><a href="#csv"></a>CSV</h2>
<p><strong>Text file format for storing spreadsheets.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import csv</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read"><a href="#read"></a>Read</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;reader&gt; = csv.reader(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;list&gt;   = next(&lt;reader&gt;)           # Returns next row as a list of strings.</span><br><span class="line">&lt;list&gt;   = list(&lt;reader&gt;)           # Returns a list of remaining rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or newlines embedded inside quoted fields will not be
interpreted correctly!</strong></li>
<li><strong>To print the spreadsheet to the console use <a
href="#table">Tabulate</a> library.</strong></li>
<li><strong>For XML and binary Excel files (xlsx, xlsm and xlsb) use <a
href="#dataframe-plot-encode-decode">Pandas</a> library.</strong></li>
</ul>
<h3 id="write"><a href="#write"></a>Write</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;writer&gt; = csv.writer(&lt;file&gt;)       # Also: `dialect=&#x27;excel&#x27;, delimiter=&#x27;,&#x27;`.</span><br><span class="line">&lt;writer&gt;.writerow(&lt;collection&gt;)     # Encodes objects using `str(&lt;el&gt;)`.</span><br><span class="line">&lt;writer&gt;.writerows(&lt;coll_of_coll&gt;)  # Appends multiple rows.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>File must be opened with a <code>'newline=""'</code>
argument, or ' will be added in front of every '' on platforms that use
'' line endings!</strong></li>
</ul>
<h3 id="parameters"><a href="#parameters"></a>Parameters</h3>
<ul>
<li><strong><code>'dialect'</code> - Master parameter that sets the
default values. String or a Dialect object.</strong></li>
<li><strong><code>'delimiter'</code> - A one-character string used to
separate fields.</strong></li>
<li><strong><code>'quotechar'</code> - Character for quoting fields that
contain special characters.</strong></li>
<li><strong><code>'doublequote'</code> - Whether quotechars inside
fields are/get doubled or escaped.</strong></li>
<li><strong><code>'skipinitialspace'</code> - Is space character at the
start of the field stripped by the reader.</strong></li>
<li><strong><code>'lineterminator'</code> - How writer terminates rows.
Reader is hardcoded to '', ', ''.</strong></li>
<li><strong><code>'quoting'</code> - 0: As necessary, 1: All, 2: All but
numbers which are read as floats, 3: None.</strong></li>
<li><strong><code>'escapechar'</code> - Character for escaping
quotechars if doublequote is False.</strong></li>
</ul>
<h3 id="dialects"><a href="#dialects"></a>Dialects</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">|                  |     excel    |   excel-tab  |     unix     |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line">| delimiter        |       &#x27;,&#x27;    |      &#x27;\t&#x27;    |       &#x27;,&#x27;    |</span><br><span class="line">| quotechar        |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |       &#x27;&quot;&#x27;    |</span><br><span class="line">| doublequote      |      True    |      True    |      True    |</span><br><span class="line">| skipinitialspace |     False    |     False    |     False    |</span><br><span class="line">| lineterminator   |    &#x27;\r\n&#x27;    |    &#x27;\r\n&#x27;    |      &#x27;\n&#x27;    |</span><br><span class="line">| quoting          |         0    |         0    |         1    |</span><br><span class="line">| escapechar       |      None    |      None    |      None    |</span><br><span class="line">+------------------+--------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-rows-from-csv-file"><a
href="#read-rows-from-csv-file"></a>Read Rows from CSV File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_csv_file(filename, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        return list(csv.reader(file, dialect))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-rows-to-csv-file"><a
href="#write-rows-to-csv-file"></a>Write Rows to CSV File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_csv_file(filename, rows, dialect=&#x27;excel&#x27;):</span><br><span class="line">    with open(filename, &#x27;w&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">        writer = csv.writer(file, dialect)</span><br><span class="line">        writer.writerows(rows)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="sqlite"><a href="#sqlite"></a>SQLite</h2>
<p><strong>A server-less database engine that stores each database into
a separate file.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import sqlite3</span><br><span class="line">&lt;conn&gt; = sqlite3.connect(&lt;path&gt;)                # Opens existing or new file. Also &#x27;:memory:&#x27;.</span><br><span class="line">&lt;conn&gt;.close()                                  # Closes the connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-1"><a href="#read-1"></a>Read</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)            # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;tuple&gt;  = &lt;cursor&gt;.fetchone()                  # Returns next row. Also next(&lt;cursor&gt;).</span><br><span class="line">&lt;list&gt;   = &lt;cursor&gt;.fetchall()                  # Returns remaining rows. Also list(&lt;cursor&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-1"><a href="#write-1"></a>Write</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                       # Can raise a subclass of sqlite3.Error.</span><br><span class="line">&lt;conn&gt;.commit()                                 # Saves all changes since the last commit.</span><br><span class="line">&lt;conn&gt;.rollback()                               # Discards all changes since the last commit.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="or"><a href="#or"></a>Or:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;conn&gt;:                                    # Exits the block with commit() or rollback(),</span><br><span class="line">    &lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;)                   # depending on whether any exception occurred.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="placeholders"><a href="#placeholders"></a>Placeholders</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;list/tuple&gt;)         # Replaces &#x27;?&#x27;s in query with values.</span><br><span class="line">&lt;conn&gt;.execute(&#x27;&lt;query&gt;&#x27;, &lt;dict/namedtuple&gt;)    # Replaces &#x27;:&lt;key&gt;&#x27;s with values.</span><br><span class="line">&lt;conn&gt;.executemany(&#x27;&lt;query&gt;&#x27;, &lt;coll_of_above&gt;)  # Runs execute() multiple times.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Passed values can be of type str, int, float, bytes, None,
bool, datetime.date or datetime.datetime.</strong></li>
<li><strong>Bools will be stored and returned as ints and dates as <a
href="#encode">ISO formatted strings</a>.</strong></li>
</ul>
<h3 id="example"><a href="#example"></a>Example</h3>
<p><strong>Values are not actually saved in this example because
<code>'conn.commit()'</code> is omitted!</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; conn = sqlite3.connect(&#x27;test.db&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;CREATE TABLE person (person_id INTEGER PRIMARY KEY, name, height)&#x27;)</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;INSERT INTO person VALUES (NULL, ?, ?)&#x27;, (&#x27;Jean-Luc&#x27;, 187)).lastrowid</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; conn.execute(&#x27;SELECT * FROM person&#x27;).fetchall()</span><br><span class="line">[(1, &#x27;Jean-Luc&#x27;, 187)]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="sqlalchemy"><a href="#sqlalchemy"></a>SqlAlchemy</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install sqlalchemy</span><br><span class="line">from sqlalchemy import create_engine, text</span><br><span class="line">&lt;engine&gt; = create_engine(&#x27;&lt;url&gt;&#x27;).connect()     # Url: &#x27;dialect://user:password@host/dbname&#x27;.</span><br><span class="line">&lt;conn&gt;   = &lt;engine&gt;.connect()                   # Creates a connection. Also &lt;conn&gt;.close().</span><br><span class="line">&lt;cursor&gt; = &lt;conn&gt;.execute(text(&#x27;&lt;query&gt;&#x27;), …)   # Replaces &#x27;:&lt;key&gt;&#x27;s with keyword arguments.</span><br><span class="line">with &lt;conn&gt;.begin(): ...                        # Exits the block with commit or rollback.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| Dialects   | pip3 install | import    | Dependencies                      |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line">| mysql      | mysqlclient  | MySQLdb   | www.pypi.org/project/mysqlclient  |</span><br><span class="line">| postgresql | psycopg2     | psycopg2  | www.psycopg.org/docs/install.html |</span><br><span class="line">| mssql      | pyodbc       | pyodbc    | apt install g++ unixodbc-dev      |</span><br><span class="line">| oracle     | cx_oracle    | cx_Oracle | Oracle Instant Client             |</span><br><span class="line">+------------+--------------+-----------+-----------------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="bytes"><a href="#bytes"></a>Bytes</h2>
<p><strong>Bytes object is an immutable sequence of single bytes.
Mutable version is called bytearray.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = b&#x27;&lt;str&gt;&#x27;                          # Only accepts ASCII characters and \x00-\xff.</span><br><span class="line">&lt;int&gt;   = &lt;bytes&gt;[&lt;index&gt;]                  # Returns an int in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;[&lt;slice&gt;]                  # Returns bytes even if it has only one element.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_bytes&gt;)     # Joins elements using bytes as a separator.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="encode-1"><a href="#encode-1"></a>Encode</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;coll_of_ints&gt;)             # Ints must be in range from 0 to 255.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;str&gt;, &#x27;utf-8&#x27;)             # Or: &lt;str&gt;.encode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;bytes&gt; = &lt;int&gt;.to_bytes(n_bytes, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&lt;bytes&gt; = bytes.fromhex(&#x27;&lt;hex&gt;&#x27;)            # Hex pairs can be separated by whitespaces.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="decode-1"><a href="#decode-1"></a>Decode</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;bytes&gt;)                     # Returns ints in range from 0 to 255.</span><br><span class="line">&lt;str&gt;   = str(&lt;bytes&gt;, &#x27;utf-8&#x27;)             # Or: &lt;bytes&gt;.decode(&#x27;utf-8&#x27;)</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;bytes&gt;, …)        # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;bytes&gt;.hex()                     # Returns hex pairs. Accepts `sep=&lt;str&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-bytes-from-file"><a href="#read-bytes-from-file"></a>Read
Bytes from File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_bytes(filename):</span><br><span class="line">    with open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        return file.read()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-bytes-to-file"><a href="#write-bytes-to-file"></a>Write
Bytes to File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_bytes(filename, bytes_obj):</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(bytes_obj)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="struct"><a href="#struct"></a>Struct</h2>
<ul>
<li><strong>Module that performs conversions between a sequence of
numbers and a bytes object.</strong></li>
<li><strong>System’s type sizes, byte order, and alignment rules are
used by default.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from struct import pack, unpack</span><br><span class="line">&lt;bytes&gt; = pack(&#x27;&lt;format&gt;&#x27;, &lt;el_1&gt; [, ...])  # Packages arguments into bytes object.</span><br><span class="line">&lt;tuple&gt; = unpack(&#x27;&lt;format&gt;&#x27;, &lt;bytes&gt;)       # Use iter_unpack() for iterator of tuples.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; pack(&#x27;&gt;hhl&#x27;, 1, 2, 3)</span><br><span class="line">b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;</span><br><span class="line">&gt;&gt;&gt; unpack(&#x27;&gt;hhl&#x27;, b&#x27;\x00\x01\x00\x02\x00\x00\x00\x03&#x27;)</span><br><span class="line">(1, 2, 3)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="format-2"><a href="#format-2"></a>Format</h3>
<h4
id="for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"><a
href="#for-standard-type-sizes-and-manual-alignment-padding-start-format-string-with"></a>For
standard type sizes and manual alignment (padding) start format string
with:</h4>
<ul>
<li><strong><code>'='</code> - System's byte order (usually
little-endian).</strong></li>
<li><strong><code>'&lt;'</code> - Little-endian.</strong></li>
<li><strong><code>'&gt;'</code> - Big-endian (also
<code>'!'</code>).</strong></li>
</ul>
<h4
id="besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"><a
href="#besides-numbers-pack-and-unpack-also-support-bytes-objects-as-part-of-the-sequence"></a>Besides
numbers, pack() and unpack() also support bytes objects as part of the
sequence:</h4>
<ul>
<li><strong><code>'c'</code> - A bytes object with a single element. For
pad byte use <code>'x'</code>.</strong></li>
<li><strong><code>'&lt;n&gt;s'</code> - A bytes object with n
elements.</strong></li>
</ul>
<h4
id="integer-types.-use-a-capital-letter-for-unsigned-type.-minimum-and-standard-sizes-are-in-brackets"><a
href="#integer-types-use-a-capital-letter-for-unsigned-type-minimum-and-standard-sizes-are-in-brackets"></a>Integer
types. Use a capital letter for unsigned type. Minimum and standard
sizes are in brackets:</h4>
<ul>
<li><strong><code>'b'</code> - char (1/1)</strong></li>
<li><strong><code>'h'</code> - short (2/2)</strong></li>
<li><strong><code>'i'</code> - int (2/4)</strong></li>
<li><strong><code>'l'</code> - long (4/4)</strong></li>
<li><strong><code>'q'</code> - long long (8/8)</strong></li>
</ul>
<h4 id="floating-point-types"><a
href="#floating-point-types"></a>Floating point types:</h4>
<ul>
<li><strong><code>'f'</code> - float (4/4)</strong></li>
<li><strong><code>'d'</code> - double (8/8)</strong></li>
</ul>
<h2 id="array"><a href="#array"></a>Array</h2>
<p><strong>List that can only hold numbers of a predefined type.
Available types and their minimum sizes in bytes are listed above. Sizes
and byte order are always determined by the system.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from array import array</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;collection&gt;)    # Array from collection of numbers.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;bytes&gt;)         # Array from bytes object.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;array&gt;)         # Treats array as a sequence of numbers.</span><br><span class="line">&lt;bytes&gt; = bytes(&lt;array&gt;)                       # Or: &lt;array&gt;.tobytes()</span><br><span class="line">&lt;file&gt;.write(&lt;array&gt;)                          # Writes array to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="memory-view"><a href="#memory-view"></a>Memory View</h2>
<ul>
<li><strong>A sequence object that points to the memory of another
object.</strong></li>
<li><strong>Each element can reference a single or multiple consecutive
bytes, depending on format.</strong></li>
<li><strong>Order and number of elements can be changed with
slicing.</strong></li>
<li><strong>Casting only works between char and other types and uses
system's sizes.</strong></li>
<li><strong>Byte order is always determined by the system.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;mview&gt; = memoryview(&lt;bytes/bytearray/array&gt;)  # Immutable if bytes, else mutable.</span><br><span class="line">&lt;real&gt;  = &lt;mview&gt;[&lt;index&gt;]                     # Returns an int or a float.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;[&lt;slice&gt;]                     # Mview with rearranged elements.</span><br><span class="line">&lt;mview&gt; = &lt;mview&gt;.cast(&#x27;&lt;typecode&gt;&#x27;)           # Casts memoryview to the new format.</span><br><span class="line">&lt;mview&gt;.release()                              # Releases the object&#x27;s memory buffer.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="decode-2"><a href="#decode-2"></a>Decode</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bytes&gt; = bytes(&lt;mview&gt;)                       # Returns a new bytes object.</span><br><span class="line">&lt;bytes&gt; = &lt;bytes&gt;.join(&lt;coll_of_mviews&gt;)       # Joins mviews using bytes object as sep.</span><br><span class="line">&lt;array&gt; = array(&#x27;&lt;typecode&gt;&#x27;, &lt;mview&gt;)         # Treats mview as a sequence of numbers.</span><br><span class="line">&lt;file&gt;.write(&lt;mview&gt;)                          # Writes mview to the binary file.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt;  = list(&lt;mview&gt;)                        # Returns a list of ints or floats.</span><br><span class="line">&lt;str&gt;   = str(&lt;mview&gt;, &#x27;utf-8&#x27;)                # Treats mview as a bytes object.</span><br><span class="line">&lt;int&gt;   = int.from_bytes(&lt;mview&gt;, …)           # `byteorder=&#x27;little/big&#x27;, signed=False`.</span><br><span class="line">&#x27;&lt;hex&gt;&#x27; = &lt;mview&gt;.hex()                        # Treats mview as a bytes object.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="deque"><a href="#deque"></a>Deque</h2>
<p><strong>A thread-safe list with efficient appends and pops from
either side. Pronounced "deck".</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line">&lt;deque&gt; = deque(&lt;collection&gt;, maxlen=None)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;deque&gt;.appendleft(&lt;el&gt;)                       # Opposite element is dropped if full.</span><br><span class="line">&lt;deque&gt;.extendleft(&lt;collection&gt;)               # Collection gets reversed.</span><br><span class="line">&lt;el&gt; = &lt;deque&gt;.popleft()                       # Raises IndexError if empty.</span><br><span class="line">&lt;deque&gt;.rotate(n=1)                            # Rotates elements to the right.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="threading"><a href="#threading"></a>Threading</h2>
<ul>
<li><strong>CPython interpreter can only run a single thread at a
time.</strong></li>
<li><strong>That is why using multiple threads won't result in a faster
execution, unless at least one of the threads contains an I/O
operation.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from threading import Thread, RLock, Semaphore, Event, Barrier</span><br><span class="line">from concurrent.futures import ThreadPoolExecutor</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="thread"><a href="#thread"></a>Thread</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Thread&gt; = Thread(target=&lt;function&gt;)           # Use `args=&lt;collection&gt;` to set the arguments.</span><br><span class="line">&lt;Thread&gt;.start()                               # Starts the thread.</span><br><span class="line">&lt;bool&gt; = &lt;Thread&gt;.is_alive()                   # Checks if the thread has finished executing.</span><br><span class="line">&lt;Thread&gt;.join()                                # Waits for the thread to finish.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'kwargs=&lt;dict&gt;'</code> to pass keyword
arguments to the function.</strong></li>
<li><strong>Use <code>'daemon=True'</code>, or the program will not be
able to exit while the thread is alive.</strong></li>
</ul>
<h3 id="lock"><a href="#lock"></a>Lock</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;lock&gt; = RLock()                               # Lock that can only be released by acquirer.</span><br><span class="line">&lt;lock&gt;.acquire()                               # Waits for the lock to be available.</span><br><span class="line">&lt;lock&gt;.release()                               # Makes the lock available again.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="or-1"><a href="#or-1"></a>Or:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">with &lt;lock&gt;:                                   # Enters the block by calling acquire(),</span><br><span class="line">    ...                                        # and exits it with release().</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="semaphore-event-barrier"><a
href="#semaphore-event-barrier"></a>Semaphore, Event, Barrier</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Semaphore&gt; = Semaphore(value=1)               # Lock that can be acquired by &#x27;value&#x27; threads.</span><br><span class="line">&lt;Event&gt;     = Event()                          # Method wait() blocks until set() is called.</span><br><span class="line">&lt;Barrier&gt;   = Barrier(n_times)                 # Wait() blocks until it&#x27;s called n_times.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="thread-pool-executor"><a href="#thread-pool-executor"></a>Thread
Pool Executor</h3>
<ul>
<li><strong>Object that manages thread execution.</strong></li>
<li><strong>An object with the same interface called ProcessPoolExecutor
provides true parallelism by running a separate interpreter in each
process. All arguments must be <a
href="#pickle">pickable</a>.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Exec&gt; = ThreadPoolExecutor(max_workers=None)  # Or: `with ThreadPoolExecutor() as &lt;name&gt;: …`</span><br><span class="line">&lt;Exec&gt;.shutdown(wait=True)                     # Blocks until all threads finish executing.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;iter&gt; = &lt;Exec&gt;.map(&lt;func&gt;, &lt;args_1&gt;, ...)     # A multithreaded and non-lazy map().</span><br><span class="line">&lt;Futr&gt; = &lt;Exec&gt;.submit(&lt;func&gt;, &lt;arg_1&gt;, ...)   # Starts a thread and returns its Future object.</span><br><span class="line">&lt;bool&gt; = &lt;Futr&gt;.done()                         # Checks if the thread has finished executing.</span><br><span class="line">&lt;obj&gt;  = &lt;Futr&gt;.result()                       # Waits for thread to finish and returns result.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="queue"><a href="#queue"></a>Queue</h3>
<p><strong>A thread-safe FIFO queue. For LIFO queue use
LifoQueue.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from queue import Queue</span><br><span class="line">&lt;Queue&gt; = Queue(maxsize=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Queue&gt;.put(&lt;el&gt;)                              # Blocks until queue stops being full.</span><br><span class="line">&lt;Queue&gt;.put_nowait(&lt;el&gt;)                       # Raises queue.Full exception if full.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get()                           # Blocks until queue stops being empty.</span><br><span class="line">&lt;el&gt; = &lt;Queue&gt;.get_nowait()                    # Raises queue.Empty exception if empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="operator"><a href="#operator"></a>Operator</h2>
<p><strong>Module of functions that provide the functionality of
operators.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import operator as op</span><br><span class="line">&lt;el&gt;      = op.add/sub/mul/truediv/floordiv/mod(&lt;el&gt;, &lt;el&gt;)  # +, -, *, /, //, %</span><br><span class="line">&lt;int/set&gt; = op.and_/or_/xor(&lt;int/set&gt;, &lt;int/set&gt;)            # &amp;, |, ^</span><br><span class="line">&lt;bool&gt;    = op.eq/ne/lt/le/gt/ge(&lt;sortable&gt;, &lt;sortable&gt;)     # ==, !=, &lt;, &lt;=, &gt;, &gt;=</span><br><span class="line">&lt;func&gt;    = op.itemgetter/attrgetter/methodcaller(&lt;obj&gt;)     # [index/key], .name, .name()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">elementwise_sum  = map(op.add, list_a, list_b)</span><br><span class="line">sorted_by_second = sorted(&lt;collection&gt;, key=op.itemgetter(1))</span><br><span class="line">sorted_by_both   = sorted(&lt;collection&gt;, key=op.itemgetter(1, 0))</span><br><span class="line">product_of_elems = functools.reduce(op.mul, &lt;collection&gt;)</span><br><span class="line">union_of_sets    = functools.reduce(op.or_, &lt;coll_of_sets&gt;)</span><br><span class="line">first_element    = op.methodcaller(&#x27;pop&#x27;, 0)(&lt;list&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Binary operators require objects to have and(), or(), xor()
and invert() special methods, unlike logical operators that work on all
types of objects.</strong></li>
<li><strong>Also:
<code>'&lt;bool&gt; = &lt;bool&gt; &amp;|^ &lt;bool&gt;'</code> and
<code>'&lt;int&gt; = &lt;bool&gt; &amp;|^ &lt;int&gt;'</code>.</strong></li>
</ul>
<h2 id="introspection"><a href="#introspection"></a>Introspection</h2>
<p><strong>Inspecting code at runtime.</strong></p>
<h3 id="variables"><a href="#variables"></a>Variables</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir()                             # Names of local variables (incl. functions).</span><br><span class="line">&lt;dict&gt; = vars()                            # Dict of local variables. Also locals().</span><br><span class="line">&lt;dict&gt; = globals()                         # Dict of global variables.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="attributes-1"><a href="#attributes-1"></a>Attributes</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;list&gt; = dir(&lt;object&gt;)                     # Names of object&#x27;s attributes (incl. methods).</span><br><span class="line">&lt;dict&gt; = vars(&lt;object&gt;)                    # Dict of writable attributes. Also &lt;obj&gt;.__dict__.</span><br><span class="line">&lt;bool&gt; = hasattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Checks if getattr() raises an AttributeError.</span><br><span class="line">value  = getattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)  # Raises AttributeError if attribute is missing.</span><br><span class="line">setattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;, value)    # Only works on objects with &#x27;__dict__&#x27; attribute.</span><br><span class="line">delattr(&lt;object&gt;, &#x27;&lt;attr_name&gt;&#x27;)           # Same. Also `del &lt;object&gt;.&lt;attr_name&gt;`.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="parameters-1"><a href="#parameters-1"></a>Parameters</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sig&gt;  = inspect.signature(&lt;function&gt;)     # Function&#x27;s Signature object.</span><br><span class="line">&lt;dict&gt; = &lt;Sig&gt;.parameters                  # Dict of Parameter objects.</span><br><span class="line">&lt;memb&gt; = &lt;Param&gt;.kind                      # Member of ParameterKind enum.</span><br><span class="line">&lt;obj&gt;  = &lt;Param&gt;.default                   # Default value or &lt;Param&gt;.empty.</span><br><span class="line">&lt;type&gt; = &lt;Param&gt;.annotation                # Type or &lt;Param&gt;.empty.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="metaprogramming"><a
href="#metaprogramming"></a>Metaprogramming</h2>
<p><strong>Code that generates code.</strong></p>
<h3 id="type-1"><a href="#type-1"></a>Type</h3>
<p><strong>Type is the root class. If only passed an object it returns
its type (class). Otherwise it creates a new class.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class&gt; = type(&#x27;&lt;class_name&gt;&#x27;, &lt;tuple_of_parents&gt;, &lt;dict_of_class_attributes&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Z = type(&#x27;Z&#x27;, (), &#123;&#x27;a&#x27;: &#x27;abcde&#x27;, &#x27;b&#x27;: 12345&#125;)</span><br><span class="line">&gt;&gt;&gt; z = Z()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="meta-class"><a href="#meta-class"></a>Meta Class</h3>
<p><strong>A class that creates classes.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def my_meta_class(name, parents, attrs):</span><br><span class="line">    attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">    return type(name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="or-2"><a href="#or-2"></a>Or:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyMetaClass(type):</span><br><span class="line">    def __new__(cls, name, parents, attrs):</span><br><span class="line">        attrs[&#x27;a&#x27;] = &#x27;abcde&#x27;</span><br><span class="line">        return type.__new__(cls, name, parents, attrs)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>New() is a class method that gets called before init(). If
it returns an instance of its class, then that instance gets passed to
init() as a 'self' argument.</strong></li>
<li><strong>It receives the same arguments as init(), except for the
first one that specifies the desired type of the returned instance
(MyMetaClass in our case).</strong></li>
<li><strong>Like in our case, new() can also be called directly, usually
from a new() method of a child class
(</strong><code>def __new__(cls): return super().__new__(cls)</code><strong>).</strong></li>
<li><strong>The only difference between the examples above is that
my_meta_class() returns a class of type type, while MyMetaClass()
returns a class of type MyMetaClass.</strong></li>
</ul>
<h3 id="metaclass-attribute"><a
href="#metaclass-attribute"></a>Metaclass Attribute</h3>
<p><strong>Right before a class is created it checks if it has the
'metaclass' attribute defined. If not, it recursively checks if any of
his parents has it defined and eventually comes to type().</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class MyClass(metaclass=MyMetaClass):</span><br><span class="line">    b = 12345</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; MyClass.a, MyClass.b</span><br><span class="line">(&#x27;abcde&#x27;, 12345)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="type-diagram"><a href="#type-diagram"></a>Type Diagram</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type(MyClass) == MyMetaClass         # MyClass is an instance of MyMetaClass.</span><br><span class="line">type(MyMetaClass) == type            # MyMetaClass is an instance of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass --&gt; MyMetaClass |</span><br><span class="line">|             |     v       |</span><br><span class="line">|    object -----&gt; type &lt;+  |</span><br><span class="line">|             |     ^ +--+  |</span><br><span class="line">|     str ----------+       |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="inheritance-diagram"><a
href="#inheritance-diagram"></a>Inheritance Diagram</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyClass.__base__ == object           # MyClass is a subclass of object.</span><br><span class="line">MyMetaClass.__base__ == type         # MyMetaClass is a subclass of type.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-------------+-------------+</span><br><span class="line">|   Classes   | Metaclasses |</span><br><span class="line">+-------------+-------------|</span><br><span class="line">|   MyClass   | MyMetaClass |</span><br><span class="line">|      v      |     v       |</span><br><span class="line">|    object &lt;----- type     |</span><br><span class="line">|      ^      |             |</span><br><span class="line">|     str     |             |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="eval"><a href="#eval"></a>Eval</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from ast import literal_eval</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;[1, 2, 3]&#x27;)</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; literal_eval(&#x27;1 + 2&#x27;)</span><br><span class="line">ValueError: malformed node or string</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="coroutines"><a href="#coroutines"></a>Coroutines</h2>
<ul>
<li><strong>Coroutines have a lot in common with threads, but unlike
threads, they only give up control when they call another coroutine and
they don’t use as much memory.</strong></li>
<li><strong>Coroutine definition starts with <code>'async'</code> and
its call with <code>'await'</code>.</strong></li>
<li><strong><code>'asyncio.run(&lt;coroutine&gt;)'</code> is the main
entry point for asynchronous programs.</strong></li>
<li><strong>Functions wait(), gather() and as_completed() start multiple
coroutines at the same time.</strong></li>
<li><strong>Asyncio module also provides its own <a
href="#queue">Queue</a>, <a href="#semaphore-event-barrier">Event</a>,
<a href="#lock">Lock</a> and <a
href="#semaphore-event-barrier">Semaphore</a> classes.</strong></li>
</ul>
<h4
id="runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"><a
href="#runs-a-terminal-game-where-you-control-an-asterisk-that-must-avoid-numbers"></a>Runs
a terminal game where you control an asterisk that must avoid
numbers:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import asyncio, collections, curses, curses.textpad, enum, random</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)         # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                  # Direction</span><br><span class="line">W, H = 15, 7                                   # Width, Height</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    curses.curs_set(0)                         # Makes cursor invisible.</span><br><span class="line">    screen.nodelay(True)                       # Makes getch() non-blocking.</span><br><span class="line">    asyncio.run(main_coroutine(screen))        # Starts running asyncio code.</span><br><span class="line"></span><br><span class="line">async def main_coroutine(screen):</span><br><span class="line">    moves = asyncio.Queue()</span><br><span class="line">    state = &#123;&#x27;*&#x27;: P(0, 0), **&#123;id_: P(W//2, H//2) for id_ in range(10)&#125;&#125;</span><br><span class="line">    ai    = [random_controller(id_, moves) for id_ in range(10)]</span><br><span class="line">    mvc   = [human_controller(screen, moves), model(moves, state), view(state, screen)]</span><br><span class="line">    tasks = [asyncio.create_task(cor) for cor in ai + mvc]</span><br><span class="line">    await asyncio.wait(tasks, return_when=asyncio.FIRST_COMPLETED)</span><br><span class="line"></span><br><span class="line">async def random_controller(id_, moves):</span><br><span class="line">    while True:</span><br><span class="line">        d = random.choice(list(D))</span><br><span class="line">        moves.put_nowait((id_, d))</span><br><span class="line">        await asyncio.sleep(random.triangular(0.01, 0.65))</span><br><span class="line"></span><br><span class="line">async def human_controller(screen, moves):</span><br><span class="line">    while True:</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        key_mappings = &#123;258: D.s, 259: D.n, 260: D.w, 261: D.e&#125;</span><br><span class="line">        if ch in key_mappings:</span><br><span class="line">            moves.put_nowait((&#x27;*&#x27;, key_mappings[ch]))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">async def model(moves, state):</span><br><span class="line">    while state[&#x27;*&#x27;] not in (state[id_] for id_ in range(10)):</span><br><span class="line">        id_, d = await moves.get()</span><br><span class="line">        x, y   = state[id_]</span><br><span class="line">        deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">        state[id_] = P((x + deltas[d].x) % W, (y + deltas[d].y) % H)</span><br><span class="line"></span><br><span class="line">async def view(state, screen):</span><br><span class="line">    offset = P(curses.COLS//2 - W//2, curses.LINES//2 - H//2)</span><br><span class="line">    while True:</span><br><span class="line">        screen.erase()</span><br><span class="line">        curses.textpad.rectangle(screen, offset.y-1, offset.x-1, offset.y+H, offset.x+W)</span><br><span class="line">        for id_, p in state.items():</span><br><span class="line">            screen.addstr(offset.y + (p.y - state[&#x27;*&#x27;].y + H//2) % H,</span><br><span class="line">                          offset.x + (p.x - state[&#x27;*&#x27;].x + W//2) % W, str(id_))</span><br><span class="line">        await asyncio.sleep(0.005)</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="libraries"><a href="#libraries"></a>Libraries</h1>
<h2 id="progress-bar"><a href="#progress-bar"></a>Progress Bar</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tqdm</span><br><span class="line">&gt;&gt;&gt; from tqdm import tqdm</span><br><span class="line">&gt;&gt;&gt; from time import sleep</span><br><span class="line">&gt;&gt;&gt; for el in tqdm([1, 2, 3], desc=&#x27;Processing&#x27;):</span><br><span class="line">...     sleep(1)</span><br><span class="line">Processing: 100%|████████████████████| 3/3 [00:03&lt;00:00,  1.00s/it]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="plot"><a href="#plot"></a>Plot</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install matplotlib</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.plot(&lt;x_data&gt;, &lt;y_data&gt; [, label=&lt;str&gt;])   # Or: plt.plot(&lt;y_data&gt;)</span><br><span class="line">plt.legend()                                   # Adds a legend.</span><br><span class="line">plt.savefig(&lt;path&gt;)                            # Saves the figure.</span><br><span class="line">plt.show()                                     # Displays the figure.</span><br><span class="line">plt.clf()                                      # Clears the figure.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="table"><a href="#table"></a>Table</h2>
<h4 id="prints-a-csv-file-as-an-ascii-table"><a
href="#prints-a-csv-file-as-an-ascii-table"></a>Prints a CSV file as an
ASCII table:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install tabulate</span><br><span class="line">import csv, tabulate</span><br><span class="line">with open(&#x27;test.csv&#x27;, encoding=&#x27;utf-8&#x27;, newline=&#x27;&#x27;) as file:</span><br><span class="line">    rows   = csv.reader(file)</span><br><span class="line">    header = next(rows)</span><br><span class="line">    table  = tabulate.tabulate(rows, header)</span><br><span class="line">print(table)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="curses"><a href="#curses"></a>Curses</h2>
<h4 id="runs-a-basic-file-explorer-in-the-terminal"><a
href="#runs-a-basic-file-explorer-in-the-terminal"></a>Runs a basic file
explorer in the terminal:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import curses, curses.ascii, os</span><br><span class="line">from curses import A_REVERSE, KEY_DOWN, KEY_UP, KEY_LEFT, KEY_RIGHT, KEY_ENTER</span><br><span class="line"></span><br><span class="line">def main(screen):</span><br><span class="line">    ch, first, selected, paths = 0, 0, 0, os.listdir()</span><br><span class="line">    while ch != curses.ascii.ESC:</span><br><span class="line">        height, _ = screen.getmaxyx()</span><br><span class="line">        screen.erase()</span><br><span class="line">        for y, filename in enumerate(paths[first : first+height]):</span><br><span class="line">            screen.addstr(y, 0, filename, A_REVERSE * (selected == first + y))</span><br><span class="line">        ch = screen.getch()</span><br><span class="line">        selected += (ch == KEY_DOWN) - (ch == KEY_UP)</span><br><span class="line">        selected = max(0, min(len(paths)-1, selected))</span><br><span class="line">        first += (first &lt;= selected - height) - (first &gt; selected)</span><br><span class="line">        if ch in [KEY_LEFT, KEY_RIGHT, KEY_ENTER, 10, 13]:</span><br><span class="line">            new_dir = &#x27;..&#x27; if ch == KEY_LEFT else paths[selected]</span><br><span class="line">            if os.path.isdir(new_dir):</span><br><span class="line">                os.chdir(new_dir)</span><br><span class="line">                first, selected, paths = 0, 0, os.listdir()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    curses.wrapper(main)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="logging"><a href="#logging"></a>Logging</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install loguru</span><br><span class="line">from loguru import logger</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logger.add(&#x27;debug_&#123;time&#125;.log&#x27;, colorize=True)  # Connects a log file.</span><br><span class="line">logger.add(&#x27;error_&#123;time&#125;.log&#x27;, level=&#x27;ERROR&#x27;)  # Another file for errors or higher.</span><br><span class="line">logger.&lt;level&gt;(&#x27;A logging message.&#x27;)           # Logs to file/s and prints to stderr.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Levels: <code>'debug'</code>, <code>'info'</code>,
<code>'success'</code>, <code>'warning'</code>, <code>'error'</code>,
<code>'critical'</code>.</strong></li>
</ul>
<h3 id="exceptions-2"><a href="#exceptions-2"></a>Exceptions</h3>
<p><strong>Exception description, stack trace and values of variables
are appended automatically.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">try:</span><br><span class="line">    ...</span><br><span class="line">except &lt;exception&gt;:</span><br><span class="line">    logger.exception(&#x27;An error happened.&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="rotation"><a href="#rotation"></a>Rotation</h3>
<p><strong>Argument that sets a condition when a new log file is
created.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rotation=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;datetime.time&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max file size in
bytes.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;time&gt;'</code> - Time of day.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Any of above as a string:
<code>'100 MB'</code>, <code>'1 month'</code>,
<code>'monday at 12:00'</code>, ...</strong></li>
</ul>
<h3 id="retention"><a href="#retention"></a>Retention</h3>
<p><strong>Sets a condition which old log files get
deleted.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">retention=&lt;int&gt;|&lt;datetime.timedelta&gt;|&lt;str&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>'&lt;int&gt;'</code> - Max number of
files.</strong></li>
<li><strong><code>'&lt;timedelta&gt;'</code> - Max age of a
file.</strong></li>
<li><strong><code>'&lt;str&gt;'</code> - Max age as a string:
<code>'1 week, 3 days'</code>, <code>'2 months'</code>,
...</strong></li>
</ul>
<h2 id="scraping"><a href="#scraping"></a>Scraping</h2>
<h4
id="scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"><a
href="#scrapes-pythons-url-version-number-and-logo-from-its-wikipedia-page"></a>Scrapes
Python's URL, version number and logo from its Wikipedia page:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests beautifulsoup4</span><br><span class="line">import requests, bs4, os, sys</span><br><span class="line"></span><br><span class="line">WIKI_URL = &#x27;https://en.wikipedia.org/wiki/Python_(programming_language)&#x27;</span><br><span class="line">try:</span><br><span class="line">    html       = requests.get(WIKI_URL).text</span><br><span class="line">    document   = bs4.BeautifulSoup(html, &#x27;html.parser&#x27;)</span><br><span class="line">    table      = document.find(&#x27;table&#x27;, class_=&#x27;infobox vevent&#x27;)</span><br><span class="line">    python_url = table.find(&#x27;th&#x27;, text=&#x27;Website&#x27;).next_sibling.a[&#x27;href&#x27;]</span><br><span class="line">    version    = table.find(&#x27;th&#x27;, text=&#x27;Stable release&#x27;).next_sibling.strings.__next__()</span><br><span class="line">    logo_url   = table.find(&#x27;img&#x27;)[&#x27;src&#x27;]</span><br><span class="line">    logo       = requests.get(f&#x27;https:&#123;logo_url&#125;&#x27;).content</span><br><span class="line">    filename   = os.path.basename(logo_url)</span><br><span class="line">    with open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.write(logo)</span><br><span class="line">    print(f&#x27;&#123;python_url&#125;, &#123;version&#125;, file://&#123;os.path.abspath(filename)&#125;&#x27;)</span><br><span class="line">except requests.exceptions.ConnectionError:</span><br><span class="line">    print(&quot;You&#x27;ve got problems with connection.&quot;, file=sys.stderr)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="web"><a href="#web"></a>Web</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install bottle</span><br><span class="line">from bottle import run, route, static_file, template, post, request, response</span><br><span class="line">import json</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="run"><a href="#run"></a>Run</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run(host=&#x27;localhost&#x27;, port=8080)        # Runs locally.</span><br><span class="line">run(host=&#x27;0.0.0.0&#x27;, port=80)            # Runs globally.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="static-request"><a href="#static-request"></a>Static
Request</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/img/&lt;filename&gt;&#x27;)</span><br><span class="line">def send_file(filename):</span><br><span class="line">    return static_file(filename, root=&#x27;img_dir/&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="dynamic-request"><a href="#dynamic-request"></a>Dynamic
Request</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@route(&#x27;/&lt;sport&gt;&#x27;)</span><br><span class="line">def send_html(sport):</span><br><span class="line">    return template(&#x27;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&#x27;, title=sport)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="rest-request"><a href="#rest-request"></a>REST Request</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@post(&#x27;/&lt;sport&gt;/odds&#x27;)</span><br><span class="line">def send_json(sport):</span><br><span class="line">    team = request.forms.get(&#x27;team&#x27;)</span><br><span class="line">    response.headers[&#x27;Content-Type&#x27;] = &#x27;application/json&#x27;</span><br><span class="line">    response.headers[&#x27;Cache-Control&#x27;] = &#x27;no-cache&#x27;</span><br><span class="line">    return json.dumps(&#123;&#x27;team&#x27;: team, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="test"><a href="#test"></a>Test:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install requests</span><br><span class="line">&gt;&gt;&gt; import threading, requests</span><br><span class="line">&gt;&gt;&gt; threading.Thread(target=run, daemon=True).start()</span><br><span class="line">&gt;&gt;&gt; url = &#x27;http://localhost:8080/football/odds&#x27;</span><br><span class="line">&gt;&gt;&gt; request_data = &#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;&#125;</span><br><span class="line">&gt;&gt;&gt; response = requests.post(url, data=request_data)</span><br><span class="line">&gt;&gt;&gt; response.json()</span><br><span class="line">&#123;&#x27;team&#x27;: &#x27;arsenal f.c.&#x27;, &#x27;odds&#x27;: [2.09, 3.74, 3.68]&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="profiling"><a href="#profiling"></a>Profiling</h2>
<h3 id="stopwatch"><a href="#stopwatch"></a>Stopwatch</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from time import perf_counter</span><br><span class="line">start_time = perf_counter()</span><br><span class="line">...</span><br><span class="line">duration_in_seconds = perf_counter() - start_time</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="timing-a-snippet"><a href="#timing-a-snippet"></a>Timing a
Snippet</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from timeit import timeit</span><br><span class="line">&gt;&gt;&gt; timeit(&quot;&#x27;&#x27;.join(str(i) for i in range(100))&quot;,</span><br><span class="line">...        number=10000, globals=globals(), setup=&#x27;pass&#x27;)</span><br><span class="line">0.34986</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="profiling-by-line"><a href="#profiling-by-line"></a>Profiling by
Line</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install line_profiler memory_profiler</span><br><span class="line">@profile</span><br><span class="line">def main():</span><br><span class="line">    a = [*range(10000)]</span><br><span class="line">    b = &#123;*range(10000)&#125;</span><br><span class="line">main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kernprof -lv test.py</span><br><span class="line">Line #   Hits     Time  Per Hit   % Time  Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1                                    @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3      1    955.0    955.0     43.7      a = [*range(10000)]</span><br><span class="line">     4      1   1231.0   1231.0     56.3      b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ python3 -m memory_profiler test.py</span><br><span class="line">Line #         Mem usage      Increment   Line Contents</span><br><span class="line">=======================================================</span><br><span class="line">     1        37.668 MiB     37.668 MiB   @profile</span><br><span class="line">     2                                    def main():</span><br><span class="line">     3        38.012 MiB      0.344 MiB       a = [*range(10000)]</span><br><span class="line">     4        38.477 MiB      0.465 MiB       b = &#123;*range(10000)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="call-graph"><a href="#call-graph"></a>Call Graph</h3>
<h4
id="generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"><a
href="#generates-a-png-image-of-the-call-graph-with-highlighted-bottlenecks"></a>Generates
a PNG image of the call graph with highlighted bottlenecks:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pycallgraph2; apt/brew install graphviz</span><br><span class="line">import pycallgraph2 as cg, datetime</span><br><span class="line"></span><br><span class="line">filename = f&#x27;profile-&#123;datetime.datetime.now():%Y%m%d_%H%M%S&#125;.png&#x27;</span><br><span class="line">drawer = cg.output.GraphvizOutput(output_file=filename)</span><br><span class="line">with cg.PyCallGraph(drawer):</span><br><span class="line">    &lt;code_to_be_profiled&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="numpy"><a href="#numpy"></a>NumPy</h2>
<p><strong>Array manipulation mini-language. It can run up to one
hundred times faster than the equivalent Python code. An even faster
alternative that runs on a GPU is called CuPy.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install numpy</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = np.array(&lt;list/list_of_lists&gt;)                # Returns 1d/2d NumPy array.</span><br><span class="line">&lt;array&gt; = np.zeros/ones(&lt;shape&gt;)                        # Also np.full(&lt;shape&gt;, &lt;el&gt;).</span><br><span class="line">&lt;array&gt; = np.arange(from_inc, to_exc, ±step)            # Also np.linspace(start, stop, num).</span><br><span class="line">&lt;array&gt; = np.random.randint(from_inc, to_exc, &lt;shape&gt;)  # Also np.random.random(&lt;shape&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;view&gt;  = &lt;array&gt;.reshape(&lt;shape&gt;)                      # Also `&lt;array&gt;.shape = &lt;shape&gt;`.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.flatten()                             # Collapses array into one dimension.</span><br><span class="line">&lt;view&gt;  = &lt;array&gt;.squeeze()                             # Removes dimensions of length one.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;array&gt; = &lt;array&gt;.sum/min/mean/var/std(axis)            # Passed dimension gets aggregated.</span><br><span class="line">&lt;array&gt; = &lt;array&gt;.argmin(axis)                          # Returns indexes of smallest elements.</span><br><span class="line">&lt;array&gt; = np.apply_along_axis(&lt;func&gt;, axis, &lt;array&gt;)    # Func can return a scalar or array.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Shape is a tuple of dimension sizes. A 100x50 RGB image has
shape (50, 100, 3).</strong></li>
<li><strong>Axis is an index of the dimension that gets aggregated.
Leftmost dimension has index 0. Summing the RGB image along axis 2 will
return a greyscale image with shape (50, 100).</strong></li>
<li><strong>Passing a tuple of axes will chain the operations like this:
<code>'&lt;array&gt;.&lt;method&gt;(axis_1, keepdims=True).&lt;method&gt;(axis_2).squeeze()'</code>.</strong></li>
</ul>
<h3 id="indexing"><a href="#indexing"></a>Indexing</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;       = &lt;2d_array&gt;[row_index, column_index]        # &lt;3d_a&gt;[table_i, row_i, column_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[row_index]                      # &lt;3d_a&gt;[table_i, row_i]</span><br><span class="line">&lt;1d_view&gt;  = &lt;2d_array&gt;[:, column_index]                # &lt;3d_a&gt;[table_i, :, column_i]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[row_indexes, column_indexes]    # &lt;3d_a&gt;[table_is, row_is, column_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[row_indexes]                    # &lt;3d_a&gt;[table_is, row_is]</span><br><span class="line">&lt;2d_array&gt; = &lt;2d_array&gt;[:, column_indexes]              # &lt;3d_a&gt;[table_is, :, column_is]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_bools&gt; = &lt;2d_array&gt; &gt;&lt;== &lt;el&gt;                       # &lt;3d_array&gt; &gt;&lt;== &lt;1d_array&gt;</span><br><span class="line">&lt;1d_array&gt; = &lt;2d_array&gt;[&lt;2d_bools&gt;]                     # &lt;3d_array&gt;[&lt;2d_bools&gt;]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>All examples also allow assignments.</strong></li>
</ul>
<h3 id="broadcasting"><a href="#broadcasting"></a>Broadcasting</h3>
<p><strong>Broadcasting is a set of rules by which NumPy functions
operate on arrays of different sizes and/or dimensions.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [ 0.1 ,  0.6 ,  0.8 ]                           # Shape: (3,)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"><a
href="#1-if-array-shapes-differ-in-length-left-pad-the-shorter-shape-with-ones"></a>1.
If array shapes differ in length, left-pad the shorter shape with
ones:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1], [0.6], [0.8]]                           # Shape: (3, 1)</span><br><span class="line">right = [[0.1 ,  0.6 ,  0.8]]                           # Shape: (1, 3) &lt;- !</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4
id="if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"><a
href="#2-if-any-dimensions-differ-in-size-expand-the-ones-that-have-size-1-by-duplicating-their-elements"></a>2.
If any dimensions differ in size, expand the ones that have size 1 by
duplicating their elements:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">left  = [[0.1,  0.1,  0.1],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.6,  0.6,  0.6],</span><br><span class="line">         [0.8,  0.8,  0.8]]</span><br><span class="line"></span><br><span class="line">right = [[0.1,  0.6,  0.8],                             # Shape: (3, 3) &lt;- !</span><br><span class="line">         [0.1,  0.6,  0.8],</span><br><span class="line">         [0.1,  0.6,  0.8]]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="if-neither-non-matching-dimension-has-size-1-raise-an-error."><a
href="#3-if-neither-non-matching-dimension-has-size-1-raise-an-error"></a>3.
If neither non-matching dimension has size 1, raise an error.</h4>
<h3 id="example-1"><a href="#example-1"></a>Example</h3>
<h4
id="for-each-point-returns-index-of-its-nearest-point-0.1-0.6-0.8-1-2-1"><a
href="#for-each-point-returns-index-of-its-nearest-point-01-06-08--1-2-1"></a>For
each point returns index of its nearest point
(<code>[0.1, 0.6, 0.8] =&gt; [1, 2, 1]</code>):</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; points = np.array([0.1, 0.6, 0.8])</span><br><span class="line"> [ 0.1,  0.6,  0.8]</span><br><span class="line">&gt;&gt;&gt; wrapped_points = points.reshape(3, 1)</span><br><span class="line">[[ 0.1],</span><br><span class="line"> [ 0.6],</span><br><span class="line"> [ 0.8]]</span><br><span class="line">&gt;&gt;&gt; distances = wrapped_points - points</span><br><span class="line">[[ 0. , -0.5, -0.7],</span><br><span class="line"> [ 0.5,  0. , -0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; distances = np.abs(distances)</span><br><span class="line">[[ 0. ,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  0. ,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  0. ]]</span><br><span class="line">&gt;&gt;&gt; i = np.arange(3)</span><br><span class="line">[0, 1, 2]</span><br><span class="line">&gt;&gt;&gt; distances[i, i] = np.inf</span><br><span class="line">[[ inf,  0.5,  0.7],</span><br><span class="line"> [ 0.5,  inf,  0.2],</span><br><span class="line"> [ 0.7,  0.2,  inf]]</span><br><span class="line">&gt;&gt;&gt; distances.argmin(1)</span><br><span class="line">[1, 2, 1]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="image"><a href="#image"></a>Image</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pillow</span><br><span class="line">from PIL import Image</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Image&gt; = Image.new(&#x27;&lt;mode&gt;&#x27;, (width, height))   # Also: `color=&lt;int/tuple/str&gt;`.</span><br><span class="line">&lt;Image&gt; = Image.open(&lt;path&gt;)                     # Identifies format based on file contents.</span><br><span class="line">&lt;Image&gt; = &lt;Image&gt;.convert(&#x27;&lt;mode&gt;&#x27;)              # Converts image to the new mode.</span><br><span class="line">&lt;Image&gt;.save(&lt;path&gt;)                             # Selects format based on the path extension.</span><br><span class="line">&lt;Image&gt;.show()                                   # Opens image in default preview app.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;int/tuple&gt; = &lt;Image&gt;.getpixel((x, y))           # Returns a pixel.</span><br><span class="line">&lt;Image&gt;.putpixel((x, y), &lt;int/tuple&gt;)            # Writes a pixel to the image.</span><br><span class="line">&lt;ImagingCore&gt; = &lt;Image&gt;.getdata()                # Returns a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.putdata(&lt;list/ImagingCore&gt;)              # Writes a flattened sequence of pixels.</span><br><span class="line">&lt;Image&gt;.paste(&lt;Image&gt;, (x, y))                   # Writes passed image to the image.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;2d_array&gt; = np.array(&lt;Image_L&gt;)                 # Creates NumPy array from greyscale image.</span><br><span class="line">&lt;3d_array&gt; = np.array(&lt;Image_RGB/A&gt;)             # Creates NumPy array from color image.</span><br><span class="line">&lt;Image&gt;    = Image.fromarray(np.uint8(&lt;array&gt;))  # Use &lt;array&gt;.clip(0, 255) to clip the values.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="modes-1"><a href="#modes-1"></a>Modes</h3>
<ul>
<li><strong><code>'1'</code> - 1-bit pixels, black and white, stored
with one pixel per byte.</strong></li>
<li><strong><code>'L'</code> - 8-bit pixels, greyscale.</strong></li>
<li><strong><code>'RGB'</code> - 3x8-bit pixels, true
color.</strong></li>
<li><strong><code>'RGBA'</code> - 4x8-bit pixels, true color with
transparency mask.</strong></li>
<li><strong><code>'HSV'</code> - 3x8-bit pixels, Hue, Saturation, Value
color space.</strong></li>
</ul>
<h3 id="examples"><a href="#examples"></a>Examples</h3>
<h4 id="creates-a-png-image-of-a-rainbow-gradient"><a
href="#creates-a-png-image-of-a-rainbow-gradient"></a>Creates a PNG
image of a rainbow gradient:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">WIDTH, HEIGHT = 100, 100</span><br><span class="line">n_pixels = WIDTH * HEIGHT</span><br><span class="line">hues = (255 * i/n_pixels for i in range(n_pixels))</span><br><span class="line">img = Image.new(&#x27;HSV&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">img.putdata([(int(h), 255, 255) for h in hues])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="adds-noise-to-a-png-image"><a
href="#adds-noise-to-a-png-image"></a>Adds noise to a PNG image:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from random import randint</span><br><span class="line">add_noise = lambda value: max(0, min(255, value + randint(-20, 20)))</span><br><span class="line">img = Image.open(&#x27;test.png&#x27;).convert(&#x27;HSV&#x27;)</span><br><span class="line">img.putdata([(add_noise(h), s, v) for h, s, v in img.getdata()])</span><br><span class="line">img.convert(&#x27;RGB&#x27;).save(&#x27;test.png&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="image-draw"><a href="#image-draw"></a>Image Draw</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from PIL import ImageDraw</span><br><span class="line">&lt;ImageDraw&gt; = ImageDraw.Draw(&lt;Image&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;ImageDraw&gt;.point((x, y))                        # Truncates floats into ints.</span><br><span class="line">&lt;ImageDraw&gt;.line((x1, y1, x2, y2 [, ...]))       # To get anti-aliasing use Image&#x27;s resize().</span><br><span class="line">&lt;ImageDraw&gt;.arc((x1, y1, x2, y2), deg1, deg2)    # Always draws in clockwise direction.</span><br><span class="line">&lt;ImageDraw&gt;.rectangle((x1, y1, x2, y2))          # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line">&lt;ImageDraw&gt;.polygon((x1, y1, x2, y2, ...))       # Last point gets connected to the first.</span><br><span class="line">&lt;ImageDraw&gt;.ellipse((x1, y1, x2, y2))            # To rotate use Image&#x27;s rotate() and paste().</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'fill=&lt;color&gt;'</code> to set the primary
color.</strong></li>
<li><strong>Use <code>'width=&lt;int&gt;'</code> to set the width of
lines or contours.</strong></li>
<li><strong>Use <code>'outline=&lt;color&gt;'</code> to set the color of
the contours.</strong></li>
<li><strong>Color can be an int, tuple, <code>'#rrggbb[aa]'</code>
string or a color name.</strong></li>
</ul>
<h2 id="animation"><a href="#animation"></a>Animation</h2>
<h4 id="creates-a-gif-of-a-bouncing-ball"><a
href="#creates-a-gif-of-a-bouncing-ball"></a>Creates a GIF of a bouncing
ball:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install imageio</span><br><span class="line">from PIL import Image, ImageDraw</span><br><span class="line">import imageio</span><br><span class="line"></span><br><span class="line">WIDTH, HEIGHT, R = 126, 126, 10</span><br><span class="line">frames = []</span><br><span class="line">for velocity in range(1, 16):</span><br><span class="line">    y = sum(range(velocity))</span><br><span class="line">    frame = Image.new(&#x27;L&#x27;, (WIDTH, HEIGHT))</span><br><span class="line">    draw  = ImageDraw.Draw(frame)</span><br><span class="line">    draw.ellipse((WIDTH/2-R, y, WIDTH/2+R, y+R*2), fill=&#x27;white&#x27;)</span><br><span class="line">    frames.append(frame)</span><br><span class="line">frames += reversed(frames[1:-1])</span><br><span class="line">imageio.mimsave(&#x27;test.gif&#x27;, frames, duration=0.03)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="audio"><a href="#audio"></a>Audio</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import wave</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_read&gt;  = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;rb&#x27;)        # Opens the WAV file.</span><br><span class="line">framerate    = &lt;Wave_read&gt;.getframerate()       # Number of frames per second.</span><br><span class="line">nchannels    = &lt;Wave_read&gt;.getnchannels()       # Number of samples per frame.</span><br><span class="line">sampwidth    = &lt;Wave_read&gt;.getsampwidth()       # Sample size in bytes.</span><br><span class="line">nframes      = &lt;Wave_read&gt;.getnframes()         # Number of frames.</span><br><span class="line">&lt;params&gt;     = &lt;Wave_read&gt;.getparams()          # Immutable collection of above.</span><br><span class="line">&lt;bytes&gt;      = &lt;Wave_read&gt;.readframes(nframes)  # Returns next &#x27;nframes&#x27; frames.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Wave_write&gt; = wave.open(&#x27;&lt;path&gt;&#x27;, &#x27;wb&#x27;)        # Truncates existing file.</span><br><span class="line">&lt;Wave_write&gt;.setframerate(&lt;int&gt;)                # 44100 for CD, 48000 for video.</span><br><span class="line">&lt;Wave_write&gt;.setnchannels(&lt;int&gt;)                # 1 for mono, 2 for stereo.</span><br><span class="line">&lt;Wave_write&gt;.setsampwidth(&lt;int&gt;)                # 2 for CD quality sound.</span><br><span class="line">&lt;Wave_write&gt;.setparams(&lt;params&gt;)                # Sets all parameters.</span><br><span class="line">&lt;Wave_write&gt;.writeframes(&lt;bytes&gt;)               # Appends frames to the file.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Bytes object contains a sequence of frames, each consisting
of one or more samples.</strong></li>
<li><strong>In a stereo signal, the first sample of a frame belongs to
the left channel.</strong></li>
<li><strong>Each sample consists of one or more bytes that, when
converted to an integer, indicate the displacement of a speaker membrane
at a given moment.</strong></li>
<li><strong>If sample width is one byte, then the integer should be
encoded unsigned.</strong></li>
<li><strong>For all other sizes, the integer should be encoded signed
with little-endian byte order.</strong></li>
</ul>
<h3 id="sample-values"><a href="#sample-values"></a>Sample Values</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">| sampwidth |    min    | zero |    max    |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line">|     1     |         0 |  128 |       255 |</span><br><span class="line">|     2     |    -32768 |    0 |     32767 |</span><br><span class="line">|     3     |  -8388608 |    0 |   8388607 |</span><br><span class="line">+-----------+-----------+------+-----------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="read-float-samples-from-wav-file"><a
href="#read-float-samples-from-wav-file"></a>Read Float Samples from WAV
File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def read_wav_file(filename):</span><br><span class="line">    def get_int(bytes_obj):</span><br><span class="line">        an_int = int.from_bytes(bytes_obj, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">        return an_int - 128 * (sampwidth == 1)</span><br><span class="line">    with wave.open(filename, &#x27;rb&#x27;) as file:</span><br><span class="line">        sampwidth = file.getsampwidth()</span><br><span class="line">        frames = file.readframes(-1)</span><br><span class="line">    bytes_samples = (frames[i : i+sampwidth] for i in range(0, len(frames), sampwidth))</span><br><span class="line">    return [get_int(b) / pow(2, sampwidth * 8 - 1) for b in bytes_samples]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="write-float-samples-to-wav-file"><a
href="#write-float-samples-to-wav-file"></a>Write Float Samples to WAV
File</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def write_to_wav_file(filename, float_samples, nchannels=1, sampwidth=2, framerate=44100):</span><br><span class="line">    def get_bytes(a_float):</span><br><span class="line">        a_float = max(-1, min(1 - 2e-16, a_float))</span><br><span class="line">        a_float += sampwidth == 1</span><br><span class="line">        a_float *= pow(2, sampwidth * 8 - 1)</span><br><span class="line">        return int(a_float).to_bytes(sampwidth, &#x27;little&#x27;, signed=(sampwidth != 1))</span><br><span class="line">    with wave.open(filename, &#x27;wb&#x27;) as file:</span><br><span class="line">        file.setnchannels(nchannels)</span><br><span class="line">        file.setsampwidth(sampwidth)</span><br><span class="line">        file.setframerate(framerate)</span><br><span class="line">        file.writeframes(b&#x27;&#x27;.join(get_bytes(f) for f in float_samples))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="examples-1"><a href="#examples-1"></a>Examples</h3>
<h4 id="saves-a-440-hz-sine-wave-to-a-mono-wav-file"><a
href="#saves-a-440-hz-sine-wave-to-a-mono-wav-file"></a>Saves a 440 Hz
sine wave to a mono WAV file:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from math import pi, sin</span><br><span class="line">samples_f = (sin(i * 2 * pi * 440 / 44100) for i in range(100000))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="adds-noise-to-a-mono-wav-file"><a
href="#adds-noise-to-a-mono-wav-file"></a>Adds noise to a mono WAV
file:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from random import random</span><br><span class="line">add_noise = lambda value: value + (random() - 0.5) * 0.03</span><br><span class="line">samples_f = (add_noise(f) for f in read_wav_file(&#x27;test.wav&#x27;))</span><br><span class="line">write_to_wav_file(&#x27;test.wav&#x27;, samples_f)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="plays-a-wav-file"><a href="#plays-a-wav-file"></a>Plays a WAV
file:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">from simpleaudio import play_buffer</span><br><span class="line">with wave.open(&#x27;test.wav&#x27;, &#x27;rb&#x27;) as file:</span><br><span class="line">    p = file.getparams()</span><br><span class="line">    frames = file.readframes(-1)</span><br><span class="line">    play_buffer(frames, p.nchannels, p.sampwidth, p.framerate)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="text-to-speech"><a href="#text-to-speech"></a>Text to
Speech</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pyttsx3</span><br><span class="line">import pyttsx3</span><br><span class="line">engine = pyttsx3.init()</span><br><span class="line">engine.say(&#x27;Sally sells seashells by the seashore.&#x27;)</span><br><span class="line">engine.runAndWait()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="synthesizer"><a href="#synthesizer"></a>Synthesizer</h2>
<h4 id="plays-popcorn-by-gershon-kingsley"><a
href="#plays-popcorn-by-gershon-kingsley"></a>Plays Popcorn by Gershon
Kingsley:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install simpleaudio</span><br><span class="line">import itertools as it, math, struct, simpleaudio</span><br><span class="line"></span><br><span class="line">F  = 44100</span><br><span class="line">P1 = &#x27;71♩,69♪,,71♩,66♪,,62♩,66♪,,59♩,,&#x27;</span><br><span class="line">P2 = &#x27;71♩,73♪,,74♩,73♪,,74♪,,71♪,,73♩,71♪,,73♪,,69♪,,71♩,69♪,,71♪,,67♪,,71♩,,&#x27;</span><br><span class="line">get_pause   = lambda seconds: it.repeat(0, int(seconds * F))</span><br><span class="line">sin_f       = lambda i, hz: math.sin(i * 2 * math.pi * hz / F)</span><br><span class="line">get_wave    = lambda hz, seconds: (sin_f(i, hz) for i in range(int(seconds * F)))</span><br><span class="line">get_hz      = lambda key: 8.176 * 2 ** (int(key) / 12)</span><br><span class="line">parse_note  = lambda note: (get_hz(note[:2]), 1/4 if &#x27;♩&#x27; in note else 1/8)</span><br><span class="line">get_samples = lambda note: get_wave(*parse_note(note)) if note else get_pause(1/8)</span><br><span class="line">samples_f   = it.chain.from_iterable(get_samples(n) for n in f&#x27;&#123;P1&#125;,&#123;P1&#125;,&#123;P2&#125;&#x27;.split(&#x27;,&#x27;))</span><br><span class="line">samples_b   = b&#x27;&#x27;.join(struct.pack(&#x27;&lt;h&#x27;, int(f * 30000)) for f in samples_f)</span><br><span class="line">simpleaudio.play_buffer(samples_b, 1, 2, F)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pygame"><a href="#pygame"></a>Pygame</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pygame</span><br><span class="line">import pygame as pg</span><br><span class="line"></span><br><span class="line">pg.init()</span><br><span class="line">screen = pg.display.set_mode((500, 500))</span><br><span class="line">rect = pg.Rect(240, 240, 20, 20)</span><br><span class="line">while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">    deltas = &#123;pg.K_UP: (0, -1), pg.K_RIGHT: (1, 0), pg.K_DOWN: (0, 1), pg.K_LEFT: (-1, 0)&#125;</span><br><span class="line">    for ch, is_pressed in enumerate(pg.key.get_pressed()):</span><br><span class="line">        rect = rect.move(deltas[ch]) if ch in deltas and is_pressed else rect</span><br><span class="line">    screen.fill((0, 0, 0))</span><br><span class="line">    pg.draw.rect(screen, (255, 255, 255), rect)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="rectangle"><a href="#rectangle"></a>Rectangle</h3>
<p><strong>Object for storing rectangular coordinates.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Rect&gt; = pg.Rect(x, y, width, height)           # Floats get truncated into ints.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.x/y/centerx/centery/…           # Top, right, bottom, left. Allows assignments.</span><br><span class="line">&lt;tup.&gt; = &lt;Rect&gt;.topleft/center/…                # Topright, bottomright, bottomleft. Same.</span><br><span class="line">&lt;Rect&gt; = &lt;Rect&gt;.move((x, y))                    # Use move_ip() to move in-place.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;bool&gt; = &lt;Rect&gt;.collidepoint((x, y))            # Checks if rectangle contains a point.</span><br><span class="line">&lt;bool&gt; = &lt;Rect&gt;.colliderect(&lt;Rect&gt;)             # Checks if two rectangles overlap.</span><br><span class="line">&lt;int&gt;  = &lt;Rect&gt;.collidelist(&lt;list_of_Rect&gt;)     # Returns index of first colliding Rect or -1.</span><br><span class="line">&lt;list&gt; = &lt;Rect&gt;.collidelistall(&lt;list_of_Rect&gt;)  # Returns indexes of all colliding rectangles.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="surface"><a href="#surface"></a>Surface</h3>
<p><strong>Object for representing images.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt; = pg.display.set_mode((width, height))   # Returns a display surface.</span><br><span class="line">&lt;Surf&gt; = pg.Surface((width, height))            # New RGB surface. RGBA if `flags=pg.SRCALPHA`.</span><br><span class="line">&lt;Surf&gt; = pg.image.load(&#x27;&lt;path&gt;&#x27;)                # Loads the image. Format depends on source.</span><br><span class="line">&lt;Surf&gt; = &lt;Surf&gt;.subsurface(&lt;Rect&gt;)              # Returns a subsurface.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Surf&gt;.fill(color)                              # Tuple, Color(&#x27;#rrggbb[aa]&#x27;) or Color(&lt;name&gt;).</span><br><span class="line">&lt;Surf&gt;.set_at((x, y), color)                    # Updates pixel.</span><br><span class="line">&lt;Surf&gt;.blit(&lt;Surf&gt;, (x, y))                     # Draws passed surface to the surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.transform import scale, ...</span><br><span class="line">&lt;Surf&gt; = scale(&lt;Surf&gt;, (width, height))         # Returns scaled surface.</span><br><span class="line">&lt;Surf&gt; = rotate(&lt;Surf&gt;, anticlock_degrees)      # Returns rotated and scaled surface.</span><br><span class="line">&lt;Surf&gt; = flip(&lt;Surf&gt;, x_bool, y_bool)           # Returns flipped surface.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from pygame.draw import line, ...</span><br><span class="line">line(&lt;Surf&gt;, color, (x1, y1), (x2, y2), width)  # Draws a line to the surface.</span><br><span class="line">arc(&lt;Surf&gt;, color, &lt;Rect&gt;, from_rad, to_rad)    # Also: ellipse(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)</span><br><span class="line">rect(&lt;Surf&gt;, color, &lt;Rect&gt;, width=0)            # Also: polygon(&lt;Surf&gt;, color, points, width=0)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="font"><a href="#font"></a>Font</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Font&gt; = pg.font.SysFont(&#x27;&lt;name&gt;&#x27;, size)        # Loads the system font or default if missing.</span><br><span class="line">&lt;Font&gt; = pg.font.Font(&#x27;&lt;path&gt;&#x27;, size)           # Loads the TTF file. Pass None for default.</span><br><span class="line">&lt;Surf&gt; = &lt;Font&gt;.render(text, antialias, color)  # Background color can be specified at the end.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="sound"><a href="#sound"></a>Sound</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sound&gt; = pg.mixer.Sound(&#x27;&lt;path&gt;&#x27;)              # Loads the WAV file.</span><br><span class="line">&lt;Sound&gt;.play()                                  # Starts playing the sound.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="basic-mario-brothers-example"><a
href="#basic-mario-brothers-example"></a>Basic Mario Brothers
Example</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import collections, dataclasses, enum, io, itertools as it, pygame as pg, urllib.request</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">P = collections.namedtuple(&#x27;P&#x27;, &#x27;x y&#x27;)          # Position</span><br><span class="line">D = enum.Enum(&#x27;D&#x27;, &#x27;n e s w&#x27;)                   # Direction</span><br><span class="line">W, H, MAX_S = 50, 50, P(5, 10)                  # Width, Height, Max speed</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    def get_screen():</span><br><span class="line">        pg.init()</span><br><span class="line">        return pg.display.set_mode((W*16, H*16))</span><br><span class="line">    def get_images():</span><br><span class="line">        url = &#x27;https://gto76.github.io/python-cheatsheet/web/mario_bros.png&#x27;</span><br><span class="line">        img = pg.image.load(io.BytesIO(urllib.request.urlopen(url).read()))</span><br><span class="line">        return [img.subsurface(get_rect(x, 0)) for x in range(img.get_width() // 16)]</span><br><span class="line">    def get_mario():</span><br><span class="line">        Mario = dataclasses.make_dataclass(&#x27;Mario&#x27;, &#x27;rect spd facing_left frame_cycle&#x27;.split())</span><br><span class="line">        return Mario(get_rect(1, 1), P(0, 0), False, it.cycle(range(3)))</span><br><span class="line">    def get_tiles():</span><br><span class="line">        border = [(x, y) for x in range(W) for y in range(H) if x in [0, W-1] or y in [0, H-1]]</span><br><span class="line">        platforms = [(randint(1, W-2), randint(2, H-2)) for _ in range(W*H // 10)]</span><br><span class="line">        return [get_rect(x, y) for x, y in border + platforms]</span><br><span class="line">    def get_rect(x, y):</span><br><span class="line">        return pg.Rect(x*16, y*16, 16, 16)</span><br><span class="line">    run(get_screen(), get_images(), get_mario(), get_tiles())</span><br><span class="line"></span><br><span class="line">def run(screen, images, mario, tiles):</span><br><span class="line">    clock = pg.time.Clock()</span><br><span class="line">    while all(event.type != pg.QUIT for event in pg.event.get()):</span><br><span class="line">        keys = &#123;pg.K_UP: D.n, pg.K_RIGHT: D.e, pg.K_DOWN: D.s, pg.K_LEFT: D.w&#125;</span><br><span class="line">        pressed = &#123;keys.get(ch) for ch, is_prsd in enumerate(pg.key.get_pressed()) if is_prsd&#125;</span><br><span class="line">        update_speed(mario, tiles, pressed)</span><br><span class="line">        update_position(mario, tiles)</span><br><span class="line">        draw(screen, images, mario, tiles, pressed)</span><br><span class="line">        clock.tick(28)</span><br><span class="line"></span><br><span class="line">def update_speed(mario, tiles, pressed):</span><br><span class="line">    x, y = mario.spd</span><br><span class="line">    x += 2 * ((D.e in pressed) - (D.w in pressed))</span><br><span class="line">    x -= (x &gt; 0) - (x &lt; 0)</span><br><span class="line">    y += 1 if D.s not in get_boundaries(mario.rect, tiles) else (D.n in pressed) * -10</span><br><span class="line">    mario.spd = P(x=max(-MAX_S.x, min(MAX_S.x, x)), y=max(-MAX_S.y, min(MAX_S.y, y)))</span><br><span class="line"></span><br><span class="line">def update_position(mario, tiles):</span><br><span class="line">    x, y = mario.rect.topleft</span><br><span class="line">    n_steps = max(abs(s) for s in mario.spd)</span><br><span class="line">    for _ in range(n_steps):</span><br><span class="line">        mario.spd = stop_on_collision(mario.spd, get_boundaries(mario.rect, tiles))</span><br><span class="line">        x, y = x + mario.spd.x / n_steps, y + mario.spd.y / n_steps</span><br><span class="line">        mario.rect.topleft = x, y</span><br><span class="line"></span><br><span class="line">def get_boundaries(rect, tiles):</span><br><span class="line">    deltas = &#123;D.n: P(0, -1), D.e: P(1, 0), D.s: P(0, 1), D.w: P(-1, 0)&#125;</span><br><span class="line">    return &#123;d for d, delta in deltas.items() if rect.move(delta).collidelist(tiles) != -1&#125;</span><br><span class="line"></span><br><span class="line">def stop_on_collision(spd, bounds):</span><br><span class="line">    return P(x=0 if (D.w in bounds and spd.x &lt; 0) or (D.e in bounds and spd.x &gt; 0) else spd.x,</span><br><span class="line">             y=0 if (D.n in bounds and spd.y &lt; 0) or (D.s in bounds and spd.y &gt; 0) else spd.y)</span><br><span class="line"></span><br><span class="line">def draw(screen, images, mario, tiles, pressed):</span><br><span class="line">    def get_marios_image_index():</span><br><span class="line">        if D.s not in get_boundaries(mario.rect, tiles):</span><br><span class="line">            return 4</span><br><span class="line">        return next(mario.frame_cycle) if &#123;D.w, D.e&#125; &amp; pressed else 6</span><br><span class="line">    screen.fill((85, 168, 255))</span><br><span class="line">    mario.facing_left = (D.w in pressed) if &#123;D.w, D.e&#125; &amp; pressed else mario.facing_left</span><br><span class="line">    screen.blit(images[get_marios_image_index() + mario.facing_left * 9], mario.rect)</span><br><span class="line">    for t in tiles:</span><br><span class="line">        screen.blit(images[18 if t.x in [0, (W-1)*16] or t.y in [0, (H-1)*16] else 19], t)</span><br><span class="line">    pg.display.flip()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pandas"><a href="#pandas"></a>Pandas</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install pandas matplotlib</span><br><span class="line">import pandas as pd</span><br><span class="line">from pandas import Series, DataFrame</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="series"><a href="#series"></a>Series</h3>
<p><strong>Ordered dictionary with a name.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;], name=&#x27;a&#x27;)</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line">Name: a, dtype: int64</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = Series(&lt;list&gt;)                          # Assigns RangeIndex starting at 0.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict&gt;)                          # Takes dictionary&#x27;s keys for index.</span><br><span class="line">&lt;Sr&gt; = Series(&lt;dict/Series&gt;, index=&lt;list&gt;)     # Only keeps items with keys specified in index.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.loc[key]                           # Or: &lt;Sr&gt;.iloc[index]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[keys]                          # Or: &lt;Sr&gt;.iloc[indexes]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.loc[from_key : to_key_inclusive]   # Or: &lt;Sr&gt;.iloc[from_i : to_i_exclusive]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;[key/index]                         # Or: &lt;Sr&gt;.key</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[keys/indexes]                      # Or: &lt;Sr&gt;[&lt;key_range/range&gt;]</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;[bools]                             # Or: &lt;Sr&gt;.i/loc[bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt; &gt;&lt;== &lt;el/Sr&gt;                       # Returns a Series of bools.</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt; +-*/ &lt;el/Sr&gt;                       # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.append(&lt;Sr&gt;)                       # Or: pd.concat(&lt;coll_of_Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.combine_first(&lt;Sr&gt;)                # Adds items that are not yet present.</span><br><span class="line">&lt;Sr&gt;.update(&lt;Sr&gt;)                              # Updates items that are already present.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt;.plot.line/area/bar/pie/hist()             # Generates a Matplotlib plot.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="series-aggregate-transform-map"><a
href="#series--aggregate-transform-map"></a>Series — Aggregate,
Transform, Map:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt; = &lt;Sr&gt;.sum/max/mean/idxmax/all()          # Or: &lt;Sr&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;Sr&gt;.agg/transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;Sr&gt; = &lt;Sr&gt;.fillna(&lt;el&gt;)                       # Or: &lt;Sr&gt;.agg/transform/map(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; sr = Series([1, 2], index=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">x    1</span><br><span class="line">y    2</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;s&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |      3      |    sum  3   |     s  3      |</span><br><span class="line">| sr.agg(…)       |             |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;r&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| sr.apply(…)     |             |      rank   |               |</span><br><span class="line">| sr.agg(…)       |     x  1    |   x     1   |    r  x  1    |</span><br><span class="line">| sr.transform(…) |     y  2    |   y     2   |       y  2    |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Last result has a hierarchical index. Use
<code>'&lt;Sr&gt;[key_1, key_2]'</code> to get its values.</strong></li>
</ul>
<h3 id="dataframe"><a href="#dataframe"></a>DataFrame</h3>
<p><strong>Table with labeled rows and columns.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = DataFrame(&lt;list_of_rows&gt;)            # Rows can be either lists, dicts or series.</span><br><span class="line">&lt;DF&gt;    = DataFrame(&lt;dict_of_columns&gt;)         # Columns can be either lists, dicts or series.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;el&gt;    = &lt;DF&gt;.loc[row_key, column_key]        # Or: &lt;DF&gt;.iloc[row_index, column_index]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[row_key/s]                  # Or: &lt;DF&gt;.iloc[row_index/es]</span><br><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;.loc[:, column_key/s]            # Or: &lt;DF&gt;.iloc[:, column_index/es]</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.loc[row_bools, column_bools]    # Or: &lt;DF&gt;.iloc[row_bools, column_bools]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr/DF&gt; = &lt;DF&gt;[column_key/s]                   # Or: &lt;DF&gt;.column_key</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[row_bools]                      # Keeps rows as specified by bools.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;[&lt;DF_of_bools&gt;]                  # Assigns NaN to False values.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt; &gt;&lt;== &lt;el/Sr/DF&gt;                 # Returns DF of bools. Sr is treated as a row.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt; +-*/ &lt;el/Sr/DF&gt;                 # Items with non-matching keys get value NaN.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;    = &lt;DF&gt;.set_index(column_key)           # Replaces row keys with values from a column.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.reset_index()                   # Moves row keys to a column named index.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_index(ascending=True)      # Sorts rows by row keys.</span><br><span class="line">&lt;DF&gt;    = &lt;DF&gt;.sort_values(column_key/s)       # Sorts rows by the passed column/s.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="dataframe-merge-join-concat"><a
href="#dataframe--merge-join-concat"></a>DataFrame — Merge, Join,
Concat:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; l = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line">&gt;&gt;&gt; r = DataFrame([[4, 5], [6, 7]], index=[&#x27;b&#x27;, &#x27;c&#x27;], columns=[&#x27;y&#x27;, &#x27;z&#x27;])</span><br><span class="line">   y  z</span><br><span class="line">b  4  5</span><br><span class="line">c  6  7</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">|                        |    &#x27;outer&#x27;    |   &#x27;inner&#x27;  |   &#x27;left&#x27;   |       Description        |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.merge(r, on=&#x27;y&#x27;,     |    x   y   z  | x   y   z  | x   y   z  | Joins/merges on column.  |</span><br><span class="line">|            how=…)      | 0  1   2   .  | 3   4   5  | 1   2   .  | Also accepts left_on and |</span><br><span class="line">|                        | 1  3   4   5  |            | 3   4   5  | right_on parameters.     |</span><br><span class="line">|                        | 2  .   6   7  |            |            | Uses &#x27;inner&#x27; by default. |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.join(r, lsuffix=&#x27;l&#x27;, |    x yl yr  z |            | x yl yr  z | Joins/merges on row keys.|</span><br><span class="line">|           rsuffix=&#x27;r&#x27;, | a  1  2  .  . | x yl yr  z | 1  2  .  . | Uses &#x27;left&#x27; by default.  |</span><br><span class="line">|           how=…)       | b  3  4  4  5 | 3  4  4  5 | 3  4  4  5 | If r is a Series, it is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x   y   z  |     y      |            | Adds rows at the bottom. |</span><br><span class="line">|           axis=0,      | a  1   2   .  |     2      |            | Uses &#x27;outer&#x27; by default. |</span><br><span class="line">|           join=…)      | b  3   4   .  |     4      |            | A Series is treated as a |</span><br><span class="line">|                        | b  .   4   5  |     4      |            | column. Use l.append(sr) |</span><br><span class="line">|                        | c  .   6   7  |     6      |            | to add a row instead.    |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| pd.concat([l, r],      |    x  y  y  z |            |            | Adds columns at the      |</span><br><span class="line">|           axis=1,      | a  1  2  .  . | x  y  y  z |            | right end. Uses &#x27;outer&#x27;  |</span><br><span class="line">|           join=…)      | b  3  4  4  5 | 3  4  4  5 |            | by default. A Series is  |</span><br><span class="line">|                        | c  .  .  6  7 |            |            | treated as a column.     |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line">| l.combine_first(r)     |    x   y   z  |            |            | Adds missing rows and    |</span><br><span class="line">|                        | a  1   2   .  |            |            | columns. Also updates    |</span><br><span class="line">|                        | b  3   4   5  |            |            | items that contain NaN.  |</span><br><span class="line">|                        | c  .   6   7  |            |            | R must be a DataFrame.   |</span><br><span class="line">+------------------------+---------------+------------+------------+--------------------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="dataframe-aggregate-transform-map"><a
href="#dataframe--aggregate-transform-map"></a>DataFrame — Aggregate,
Transform, Map:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Sr&gt; = &lt;DF&gt;.sum/max/mean/idxmax/all()          # Or: &lt;DF&gt;.apply/agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.rank/diff/cumsum/ffill/interpl()   # Or: &lt;DF&gt;.apply/agg/transfrm(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;DF&gt;.fillna(&lt;el&gt;)                       # Or: &lt;DF&gt;.applymap(lambda &lt;el&gt;: &lt;el&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>All operations operate on columns by default. Pass
<code>'axis=1'</code> to process the rows instead.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2], [3, 4]], index=[&#x27;a&#x27;, &#x27;b&#x27;], columns=[&#x27;x&#x27;, &#x27;y&#x27;])</span><br><span class="line">   x  y</span><br><span class="line">a  1  2</span><br><span class="line">b  3  4</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |   [&#x27;sum&#x27;]   | &#123;&#x27;x&#x27;: &#x27;sum&#x27;&#125;  |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |             |       x  y  |               |</span><br><span class="line">| df.agg(…)       |     x  4    |  sum  4  6  |     x  4      |</span><br><span class="line">|                 |     y  6    |             |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line">| df.apply(…)     |      x  y   |      x    y |        x      |</span><br><span class="line">| df.agg(…)       |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">| df.transform(…) |   b  2  2   | a    1    1 |     b  2      |</span><br><span class="line">|                 |             | b    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>Use <code>'&lt;DF&gt;[col_key_1, col_key_2][row_key]'</code>
to get the fifth result's values.</strong></li>
</ul>
<h4 id="dataframe-plot-encode-decode"><a
href="#dataframe--plot-encode-decode"></a>DataFrame — Plot, Encode,
Decode:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt;.plot.line/bar/hist/scatter/box()          # Also: `x=column_key, y=column_key/s`.</span><br><span class="line">plt.show()                                     # Displays the plot. Also plt.savefig(&lt;path&gt;).</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = pd.read_json/html(&#x27;&lt;str/path/url&gt;&#x27;)     # Run `$ pip3 install beautifulsoup4 lxml`.</span><br><span class="line">&lt;DF&gt; = pd.read_csv/pickle/excel(&#x27;&lt;path/url&gt;&#x27;)  # Use `sheet_name=None` to get all Excel sheets.</span><br><span class="line">&lt;DF&gt; = pd.read_sql(&#x27;&lt;table/query&gt;&#x27;, &lt;conn.&gt;)   # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line">&lt;DF&gt; = pd.read_clipboard()                     # Reads a copied table from the clipboard.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dict&gt; = &lt;DF&gt;.to_dict([&#x27;d/l/s/…&#x27;])             # Returns columns as dicts, lists or series.</span><br><span class="line">&lt;str&gt;  = &lt;DF&gt;.to_json/html/csv([&lt;path&gt;])       # Also to_markdown/latex([&lt;path&gt;]).</span><br><span class="line">&lt;DF&gt;.to_pickle/excel(&lt;path&gt;)                   # Run `$ pip3 install openpyxl` for xlsx files.</span><br><span class="line">&lt;DF&gt;.to_sql(&#x27;&lt;table_name&gt;&#x27;, &lt;connection&gt;)      # Accepts SQLite3 or SQLAlchemy connection.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="groupby"><a href="#groupby"></a>GroupBy</h3>
<p><strong>Object that groups together rows of a dataframe based on the
value of the passed column.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; df = DataFrame([[1, 2, 3], [4, 5, 6], [7, 8, 6]], index=list(&#x27;abc&#x27;), columns=list(&#x27;xyz&#x27;))</span><br><span class="line">&gt;&gt;&gt; df.groupby(&#x27;z&#x27;).get_group(6)</span><br><span class="line">   x  y</span><br><span class="line">b  4  5</span><br><span class="line">c  7  8</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;GB&gt; = &lt;DF&gt;.groupby(column_key/s)              # Splits DF into groups based on passed column.</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.apply(&lt;func&gt;)                      # Maps each group. Func can return DF, Sr or el.</span><br><span class="line">&lt;GB&gt; = &lt;GB&gt;[column_key]                        # Single column GB. All operations return a Sr.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="groupby-aggregate-transform-map"><a
href="#groupby--aggregate-transform-map"></a>GroupBy — Aggregate,
Transform, Map:</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;DF&gt; = &lt;GB&gt;.sum/max/mean/idxmax/all()          # Or: &lt;GB&gt;.agg(lambda &lt;Sr&gt;: &lt;el&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.rank/diff/cumsum/ffill()           # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line">&lt;DF&gt; = &lt;GB&gt;.fillna(&lt;el&gt;)                       # Or: &lt;GB&gt;.transform(lambda &lt;Sr&gt;: &lt;Sr&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; gb = df.groupby(&#x27;z&#x27;)</span><br><span class="line">      x  y  z</span><br><span class="line">3: a  1  2  3</span><br><span class="line">6: b  4  5  6</span><br><span class="line">   c  7  8  6</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">|                 |    &#x27;sum&#x27;    |    &#x27;rank&#x27;   |   [&#x27;rank&#x27;]  | &#123;&#x27;x&#x27;: &#x27;rank&#x27;&#125; |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.agg(…)       |      x   y  |      x  y   |      x    y |        x      |</span><br><span class="line">|                 |  z          |   a  1  1   |   rank rank |     a  1      |</span><br><span class="line">|                 |  3   1   2  |   b  1  1   | a    1    1 |     b  1      |</span><br><span class="line">|                 |  6  11  13  |   c  2  2   | b    1    1 |     c  2      |</span><br><span class="line">|                 |             |             | c    2    2 |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line">| gb.transform(…) |      x   y  |      x  y   |             |               |</span><br><span class="line">|                 |  a   1   2  |   a  1  1   |             |               |</span><br><span class="line">|                 |  b  11  13  |   b  1  1   |             |               |</span><br><span class="line">|                 |  c  11  13  |   c  2  2   |             |               |</span><br><span class="line">+-----------------+-------------+-------------+-------------+---------------+</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="rolling"><a href="#rolling"></a>Rolling</h3>
<p><strong>Object for rolling window calculations.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;Sr/DF/GB&gt;.rolling(win_size)   # Also: `min_periods=None, center=False`.</span><br><span class="line">&lt;RSr/RDF/RGB&gt; = &lt;RDF/RGB&gt;[column_key/s]        # Or: &lt;RDF/RGB&gt;.column_key</span><br><span class="line">&lt;Sr/DF&gt;       = &lt;R&gt;.mean/sum/max()             # Or: &lt;R&gt;.apply/agg(&lt;agg_func/str&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="plotly"><a href="#plotly"></a>Plotly</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install plotly kaleido</span><br><span class="line">from plotly.express import line</span><br><span class="line">&lt;Figure&gt; = line(&lt;DF&gt;, x=&lt;col_name&gt;, y=&lt;col_name&gt;)        # Or: line(x=&lt;list&gt;, y=&lt;list&gt;)</span><br><span class="line">&lt;Figure&gt;.update_layout(margin=dict(t=0, r=0, b=0, l=0))  # Or: paper_bgcolor=&#x27;rgba(0, 0, 0, 0)&#x27;</span><br><span class="line">&lt;Figure&gt;.write_html/json/image(&#x27;&lt;path&gt;&#x27;)                 # Also: &lt;Figure&gt;.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="covid-deaths-by-continent"><a
href="#covid-deaths-by-continent"></a>Covid deaths by continent:</h4>
<p><a
href="/gto76/python-cheatsheet/blob/main/web/covid_deaths.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_deaths.png" /></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">covid = pd.read_csv(&#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;,</span><br><span class="line">                    usecols=[&#x27;iso_code&#x27;, &#x27;date&#x27;, &#x27;total_deaths&#x27;, &#x27;population&#x27;])</span><br><span class="line">continents = pd.read_csv(&#x27;https://gist.githubusercontent.com/stevewithington/20a69c0b6d2ff&#x27;</span><br><span class="line">                         &#x27;846ea5d35e5fc47f26c/raw/country-and-continent-codes-list-csv.csv&#x27;,</span><br><span class="line">                         usecols=[&#x27;Three_Letter_Country_Code&#x27;, &#x27;Continent_Name&#x27;])</span><br><span class="line">df = pd.merge(covid, continents, left_on=&#x27;iso_code&#x27;, right_on=&#x27;Three_Letter_Country_Code&#x27;)</span><br><span class="line">df = df.groupby([&#x27;Continent_Name&#x27;, &#x27;date&#x27;]).sum().reset_index()</span><br><span class="line">df[&#x27;Total Deaths per Million&#x27;] = df.total_deaths * 1e6 / df.population</span><br><span class="line">df = df[df.date &gt; &#x27;2020-03-14&#x27;]</span><br><span class="line">df = df.rename(&#123;&#x27;date&#x27;: &#x27;Date&#x27;, &#x27;Continent_Name&#x27;: &#x27;Continent&#x27;&#125;, axis=&#x27;columns&#x27;)</span><br><span class="line">line(df, x=&#x27;Date&#x27;, y=&#x27;Total Deaths per Million&#x27;, color=&#x27;Continent&#x27;).show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"><a
href="#confirmed-covid-cases-dow-jones-gold-and-bitcoin-price"></a>Confirmed
covid cases, Dow Jones, Gold, and Bitcoin price:</h4>
<p><a href="/gto76/python-cheatsheet/blob/main/web/covid_cases.png"><img
src="https://github.com/gto76/python-cheatsheet/raw/main/web/covid_cases.png" /></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import plotly.graph_objects as go</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    display_data(wrangle_data(*scrape_data()))</span><br><span class="line"></span><br><span class="line">def scrape_data():</span><br><span class="line">    def scrape_covid():</span><br><span class="line">        url = &#x27;https://covid.ourworldindata.org/data/owid-covid-data.csv&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;location&#x27;, &#x27;date&#x27;, &#x27;total_cases&#x27;])</span><br><span class="line">        return df[df.location == &#x27;World&#x27;].set_index(&#x27;date&#x27;).total_cases</span><br><span class="line">    def scrape_yahoo(slug):</span><br><span class="line">        url = f&#x27;https://query1.finance.yahoo.com/v7/finance/download/&#123;slug&#125;&#x27; + \</span><br><span class="line">              &#x27;?period1=1579651200&amp;period2=9999999999&amp;interval=1d&amp;events=history&#x27;</span><br><span class="line">        df = pd.read_csv(url, usecols=[&#x27;Date&#x27;, &#x27;Close&#x27;])</span><br><span class="line">        return df.set_index(&#x27;Date&#x27;).Close</span><br><span class="line">    out = scrape_covid(), scrape_yahoo(&#x27;BTC-USD&#x27;), scrape_yahoo(&#x27;GC=F&#x27;), scrape_yahoo(&#x27;^DJI&#x27;)</span><br><span class="line">    return map(pd.Series.rename, out, [&#x27;Total Cases&#x27;, &#x27;Bitcoin&#x27;, &#x27;Gold&#x27;, &#x27;Dow Jones&#x27;])</span><br><span class="line"></span><br><span class="line">def wrangle_data(covid, bitcoin, gold, dow):</span><br><span class="line">    df = pd.concat([bitcoin, gold, dow], axis=1)  # Joins columns on dates.</span><br><span class="line">    df = df.sort_index().interpolate()            # Sorts by date and interpolates NaN-s.</span><br><span class="line">    df = df.loc[&#x27;2020-02-23&#x27;:]                    # Discards rows before &#x27;2020-02-23&#x27;.</span><br><span class="line">    df = (df / df.iloc[0]) * 100                  # Calculates percentages relative to day 1.</span><br><span class="line">    df = df.join(covid)                           # Adds column with covid cases.</span><br><span class="line">    return df.sort_values(df.index[-1], axis=1)   # Sorts columns by last day&#x27;s value.</span><br><span class="line"></span><br><span class="line">def display_data(df):</span><br><span class="line">    figure = go.Figure()</span><br><span class="line">    for col_name in reversed(df.columns):</span><br><span class="line">        yaxis = &#x27;y1&#x27; if col_name == &#x27;Total Cases&#x27; else &#x27;y2&#x27;</span><br><span class="line">        trace = go.Scatter(x=df.index, y=df[col_name], name=col_name, yaxis=yaxis)</span><br><span class="line">        figure.add_trace(trace)</span><br><span class="line">    figure.update_layout(</span><br><span class="line">        yaxis1=dict(title=&#x27;Total Cases&#x27;, rangemode=&#x27;tozero&#x27;),</span><br><span class="line">        yaxis2=dict(title=&#x27;%&#x27;, rangemode=&#x27;tozero&#x27;, overlaying=&#x27;y&#x27;, side=&#x27;right&#x27;),</span><br><span class="line">        legend=dict(x=1.1),</span><br><span class="line">        height=450</span><br><span class="line">    ).show()</span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="pysimplegui"><a href="#pysimplegui"></a>PySimpleGUI</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install PySimpleGUI</span><br><span class="line">import PySimpleGUI as sg</span><br><span class="line">layout = [[sg.Text(&quot;What&#x27;s your name?&quot;)], [sg.Input()], [sg.Button(&#x27;Ok&#x27;)]]</span><br><span class="line">window = sg.Window(&#x27;Window Title&#x27;, layout)</span><br><span class="line">event, values = window.read()</span><br><span class="line">print(f&#x27;Hello &#123;values[0]&#125;!&#x27; if event == &#x27;Ok&#x27; else &#x27;&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="appendix"><a href="#appendix"></a>Appendix</h2>
<h3 id="cython"><a href="#cython"></a>Cython</h3>
<p><strong>Library that compiles Python code into C.</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># $ pip3 install cython</span><br><span class="line">import pyximport; pyximport.install()</span><br><span class="line">import &lt;cython_script&gt;</span><br><span class="line">&lt;cython_script&gt;.main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="definitions"><a href="#definitions"></a>Definitions:</h4>
<ul>
<li><strong>All <code>'cdef'</code> definitions are optional, but they
contribute to the speed-up.</strong></li>
<li><strong>Script needs to be saved with a <code>'pyx'</code>
extension.</strong></li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cdef &lt;ctype&gt; &lt;var_name&gt; = &lt;el&gt;</span><br><span class="line">cdef &lt;ctype&gt;[n_elements] &lt;var_name&gt; = [&lt;el_1&gt;, &lt;el_2&gt;, ...]</span><br><span class="line">cdef &lt;ctype/void&gt; &lt;func_name&gt;(&lt;ctype&gt; &lt;arg_name&gt;): ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cdef class &lt;class_name&gt;:</span><br><span class="line">    cdef public &lt;ctype&gt; &lt;attr_name&gt;</span><br><span class="line">    def __init__(self, &lt;ctype&gt; &lt;arg_name&gt;):</span><br><span class="line">        self.&lt;attr_name&gt; = &lt;arg_name&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cdef enum &lt;enum_name&gt;: &lt;member_name_1&gt;, &lt;member_name_2&gt;, ...</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="pyinstaller"><a href="#pyinstaller"></a>PyInstaller</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ pip3 install pyinstaller</span><br><span class="line">$ pyinstaller script.py                        # Compiles into &#x27;./dist/script&#x27; directory.</span><br><span class="line">$ pyinstaller script.py --onefile              # Compiles into &#x27;./dist/script&#x27; console app.</span><br><span class="line">$ pyinstaller script.py --windowed             # Compiles into &#x27;./dist/script&#x27; windowed app.</span><br><span class="line">$ pyinstaller script.py --add-data &#x27;&lt;path&gt;:.&#x27;  # Adds file to the root of the executable.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>File paths need to be updated to
<code>'os.path.join(sys._MEIPASS, &lt;path&gt;)'</code>.</strong></li>
</ul>
<h3 id="basic-script-template"><a
href="#basic-script-template"></a>Basic Script Template</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line">#</span><br><span class="line"># Usage: .py</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">from sys import argv, exit</span><br><span class="line">from collections import defaultdict, namedtuple</span><br><span class="line">from dataclasses import make_dataclass</span><br><span class="line">from enum import Enum</span><br><span class="line">import functools as ft, itertools as it, operator as op, re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">###</span><br><span class="line">##  UTIL</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">def read_file(filename):</span><br><span class="line">    with open(filename, encoding=&#x27;utf-8&#x27;) as file:</span><br><span class="line">        return file.readlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="index"><a href="#index"></a>Index</h2>
<ul>
<li><strong>Only available in the <a
href="https://transactions.sendowl.com/products/78175486/4422834F/view">PDF</a>.</strong></li>
<li><strong>Ctrl+F / ⌘F is usually sufficient.</strong></li>
<li><strong>Searching <code>'#&lt;title&gt;'</code> on the <a
href="https://gto76.github.io/python-cheatsheet/">webpage</a> will limit
the search to the titles.</strong></li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.4.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>4.技能</category>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>srcard</tag>
      </tags>
  </entry>
</search>
